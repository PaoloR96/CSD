
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007618  08007618  00017618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007928  08007928  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007928  08007928  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000138  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010adc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002420  00000000  00000000  00030b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee89  00000000  00000000  00034aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011898  00000000  00000000  00053931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8b47  00000000  00000000  000651c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dd10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba8  00000000  00000000  0011dd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075fc 	.word	0x080075fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080075fc 	.word	0x080075fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <DWT_Delay_Init+0x58>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <DWT_Delay_Init+0x58>)
 8000b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b8a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <DWT_Delay_Init+0x58>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <DWT_Delay_Init+0x58>)
 8000b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b96:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000bb6:	bf00      	nop
     __ASM volatile ("NOP");
 8000bb8:	bf00      	nop
  __ASM volatile ("NOP");
 8000bba:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <DWT_Delay_Init+0x5c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e000      	b.n	8000bca <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000bc8:	2301      	movs	r3, #1
  }
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000edf0 	.word	0xe000edf0
 8000bd8:	e0001000 	.word	0xe0001000

08000bdc <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <delay+0x40>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000bea:	f002 fa9f 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <delay+0x44>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	0c9b      	lsrs	r3, r3, #18
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000c00:	bf00      	nop
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <delay+0x40>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3f8      	bcc.n	8000c02 <delay+0x26>
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e0001000 	.word	0xe0001000
 8000c20:	431bde83 	.word	0x431bde83

08000c24 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 fe9c 	bl	8001990 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 fe7e 	bl	8001990 <HAL_GPIO_Init>
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DHT_Start>:


void DHT_Start (void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000ca0:	f7ff ff6c 	bl	8000b7c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f7ff ffbb 	bl	8000c24 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 fffd 	bl	8001cb4 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000cba:	f244 6050 	movw	r0, #18000	; 0x4650
 8000cbe:	f7ff ff8d 	bl	8000bdc <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fff3 	bl	8001cb4 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000cce:	2014      	movs	r0, #20
 8000cd0:	f7ff ff84 	bl	8000bdc <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f7ff ffc1 	bl	8000c60 <Set_Pin_Input>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000cec:	2028      	movs	r0, #40	; 0x28
 8000cee:	f7ff ff75 	bl	8000bdc <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f000 ffc4 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <DHT_Check_Response+0x40>
	{
		delay (80);
 8000d02:	2050      	movs	r0, #80	; 0x50
 8000d04:	f7ff ff6a 	bl	8000bdc <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000d08:	2120      	movs	r1, #32
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 ffb9 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <DHT_Check_Response+0x3c>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	e001      	b.n	8000d22 <DHT_Check_Response+0x40>
		else Response = -1;
 8000d1e:	23ff      	movs	r3, #255	; 0xff
 8000d20:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000d22:	bf00      	nop
 8000d24:	2120      	movs	r1, #32
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f000 ffab 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f7      	bne.n	8000d24 <DHT_Check_Response+0x42>

	return Response;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	71bb      	strb	r3, [r7, #6]
 8000d48:	e03a      	b.n	8000dc0 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000d4a:	bf00      	nop
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 ff97 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f7      	beq.n	8000d4c <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000d5c:	2028      	movs	r0, #40	; 0x28
 8000d5e:	f7ff ff3d 	bl	8000bdc <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000d62:	2120      	movs	r1, #32
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f000 ff8c 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10e      	bne.n	8000d90 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	f1c3 0307 	rsb	r3, r3, #7
 8000d78:	2201      	movs	r2, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	e00b      	b.n	8000da8 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2201      	movs	r2, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000da8:	bf00      	nop
 8000daa:	2120      	movs	r1, #32
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 ff68 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f7      	bne.n	8000daa <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	71bb      	strb	r3, [r7, #6]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d9c1      	bls.n	8000d4a <DHT_Read+0xc>
	}
	return i;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000dd8:	f7ff ff60 	bl	8000c9c <DHT_Start>
	Presence = DHT_Check_Response ();
 8000ddc:	f7ff ff81 	bl	8000ce2 <DHT_Check_Response>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <DHT_GetData+0xa4>)
 8000de6:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000de8:	f7ff ffa9 	bl	8000d3e <DHT_Read>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <DHT_GetData+0xa8>)
 8000df2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000df4:	f7ff ffa3 	bl	8000d3e <DHT_Read>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <DHT_GetData+0xac>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000e00:	f7ff ff9d 	bl	8000d3e <DHT_Read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <DHT_GetData+0xb0>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000e0c:	f7ff ff97 	bl	8000d3e <DHT_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <DHT_GetData+0xb4>)
 8000e16:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000e18:	f7ff ff91 	bl	8000d3e <DHT_Read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <DHT_GetData+0xb8>)
 8000e22:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <DHT_GetData+0xb8>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <DHT_GetData+0xa8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <DHT_GetData+0xac>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <DHT_GetData+0xb0>)
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <DHT_GetData+0xb4>)
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d111      	bne.n	8000e6a <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <DHT_GetData+0xb0>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <DHT_GetData+0xa8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000092 	.word	0x20000092
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	2000008d 	.word	0x2000008d
 8000e80:	2000008e 	.word	0x2000008e
 8000e84:	2000008f 	.word	0x2000008f
 8000e88:	20000090 	.word	0x20000090

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  */


char bufferH[10],bufferT[10];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9a:	483f      	ldr	r0, [pc, #252]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e9c:	f000 ff0a 	bl	8001cb4 <HAL_GPIO_WritePin>
	DHT_GetData(&DHT11_Data);
 8000ea0:	483e      	ldr	r0, [pc, #248]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ea2:	f7ff ff95 	bl	8000dd0 <DHT_GetData>

	//lettura dati
	Temperature = DHT11_Data.Temperature;
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eac:	6013      	str	r3, [r2, #0]
	Humidity = DHT11_Data.Humidity;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000eb4:	6013      	str	r3, [r2, #0]




	//Trasmissione Temp
	sprintf(bufferT, "TMP:");
 8000eb6:	493c      	ldr	r1, [pc, #240]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000eb8:	483c      	ldr	r0, [pc, #240]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eba:	f003 fe57 	bl	8004b6c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000ebe:	483b      	ldr	r0, [pc, #236]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ec0:	f7ff f986 	bl	80001d0 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	4937      	ldr	r1, [pc, #220]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ece:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ed0:	f002 fe32 	bl	8003b38 <HAL_UART_Transmit>
	gcvt(Temperature, sizeof(Temperature), bufferT);
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fb35 	bl	8000548 <__aeabi_f2d>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4932      	ldr	r1, [pc, #200]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	ec43 2b10 	vmov	d0, r2, r3
 8000eea:	f003 fde9 	bl	8004ac0 <gcvt>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000eee:	482f      	ldr	r0, [pc, #188]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ef0:	f7ff f96e 	bl	80001d0 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	492b      	ldr	r1, [pc, #172]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000efe:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f00:	f002 fe1a 	bl	8003b38 <HAL_UART_Transmit>
	sprintf(bufferT, "\r");
 8000f04:	492b      	ldr	r1, [pc, #172]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f06:	4829      	ldr	r0, [pc, #164]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f08:	f003 fe30 	bl	8004b6c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f0e:	f7ff f95f 	bl	80001d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	4924      	ldr	r1, [pc, #144]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f1e:	f002 fe0b 	bl	8003b38 <HAL_UART_Transmit>

	//Trasmissione Umidità
	sprintf(bufferH, "HDY:");
 8000f22:	4925      	ldr	r1, [pc, #148]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f26:	f003 fe21 	bl	8004b6c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8000f2a:	4824      	ldr	r0, [pc, #144]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f2c:	f7ff f950 	bl	80001d0 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	4920      	ldr	r1, [pc, #128]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f3a:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f3c:	f002 fdfc 	bl	8003b38 <HAL_UART_Transmit>
	gcvt(Humidity, sizeof(Humidity), bufferH);
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff faff 	bl	8000548 <__aeabi_f2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	491b      	ldr	r1, [pc, #108]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f50:	2004      	movs	r0, #4
 8000f52:	ec43 2b10 	vmov	d0, r2, r3
 8000f56:	f003 fdb3 	bl	8004ac0 <gcvt>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8000f5a:	4818      	ldr	r0, [pc, #96]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f5c:	f7ff f938 	bl	80001d0 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	4914      	ldr	r1, [pc, #80]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f6c:	f002 fde4 	bl	8003b38 <HAL_UART_Transmit>
	sprintf(bufferH, "\r\n");
 8000f70:	4913      	ldr	r1, [pc, #76]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f74:	f003 fdfa 	bl	8004b6c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f7a:	f7ff f929 	bl	80001d0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f8a:	f002 fdd5 	bl	8003b38 <HAL_UART_Transmit>


}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	48001000 	.word	0x48001000
 8000f9c:	20000168 	.word	0x20000168
 8000fa0:	20000170 	.word	0x20000170
 8000fa4:	20000174 	.word	0x20000174
 8000fa8:	08007618 	.word	0x08007618
 8000fac:	20000184 	.word	0x20000184
 8000fb0:	200000e0 	.word	0x200000e0
 8000fb4:	08007620 	.word	0x08007620
 8000fb8:	08007624 	.word	0x08007624
 8000fbc:	20000178 	.word	0x20000178
 8000fc0:	0800762c 	.word	0x0800762c

08000fc4 <main>:




int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 faf4 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f814 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 f8ba 	bl	8001148 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000fd4:	f000 f860 	bl	8001098 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000fd8:	f000 f886 	bl	80010e8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim16);
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <main+0x2c>)
 8000fde:	f002 fafd 	bl	80035dc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <main+0x30>)
 8000fea:	f000 fe63 	bl	8001cb4 <HAL_GPIO_WritePin>
 8000fee:	e7f8      	b.n	8000fe2 <main+0x1e>
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	48001000 	.word	0x48001000

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09e      	sub	sp, #120	; 0x78
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001002:	2228      	movs	r2, #40	; 0x28
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fda8 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	223c      	movs	r2, #60	; 0x3c
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fd9a 	bl	8004b5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe51 	bl	8001ce4 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001048:	f000 f8d8 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fe7a 	bl	8002d60 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001072:	f000 f8c3 	bl	80011fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001076:	2301      	movs	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f8a3 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800108c:	f000 f8b6 	bl	80011fc <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3778      	adds	r7, #120	; 0x78
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_TIM16_Init+0x48>)
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <MX_TIM16_Init+0x4c>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47999;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010a4:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80010a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80010b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM16_Init+0x48>)
 80010cc:	f002 fa2e 	bl	800352c <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80010d6:	f000 f891 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000094 	.word	0x20000094
 80010e4:	40014400 	.word	0x40014400

080010e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART1_UART_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_USART1_UART_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART1_UART_Init+0x58>)
 80010f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART1_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_USART1_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART1_UART_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_USART1_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART1_UART_Init+0x58>)
 800112c:	f002 fcb6 	bl	8003a9c <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 f861 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000e0 	.word	0x200000e0
 8001144:	40013800 	.word	0x40013800

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_GPIO_Init+0xac>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <MX_GPIO_Init+0xac>)
 800117c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <MX_GPIO_Init+0xac>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_GPIO_Init+0xac>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <MX_GPIO_Init+0xb0>)
 80011ae:	f000 fd81 	bl	8001cb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b2:	2320      	movs	r3, #32
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f000 fbe2 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80011cc:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80011d0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_GPIO_Init+0xb0>)
 80011e6:	f000 fbd3 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48001000 	.word	0x48001000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_MspInit+0x44>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_MspInit+0x44>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_MspInit+0x44>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x44>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_TIM_Base_MspInit+0x44>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d113      	bne.n	800128a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2019      	movs	r0, #25
 8001280:	f000 fad9 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001284:	2019      	movs	r0, #25
 8001286:	f000 faf2 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40014400 	.word	0x40014400
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_UART_MspInit+0x8c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12f      	bne.n	800131e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x90>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_UART_MspInit+0x90>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x90>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UART_MspInit+0x90>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_UART_MspInit+0x90>)
 80012dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_UART_MspInit+0x90>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ee:	2330      	movs	r3, #48	; 0x30
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fe:	2307      	movs	r3, #7
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_UART_MspInit+0x94>)
 800130a:	f000 fb41 	bl	8001990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2025      	movs	r0, #37	; 0x25
 8001314:	f000 fa8f 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001318:	2025      	movs	r0, #37	; 0x25
 800131a:	f000 faa8 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40013800 	.word	0x40013800
 800132c:	40021000 	.word	0x40021000
 8001330:	48000800 	.word	0x48000800

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f95e 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800138e:	f002 f98f 	bl	80036b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000094 	.word	0x20000094

0800139c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <USART1_IRQHandler+0x10>)
 80013a2:	f002 fc53 	bl	8003c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000e0 	.word	0x200000e0

080013b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_kill>:

int _kill(int pid, int sig)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ca:	f003 fb9d 	bl	8004b08 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2216      	movs	r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
  return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_exit>:

void _exit (int status)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe7 	bl	80013c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f2:	e7fe      	b.n	80013f2 <_exit+0x12>

080013f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
  }

  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
  }
  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
  return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f003 fb02 	bl	8004b08 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000a000 	.word	0x2000a000
 8001530:	00000400 	.word	0x00000400
 8001534:	20000190 	.word	0x20000190
 8001538:	200001a8 	.word	0x200001a8

0800153c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <LoopForever+0x6>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	; (80015a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <LoopForever+0xe>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	; (80015ac <LoopForever+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f003 fac1 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001592:	f7ff fd17 	bl	8000fc4 <main>

08001596 <LoopForever>:

LoopForever:
    b LoopForever
 8001596:	e7fe      	b.n	8001596 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001598:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015a4:	08007930 	.word	0x08007930
  ldr r2, =_sbss
 80015a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015ac:	200001a8 	.word	0x200001a8

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x28>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f92b 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fe1a 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f943 	bl	800188a <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f90b 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000008 	.word	0x20000008
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008
 8001664:	20000194 	.word	0x20000194

08001668 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;  
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000194 	.word	0x20000194

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d008      	beq.n	80018c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e020      	b.n	8001908 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001926:	2b02      	cmp	r3, #2
 8001928:	d005      	beq.n	8001936 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e027      	b.n	8001986 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 020e 	bic.w	r2, r2, #14
 8001944:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
    } 
  }
  return status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	e154      	b.n	8001c4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8146 	beq.w	8001c44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d005      	beq.n	80019d0 <HAL_GPIO_Init+0x40>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d130      	bne.n	8001a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a06:	2201      	movs	r2, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 0201 	and.w	r2, r3, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d017      	beq.n	8001a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d123      	bne.n	8001ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	6939      	ldr	r1, [r7, #16]
 8001abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0203 	and.w	r2, r3, #3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80a0 	beq.w	8001c44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_GPIO_Init+0x2d8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_GPIO_Init+0x2d8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_GPIO_Init+0x2d8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b1c:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <HAL_GPIO_Init+0x2dc>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b46:	d019      	beq.n	8001b7c <HAL_GPIO_Init+0x1ec>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_GPIO_Init+0x2e0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_GPIO_Init+0x1e8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_GPIO_Init+0x2e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1e0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a46      	ldr	r2, [pc, #280]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1dc>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e008      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b70:	2303      	movs	r3, #3
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b8e:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2dc>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f aea3 	bne.w	80019a0 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	48000c00 	.word	0x48000c00
 8001c7c:	48001000 	.word	0x48001000
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f001 b823 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 817d 	beq.w	800201a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d20:	4bbc      	ldr	r3, [pc, #752]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d00c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d2c:	4bb9      	ldr	r3, [pc, #740]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d15c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x10e>
 8001d38:	4bb6      	ldr	r3, [pc, #728]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d155      	bne.n	8001df2 <HAL_RCC_OscConfig+0x10e>
 8001d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0x94>
 8001d72:	4ba8      	ldr	r3, [pc, #672]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e015      	b.n	8001da4 <HAL_RCC_OscConfig+0xc0>
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001da0:	4b9c      	ldr	r3, [pc, #624]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001db0:	fa92 f2a2 	rbit	r2, r2
 8001db4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001db8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 811f 	beq.w	8002018 <HAL_RCC_OscConfig+0x334>
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8116 	bne.w	8002018 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f000 bfaf 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12e>
 8001e04:	4b83      	ldr	r3, [pc, #524]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a82      	ldr	r2, [pc, #520]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e036      	b.n	8001e80 <HAL_RCC_OscConfig+0x19c>
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x158>
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7b      	ldr	r2, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a78      	ldr	r2, [pc, #480]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e021      	b.n	8001e80 <HAL_RCC_OscConfig+0x19c>
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x184>
 8001e4e:	4b71      	ldr	r3, [pc, #452]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a70      	ldr	r2, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x19c>
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	f023 020f 	bic.w	r2, r3, #15
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	495f      	ldr	r1, [pc, #380]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d059      	beq.n	8001f5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fbdd 	bl	8001668 <HAL_GetTick>
 8001eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fbd8 	bl	8001668 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d902      	bls.n	8001eca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f000 bf43 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 8001eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ece:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ede:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0x218>
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x244>
 8001efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ab      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x1d0>
 8001f5c:	e05d      	b.n	800201a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fb83 	bl	8001668 <HAL_GetTick>
 8001f62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fb7e 	bl	8001668 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d902      	bls.n	8001f7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	f000 bee9 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 8001f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x2cc>
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e015      	b.n	8001fdc <HAL_RCC_OscConfig+0x2f8>
 8001fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fe4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 8001fec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ff0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ab      	bne.n	8001f68 <HAL_RCC_OscConfig+0x284>
 8002010:	e003      	b.n	800201a <HAL_RCC_OscConfig+0x336>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 817d 	beq.w	800232a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002030:	4ba6      	ldr	r3, [pc, #664]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800203c:	4ba3      	ldr	r3, [pc, #652]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d172      	bne.n	800212e <HAL_RCC_OscConfig+0x44a>
 8002048:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d16c      	bne.n	800212e <HAL_RCC_OscConfig+0x44a>
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002066:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0x3a0>
 800207e:	4b93      	ldr	r3, [pc, #588]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x3c8>
 8002084:	2302      	movs	r3, #2
 8002086:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800209c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020a8:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2202      	movs	r2, #2
 80020ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCC_OscConfig+0x410>
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f000 be2e 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b75      	ldr	r3, [pc, #468]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	21f8      	movs	r1, #248	; 0xf8
 800210a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002112:	fa91 f1a1 	rbit	r1, r1
 8002116:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800211a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800211e:	fab1 f181 	clz	r1, r1
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	408b      	lsls	r3, r1
 8002126:	4969      	ldr	r1, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212c:	e0fd      	b.n	800232a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8088 	beq.w	8002250 <HAL_RCC_OscConfig+0x56c>
 8002140:	2301      	movs	r3, #1
 8002142:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002152:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	2301      	movs	r3, #1
 800216a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fa7c 	bl	8001668 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fa77 	bl	8001668 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d902      	bls.n	800218c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	f000 bde2 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800219e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x4d8>
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x500>
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2202      	movs	r2, #2
 80021e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0af      	beq.n	8002176 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	21f8      	movs	r1, #248	; 0xf8
 800222c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002234:	fa91 f1a1 	rbit	r1, r1
 8002238:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800223c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002240:	fab1 f181 	clz	r1, r1
 8002244:	b2c9      	uxtb	r1, r1
 8002246:	408b      	lsls	r3, r1
 8002248:	4920      	ldr	r1, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
 800224e:	e06c      	b.n	800232a <HAL_RCC_OscConfig+0x646>
 8002250:	2301      	movs	r3, #1
 8002252:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002262:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f9f4 	bl	8001668 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f9ef 	bl	8001668 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f000 bd5a 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d104      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5ec>
 80022c6:	4b01      	ldr	r3, [pc, #4]	; (80022cc <HAL_RCC_OscConfig+0x5e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x614>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022f4:	4bc8      	ldr	r3, [pc, #800]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002302:	fa92 f2a2 	rbit	r2, r2
 8002306:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800230a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f042 0220 	orr.w	r2, r2, #32
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f002 021f 	and.w	r2, r2, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ad      	bne.n	8002286 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8110 	beq.w	8002560 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d079      	beq.n	8002444 <HAL_RCC_OscConfig+0x760>
 8002350:	2301      	movs	r3, #1
 8002352:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4bab      	ldr	r3, [pc, #684]	; (800261c <HAL_RCC_OscConfig+0x938>)
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	461a      	mov	r2, r3
 8002376:	2301      	movs	r3, #1
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff f975 	bl	8001668 <HAL_GetTick>
 800237e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff f970 	bl	8001668 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d902      	bls.n	800239a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	f000 bcdb 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f4:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 80023f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002400:	2102      	movs	r1, #2
 8002402:	6019      	str	r1, [r3, #0]
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f1a3 	rbit	r1, r3
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800241a:	6019      	str	r1, [r3, #0]
  return result;
 800241c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002420:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0a0      	beq.n	8002384 <HAL_RCC_OscConfig+0x6a0>
 8002442:	e08d      	b.n	8002560 <HAL_RCC_OscConfig+0x87c>
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002466:	601a      	str	r2, [r3, #0]
  return result;
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002470:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_OscConfig+0x938>)
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	461a      	mov	r2, r3
 8002482:	2300      	movs	r3, #0
 8002484:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff f8ef 	bl	8001668 <HAL_GetTick>
 800248a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7ff f8ea 	bl	8001668 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d902      	bls.n	80024a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	f000 bc55 	b.w	8002d50 <HAL_RCC_OscConfig+0x106c>
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ae:	2202      	movs	r2, #2
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024d2:	2202      	movs	r2, #2
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002510:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 8002514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800251e:	2102      	movs	r1, #2
 8002520:	6019      	str	r1, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f1a3 	rbit	r1, r3
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002538:	6019      	str	r1, [r3, #0]
  return result;
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d197      	bne.n	8002490 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 81a1 	beq.w	80028b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	61d3      	str	r3, [r2, #28]
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_RCC_OscConfig+0x93c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11a      	bne.n	80025f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_RCC_OscConfig+0x93c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x93c>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ce:	f7ff f84b 	bl	8001668 <HAL_GetTick>
 80025d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d8:	f7ff f846 	bl	8001668 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e3b1      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x93c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x940>
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a02      	ldr	r2, [pc, #8]	; (8002618 <HAL_RCC_OscConfig+0x934>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e03c      	b.n	8002690 <HAL_RCC_OscConfig+0x9ac>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	10908120 	.word	0x10908120
 8002620:	40007000 	.word	0x40007000
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x96a>
 8002634:	4bc1      	ldr	r3, [pc, #772]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4ac0      	ldr	r2, [pc, #768]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	4bbe      	ldr	r3, [pc, #760]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4abd      	ldr	r2, [pc, #756]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e020      	b.n	8002690 <HAL_RCC_OscConfig+0x9ac>
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x994>
 800265e:	4bb7      	ldr	r3, [pc, #732]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4ab6      	ldr	r2, [pc, #728]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4bb4      	ldr	r3, [pc, #720]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4ab3      	ldr	r2, [pc, #716]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0x9ac>
 8002678:	4bb0      	ldr	r3, [pc, #704]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4aaf      	ldr	r2, [pc, #700]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4bad      	ldr	r3, [pc, #692]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4aac      	ldr	r2, [pc, #688]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800268a:	f023 0304 	bic.w	r3, r3, #4
 800268e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8081 	beq.w	80027a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe ffe1 	bl	8001668 <HAL_GetTick>
 80026a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe ffdc 	bl	8001668 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e345      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800270a:	601a      	str	r2, [r3, #0]
  return result;
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002714:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0xa4c>
 800272a:	4b84      	ldr	r3, [pc, #528]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	e013      	b.n	8002758 <HAL_RCC_OscConfig+0xa74>
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	4b79      	ldr	r3, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002760:	2102      	movs	r1, #2
 8002762:	6011      	str	r1, [r2, #0]
 8002764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002768:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fa92 f1a2 	rbit	r1, r2
 8002772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002776:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800277a:	6011      	str	r1, [r2, #0]
  return result;
 800277c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002780:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d084      	beq.n	80026ac <HAL_RCC_OscConfig+0x9c8>
 80027a2:	e07f      	b.n	80028a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7fe ff60 	bl	8001668 <HAL_GetTick>
 80027a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe ff5b 	bl	8001668 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e2c4      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027f2:	2202      	movs	r2, #2
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800280c:	601a      	str	r2, [r3, #0]
  return result;
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002816:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d102      	bne.n	8002832 <HAL_RCC_OscConfig+0xb4e>
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	e013      	b.n	800285a <HAL_RCC_OscConfig+0xb76>
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800283a:	2202      	movs	r2, #2
 800283c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002862:	2102      	movs	r1, #2
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	fa92 f1a2 	rbit	r1, r2
 8002874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002878:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800287c:	6011      	str	r1, [r2, #0]
  return result;
 800287e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002882:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f002 021f 	and.w	r2, r2, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d184      	bne.n	80027ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8242 	beq.w	8002d4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0xc58>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	f000 8213 	beq.w	8002cfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f040 8162 	bne.w	8002bae <HAL_RCC_OscConfig+0xeca>
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800290e:	601a      	str	r2, [r3, #0]
  return result;
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002918:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	461a      	mov	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fe9a 	bl	8001668 <HAL_GetTick>
 8002934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	e00c      	b.n	8002954 <HAL_RCC_OscConfig+0xc70>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fe92 	bl	8001668 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1fd      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800295c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002978:	601a      	str	r2, [r3, #0]
  return result;
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002982:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d102      	bne.n	800299e <HAL_RCC_OscConfig+0xcba>
 8002998:	4bb0      	ldr	r3, [pc, #704]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	e027      	b.n	80029ee <HAL_RCC_OscConfig+0xd0a>
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4b9c      	ldr	r3, [pc, #624]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029fa:	6011      	str	r1, [r2, #0]
 80029fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	fa92 f1a2 	rbit	r1, r2
 8002a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a12:	6011      	str	r1, [r2, #0]
  return result;
 8002a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f042 0220 	orr.w	r2, r2, #32
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d182      	bne.n	8002940 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	497f      	ldr	r1, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a86:	601a      	str	r2, [r3, #0]
  return result;
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fdde 	bl	8001668 <HAL_GetTick>
 8002aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fdd9 	bl	8001668 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e144      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aea:	601a      	str	r2, [r3, #0]
  return result;
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002af4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe2c>
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e027      	b.n	8002b60 <HAL_RCC_OscConfig+0xe7c>
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f2a3 	rbit	r2, r3
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	fa92 f1a2 	rbit	r1, r2
 8002b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b84:	6011      	str	r1, [r2, #0]
  return result;
 8002b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f002 021f 	and.w	r2, r2, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d082      	beq.n	8002ab2 <HAL_RCC_OscConfig+0xdce>
 8002bac:	e0cf      	b.n	8002d4e <HAL_RCC_OscConfig+0x106a>
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bd2:	601a      	str	r2, [r3, #0]
  return result;
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fd38 	bl	8001668 <HAL_GetTick>
 8002bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	e009      	b.n	8002c12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fd33 	bl	8001668 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e09e      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c36:	601a      	str	r2, [r3, #0]
  return result;
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d104      	bne.n	8002c60 <HAL_RCC_OscConfig+0xf7c>
 8002c56:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <HAL_RCC_OscConfig+0xf78>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e029      	b.n	8002cb0 <HAL_RCC_OscConfig+0xfcc>
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_OscConfig+0x1078>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cbc:	6011      	str	r1, [r2, #0]
 8002cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fa92 f1a2 	rbit	r1, r2
 8002ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cd4:	6011      	str	r1, [r2, #0]
  return result;
 8002cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cda:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f002 021f 	and.w	r2, r2, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d180      	bne.n	8002bfe <HAL_RCC_OscConfig+0xf1a>
 8002cfc:	e027      	b.n	8002d4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e01e      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_OscConfig+0x1078>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b09e      	sub	sp, #120	; 0x78
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e162      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 0207 	bic.w	r2, r3, #7
 8002d8e:	498b      	ldr	r1, [pc, #556]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e14a      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	497f      	ldr	r1, [pc, #508]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80dc 	beq.w	8002f8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d13c      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xf6>
 8002ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xa6>
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e00f      	b.n	8002e26 <HAL_RCC_ClockConfig+0xc6>
 8002e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	667b      	str	r3, [r7, #100]	; 0x64
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e2e:	fa92 f2a2 	rbit	r2, r2
 8002e32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d17b      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0f3      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d13c      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x178>
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x128>
 8002e82:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x148>
 8002e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	647b      	str	r3, [r7, #68]	; 0x44
 8002e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eac:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f042 0220 	orr.w	r2, r2, #32
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f002 021f 	and.w	r2, r2, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13a      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b2      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e00d      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1bc>
 8002f00:	2302      	movs	r3, #2
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	61ba      	str	r2, [r7, #24]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	617a      	str	r2, [r7, #20]
  return result;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e079      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fb84 	bl	8001668 <HAL_GetTick>
 8002f60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe fb80 	bl	8001668 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e061      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d214      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4906      	ldr	r1, [pc, #24]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e040      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	491a      	ldr	r1, [pc, #104]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4912      	ldr	r1, [pc, #72]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003002:	f000 f829 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003006:	4601      	mov	r1, r0
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	22f0      	movs	r2, #240	; 0xf0
 8003012:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	fa92 f2a2 	rbit	r2, r2
 800301a:	60fa      	str	r2, [r7, #12]
  return result;
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	fab2 f282 	clz	r2, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	40d3      	lsrs	r3, r2
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x2ec>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	fa21 f303 	lsr.w	r3, r1, r3
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCC_ClockConfig+0x2f0>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCC_ClockConfig+0x2f4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fad2 	bl	80015e0 <HAL_InitTick>
  
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3778      	adds	r7, #120	; 0x78
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	08007630 	.word	0x08007630
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b08b      	sub	sp, #44	; 0x2c
 800305c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x30>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x36>
 8003086:	e03c      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_GetSysClockFreq+0xc4>)
 800308a:	623b      	str	r3, [r7, #32]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003094:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003098:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	607a      	str	r2, [r7, #4]
  return result;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	40d3      	lsrs	r3, r2
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	220f      	movs	r2, #15
 80030bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	60fa      	str	r2, [r7, #12]
  return result;
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e004      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	623b      	str	r3, [r7, #32]
      break;
 8003100:	e002      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003104:	623b      	str	r3, [r7, #32]
      break;
 8003106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003108:	6a3b      	ldr	r3, [r7, #32]
}
 800310a:	4618      	mov	r0, r3
 800310c:	372c      	adds	r7, #44	; 0x2c
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	08007648 	.word	0x08007648
 8003124:	08007658 	.word	0x08007658
 8003128:	003d0900 	.word	0x003d0900

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800314a:	f7ff ffef 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314e:	4601      	mov	r1, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003158:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800315c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	603a      	str	r2, [r7, #0]
  return result;
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	40d3      	lsrs	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	08007640 	.word	0x08007640

08003188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800318e:	f7ff ffcd 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800319c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	fa92 f2a2 	rbit	r2, r2
 80031a8:	603a      	str	r2, [r7, #0]
  return result;
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	40d3      	lsrs	r3, r2
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08007640 	.word	0x08007640

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b092      	sub	sp, #72	; 0x48
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80d4 	beq.w	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	61d3      	str	r3, [r2, #28]
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a41      	ldr	r2, [pc, #260]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fe fa19 	bl	8001668 <HAL_GetTick>
 8003236:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe fa15 	bl	8001668 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e169      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8084 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003274:	429a      	cmp	r2, r3
 8003276:	d07c      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	461a      	mov	r2, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe f9c5 	bl	8001668 <HAL_GetTick>
 80032de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe f9c1 	bl	8001668 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e113      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032f8:	2302      	movs	r3, #2
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	2302      	movs	r3, #2
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	61fb      	str	r3, [r7, #28]
  return result;
 8003310:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d108      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003326:	4b01      	ldr	r3, [pc, #4]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	e00d      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	10908100 	.word	0x10908100
 8003338:	2302      	movs	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	4b78      	ldr	r3, [pc, #480]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2202      	movs	r2, #2
 800334a:	613a      	str	r2, [r7, #16]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	fa92 f2a2 	rbit	r2, r2
 8003352:	60fa      	str	r2, [r7, #12]
  return result;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0b7      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003372:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	496a      	ldr	r1, [pc, #424]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b66      	ldr	r3, [pc, #408]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a65      	ldr	r2, [pc, #404]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a4:	4b60      	ldr	r3, [pc, #384]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f023 0203 	bic.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	495d      	ldr	r1, [pc, #372]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c2:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4956      	ldr	r1, [pc, #344]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e0:	4b51      	ldr	r3, [pc, #324]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	494e      	ldr	r1, [pc, #312]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f023 0210 	bic.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4947      	ldr	r1, [pc, #284]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	493f      	ldr	r1, [pc, #252]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f023 0220 	bic.w	r2, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4938      	ldr	r1, [pc, #224]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003458:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4930      	ldr	r1, [pc, #192]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4929      	ldr	r1, [pc, #164]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4921      	ldr	r1, [pc, #132]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	491a      	ldr	r1, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	4912      	ldr	r1, [pc, #72]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	490b      	ldr	r1, [pc, #44]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3748      	adds	r7, #72	; 0x48
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e049      	b.n	80035d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fe7c 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 f9e8 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04a      	b.n	800368a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_TIM_Base_Start_IT+0xbc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x6c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d013      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x6c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_TIM_Base_Start_IT+0xc0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x6c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x6c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x6c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d115      	bne.n	8003674 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_TIM_Base_Start_IT+0xd0>)
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d015      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0xaa>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d011      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	e008      	b.n	8003686 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e000      	b.n	8003688 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40014000 	.word	0x40014000
 80036ac:	00010007 	.word	0x00010007

080036b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0202 	mvn.w	r2, #2
 80036dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f905 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8f7 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f908 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0204 	mvn.w	r2, #4
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8db 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8cd 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8de 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b08      	cmp	r3, #8
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0208 	mvn.w	r2, #8
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2204      	movs	r2, #4
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8b1 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8a3 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f8b4 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0210 	mvn.w	r2, #16
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2208      	movs	r2, #8
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f887 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f879 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f88a 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0201 	mvn.w	r2, #1
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fb2c 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f90a 	bl	8003a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f8fd 	bl	8003a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d10e      	bne.n	80038ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f838 	bl	800392a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0220 	mvn.w	r2, #32
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8bd 	bl	8003a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <TIM_Base_SetConfig+0x108>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <TIM_Base_SetConfig+0x10c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01b      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d017      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <TIM_Base_SetConfig+0x108>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <TIM_Base_SetConfig+0x10c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e040      	b.n	8003b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fbec 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fbbc 	bl	8004258 <UART_SetConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fd84 	bl	8004600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fe0b 	bl	8004744 <UART_CheckIdleState>
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d178      	bne.n	8003c42 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Transmit+0x24>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e071      	b.n	8003c44 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fd7b 	bl	8001668 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_UART_Transmit+0x68>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e003      	b.n	8003ba8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ba8:	e030      	b.n	8003c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2180      	movs	r1, #128	; 0x80
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fe6d 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e03c      	b.n	8003c44 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	881a      	ldrh	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3302      	adds	r3, #2
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e008      	b.n	8003bfa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1c8      	bne.n	8003baa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2140      	movs	r1, #64	; 0x40
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fe36 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e005      	b.n	8003c44 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b0ba      	sub	sp, #232	; 0xe8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c76:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d115      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 82ab 	beq.w	8004200 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
      }
      return;
 8003cb2:	e2a5      	b.n	8004200 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8117 	beq.w	8003eec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_UART_IRQHandler+0x298>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 810a 	beq.w	8003eec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <HAL_UART_IRQHandler+0xbc>
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_UART_IRQHandler+0xec>
 8003d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d011      	beq.n	8003d68 <HAL_UART_IRQHandler+0x11c>
 8003d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2204      	movs	r2, #4
 8003d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d017      	beq.n	8003da4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2208      	movs	r2, #8
 8003d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	f043 0208 	orr.w	r2, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x18a>
 8003db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00c      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8211 	beq.w	8004204 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04f      	beq.n	8003ece <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fd97 	bl	8004962 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d141      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1d9      	bne.n	8003e42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <HAL_UART_IRQHandler+0x29c>)
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd fd36 	bl	8001914 <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d017      	beq.n	8003ede <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00f      	b.n	8003ede <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b4 	bl	800422c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00b      	b.n	8003ede <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9b0 	bl	800422c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e007      	b.n	8003ede <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9ac 	bl	800422c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003edc:	e192      	b.n	8004204 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ede:	bf00      	nop
    return;
 8003ee0:	e190      	b.n	8004204 <HAL_UART_IRQHandler+0x5b8>
 8003ee2:	bf00      	nop
 8003ee4:	04000120 	.word	0x04000120
 8003ee8:	08004a2b 	.word	0x08004a2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 814b 	bne.w	800418c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8144 	beq.w	800418c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 813d 	beq.w	800418c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2210      	movs	r2, #16
 8003f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	f040 80b5 	bne.w	8004094 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8164 	beq.w	8004208 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	f080 815c 	bcs.w	8004208 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	f000 8086 	beq.w	8004072 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1da      	bne.n	8003f66 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e1      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004010:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004012:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004016:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800401e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e3      	bne.n	8003fec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004054:	65bb      	str	r3, [r7, #88]	; 0x58
 8004056:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800405a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd fc18 	bl	80018a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004084:	b29b      	uxth	r3, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	b29b      	uxth	r3, r3
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8d7 	bl	8004240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004092:	e0b9      	b.n	8004208 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80ab 	beq.w	800420c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80040b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80a6 	beq.w	800420c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040e2:	647b      	str	r3, [r7, #68]	; 0x44
 80040e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e4      	bne.n	80040c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800411a:	633a      	str	r2, [r7, #48]	; 0x30
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	617b      	str	r3, [r7, #20]
   return(result);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e4      	bne.n	8004142 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800417e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f85b 	bl	8004240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800418a:	e03f      	b.n	800420c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <HAL_UART_IRQHandler+0x56a>
 8004198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800419c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fc7b 	bl	8004aaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b4:	e02d      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01c      	beq.n	8004210 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
    }
    return;
 80041de:	e017      	b.n	8004210 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <HAL_UART_IRQHandler+0x5c6>
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fc2c 	bl	8004a56 <UART_EndTransmit_IT>
    return;
 80041fe:	e008      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004200:	bf00      	nop
 8004202:	e006      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004204:	bf00      	nop
 8004206:	e004      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004208:	bf00      	nop
 800420a:	e002      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
      return;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004210:	bf00      	nop
  }

}
 8004212:	37e8      	adds	r7, #232	; 0xe8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004286:	f023 030c 	bic.w	r3, r3, #12
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4aa7      	ldr	r2, [pc, #668]	; (8004570 <UART_SetConfig+0x318>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d120      	bne.n	800431a <UART_SetConfig+0xc2>
 80042d8:	4ba6      	ldr	r3, [pc, #664]	; (8004574 <UART_SetConfig+0x31c>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d817      	bhi.n	8004314 <UART_SetConfig+0xbc>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x94>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004309 	.word	0x08004309
 80042f4:	0800430f 	.word	0x0800430f
 80042f8:	08004303 	.word	0x08004303
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e0b5      	b.n	800446e <UART_SetConfig+0x216>
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e0b2      	b.n	800446e <UART_SetConfig+0x216>
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e0af      	b.n	800446e <UART_SetConfig+0x216>
 800430e:	2308      	movs	r3, #8
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e0ac      	b.n	800446e <UART_SetConfig+0x216>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e0a9      	b.n	800446e <UART_SetConfig+0x216>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a96      	ldr	r2, [pc, #600]	; (8004578 <UART_SetConfig+0x320>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d124      	bne.n	800436e <UART_SetConfig+0x116>
 8004324:	4b93      	ldr	r3, [pc, #588]	; (8004574 <UART_SetConfig+0x31c>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800432c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004330:	d011      	beq.n	8004356 <UART_SetConfig+0xfe>
 8004332:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004336:	d817      	bhi.n	8004368 <UART_SetConfig+0x110>
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800433c:	d011      	beq.n	8004362 <UART_SetConfig+0x10a>
 800433e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004342:	d811      	bhi.n	8004368 <UART_SetConfig+0x110>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <UART_SetConfig+0xf8>
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d006      	beq.n	800435c <UART_SetConfig+0x104>
 800434e:	e00b      	b.n	8004368 <UART_SetConfig+0x110>
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e08b      	b.n	800446e <UART_SetConfig+0x216>
 8004356:	2302      	movs	r3, #2
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e088      	b.n	800446e <UART_SetConfig+0x216>
 800435c:	2304      	movs	r3, #4
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e085      	b.n	800446e <UART_SetConfig+0x216>
 8004362:	2308      	movs	r3, #8
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e082      	b.n	800446e <UART_SetConfig+0x216>
 8004368:	2310      	movs	r3, #16
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e07f      	b.n	800446e <UART_SetConfig+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a82      	ldr	r2, [pc, #520]	; (800457c <UART_SetConfig+0x324>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d124      	bne.n	80043c2 <UART_SetConfig+0x16a>
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <UART_SetConfig+0x31c>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004380:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004384:	d011      	beq.n	80043aa <UART_SetConfig+0x152>
 8004386:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800438a:	d817      	bhi.n	80043bc <UART_SetConfig+0x164>
 800438c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004390:	d011      	beq.n	80043b6 <UART_SetConfig+0x15e>
 8004392:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004396:	d811      	bhi.n	80043bc <UART_SetConfig+0x164>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <UART_SetConfig+0x14c>
 800439c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a0:	d006      	beq.n	80043b0 <UART_SetConfig+0x158>
 80043a2:	e00b      	b.n	80043bc <UART_SetConfig+0x164>
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e061      	b.n	800446e <UART_SetConfig+0x216>
 80043aa:	2302      	movs	r3, #2
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e05e      	b.n	800446e <UART_SetConfig+0x216>
 80043b0:	2304      	movs	r3, #4
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e05b      	b.n	800446e <UART_SetConfig+0x216>
 80043b6:	2308      	movs	r3, #8
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e058      	b.n	800446e <UART_SetConfig+0x216>
 80043bc:	2310      	movs	r3, #16
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e055      	b.n	800446e <UART_SetConfig+0x216>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6e      	ldr	r2, [pc, #440]	; (8004580 <UART_SetConfig+0x328>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d124      	bne.n	8004416 <UART_SetConfig+0x1be>
 80043cc:	4b69      	ldr	r3, [pc, #420]	; (8004574 <UART_SetConfig+0x31c>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043d8:	d011      	beq.n	80043fe <UART_SetConfig+0x1a6>
 80043da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043de:	d817      	bhi.n	8004410 <UART_SetConfig+0x1b8>
 80043e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e4:	d011      	beq.n	800440a <UART_SetConfig+0x1b2>
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ea:	d811      	bhi.n	8004410 <UART_SetConfig+0x1b8>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <UART_SetConfig+0x1a0>
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f4:	d006      	beq.n	8004404 <UART_SetConfig+0x1ac>
 80043f6:	e00b      	b.n	8004410 <UART_SetConfig+0x1b8>
 80043f8:	2300      	movs	r3, #0
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e037      	b.n	800446e <UART_SetConfig+0x216>
 80043fe:	2302      	movs	r3, #2
 8004400:	77fb      	strb	r3, [r7, #31]
 8004402:	e034      	b.n	800446e <UART_SetConfig+0x216>
 8004404:	2304      	movs	r3, #4
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e031      	b.n	800446e <UART_SetConfig+0x216>
 800440a:	2308      	movs	r3, #8
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e02e      	b.n	800446e <UART_SetConfig+0x216>
 8004410:	2310      	movs	r3, #16
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e02b      	b.n	800446e <UART_SetConfig+0x216>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5a      	ldr	r2, [pc, #360]	; (8004584 <UART_SetConfig+0x32c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d124      	bne.n	800446a <UART_SetConfig+0x212>
 8004420:	4b54      	ldr	r3, [pc, #336]	; (8004574 <UART_SetConfig+0x31c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004428:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800442c:	d011      	beq.n	8004452 <UART_SetConfig+0x1fa>
 800442e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004432:	d817      	bhi.n	8004464 <UART_SetConfig+0x20c>
 8004434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004438:	d011      	beq.n	800445e <UART_SetConfig+0x206>
 800443a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800443e:	d811      	bhi.n	8004464 <UART_SetConfig+0x20c>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <UART_SetConfig+0x1f4>
 8004444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004448:	d006      	beq.n	8004458 <UART_SetConfig+0x200>
 800444a:	e00b      	b.n	8004464 <UART_SetConfig+0x20c>
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e00d      	b.n	800446e <UART_SetConfig+0x216>
 8004452:	2302      	movs	r3, #2
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e00a      	b.n	800446e <UART_SetConfig+0x216>
 8004458:	2304      	movs	r3, #4
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e007      	b.n	800446e <UART_SetConfig+0x216>
 800445e:	2308      	movs	r3, #8
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e004      	b.n	800446e <UART_SetConfig+0x216>
 8004464:	2310      	movs	r3, #16
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e001      	b.n	800446e <UART_SetConfig+0x216>
 800446a:	2310      	movs	r3, #16
 800446c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004476:	d15b      	bne.n	8004530 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d827      	bhi.n	80044ce <UART_SetConfig+0x276>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x22c>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044b1 	.word	0x080044b1
 800448c:	080044b9 	.word	0x080044b9
 8004490:	080044cf 	.word	0x080044cf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044cf 	.word	0x080044cf
 800449c:	080044cf 	.word	0x080044cf
 80044a0:	080044cf 	.word	0x080044cf
 80044a4:	080044c7 	.word	0x080044c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7fe fe4c 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 80044ac:	61b8      	str	r0, [r7, #24]
        break;
 80044ae:	e013      	b.n	80044d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7fe fe6a 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 80044b4:	61b8      	str	r0, [r7, #24]
        break;
 80044b6:	e00f      	b.n	80044d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <UART_SetConfig+0x330>)
 80044ba:	61bb      	str	r3, [r7, #24]
        break;
 80044bc:	e00c      	b.n	80044d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044be:	f7fe fdcb 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 80044c2:	61b8      	str	r0, [r7, #24]
        break;
 80044c4:	e008      	b.n	80044d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ca:	61bb      	str	r3, [r7, #24]
        break;
 80044cc:	e004      	b.n	80044d8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	77bb      	strb	r3, [r7, #30]
        break;
 80044d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8082 	beq.w	80045e4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	005a      	lsls	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	441a      	add	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	d916      	bls.n	800452a <UART_SetConfig+0x2d2>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d212      	bcs.n	800452a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f023 030f 	bic.w	r3, r3, #15
 800450c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	b29a      	uxth	r2, r3
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	4313      	orrs	r3, r2
 800451e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	89fa      	ldrh	r2, [r7, #14]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e05c      	b.n	80045e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	77bb      	strb	r3, [r7, #30]
 800452e:	e059      	b.n	80045e4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	2b08      	cmp	r3, #8
 8004534:	d835      	bhi.n	80045a2 <UART_SetConfig+0x34a>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0x2e4>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004561 	.word	0x08004561
 8004540:	08004569 	.word	0x08004569
 8004544:	0800458d 	.word	0x0800458d
 8004548:	080045a3 	.word	0x080045a3
 800454c:	08004593 	.word	0x08004593
 8004550:	080045a3 	.word	0x080045a3
 8004554:	080045a3 	.word	0x080045a3
 8004558:	080045a3 	.word	0x080045a3
 800455c:	0800459b 	.word	0x0800459b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fe fdf0 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8004564:	61b8      	str	r0, [r7, #24]
        break;
 8004566:	e021      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004568:	f7fe fe0e 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 800456c:	61b8      	str	r0, [r7, #24]
        break;
 800456e:	e01d      	b.n	80045ac <UART_SetConfig+0x354>
 8004570:	40013800 	.word	0x40013800
 8004574:	40021000 	.word	0x40021000
 8004578:	40004400 	.word	0x40004400
 800457c:	40004800 	.word	0x40004800
 8004580:	40004c00 	.word	0x40004c00
 8004584:	40005000 	.word	0x40005000
 8004588:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <UART_SetConfig+0x3a4>)
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e00c      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7fe fd61 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8004596:	61b8      	str	r0, [r7, #24]
        break;
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e004      	b.n	80045ac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	77bb      	strb	r3, [r7, #30]
        break;
 80045aa:	bf00      	nop
    }

    if (pclk != 0U)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085a      	lsrs	r2, r3, #1
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b0f      	cmp	r3, #15
 80045ca:	d909      	bls.n	80045e0 <UART_SetConfig+0x388>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d2:	d205      	bcs.n	80045e0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e001      	b.n	80045e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	007a1200 	.word	0x007a1200

08004600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01a      	beq.n	8004716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fe:	d10a      	bne.n	8004716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b098      	sub	sp, #96	; 0x60
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004754:	f7fc ff88 	bl	8001668 <HAL_GetTick>
 8004758:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d12e      	bne.n	80047c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f88c 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d021      	beq.n	80047c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004796:	653b      	str	r3, [r7, #80]	; 0x50
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a0:	647b      	str	r3, [r7, #68]	; 0x44
 80047a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e6      	bne.n	8004782 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e062      	b.n	800488c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d149      	bne.n	8004868 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	2200      	movs	r2, #0
 80047de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f856 	bl	8004894 <UART_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d03c      	beq.n	8004868 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	623b      	str	r3, [r7, #32]
   return(result);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
 800480e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e6      	bne.n	80047ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	64bb      	str	r3, [r7, #72]	; 0x48
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	617b      	str	r3, [r7, #20]
   return(result);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e011      	b.n	800488c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3758      	adds	r7, #88	; 0x58
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a4:	e049      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d045      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fc fedb 	bl	8001668 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e048      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d031      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d110      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f838 	bl	8004962 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2208      	movs	r2, #8
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e029      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d111      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800491e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f81e 	bl	8004962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	429a      	cmp	r2, r3
 8004956:	d0a6      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004962:	b480      	push	{r7}
 8004964:	b095      	sub	sp, #84	; 0x54
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
 800498a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800498e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d118      	bne.n	8004a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	613b      	str	r3, [r7, #16]
   return(result);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e6      	bne.n	80049d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a1e:	bf00      	nop
 8004a20:	3754      	adds	r7, #84	; 0x54
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fbef 	bl	800422c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fbbb 	bl	8004218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa2:	bf00      	nop
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <gcvt>:
 8004ac0:	b530      	push	{r4, r5, lr}
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4605      	mov	r5, r0
 8004aca:	2300      	movs	r3, #0
 8004acc:	ec51 0b10 	vmov	r0, r1, d0
 8004ad0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ad4:	f7fc f802 	bl	8000adc <__aeabi_dcmplt>
 8004ad8:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004adc:	4622      	mov	r2, r4
 8004ade:	b118      	cbz	r0, 8004ae8 <gcvt+0x28>
 8004ae0:	232d      	movs	r3, #45	; 0x2d
 8004ae2:	f802 3b01 	strb.w	r3, [r2], #1
 8004ae6:	3d01      	subs	r5, #1
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4806      	ldr	r0, [pc, #24]	; (8004b04 <gcvt+0x44>)
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	4629      	mov	r1, r5
 8004af0:	2367      	movs	r3, #103	; 0x67
 8004af2:	6800      	ldr	r0, [r0, #0]
 8004af4:	f000 f8d4 	bl	8004ca0 <_gcvt>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bf14      	ite	ne
 8004afc:	4620      	movne	r0, r4
 8004afe:	2000      	moveq	r0, #0
 8004b00:	b005      	add	sp, #20
 8004b02:	bd30      	pop	{r4, r5, pc}
 8004b04:	2000000c 	.word	0x2000000c

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4d0d      	ldr	r5, [pc, #52]	; (8004b4c <__libc_init_array+0x38>)
 8004b18:	4c0d      	ldr	r4, [pc, #52]	; (8004b50 <__libc_init_array+0x3c>)
 8004b1a:	1b64      	subs	r4, r4, r5
 8004b1c:	10a4      	asrs	r4, r4, #2
 8004b1e:	2600      	movs	r6, #0
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	4d0b      	ldr	r5, [pc, #44]	; (8004b54 <__libc_init_array+0x40>)
 8004b26:	4c0c      	ldr	r4, [pc, #48]	; (8004b58 <__libc_init_array+0x44>)
 8004b28:	f002 fd68 	bl	80075fc <_init>
 8004b2c:	1b64      	subs	r4, r4, r5
 8004b2e:	10a4      	asrs	r4, r4, #2
 8004b30:	2600      	movs	r6, #0
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	08007928 	.word	0x08007928
 8004b50:	08007928 	.word	0x08007928
 8004b54:	08007928 	.word	0x08007928
 8004b58:	0800792c 	.word	0x0800792c

08004b5c <memset>:
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <siprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	b500      	push	{lr}
 8004b70:	b09c      	sub	sp, #112	; 0x70
 8004b72:	ab1d      	add	r3, sp, #116	; 0x74
 8004b74:	9002      	str	r0, [sp, #8]
 8004b76:	9006      	str	r0, [sp, #24]
 8004b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b7c:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <siprintf+0x38>)
 8004b7e:	9107      	str	r1, [sp, #28]
 8004b80:	9104      	str	r1, [sp, #16]
 8004b82:	4909      	ldr	r1, [pc, #36]	; (8004ba8 <siprintf+0x3c>)
 8004b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	a902      	add	r1, sp, #8
 8004b90:	f000 fe1c 	bl	80057cc <_svfiprintf_r>
 8004b94:	9b02      	ldr	r3, [sp, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	b01c      	add	sp, #112	; 0x70
 8004b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	4770      	bx	lr
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	ffff0208 	.word	0xffff0208

08004bac <print_e>:
 8004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	ec43 2b10 	vmov	d0, r2, r3
 8004bb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004bb6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004bba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004bbc:	ab04      	add	r3, sp, #16
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	ab03      	add	r3, sp, #12
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	1c62      	adds	r2, r4, #1
 8004bc6:	ab05      	add	r3, sp, #20
 8004bc8:	460f      	mov	r7, r1
 8004bca:	2102      	movs	r1, #2
 8004bcc:	f001 f954 	bl	8005e78 <_dtoa_r>
 8004bd0:	9a05      	ldr	r2, [sp, #20]
 8004bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d105      	bne.n	8004be6 <print_e+0x3a>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f001 f899 	bl	8005d14 <strcpy>
 8004be2:	b007      	add	sp, #28
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be6:	463b      	mov	r3, r7
 8004be8:	7801      	ldrb	r1, [r0, #0]
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	bfc8      	it	gt
 8004bf2:	2501      	movgt	r5, #1
 8004bf4:	212e      	movs	r1, #46	; 0x2e
 8004bf6:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8004bfa:	b10f      	cbz	r7, 8004c00 <print_e+0x54>
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	dc37      	bgt.n	8004c70 <print_e+0xc4>
 8004c00:	2e67      	cmp	r6, #103	; 0x67
 8004c02:	d046      	beq.n	8004c92 <print_e+0xe6>
 8004c04:	2e47      	cmp	r6, #71	; 0x47
 8004c06:	d046      	beq.n	8004c96 <print_e+0xea>
 8004c08:	212e      	movs	r1, #46	; 0x2e
 8004c0a:	2030      	movs	r0, #48	; 0x30
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	dc38      	bgt.n	8004c82 <print_e+0xd6>
 8004c10:	1e51      	subs	r1, r2, #1
 8004c12:	2900      	cmp	r1, #0
 8004c14:	bfb8      	it	lt
 8004c16:	f1c2 0201 	rsblt	r2, r2, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	bfac      	ite	ge
 8004c20:	222b      	movge	r2, #43	; 0x2b
 8004c22:	9205      	strlt	r2, [sp, #20]
 8004c24:	f800 6b02 	strb.w	r6, [r0], #2
 8004c28:	bfa8      	it	ge
 8004c2a:	705a      	strbge	r2, [r3, #1]
 8004c2c:	9a05      	ldr	r2, [sp, #20]
 8004c2e:	bfbc      	itt	lt
 8004c30:	212d      	movlt	r1, #45	; 0x2d
 8004c32:	7059      	strblt	r1, [r3, #1]
 8004c34:	2a63      	cmp	r2, #99	; 0x63
 8004c36:	dd0b      	ble.n	8004c50 <print_e+0xa4>
 8004c38:	2164      	movs	r1, #100	; 0x64
 8004c3a:	fb92 f1f1 	sdiv	r1, r2, r1
 8004c3e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8004c42:	1cd8      	adds	r0, r3, #3
 8004c44:	709c      	strb	r4, [r3, #2]
 8004c46:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004c4a:	fb03 2201 	mla	r2, r3, r1, r2
 8004c4e:	9205      	str	r2, [sp, #20]
 8004c50:	9b05      	ldr	r3, [sp, #20]
 8004c52:	220a      	movs	r2, #10
 8004c54:	fb93 f2f2 	sdiv	r2, r3, r2
 8004c58:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8004c5c:	7001      	strb	r1, [r0, #0]
 8004c5e:	f06f 0109 	mvn.w	r1, #9
 8004c62:	fb01 3302 	mla	r3, r1, r2, r3
 8004c66:	3330      	adds	r3, #48	; 0x30
 8004c68:	7043      	strb	r3, [r0, #1]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	7083      	strb	r3, [r0, #2]
 8004c6e:	e7b8      	b.n	8004be2 <print_e+0x36>
 8004c70:	b10d      	cbz	r5, 8004c76 <print_e+0xca>
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	7805      	ldrb	r5, [r0, #0]
 8004c78:	f803 5b01 	strb.w	r5, [r3], #1
 8004c7c:	3c01      	subs	r4, #1
 8004c7e:	2500      	movs	r5, #0
 8004c80:	e7b9      	b.n	8004bf6 <print_e+0x4a>
 8004c82:	b10d      	cbz	r5, 8004c88 <print_e+0xdc>
 8004c84:	f803 1b01 	strb.w	r1, [r3], #1
 8004c88:	f803 0b01 	strb.w	r0, [r3], #1
 8004c8c:	3c01      	subs	r4, #1
 8004c8e:	2500      	movs	r5, #0
 8004c90:	e7bc      	b.n	8004c0c <print_e+0x60>
 8004c92:	2665      	movs	r6, #101	; 0x65
 8004c94:	e7bc      	b.n	8004c10 <print_e+0x64>
 8004c96:	2645      	movs	r6, #69	; 0x45
 8004c98:	e7ba      	b.n	8004c10 <print_e+0x64>
 8004c9a:	0000      	movs	r0, r0
 8004c9c:	0000      	movs	r0, r0
	...

08004ca0 <_gcvt>:
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	ec55 4b10 	vmov	r4, r5, d0
 8004ca8:	b088      	sub	sp, #32
 8004caa:	4681      	mov	r9, r0
 8004cac:	4688      	mov	r8, r1
 8004cae:	4616      	mov	r6, r2
 8004cb0:	469a      	mov	sl, r3
 8004cb2:	ee10 0a10 	vmov	r0, s0
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4629      	mov	r1, r5
 8004cbc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004cbe:	f7fb ff0d 	bl	8000adc <__aeabi_dcmplt>
 8004cc2:	b110      	cbz	r0, 8004cca <_gcvt+0x2a>
 8004cc4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004cc8:	461d      	mov	r5, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd6:	b138      	cbz	r0, 8004ce8 <_gcvt+0x48>
 8004cd8:	2330      	movs	r3, #48	; 0x30
 8004cda:	7033      	strb	r3, [r6, #0]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	7073      	strb	r3, [r6, #1]
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	b008      	add	sp, #32
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	a34b      	add	r3, pc, #300	; (adr r3, 8004e18 <_gcvt+0x178>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fefd 	bl	8000af0 <__aeabi_dcmple>
 8004cf6:	b158      	cbz	r0, 8004d10 <_gcvt+0x70>
 8004cf8:	f108 31ff 	add.w	r1, r8, #4294967295
 8004cfc:	9100      	str	r1, [sp, #0]
 8004cfe:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	4631      	mov	r1, r6
 8004d08:	4648      	mov	r0, r9
 8004d0a:	f7ff ff4f 	bl	8004bac <print_e>
 8004d0e:	e7e7      	b.n	8004ce0 <_gcvt+0x40>
 8004d10:	4640      	mov	r0, r8
 8004d12:	f000 fc09 	bl	8005528 <_mprec_log10>
 8004d16:	4622      	mov	r2, r4
 8004d18:	ec51 0b10 	vmov	r0, r1, d0
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f7fb fee7 	bl	8000af0 <__aeabi_dcmple>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d1e8      	bne.n	8004cf8 <_gcvt+0x58>
 8004d26:	ab07      	add	r3, sp, #28
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	ab06      	add	r3, sp, #24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4642      	mov	r2, r8
 8004d30:	ab05      	add	r3, sp, #20
 8004d32:	ec45 4b10 	vmov	d0, r4, r5
 8004d36:	2102      	movs	r1, #2
 8004d38:	4648      	mov	r0, r9
 8004d3a:	f001 f89d 	bl	8005e78 <_dtoa_r>
 8004d3e:	9a05      	ldr	r2, [sp, #20]
 8004d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d00e      	beq.n	8004d66 <_gcvt+0xc6>
 8004d48:	4633      	mov	r3, r6
 8004d4a:	44b0      	add	r8, r6
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004d52:	9c05      	ldr	r4, [sp, #20]
 8004d54:	eba8 0203 	sub.w	r2, r8, r3
 8004d58:	b109      	cbz	r1, 8004d5e <_gcvt+0xbe>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	dc08      	bgt.n	8004d70 <_gcvt+0xd0>
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004d64:	e00d      	b.n	8004d82 <_gcvt+0xe2>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 ffd3 	bl	8005d14 <strcpy>
 8004d6e:	e7b7      	b.n	8004ce0 <_gcvt+0x40>
 8004d70:	3c01      	subs	r4, #1
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	9405      	str	r4, [sp, #20]
 8004d78:	e7e8      	b.n	8004d4c <_gcvt+0xac>
 8004d7a:	f803 cb01 	strb.w	ip, [r3], #1
 8004d7e:	3a01      	subs	r2, #1
 8004d80:	2101      	movs	r1, #1
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	4620      	mov	r0, r4
 8004d86:	dc2a      	bgt.n	8004dde <_gcvt+0x13e>
 8004d88:	b101      	cbz	r1, 8004d8c <_gcvt+0xec>
 8004d8a:	9405      	str	r4, [sp, #20]
 8004d8c:	b90f      	cbnz	r7, 8004d92 <_gcvt+0xf2>
 8004d8e:	7829      	ldrb	r1, [r5, #0]
 8004d90:	b311      	cbz	r1, 8004dd8 <_gcvt+0x138>
 8004d92:	42b3      	cmp	r3, r6
 8004d94:	bf04      	itt	eq
 8004d96:	2130      	moveq	r1, #48	; 0x30
 8004d98:	f803 1b01 	strbeq.w	r1, [r3], #1
 8004d9c:	212e      	movs	r1, #46	; 0x2e
 8004d9e:	7019      	strb	r1, [r3, #0]
 8004da0:	9905      	ldr	r1, [sp, #20]
 8004da2:	4618      	mov	r0, r3
 8004da4:	2400      	movs	r4, #0
 8004da6:	eba1 0c03 	sub.w	ip, r1, r3
 8004daa:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004dae:	eb1c 0f00 	cmn.w	ip, r0
 8004db2:	d41c      	bmi.n	8004dee <_gcvt+0x14e>
 8004db4:	2900      	cmp	r1, #0
 8004db6:	f1c1 0000 	rsb	r0, r1, #0
 8004dba:	bfc8      	it	gt
 8004dbc:	2000      	movgt	r0, #0
 8004dbe:	f100 0c01 	add.w	ip, r0, #1
 8004dc2:	4463      	add	r3, ip
 8004dc4:	4401      	add	r1, r0
 8004dc6:	b104      	cbz	r4, 8004dca <_gcvt+0x12a>
 8004dc8:	9105      	str	r1, [sp, #20]
 8004dca:	1e69      	subs	r1, r5, #1
 8004dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004dd0:	b108      	cbz	r0, 8004dd6 <_gcvt+0x136>
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	dc0f      	bgt.n	8004df6 <_gcvt+0x156>
 8004dd6:	b9df      	cbnz	r7, 8004e10 <_gcvt+0x170>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e780      	b.n	8004ce0 <_gcvt+0x40>
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	f104 34ff 	add.w	r4, r4, #4294967295
 8004de4:	dcc9      	bgt.n	8004d7a <_gcvt+0xda>
 8004de6:	2900      	cmp	r1, #0
 8004de8:	d0d0      	beq.n	8004d8c <_gcvt+0xec>
 8004dea:	9005      	str	r0, [sp, #20]
 8004dec:	e7ce      	b.n	8004d8c <_gcvt+0xec>
 8004dee:	f800 ef01 	strb.w	lr, [r0, #1]!
 8004df2:	2401      	movs	r4, #1
 8004df4:	e7db      	b.n	8004dae <_gcvt+0x10e>
 8004df6:	f803 0b01 	strb.w	r0, [r3], #1
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	e7e6      	b.n	8004dcc <_gcvt+0x12c>
 8004dfe:	f801 5b01 	strb.w	r5, [r1], #1
 8004e02:	1a60      	subs	r0, r4, r1
 8004e04:	2800      	cmp	r0, #0
 8004e06:	dcfa      	bgt.n	8004dfe <_gcvt+0x15e>
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	bfa8      	it	ge
 8004e0c:	189b      	addge	r3, r3, r2
 8004e0e:	e7e3      	b.n	8004dd8 <_gcvt+0x138>
 8004e10:	4619      	mov	r1, r3
 8004e12:	189c      	adds	r4, r3, r2
 8004e14:	2530      	movs	r5, #48	; 0x30
 8004e16:	e7f4      	b.n	8004e02 <_gcvt+0x162>
 8004e18:	eb1c432d 	.word	0xeb1c432d
 8004e1c:	3f1a36e2 	.word	0x3f1a36e2

08004e20 <_Balloc>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e24:	4604      	mov	r4, r0
 8004e26:	460d      	mov	r5, r1
 8004e28:	b976      	cbnz	r6, 8004e48 <_Balloc+0x28>
 8004e2a:	2010      	movs	r0, #16
 8004e2c:	f001 fe24 	bl	8006a78 <malloc>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6260      	str	r0, [r4, #36]	; 0x24
 8004e34:	b920      	cbnz	r0, 8004e40 <_Balloc+0x20>
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <_Balloc+0x78>)
 8004e38:	4818      	ldr	r0, [pc, #96]	; (8004e9c <_Balloc+0x7c>)
 8004e3a:	2166      	movs	r1, #102	; 0x66
 8004e3c:	f000 ff72 	bl	8005d24 <__assert_func>
 8004e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e44:	6006      	str	r6, [r0, #0]
 8004e46:	60c6      	str	r6, [r0, #12]
 8004e48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e4a:	68f3      	ldr	r3, [r6, #12]
 8004e4c:	b183      	cbz	r3, 8004e70 <_Balloc+0x50>
 8004e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e56:	b9b8      	cbnz	r0, 8004e88 <_Balloc+0x68>
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f605 	lsl.w	r6, r1, r5
 8004e5e:	1d72      	adds	r2, r6, #5
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 fb7e 	bl	8005564 <_calloc_r>
 8004e68:	b160      	cbz	r0, 8004e84 <_Balloc+0x64>
 8004e6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e6e:	e00e      	b.n	8004e8e <_Balloc+0x6e>
 8004e70:	2221      	movs	r2, #33	; 0x21
 8004e72:	2104      	movs	r1, #4
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 fb75 	bl	8005564 <_calloc_r>
 8004e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e7c:	60f0      	str	r0, [r6, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e4      	bne.n	8004e4e <_Balloc+0x2e>
 8004e84:	2000      	movs	r0, #0
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	6802      	ldr	r2, [r0, #0]
 8004e8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e94:	e7f7      	b.n	8004e86 <_Balloc+0x66>
 8004e96:	bf00      	nop
 8004e98:	0800766c 	.word	0x0800766c
 8004e9c:	08007683 	.word	0x08007683

08004ea0 <_Bfree>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	b976      	cbnz	r6, 8004ec8 <_Bfree+0x28>
 8004eaa:	2010      	movs	r0, #16
 8004eac:	f001 fde4 	bl	8006a78 <malloc>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6268      	str	r0, [r5, #36]	; 0x24
 8004eb4:	b920      	cbnz	r0, 8004ec0 <_Bfree+0x20>
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <_Bfree+0x3c>)
 8004eb8:	4809      	ldr	r0, [pc, #36]	; (8004ee0 <_Bfree+0x40>)
 8004eba:	218a      	movs	r1, #138	; 0x8a
 8004ebc:	f000 ff32 	bl	8005d24 <__assert_func>
 8004ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ec4:	6006      	str	r6, [r0, #0]
 8004ec6:	60c6      	str	r6, [r0, #12]
 8004ec8:	b13c      	cbz	r4, 8004eda <_Bfree+0x3a>
 8004eca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ed4:	6021      	str	r1, [r4, #0]
 8004ed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	0800766c 	.word	0x0800766c
 8004ee0:	08007683 	.word	0x08007683

08004ee4 <__multadd>:
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	690d      	ldr	r5, [r1, #16]
 8004eea:	4607      	mov	r7, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	461e      	mov	r6, r3
 8004ef0:	f101 0c14 	add.w	ip, r1, #20
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f8dc 3000 	ldr.w	r3, [ip]
 8004efa:	b299      	uxth	r1, r3
 8004efc:	fb02 6101 	mla	r1, r2, r1, r6
 8004f00:	0c1e      	lsrs	r6, r3, #16
 8004f02:	0c0b      	lsrs	r3, r1, #16
 8004f04:	fb02 3306 	mla	r3, r2, r6, r3
 8004f08:	b289      	uxth	r1, r1
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f10:	4285      	cmp	r5, r0
 8004f12:	f84c 1b04 	str.w	r1, [ip], #4
 8004f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f1a:	dcec      	bgt.n	8004ef6 <__multadd+0x12>
 8004f1c:	b30e      	cbz	r6, 8004f62 <__multadd+0x7e>
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc19      	bgt.n	8004f58 <__multadd+0x74>
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	4638      	mov	r0, r7
 8004f28:	3101      	adds	r1, #1
 8004f2a:	f7ff ff79 	bl	8004e20 <_Balloc>
 8004f2e:	4680      	mov	r8, r0
 8004f30:	b928      	cbnz	r0, 8004f3e <__multadd+0x5a>
 8004f32:	4602      	mov	r2, r0
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <__multadd+0x84>)
 8004f36:	480d      	ldr	r0, [pc, #52]	; (8004f6c <__multadd+0x88>)
 8004f38:	21b5      	movs	r1, #181	; 0xb5
 8004f3a:	f000 fef3 	bl	8005d24 <__assert_func>
 8004f3e:	6922      	ldr	r2, [r4, #16]
 8004f40:	3202      	adds	r2, #2
 8004f42:	f104 010c 	add.w	r1, r4, #12
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	300c      	adds	r0, #12
 8004f4a:	f001 fd9d 	bl	8006a88 <memcpy>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff ffa5 	bl	8004ea0 <_Bfree>
 8004f56:	4644      	mov	r4, r8
 8004f58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	615e      	str	r6, [r3, #20]
 8004f60:	6125      	str	r5, [r4, #16]
 8004f62:	4620      	mov	r0, r4
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	080076df 	.word	0x080076df
 8004f6c:	08007683 	.word	0x08007683

08004f70 <__hi0bits>:
 8004f70:	0c03      	lsrs	r3, r0, #16
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	b9d3      	cbnz	r3, 8004fac <__hi0bits+0x3c>
 8004f76:	0400      	lsls	r0, r0, #16
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f7e:	bf04      	itt	eq
 8004f80:	0200      	lsleq	r0, r0, #8
 8004f82:	3308      	addeq	r3, #8
 8004f84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f88:	bf04      	itt	eq
 8004f8a:	0100      	lsleq	r0, r0, #4
 8004f8c:	3304      	addeq	r3, #4
 8004f8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f92:	bf04      	itt	eq
 8004f94:	0080      	lsleq	r0, r0, #2
 8004f96:	3302      	addeq	r3, #2
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	db05      	blt.n	8004fa8 <__hi0bits+0x38>
 8004f9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004fa0:	f103 0301 	add.w	r3, r3, #1
 8004fa4:	bf08      	it	eq
 8004fa6:	2320      	moveq	r3, #32
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4770      	bx	lr
 8004fac:	2300      	movs	r3, #0
 8004fae:	e7e4      	b.n	8004f7a <__hi0bits+0xa>

08004fb0 <__lo0bits>:
 8004fb0:	6803      	ldr	r3, [r0, #0]
 8004fb2:	f013 0207 	ands.w	r2, r3, #7
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	d00b      	beq.n	8004fd2 <__lo0bits+0x22>
 8004fba:	07da      	lsls	r2, r3, #31
 8004fbc:	d423      	bmi.n	8005006 <__lo0bits+0x56>
 8004fbe:	0798      	lsls	r0, r3, #30
 8004fc0:	bf49      	itett	mi
 8004fc2:	085b      	lsrmi	r3, r3, #1
 8004fc4:	089b      	lsrpl	r3, r3, #2
 8004fc6:	2001      	movmi	r0, #1
 8004fc8:	600b      	strmi	r3, [r1, #0]
 8004fca:	bf5c      	itt	pl
 8004fcc:	600b      	strpl	r3, [r1, #0]
 8004fce:	2002      	movpl	r0, #2
 8004fd0:	4770      	bx	lr
 8004fd2:	b298      	uxth	r0, r3
 8004fd4:	b9a8      	cbnz	r0, 8005002 <__lo0bits+0x52>
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	2010      	movs	r0, #16
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	b90a      	cbnz	r2, 8004fe2 <__lo0bits+0x32>
 8004fde:	3008      	adds	r0, #8
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	071a      	lsls	r2, r3, #28
 8004fe4:	bf04      	itt	eq
 8004fe6:	091b      	lsreq	r3, r3, #4
 8004fe8:	3004      	addeq	r0, #4
 8004fea:	079a      	lsls	r2, r3, #30
 8004fec:	bf04      	itt	eq
 8004fee:	089b      	lsreq	r3, r3, #2
 8004ff0:	3002      	addeq	r0, #2
 8004ff2:	07da      	lsls	r2, r3, #31
 8004ff4:	d403      	bmi.n	8004ffe <__lo0bits+0x4e>
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	f100 0001 	add.w	r0, r0, #1
 8004ffc:	d005      	beq.n	800500a <__lo0bits+0x5a>
 8004ffe:	600b      	str	r3, [r1, #0]
 8005000:	4770      	bx	lr
 8005002:	4610      	mov	r0, r2
 8005004:	e7e9      	b.n	8004fda <__lo0bits+0x2a>
 8005006:	2000      	movs	r0, #0
 8005008:	4770      	bx	lr
 800500a:	2020      	movs	r0, #32
 800500c:	4770      	bx	lr
	...

08005010 <__i2b>:
 8005010:	b510      	push	{r4, lr}
 8005012:	460c      	mov	r4, r1
 8005014:	2101      	movs	r1, #1
 8005016:	f7ff ff03 	bl	8004e20 <_Balloc>
 800501a:	4602      	mov	r2, r0
 800501c:	b928      	cbnz	r0, 800502a <__i2b+0x1a>
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <__i2b+0x24>)
 8005020:	4805      	ldr	r0, [pc, #20]	; (8005038 <__i2b+0x28>)
 8005022:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005026:	f000 fe7d 	bl	8005d24 <__assert_func>
 800502a:	2301      	movs	r3, #1
 800502c:	6144      	str	r4, [r0, #20]
 800502e:	6103      	str	r3, [r0, #16]
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	080076df 	.word	0x080076df
 8005038:	08007683 	.word	0x08007683

0800503c <__multiply>:
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	4691      	mov	r9, r2
 8005042:	690a      	ldr	r2, [r1, #16]
 8005044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	bfb8      	it	lt
 800504c:	460b      	movlt	r3, r1
 800504e:	460c      	mov	r4, r1
 8005050:	bfbc      	itt	lt
 8005052:	464c      	movlt	r4, r9
 8005054:	4699      	movlt	r9, r3
 8005056:	6927      	ldr	r7, [r4, #16]
 8005058:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	6861      	ldr	r1, [r4, #4]
 8005060:	eb07 060a 	add.w	r6, r7, sl
 8005064:	42b3      	cmp	r3, r6
 8005066:	b085      	sub	sp, #20
 8005068:	bfb8      	it	lt
 800506a:	3101      	addlt	r1, #1
 800506c:	f7ff fed8 	bl	8004e20 <_Balloc>
 8005070:	b930      	cbnz	r0, 8005080 <__multiply+0x44>
 8005072:	4602      	mov	r2, r0
 8005074:	4b44      	ldr	r3, [pc, #272]	; (8005188 <__multiply+0x14c>)
 8005076:	4845      	ldr	r0, [pc, #276]	; (800518c <__multiply+0x150>)
 8005078:	f240 115d 	movw	r1, #349	; 0x15d
 800507c:	f000 fe52 	bl	8005d24 <__assert_func>
 8005080:	f100 0514 	add.w	r5, r0, #20
 8005084:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005088:	462b      	mov	r3, r5
 800508a:	2200      	movs	r2, #0
 800508c:	4543      	cmp	r3, r8
 800508e:	d321      	bcc.n	80050d4 <__multiply+0x98>
 8005090:	f104 0314 	add.w	r3, r4, #20
 8005094:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005098:	f109 0314 	add.w	r3, r9, #20
 800509c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80050a0:	9202      	str	r2, [sp, #8]
 80050a2:	1b3a      	subs	r2, r7, r4
 80050a4:	3a15      	subs	r2, #21
 80050a6:	f022 0203 	bic.w	r2, r2, #3
 80050aa:	3204      	adds	r2, #4
 80050ac:	f104 0115 	add.w	r1, r4, #21
 80050b0:	428f      	cmp	r7, r1
 80050b2:	bf38      	it	cc
 80050b4:	2204      	movcc	r2, #4
 80050b6:	9201      	str	r2, [sp, #4]
 80050b8:	9a02      	ldr	r2, [sp, #8]
 80050ba:	9303      	str	r3, [sp, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d80c      	bhi.n	80050da <__multiply+0x9e>
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	dd03      	ble.n	80050cc <__multiply+0x90>
 80050c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05a      	beq.n	8005182 <__multiply+0x146>
 80050cc:	6106      	str	r6, [r0, #16]
 80050ce:	b005      	add	sp, #20
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	f843 2b04 	str.w	r2, [r3], #4
 80050d8:	e7d8      	b.n	800508c <__multiply+0x50>
 80050da:	f8b3 a000 	ldrh.w	sl, [r3]
 80050de:	f1ba 0f00 	cmp.w	sl, #0
 80050e2:	d024      	beq.n	800512e <__multiply+0xf2>
 80050e4:	f104 0e14 	add.w	lr, r4, #20
 80050e8:	46a9      	mov	r9, r5
 80050ea:	f04f 0c00 	mov.w	ip, #0
 80050ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80050f2:	f8d9 1000 	ldr.w	r1, [r9]
 80050f6:	fa1f fb82 	uxth.w	fp, r2
 80050fa:	b289      	uxth	r1, r1
 80050fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8005100:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005104:	f8d9 2000 	ldr.w	r2, [r9]
 8005108:	4461      	add	r1, ip
 800510a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800510e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005112:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005116:	b289      	uxth	r1, r1
 8005118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800511c:	4577      	cmp	r7, lr
 800511e:	f849 1b04 	str.w	r1, [r9], #4
 8005122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005126:	d8e2      	bhi.n	80050ee <__multiply+0xb2>
 8005128:	9a01      	ldr	r2, [sp, #4]
 800512a:	f845 c002 	str.w	ip, [r5, r2]
 800512e:	9a03      	ldr	r2, [sp, #12]
 8005130:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005134:	3304      	adds	r3, #4
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	d020      	beq.n	800517e <__multiply+0x142>
 800513c:	6829      	ldr	r1, [r5, #0]
 800513e:	f104 0c14 	add.w	ip, r4, #20
 8005142:	46ae      	mov	lr, r5
 8005144:	f04f 0a00 	mov.w	sl, #0
 8005148:	f8bc b000 	ldrh.w	fp, [ip]
 800514c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005150:	fb09 220b 	mla	r2, r9, fp, r2
 8005154:	4492      	add	sl, r2
 8005156:	b289      	uxth	r1, r1
 8005158:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800515c:	f84e 1b04 	str.w	r1, [lr], #4
 8005160:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005164:	f8be 1000 	ldrh.w	r1, [lr]
 8005168:	0c12      	lsrs	r2, r2, #16
 800516a:	fb09 1102 	mla	r1, r9, r2, r1
 800516e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005172:	4567      	cmp	r7, ip
 8005174:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005178:	d8e6      	bhi.n	8005148 <__multiply+0x10c>
 800517a:	9a01      	ldr	r2, [sp, #4]
 800517c:	50a9      	str	r1, [r5, r2]
 800517e:	3504      	adds	r5, #4
 8005180:	e79a      	b.n	80050b8 <__multiply+0x7c>
 8005182:	3e01      	subs	r6, #1
 8005184:	e79c      	b.n	80050c0 <__multiply+0x84>
 8005186:	bf00      	nop
 8005188:	080076df 	.word	0x080076df
 800518c:	08007683 	.word	0x08007683

08005190 <__pow5mult>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4615      	mov	r5, r2
 8005196:	f012 0203 	ands.w	r2, r2, #3
 800519a:	4606      	mov	r6, r0
 800519c:	460f      	mov	r7, r1
 800519e:	d007      	beq.n	80051b0 <__pow5mult+0x20>
 80051a0:	4c25      	ldr	r4, [pc, #148]	; (8005238 <__pow5mult+0xa8>)
 80051a2:	3a01      	subs	r2, #1
 80051a4:	2300      	movs	r3, #0
 80051a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051aa:	f7ff fe9b 	bl	8004ee4 <__multadd>
 80051ae:	4607      	mov	r7, r0
 80051b0:	10ad      	asrs	r5, r5, #2
 80051b2:	d03d      	beq.n	8005230 <__pow5mult+0xa0>
 80051b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80051b6:	b97c      	cbnz	r4, 80051d8 <__pow5mult+0x48>
 80051b8:	2010      	movs	r0, #16
 80051ba:	f001 fc5d 	bl	8006a78 <malloc>
 80051be:	4602      	mov	r2, r0
 80051c0:	6270      	str	r0, [r6, #36]	; 0x24
 80051c2:	b928      	cbnz	r0, 80051d0 <__pow5mult+0x40>
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <__pow5mult+0xac>)
 80051c6:	481e      	ldr	r0, [pc, #120]	; (8005240 <__pow5mult+0xb0>)
 80051c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80051cc:	f000 fdaa 	bl	8005d24 <__assert_func>
 80051d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051d4:	6004      	str	r4, [r0, #0]
 80051d6:	60c4      	str	r4, [r0, #12]
 80051d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051e0:	b94c      	cbnz	r4, 80051f6 <__pow5mult+0x66>
 80051e2:	f240 2171 	movw	r1, #625	; 0x271
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ff12 	bl	8005010 <__i2b>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80051f2:	4604      	mov	r4, r0
 80051f4:	6003      	str	r3, [r0, #0]
 80051f6:	f04f 0900 	mov.w	r9, #0
 80051fa:	07eb      	lsls	r3, r5, #31
 80051fc:	d50a      	bpl.n	8005214 <__pow5mult+0x84>
 80051fe:	4639      	mov	r1, r7
 8005200:	4622      	mov	r2, r4
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ff1a 	bl	800503c <__multiply>
 8005208:	4639      	mov	r1, r7
 800520a:	4680      	mov	r8, r0
 800520c:	4630      	mov	r0, r6
 800520e:	f7ff fe47 	bl	8004ea0 <_Bfree>
 8005212:	4647      	mov	r7, r8
 8005214:	106d      	asrs	r5, r5, #1
 8005216:	d00b      	beq.n	8005230 <__pow5mult+0xa0>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	b938      	cbnz	r0, 800522c <__pow5mult+0x9c>
 800521c:	4622      	mov	r2, r4
 800521e:	4621      	mov	r1, r4
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ff0b 	bl	800503c <__multiply>
 8005226:	6020      	str	r0, [r4, #0]
 8005228:	f8c0 9000 	str.w	r9, [r0]
 800522c:	4604      	mov	r4, r0
 800522e:	e7e4      	b.n	80051fa <__pow5mult+0x6a>
 8005230:	4638      	mov	r0, r7
 8005232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005236:	bf00      	nop
 8005238:	080077e0 	.word	0x080077e0
 800523c:	0800766c 	.word	0x0800766c
 8005240:	08007683 	.word	0x08007683

08005244 <__lshift>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	460c      	mov	r4, r1
 800524a:	6849      	ldr	r1, [r1, #4]
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	4607      	mov	r7, r0
 8005256:	4691      	mov	r9, r2
 8005258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800525c:	f108 0601 	add.w	r6, r8, #1
 8005260:	42b3      	cmp	r3, r6
 8005262:	db0b      	blt.n	800527c <__lshift+0x38>
 8005264:	4638      	mov	r0, r7
 8005266:	f7ff fddb 	bl	8004e20 <_Balloc>
 800526a:	4605      	mov	r5, r0
 800526c:	b948      	cbnz	r0, 8005282 <__lshift+0x3e>
 800526e:	4602      	mov	r2, r0
 8005270:	4b2a      	ldr	r3, [pc, #168]	; (800531c <__lshift+0xd8>)
 8005272:	482b      	ldr	r0, [pc, #172]	; (8005320 <__lshift+0xdc>)
 8005274:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005278:	f000 fd54 	bl	8005d24 <__assert_func>
 800527c:	3101      	adds	r1, #1
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	e7ee      	b.n	8005260 <__lshift+0x1c>
 8005282:	2300      	movs	r3, #0
 8005284:	f100 0114 	add.w	r1, r0, #20
 8005288:	f100 0210 	add.w	r2, r0, #16
 800528c:	4618      	mov	r0, r3
 800528e:	4553      	cmp	r3, sl
 8005290:	db37      	blt.n	8005302 <__lshift+0xbe>
 8005292:	6920      	ldr	r0, [r4, #16]
 8005294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005298:	f104 0314 	add.w	r3, r4, #20
 800529c:	f019 091f 	ands.w	r9, r9, #31
 80052a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052a8:	d02f      	beq.n	800530a <__lshift+0xc6>
 80052aa:	f1c9 0e20 	rsb	lr, r9, #32
 80052ae:	468a      	mov	sl, r1
 80052b0:	f04f 0c00 	mov.w	ip, #0
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	fa02 f209 	lsl.w	r2, r2, r9
 80052ba:	ea42 020c 	orr.w	r2, r2, ip
 80052be:	f84a 2b04 	str.w	r2, [sl], #4
 80052c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c6:	4298      	cmp	r0, r3
 80052c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80052cc:	d8f2      	bhi.n	80052b4 <__lshift+0x70>
 80052ce:	1b03      	subs	r3, r0, r4
 80052d0:	3b15      	subs	r3, #21
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	3304      	adds	r3, #4
 80052d8:	f104 0215 	add.w	r2, r4, #21
 80052dc:	4290      	cmp	r0, r2
 80052de:	bf38      	it	cc
 80052e0:	2304      	movcc	r3, #4
 80052e2:	f841 c003 	str.w	ip, [r1, r3]
 80052e6:	f1bc 0f00 	cmp.w	ip, #0
 80052ea:	d001      	beq.n	80052f0 <__lshift+0xac>
 80052ec:	f108 0602 	add.w	r6, r8, #2
 80052f0:	3e01      	subs	r6, #1
 80052f2:	4638      	mov	r0, r7
 80052f4:	612e      	str	r6, [r5, #16]
 80052f6:	4621      	mov	r1, r4
 80052f8:	f7ff fdd2 	bl	8004ea0 <_Bfree>
 80052fc:	4628      	mov	r0, r5
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	f842 0f04 	str.w	r0, [r2, #4]!
 8005306:	3301      	adds	r3, #1
 8005308:	e7c1      	b.n	800528e <__lshift+0x4a>
 800530a:	3904      	subs	r1, #4
 800530c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005310:	f841 2f04 	str.w	r2, [r1, #4]!
 8005314:	4298      	cmp	r0, r3
 8005316:	d8f9      	bhi.n	800530c <__lshift+0xc8>
 8005318:	e7ea      	b.n	80052f0 <__lshift+0xac>
 800531a:	bf00      	nop
 800531c:	080076df 	.word	0x080076df
 8005320:	08007683 	.word	0x08007683

08005324 <__mcmp>:
 8005324:	b530      	push	{r4, r5, lr}
 8005326:	6902      	ldr	r2, [r0, #16]
 8005328:	690c      	ldr	r4, [r1, #16]
 800532a:	1b12      	subs	r2, r2, r4
 800532c:	d10e      	bne.n	800534c <__mcmp+0x28>
 800532e:	f100 0314 	add.w	r3, r0, #20
 8005332:	3114      	adds	r1, #20
 8005334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800533c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005344:	42a5      	cmp	r5, r4
 8005346:	d003      	beq.n	8005350 <__mcmp+0x2c>
 8005348:	d305      	bcc.n	8005356 <__mcmp+0x32>
 800534a:	2201      	movs	r2, #1
 800534c:	4610      	mov	r0, r2
 800534e:	bd30      	pop	{r4, r5, pc}
 8005350:	4283      	cmp	r3, r0
 8005352:	d3f3      	bcc.n	800533c <__mcmp+0x18>
 8005354:	e7fa      	b.n	800534c <__mcmp+0x28>
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	e7f7      	b.n	800534c <__mcmp+0x28>

0800535c <__mdiff>:
 800535c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	460c      	mov	r4, r1
 8005362:	4606      	mov	r6, r0
 8005364:	4611      	mov	r1, r2
 8005366:	4620      	mov	r0, r4
 8005368:	4690      	mov	r8, r2
 800536a:	f7ff ffdb 	bl	8005324 <__mcmp>
 800536e:	1e05      	subs	r5, r0, #0
 8005370:	d110      	bne.n	8005394 <__mdiff+0x38>
 8005372:	4629      	mov	r1, r5
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff fd53 	bl	8004e20 <_Balloc>
 800537a:	b930      	cbnz	r0, 800538a <__mdiff+0x2e>
 800537c:	4b3a      	ldr	r3, [pc, #232]	; (8005468 <__mdiff+0x10c>)
 800537e:	4602      	mov	r2, r0
 8005380:	f240 2132 	movw	r1, #562	; 0x232
 8005384:	4839      	ldr	r0, [pc, #228]	; (800546c <__mdiff+0x110>)
 8005386:	f000 fccd 	bl	8005d24 <__assert_func>
 800538a:	2301      	movs	r3, #1
 800538c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005394:	bfa4      	itt	ge
 8005396:	4643      	movge	r3, r8
 8005398:	46a0      	movge	r8, r4
 800539a:	4630      	mov	r0, r6
 800539c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80053a0:	bfa6      	itte	ge
 80053a2:	461c      	movge	r4, r3
 80053a4:	2500      	movge	r5, #0
 80053a6:	2501      	movlt	r5, #1
 80053a8:	f7ff fd3a 	bl	8004e20 <_Balloc>
 80053ac:	b920      	cbnz	r0, 80053b8 <__mdiff+0x5c>
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <__mdiff+0x10c>)
 80053b0:	4602      	mov	r2, r0
 80053b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80053b6:	e7e5      	b.n	8005384 <__mdiff+0x28>
 80053b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80053bc:	6926      	ldr	r6, [r4, #16]
 80053be:	60c5      	str	r5, [r0, #12]
 80053c0:	f104 0914 	add.w	r9, r4, #20
 80053c4:	f108 0514 	add.w	r5, r8, #20
 80053c8:	f100 0e14 	add.w	lr, r0, #20
 80053cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80053d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80053d4:	f108 0210 	add.w	r2, r8, #16
 80053d8:	46f2      	mov	sl, lr
 80053da:	2100      	movs	r1, #0
 80053dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80053e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80053e4:	fa1f f883 	uxth.w	r8, r3
 80053e8:	fa11 f18b 	uxtah	r1, r1, fp
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	eba1 0808 	sub.w	r8, r1, r8
 80053f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80053f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80053fa:	fa1f f888 	uxth.w	r8, r8
 80053fe:	1419      	asrs	r1, r3, #16
 8005400:	454e      	cmp	r6, r9
 8005402:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005406:	f84a 3b04 	str.w	r3, [sl], #4
 800540a:	d8e7      	bhi.n	80053dc <__mdiff+0x80>
 800540c:	1b33      	subs	r3, r6, r4
 800540e:	3b15      	subs	r3, #21
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	3304      	adds	r3, #4
 8005416:	3415      	adds	r4, #21
 8005418:	42a6      	cmp	r6, r4
 800541a:	bf38      	it	cc
 800541c:	2304      	movcc	r3, #4
 800541e:	441d      	add	r5, r3
 8005420:	4473      	add	r3, lr
 8005422:	469e      	mov	lr, r3
 8005424:	462e      	mov	r6, r5
 8005426:	4566      	cmp	r6, ip
 8005428:	d30e      	bcc.n	8005448 <__mdiff+0xec>
 800542a:	f10c 0203 	add.w	r2, ip, #3
 800542e:	1b52      	subs	r2, r2, r5
 8005430:	f022 0203 	bic.w	r2, r2, #3
 8005434:	3d03      	subs	r5, #3
 8005436:	45ac      	cmp	ip, r5
 8005438:	bf38      	it	cc
 800543a:	2200      	movcc	r2, #0
 800543c:	441a      	add	r2, r3
 800543e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005442:	b17b      	cbz	r3, 8005464 <__mdiff+0x108>
 8005444:	6107      	str	r7, [r0, #16]
 8005446:	e7a3      	b.n	8005390 <__mdiff+0x34>
 8005448:	f856 8b04 	ldr.w	r8, [r6], #4
 800544c:	fa11 f288 	uxtah	r2, r1, r8
 8005450:	1414      	asrs	r4, r2, #16
 8005452:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005456:	b292      	uxth	r2, r2
 8005458:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800545c:	f84e 2b04 	str.w	r2, [lr], #4
 8005460:	1421      	asrs	r1, r4, #16
 8005462:	e7e0      	b.n	8005426 <__mdiff+0xca>
 8005464:	3f01      	subs	r7, #1
 8005466:	e7ea      	b.n	800543e <__mdiff+0xe2>
 8005468:	080076df 	.word	0x080076df
 800546c:	08007683 	.word	0x08007683

08005470 <__d2b>:
 8005470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005474:	4689      	mov	r9, r1
 8005476:	2101      	movs	r1, #1
 8005478:	ec57 6b10 	vmov	r6, r7, d0
 800547c:	4690      	mov	r8, r2
 800547e:	f7ff fccf 	bl	8004e20 <_Balloc>
 8005482:	4604      	mov	r4, r0
 8005484:	b930      	cbnz	r0, 8005494 <__d2b+0x24>
 8005486:	4602      	mov	r2, r0
 8005488:	4b25      	ldr	r3, [pc, #148]	; (8005520 <__d2b+0xb0>)
 800548a:	4826      	ldr	r0, [pc, #152]	; (8005524 <__d2b+0xb4>)
 800548c:	f240 310a 	movw	r1, #778	; 0x30a
 8005490:	f000 fc48 	bl	8005d24 <__assert_func>
 8005494:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800549c:	bb35      	cbnz	r5, 80054ec <__d2b+0x7c>
 800549e:	2e00      	cmp	r6, #0
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	d028      	beq.n	80054f6 <__d2b+0x86>
 80054a4:	4668      	mov	r0, sp
 80054a6:	9600      	str	r6, [sp, #0]
 80054a8:	f7ff fd82 	bl	8004fb0 <__lo0bits>
 80054ac:	9900      	ldr	r1, [sp, #0]
 80054ae:	b300      	cbz	r0, 80054f2 <__d2b+0x82>
 80054b0:	9a01      	ldr	r2, [sp, #4]
 80054b2:	f1c0 0320 	rsb	r3, r0, #32
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	430b      	orrs	r3, r1
 80054bc:	40c2      	lsrs	r2, r0
 80054be:	6163      	str	r3, [r4, #20]
 80054c0:	9201      	str	r2, [sp, #4]
 80054c2:	9b01      	ldr	r3, [sp, #4]
 80054c4:	61a3      	str	r3, [r4, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf14      	ite	ne
 80054ca:	2202      	movne	r2, #2
 80054cc:	2201      	moveq	r2, #1
 80054ce:	6122      	str	r2, [r4, #16]
 80054d0:	b1d5      	cbz	r5, 8005508 <__d2b+0x98>
 80054d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80054d6:	4405      	add	r5, r0
 80054d8:	f8c9 5000 	str.w	r5, [r9]
 80054dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80054e0:	f8c8 0000 	str.w	r0, [r8]
 80054e4:	4620      	mov	r0, r4
 80054e6:	b003      	add	sp, #12
 80054e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f0:	e7d5      	b.n	800549e <__d2b+0x2e>
 80054f2:	6161      	str	r1, [r4, #20]
 80054f4:	e7e5      	b.n	80054c2 <__d2b+0x52>
 80054f6:	a801      	add	r0, sp, #4
 80054f8:	f7ff fd5a 	bl	8004fb0 <__lo0bits>
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	6163      	str	r3, [r4, #20]
 8005500:	2201      	movs	r2, #1
 8005502:	6122      	str	r2, [r4, #16]
 8005504:	3020      	adds	r0, #32
 8005506:	e7e3      	b.n	80054d0 <__d2b+0x60>
 8005508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800550c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005510:	f8c9 0000 	str.w	r0, [r9]
 8005514:	6918      	ldr	r0, [r3, #16]
 8005516:	f7ff fd2b 	bl	8004f70 <__hi0bits>
 800551a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800551e:	e7df      	b.n	80054e0 <__d2b+0x70>
 8005520:	080076df 	.word	0x080076df
 8005524:	08007683 	.word	0x08007683

08005528 <_mprec_log10>:
 8005528:	2817      	cmp	r0, #23
 800552a:	b5d0      	push	{r4, r6, r7, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	dc07      	bgt.n	8005540 <_mprec_log10+0x18>
 8005530:	4809      	ldr	r0, [pc, #36]	; (8005558 <_mprec_log10+0x30>)
 8005532:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005536:	e9d4 0100 	ldrd	r0, r1, [r4]
 800553a:	ec41 0b10 	vmov	d0, r0, r1
 800553e:	bdd0      	pop	{r4, r6, r7, pc}
 8005540:	4906      	ldr	r1, [pc, #24]	; (800555c <_mprec_log10+0x34>)
 8005542:	4f07      	ldr	r7, [pc, #28]	; (8005560 <_mprec_log10+0x38>)
 8005544:	2000      	movs	r0, #0
 8005546:	2600      	movs	r6, #0
 8005548:	4632      	mov	r2, r6
 800554a:	463b      	mov	r3, r7
 800554c:	f7fb f854 	bl	80005f8 <__aeabi_dmul>
 8005550:	3c01      	subs	r4, #1
 8005552:	d1f9      	bne.n	8005548 <_mprec_log10+0x20>
 8005554:	e7f1      	b.n	800553a <_mprec_log10+0x12>
 8005556:	bf00      	nop
 8005558:	08007718 	.word	0x08007718
 800555c:	3ff00000 	.word	0x3ff00000
 8005560:	40240000 	.word	0x40240000

08005564 <_calloc_r>:
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	fba1 2402 	umull	r2, r4, r1, r2
 800556a:	b94c      	cbnz	r4, 8005580 <_calloc_r+0x1c>
 800556c:	4611      	mov	r1, r2
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	f000 f82e 	bl	80055d0 <_malloc_r>
 8005574:	9a01      	ldr	r2, [sp, #4]
 8005576:	4605      	mov	r5, r0
 8005578:	b930      	cbnz	r0, 8005588 <_calloc_r+0x24>
 800557a:	4628      	mov	r0, r5
 800557c:	b003      	add	sp, #12
 800557e:	bd30      	pop	{r4, r5, pc}
 8005580:	220c      	movs	r2, #12
 8005582:	6002      	str	r2, [r0, #0]
 8005584:	2500      	movs	r5, #0
 8005586:	e7f8      	b.n	800557a <_calloc_r+0x16>
 8005588:	4621      	mov	r1, r4
 800558a:	f7ff fae7 	bl	8004b5c <memset>
 800558e:	e7f4      	b.n	800557a <_calloc_r+0x16>

08005590 <sbrk_aligned>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4e0e      	ldr	r6, [pc, #56]	; (80055cc <sbrk_aligned+0x3c>)
 8005594:	460c      	mov	r4, r1
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	4605      	mov	r5, r0
 800559a:	b911      	cbnz	r1, 80055a2 <sbrk_aligned+0x12>
 800559c:	f000 fbaa 	bl	8005cf4 <_sbrk_r>
 80055a0:	6030      	str	r0, [r6, #0]
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 fba5 	bl	8005cf4 <_sbrk_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d00a      	beq.n	80055c4 <sbrk_aligned+0x34>
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d007      	beq.n	80055c8 <sbrk_aligned+0x38>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 fb9a 	bl	8005cf4 <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d101      	bne.n	80055c8 <sbrk_aligned+0x38>
 80055c4:	f04f 34ff 	mov.w	r4, #4294967295
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	2000019c 	.word	0x2000019c

080055d0 <_malloc_r>:
 80055d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d4:	1ccd      	adds	r5, r1, #3
 80055d6:	f025 0503 	bic.w	r5, r5, #3
 80055da:	3508      	adds	r5, #8
 80055dc:	2d0c      	cmp	r5, #12
 80055de:	bf38      	it	cc
 80055e0:	250c      	movcc	r5, #12
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	4607      	mov	r7, r0
 80055e6:	db01      	blt.n	80055ec <_malloc_r+0x1c>
 80055e8:	42a9      	cmp	r1, r5
 80055ea:	d905      	bls.n	80055f8 <_malloc_r+0x28>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	2600      	movs	r6, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f8:	4e2e      	ldr	r6, [pc, #184]	; (80056b4 <_malloc_r+0xe4>)
 80055fa:	f001 fa6d 	bl	8006ad8 <__malloc_lock>
 80055fe:	6833      	ldr	r3, [r6, #0]
 8005600:	461c      	mov	r4, r3
 8005602:	bb34      	cbnz	r4, 8005652 <_malloc_r+0x82>
 8005604:	4629      	mov	r1, r5
 8005606:	4638      	mov	r0, r7
 8005608:	f7ff ffc2 	bl	8005590 <sbrk_aligned>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	4604      	mov	r4, r0
 8005610:	d14d      	bne.n	80056ae <_malloc_r+0xde>
 8005612:	6834      	ldr	r4, [r6, #0]
 8005614:	4626      	mov	r6, r4
 8005616:	2e00      	cmp	r6, #0
 8005618:	d140      	bne.n	800569c <_malloc_r+0xcc>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4631      	mov	r1, r6
 800561e:	4638      	mov	r0, r7
 8005620:	eb04 0803 	add.w	r8, r4, r3
 8005624:	f000 fb66 	bl	8005cf4 <_sbrk_r>
 8005628:	4580      	cmp	r8, r0
 800562a:	d13a      	bne.n	80056a2 <_malloc_r+0xd2>
 800562c:	6821      	ldr	r1, [r4, #0]
 800562e:	3503      	adds	r5, #3
 8005630:	1a6d      	subs	r5, r5, r1
 8005632:	f025 0503 	bic.w	r5, r5, #3
 8005636:	3508      	adds	r5, #8
 8005638:	2d0c      	cmp	r5, #12
 800563a:	bf38      	it	cc
 800563c:	250c      	movcc	r5, #12
 800563e:	4629      	mov	r1, r5
 8005640:	4638      	mov	r0, r7
 8005642:	f7ff ffa5 	bl	8005590 <sbrk_aligned>
 8005646:	3001      	adds	r0, #1
 8005648:	d02b      	beq.n	80056a2 <_malloc_r+0xd2>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	442b      	add	r3, r5
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	e00e      	b.n	8005670 <_malloc_r+0xa0>
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	1b52      	subs	r2, r2, r5
 8005656:	d41e      	bmi.n	8005696 <_malloc_r+0xc6>
 8005658:	2a0b      	cmp	r2, #11
 800565a:	d916      	bls.n	800568a <_malloc_r+0xba>
 800565c:	1961      	adds	r1, r4, r5
 800565e:	42a3      	cmp	r3, r4
 8005660:	6025      	str	r5, [r4, #0]
 8005662:	bf18      	it	ne
 8005664:	6059      	strne	r1, [r3, #4]
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	bf08      	it	eq
 800566a:	6031      	streq	r1, [r6, #0]
 800566c:	5162      	str	r2, [r4, r5]
 800566e:	604b      	str	r3, [r1, #4]
 8005670:	4638      	mov	r0, r7
 8005672:	f104 060b 	add.w	r6, r4, #11
 8005676:	f001 fa35 	bl	8006ae4 <__malloc_unlock>
 800567a:	f026 0607 	bic.w	r6, r6, #7
 800567e:	1d23      	adds	r3, r4, #4
 8005680:	1af2      	subs	r2, r6, r3
 8005682:	d0b6      	beq.n	80055f2 <_malloc_r+0x22>
 8005684:	1b9b      	subs	r3, r3, r6
 8005686:	50a3      	str	r3, [r4, r2]
 8005688:	e7b3      	b.n	80055f2 <_malloc_r+0x22>
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	42a3      	cmp	r3, r4
 800568e:	bf0c      	ite	eq
 8005690:	6032      	streq	r2, [r6, #0]
 8005692:	605a      	strne	r2, [r3, #4]
 8005694:	e7ec      	b.n	8005670 <_malloc_r+0xa0>
 8005696:	4623      	mov	r3, r4
 8005698:	6864      	ldr	r4, [r4, #4]
 800569a:	e7b2      	b.n	8005602 <_malloc_r+0x32>
 800569c:	4634      	mov	r4, r6
 800569e:	6876      	ldr	r6, [r6, #4]
 80056a0:	e7b9      	b.n	8005616 <_malloc_r+0x46>
 80056a2:	230c      	movs	r3, #12
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4638      	mov	r0, r7
 80056a8:	f001 fa1c 	bl	8006ae4 <__malloc_unlock>
 80056ac:	e7a1      	b.n	80055f2 <_malloc_r+0x22>
 80056ae:	6025      	str	r5, [r4, #0]
 80056b0:	e7de      	b.n	8005670 <_malloc_r+0xa0>
 80056b2:	bf00      	nop
 80056b4:	20000198 	.word	0x20000198

080056b8 <_realloc_r>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4680      	mov	r8, r0
 80056be:	4614      	mov	r4, r2
 80056c0:	460e      	mov	r6, r1
 80056c2:	b921      	cbnz	r1, 80056ce <_realloc_r+0x16>
 80056c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c8:	4611      	mov	r1, r2
 80056ca:	f7ff bf81 	b.w	80055d0 <_malloc_r>
 80056ce:	b92a      	cbnz	r2, 80056dc <_realloc_r+0x24>
 80056d0:	f001 fa0e 	bl	8006af0 <_free_r>
 80056d4:	4625      	mov	r5, r4
 80056d6:	4628      	mov	r0, r5
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	f001 fa54 	bl	8006b88 <_malloc_usable_size_r>
 80056e0:	4284      	cmp	r4, r0
 80056e2:	4607      	mov	r7, r0
 80056e4:	d802      	bhi.n	80056ec <_realloc_r+0x34>
 80056e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ea:	d812      	bhi.n	8005712 <_realloc_r+0x5a>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4640      	mov	r0, r8
 80056f0:	f7ff ff6e 	bl	80055d0 <_malloc_r>
 80056f4:	4605      	mov	r5, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d0ed      	beq.n	80056d6 <_realloc_r+0x1e>
 80056fa:	42bc      	cmp	r4, r7
 80056fc:	4622      	mov	r2, r4
 80056fe:	4631      	mov	r1, r6
 8005700:	bf28      	it	cs
 8005702:	463a      	movcs	r2, r7
 8005704:	f001 f9c0 	bl	8006a88 <memcpy>
 8005708:	4631      	mov	r1, r6
 800570a:	4640      	mov	r0, r8
 800570c:	f001 f9f0 	bl	8006af0 <_free_r>
 8005710:	e7e1      	b.n	80056d6 <_realloc_r+0x1e>
 8005712:	4635      	mov	r5, r6
 8005714:	e7df      	b.n	80056d6 <_realloc_r+0x1e>

08005716 <__ssputs_r>:
 8005716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571a:	688e      	ldr	r6, [r1, #8]
 800571c:	429e      	cmp	r6, r3
 800571e:	4682      	mov	sl, r0
 8005720:	460c      	mov	r4, r1
 8005722:	4690      	mov	r8, r2
 8005724:	461f      	mov	r7, r3
 8005726:	d838      	bhi.n	800579a <__ssputs_r+0x84>
 8005728:	898a      	ldrh	r2, [r1, #12]
 800572a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800572e:	d032      	beq.n	8005796 <__ssputs_r+0x80>
 8005730:	6825      	ldr	r5, [r4, #0]
 8005732:	6909      	ldr	r1, [r1, #16]
 8005734:	eba5 0901 	sub.w	r9, r5, r1
 8005738:	6965      	ldr	r5, [r4, #20]
 800573a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800573e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005742:	3301      	adds	r3, #1
 8005744:	444b      	add	r3, r9
 8005746:	106d      	asrs	r5, r5, #1
 8005748:	429d      	cmp	r5, r3
 800574a:	bf38      	it	cc
 800574c:	461d      	movcc	r5, r3
 800574e:	0553      	lsls	r3, r2, #21
 8005750:	d531      	bpl.n	80057b6 <__ssputs_r+0xa0>
 8005752:	4629      	mov	r1, r5
 8005754:	f7ff ff3c 	bl	80055d0 <_malloc_r>
 8005758:	4606      	mov	r6, r0
 800575a:	b950      	cbnz	r0, 8005772 <__ssputs_r+0x5c>
 800575c:	230c      	movs	r3, #12
 800575e:	f8ca 3000 	str.w	r3, [sl]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005772:	6921      	ldr	r1, [r4, #16]
 8005774:	464a      	mov	r2, r9
 8005776:	f001 f987 	bl	8006a88 <memcpy>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	81a3      	strh	r3, [r4, #12]
 8005786:	6126      	str	r6, [r4, #16]
 8005788:	6165      	str	r5, [r4, #20]
 800578a:	444e      	add	r6, r9
 800578c:	eba5 0509 	sub.w	r5, r5, r9
 8005790:	6026      	str	r6, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	463e      	mov	r6, r7
 8005796:	42be      	cmp	r6, r7
 8005798:	d900      	bls.n	800579c <__ssputs_r+0x86>
 800579a:	463e      	mov	r6, r7
 800579c:	6820      	ldr	r0, [r4, #0]
 800579e:	4632      	mov	r2, r6
 80057a0:	4641      	mov	r1, r8
 80057a2:	f001 f97f 	bl	8006aa4 <memmove>
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	1b9b      	subs	r3, r3, r6
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	4433      	add	r3, r6
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7db      	b.n	800576e <__ssputs_r+0x58>
 80057b6:	462a      	mov	r2, r5
 80057b8:	f7ff ff7e 	bl	80056b8 <_realloc_r>
 80057bc:	4606      	mov	r6, r0
 80057be:	2800      	cmp	r0, #0
 80057c0:	d1e1      	bne.n	8005786 <__ssputs_r+0x70>
 80057c2:	6921      	ldr	r1, [r4, #16]
 80057c4:	4650      	mov	r0, sl
 80057c6:	f001 f993 	bl	8006af0 <_free_r>
 80057ca:	e7c7      	b.n	800575c <__ssputs_r+0x46>

080057cc <_svfiprintf_r>:
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	4698      	mov	r8, r3
 80057d2:	898b      	ldrh	r3, [r1, #12]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	b09d      	sub	sp, #116	; 0x74
 80057d8:	4607      	mov	r7, r0
 80057da:	460d      	mov	r5, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	d50e      	bpl.n	80057fe <_svfiprintf_r+0x32>
 80057e0:	690b      	ldr	r3, [r1, #16]
 80057e2:	b963      	cbnz	r3, 80057fe <_svfiprintf_r+0x32>
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	f7ff fef3 	bl	80055d0 <_malloc_r>
 80057ea:	6028      	str	r0, [r5, #0]
 80057ec:	6128      	str	r0, [r5, #16]
 80057ee:	b920      	cbnz	r0, 80057fa <_svfiprintf_r+0x2e>
 80057f0:	230c      	movs	r3, #12
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	e0d1      	b.n	800599e <_svfiprintf_r+0x1d2>
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	616b      	str	r3, [r5, #20]
 80057fe:	2300      	movs	r3, #0
 8005800:	9309      	str	r3, [sp, #36]	; 0x24
 8005802:	2320      	movs	r3, #32
 8005804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005808:	f8cd 800c 	str.w	r8, [sp, #12]
 800580c:	2330      	movs	r3, #48	; 0x30
 800580e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059b8 <_svfiprintf_r+0x1ec>
 8005812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005816:	f04f 0901 	mov.w	r9, #1
 800581a:	4623      	mov	r3, r4
 800581c:	469a      	mov	sl, r3
 800581e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005822:	b10a      	cbz	r2, 8005828 <_svfiprintf_r+0x5c>
 8005824:	2a25      	cmp	r2, #37	; 0x25
 8005826:	d1f9      	bne.n	800581c <_svfiprintf_r+0x50>
 8005828:	ebba 0b04 	subs.w	fp, sl, r4
 800582c:	d00b      	beq.n	8005846 <_svfiprintf_r+0x7a>
 800582e:	465b      	mov	r3, fp
 8005830:	4622      	mov	r2, r4
 8005832:	4629      	mov	r1, r5
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff ff6e 	bl	8005716 <__ssputs_r>
 800583a:	3001      	adds	r0, #1
 800583c:	f000 80aa 	beq.w	8005994 <_svfiprintf_r+0x1c8>
 8005840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005842:	445a      	add	r2, fp
 8005844:	9209      	str	r2, [sp, #36]	; 0x24
 8005846:	f89a 3000 	ldrb.w	r3, [sl]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80a2 	beq.w	8005994 <_svfiprintf_r+0x1c8>
 8005850:	2300      	movs	r3, #0
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800585a:	f10a 0a01 	add.w	sl, sl, #1
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	9307      	str	r3, [sp, #28]
 8005862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005866:	931a      	str	r3, [sp, #104]	; 0x68
 8005868:	4654      	mov	r4, sl
 800586a:	2205      	movs	r2, #5
 800586c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005870:	4851      	ldr	r0, [pc, #324]	; (80059b8 <_svfiprintf_r+0x1ec>)
 8005872:	f7fa fcb5 	bl	80001e0 <memchr>
 8005876:	9a04      	ldr	r2, [sp, #16]
 8005878:	b9d8      	cbnz	r0, 80058b2 <_svfiprintf_r+0xe6>
 800587a:	06d0      	lsls	r0, r2, #27
 800587c:	bf44      	itt	mi
 800587e:	2320      	movmi	r3, #32
 8005880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005884:	0711      	lsls	r1, r2, #28
 8005886:	bf44      	itt	mi
 8005888:	232b      	movmi	r3, #43	; 0x2b
 800588a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588e:	f89a 3000 	ldrb.w	r3, [sl]
 8005892:	2b2a      	cmp	r3, #42	; 0x2a
 8005894:	d015      	beq.n	80058c2 <_svfiprintf_r+0xf6>
 8005896:	9a07      	ldr	r2, [sp, #28]
 8005898:	4654      	mov	r4, sl
 800589a:	2000      	movs	r0, #0
 800589c:	f04f 0c0a 	mov.w	ip, #10
 80058a0:	4621      	mov	r1, r4
 80058a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a6:	3b30      	subs	r3, #48	; 0x30
 80058a8:	2b09      	cmp	r3, #9
 80058aa:	d94e      	bls.n	800594a <_svfiprintf_r+0x17e>
 80058ac:	b1b0      	cbz	r0, 80058dc <_svfiprintf_r+0x110>
 80058ae:	9207      	str	r2, [sp, #28]
 80058b0:	e014      	b.n	80058dc <_svfiprintf_r+0x110>
 80058b2:	eba0 0308 	sub.w	r3, r0, r8
 80058b6:	fa09 f303 	lsl.w	r3, r9, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	46a2      	mov	sl, r4
 80058c0:	e7d2      	b.n	8005868 <_svfiprintf_r+0x9c>
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	1d19      	adds	r1, r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	9103      	str	r1, [sp, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfbb      	ittet	lt
 80058ce:	425b      	neglt	r3, r3
 80058d0:	f042 0202 	orrlt.w	r2, r2, #2
 80058d4:	9307      	strge	r3, [sp, #28]
 80058d6:	9307      	strlt	r3, [sp, #28]
 80058d8:	bfb8      	it	lt
 80058da:	9204      	strlt	r2, [sp, #16]
 80058dc:	7823      	ldrb	r3, [r4, #0]
 80058de:	2b2e      	cmp	r3, #46	; 0x2e
 80058e0:	d10c      	bne.n	80058fc <_svfiprintf_r+0x130>
 80058e2:	7863      	ldrb	r3, [r4, #1]
 80058e4:	2b2a      	cmp	r3, #42	; 0x2a
 80058e6:	d135      	bne.n	8005954 <_svfiprintf_r+0x188>
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfb8      	it	lt
 80058f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f8:	3402      	adds	r4, #2
 80058fa:	9305      	str	r3, [sp, #20]
 80058fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059c8 <_svfiprintf_r+0x1fc>
 8005900:	7821      	ldrb	r1, [r4, #0]
 8005902:	2203      	movs	r2, #3
 8005904:	4650      	mov	r0, sl
 8005906:	f7fa fc6b 	bl	80001e0 <memchr>
 800590a:	b140      	cbz	r0, 800591e <_svfiprintf_r+0x152>
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	eba0 000a 	sub.w	r0, r0, sl
 8005912:	fa03 f000 	lsl.w	r0, r3, r0
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	4303      	orrs	r3, r0
 800591a:	3401      	adds	r4, #1
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005922:	4826      	ldr	r0, [pc, #152]	; (80059bc <_svfiprintf_r+0x1f0>)
 8005924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005928:	2206      	movs	r2, #6
 800592a:	f7fa fc59 	bl	80001e0 <memchr>
 800592e:	2800      	cmp	r0, #0
 8005930:	d038      	beq.n	80059a4 <_svfiprintf_r+0x1d8>
 8005932:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <_svfiprintf_r+0x1f4>)
 8005934:	bb1b      	cbnz	r3, 800597e <_svfiprintf_r+0x1b2>
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	3307      	adds	r3, #7
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	3308      	adds	r3, #8
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005944:	4433      	add	r3, r6
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
 8005948:	e767      	b.n	800581a <_svfiprintf_r+0x4e>
 800594a:	fb0c 3202 	mla	r2, ip, r2, r3
 800594e:	460c      	mov	r4, r1
 8005950:	2001      	movs	r0, #1
 8005952:	e7a5      	b.n	80058a0 <_svfiprintf_r+0xd4>
 8005954:	2300      	movs	r3, #0
 8005956:	3401      	adds	r4, #1
 8005958:	9305      	str	r3, [sp, #20]
 800595a:	4619      	mov	r1, r3
 800595c:	f04f 0c0a 	mov.w	ip, #10
 8005960:	4620      	mov	r0, r4
 8005962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005966:	3a30      	subs	r2, #48	; 0x30
 8005968:	2a09      	cmp	r2, #9
 800596a:	d903      	bls.n	8005974 <_svfiprintf_r+0x1a8>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0c5      	beq.n	80058fc <_svfiprintf_r+0x130>
 8005970:	9105      	str	r1, [sp, #20]
 8005972:	e7c3      	b.n	80058fc <_svfiprintf_r+0x130>
 8005974:	fb0c 2101 	mla	r1, ip, r1, r2
 8005978:	4604      	mov	r4, r0
 800597a:	2301      	movs	r3, #1
 800597c:	e7f0      	b.n	8005960 <_svfiprintf_r+0x194>
 800597e:	ab03      	add	r3, sp, #12
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	462a      	mov	r2, r5
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <_svfiprintf_r+0x1f8>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	4638      	mov	r0, r7
 800598a:	f3af 8000 	nop.w
 800598e:	1c42      	adds	r2, r0, #1
 8005990:	4606      	mov	r6, r0
 8005992:	d1d6      	bne.n	8005942 <_svfiprintf_r+0x176>
 8005994:	89ab      	ldrh	r3, [r5, #12]
 8005996:	065b      	lsls	r3, r3, #25
 8005998:	f53f af2c 	bmi.w	80057f4 <_svfiprintf_r+0x28>
 800599c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800599e:	b01d      	add	sp, #116	; 0x74
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	ab03      	add	r3, sp, #12
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <_svfiprintf_r+0x1f8>)
 80059ac:	a904      	add	r1, sp, #16
 80059ae:	4638      	mov	r0, r7
 80059b0:	f000 f87a 	bl	8005aa8 <_printf_i>
 80059b4:	e7eb      	b.n	800598e <_svfiprintf_r+0x1c2>
 80059b6:	bf00      	nop
 80059b8:	080077ec 	.word	0x080077ec
 80059bc:	080077f6 	.word	0x080077f6
 80059c0:	00000000 	.word	0x00000000
 80059c4:	08005717 	.word	0x08005717
 80059c8:	080077f2 	.word	0x080077f2

080059cc <_printf_common>:
 80059cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	4616      	mov	r6, r2
 80059d2:	4699      	mov	r9, r3
 80059d4:	688a      	ldr	r2, [r1, #8]
 80059d6:	690b      	ldr	r3, [r1, #16]
 80059d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059dc:	4293      	cmp	r3, r2
 80059de:	bfb8      	it	lt
 80059e0:	4613      	movlt	r3, r2
 80059e2:	6033      	str	r3, [r6, #0]
 80059e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e8:	4607      	mov	r7, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b10a      	cbz	r2, 80059f2 <_printf_common+0x26>
 80059ee:	3301      	adds	r3, #1
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	0699      	lsls	r1, r3, #26
 80059f6:	bf42      	ittt	mi
 80059f8:	6833      	ldrmi	r3, [r6, #0]
 80059fa:	3302      	addmi	r3, #2
 80059fc:	6033      	strmi	r3, [r6, #0]
 80059fe:	6825      	ldr	r5, [r4, #0]
 8005a00:	f015 0506 	ands.w	r5, r5, #6
 8005a04:	d106      	bne.n	8005a14 <_printf_common+0x48>
 8005a06:	f104 0a19 	add.w	sl, r4, #25
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	6832      	ldr	r2, [r6, #0]
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	42ab      	cmp	r3, r5
 8005a12:	dc26      	bgt.n	8005a62 <_printf_common+0x96>
 8005a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a18:	1e13      	subs	r3, r2, #0
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	bf18      	it	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	0692      	lsls	r2, r2, #26
 8005a22:	d42b      	bmi.n	8005a7c <_printf_common+0xb0>
 8005a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d01e      	beq.n	8005a70 <_printf_common+0xa4>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	68e5      	ldr	r5, [r4, #12]
 8005a36:	6832      	ldr	r2, [r6, #0]
 8005a38:	f003 0306 	and.w	r3, r3, #6
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	bf08      	it	eq
 8005a40:	1aad      	subeq	r5, r5, r2
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	bf0c      	ite	eq
 8005a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a4c:	2500      	movne	r5, #0
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bfc4      	itt	gt
 8005a52:	1a9b      	subgt	r3, r3, r2
 8005a54:	18ed      	addgt	r5, r5, r3
 8005a56:	2600      	movs	r6, #0
 8005a58:	341a      	adds	r4, #26
 8005a5a:	42b5      	cmp	r5, r6
 8005a5c:	d11a      	bne.n	8005a94 <_printf_common+0xc8>
 8005a5e:	2000      	movs	r0, #0
 8005a60:	e008      	b.n	8005a74 <_printf_common+0xa8>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4652      	mov	r2, sl
 8005a66:	4649      	mov	r1, r9
 8005a68:	4638      	mov	r0, r7
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d103      	bne.n	8005a78 <_printf_common+0xac>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7c6      	b.n	8005a0a <_printf_common+0x3e>
 8005a7c:	18e1      	adds	r1, r4, r3
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	2030      	movs	r0, #48	; 0x30
 8005a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a86:	4422      	add	r2, r4
 8005a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a90:	3302      	adds	r3, #2
 8005a92:	e7c7      	b.n	8005a24 <_printf_common+0x58>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4622      	mov	r2, r4
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d0e6      	beq.n	8005a70 <_printf_common+0xa4>
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7d9      	b.n	8005a5a <_printf_common+0x8e>
	...

08005aa8 <_printf_i>:
 8005aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aac:	7e0f      	ldrb	r7, [r1, #24]
 8005aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab0:	2f78      	cmp	r7, #120	; 0x78
 8005ab2:	4691      	mov	r9, r2
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005abe:	d807      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ac0:	2f62      	cmp	r7, #98	; 0x62
 8005ac2:	d80a      	bhi.n	8005ada <_printf_i+0x32>
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	f000 80d8 	beq.w	8005c7a <_printf_i+0x1d2>
 8005aca:	2f58      	cmp	r7, #88	; 0x58
 8005acc:	f000 80a3 	beq.w	8005c16 <_printf_i+0x16e>
 8005ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad8:	e03a      	b.n	8005b50 <_printf_i+0xa8>
 8005ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ade:	2b15      	cmp	r3, #21
 8005ae0:	d8f6      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ae2:	a101      	add	r1, pc, #4	; (adr r1, 8005ae8 <_printf_i+0x40>)
 8005ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005ad1 	.word	0x08005ad1
 8005af4:	08005ad1 	.word	0x08005ad1
 8005af8:	08005ad1 	.word	0x08005ad1
 8005afc:	08005ad1 	.word	0x08005ad1
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005ad1 	.word	0x08005ad1
 8005b08:	08005ad1 	.word	0x08005ad1
 8005b0c:	08005ad1 	.word	0x08005ad1
 8005b10:	08005ad1 	.word	0x08005ad1
 8005b14:	08005c61 	.word	0x08005c61
 8005b18:	08005b85 	.word	0x08005b85
 8005b1c:	08005c43 	.word	0x08005c43
 8005b20:	08005ad1 	.word	0x08005ad1
 8005b24:	08005ad1 	.word	0x08005ad1
 8005b28:	08005c83 	.word	0x08005c83
 8005b2c:	08005ad1 	.word	0x08005ad1
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005ad1 	.word	0x08005ad1
 8005b38:	08005ad1 	.word	0x08005ad1
 8005b3c:	08005c4b 	.word	0x08005c4b
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	1d1a      	adds	r2, r3, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	602a      	str	r2, [r5, #0]
 8005b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0a3      	b.n	8005c9c <_printf_i+0x1f4>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	6829      	ldr	r1, [r5, #0]
 8005b58:	0606      	lsls	r6, r0, #24
 8005b5a:	f101 0304 	add.w	r3, r1, #4
 8005b5e:	d50a      	bpl.n	8005b76 <_printf_i+0xce>
 8005b60:	680e      	ldr	r6, [r1, #0]
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	da03      	bge.n	8005b70 <_printf_i+0xc8>
 8005b68:	232d      	movs	r3, #45	; 0x2d
 8005b6a:	4276      	negs	r6, r6
 8005b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b70:	485e      	ldr	r0, [pc, #376]	; (8005cec <_printf_i+0x244>)
 8005b72:	230a      	movs	r3, #10
 8005b74:	e019      	b.n	8005baa <_printf_i+0x102>
 8005b76:	680e      	ldr	r6, [r1, #0]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b7e:	bf18      	it	ne
 8005b80:	b236      	sxthne	r6, r6
 8005b82:	e7ef      	b.n	8005b64 <_printf_i+0xbc>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	6029      	str	r1, [r5, #0]
 8005b8c:	0601      	lsls	r1, r0, #24
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0xec>
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0xf2>
 8005b94:	0646      	lsls	r6, r0, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0xe8>
 8005b98:	881e      	ldrh	r6, [r3, #0]
 8005b9a:	4854      	ldr	r0, [pc, #336]	; (8005cec <_printf_i+0x244>)
 8005b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2308      	moveq	r3, #8
 8005ba2:	230a      	movne	r3, #10
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005baa:	6865      	ldr	r5, [r4, #4]
 8005bac:	60a5      	str	r5, [r4, #8]
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	bfa2      	ittt	ge
 8005bb2:	6821      	ldrge	r1, [r4, #0]
 8005bb4:	f021 0104 	bicge.w	r1, r1, #4
 8005bb8:	6021      	strge	r1, [r4, #0]
 8005bba:	b90e      	cbnz	r6, 8005bc0 <_printf_i+0x118>
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	d04d      	beq.n	8005c5c <_printf_i+0x1b4>
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bca:	5dc7      	ldrb	r7, [r0, r7]
 8005bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd0:	4637      	mov	r7, r6
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	d9f4      	bls.n	8005bc2 <_printf_i+0x11a>
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10b      	bne.n	8005bf4 <_printf_i+0x14c>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07de      	lsls	r6, r3, #31
 8005be0:	d508      	bpl.n	8005bf4 <_printf_i+0x14c>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bfde      	ittt	le
 8005bea:	2330      	movle	r3, #48	; 0x30
 8005bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bf4:	1b52      	subs	r2, r2, r5
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	f8cd a000 	str.w	sl, [sp]
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	aa03      	add	r2, sp, #12
 8005c00:	4621      	mov	r1, r4
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7ff fee2 	bl	80059cc <_printf_common>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d14c      	bne.n	8005ca6 <_printf_i+0x1fe>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	4835      	ldr	r0, [pc, #212]	; (8005cec <_printf_i+0x244>)
 8005c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c24:	6029      	str	r1, [r5, #0]
 8005c26:	061d      	lsls	r5, r3, #24
 8005c28:	d514      	bpl.n	8005c54 <_printf_i+0x1ac>
 8005c2a:	07df      	lsls	r7, r3, #31
 8005c2c:	bf44      	itt	mi
 8005c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c32:	6023      	strmi	r3, [r4, #0]
 8005c34:	b91e      	cbnz	r6, 8005c3e <_printf_i+0x196>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f023 0320 	bic.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	2310      	movs	r3, #16
 8005c40:	e7b0      	b.n	8005ba4 <_printf_i+0xfc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f043 0320 	orr.w	r3, r3, #32
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2378      	movs	r3, #120	; 0x78
 8005c4c:	4828      	ldr	r0, [pc, #160]	; (8005cf0 <_printf_i+0x248>)
 8005c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c52:	e7e3      	b.n	8005c1c <_printf_i+0x174>
 8005c54:	0659      	lsls	r1, r3, #25
 8005c56:	bf48      	it	mi
 8005c58:	b2b6      	uxthmi	r6, r6
 8005c5a:	e7e6      	b.n	8005c2a <_printf_i+0x182>
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	e7bb      	b.n	8005bd8 <_printf_i+0x130>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	6826      	ldr	r6, [r4, #0]
 8005c64:	6961      	ldr	r1, [r4, #20]
 8005c66:	1d18      	adds	r0, r3, #4
 8005c68:	6028      	str	r0, [r5, #0]
 8005c6a:	0635      	lsls	r5, r6, #24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0x1cc>
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0x1d2>
 8005c74:	0670      	lsls	r0, r6, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0x1c8>
 8005c78:	8019      	strh	r1, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	4615      	mov	r5, r2
 8005c80:	e7ba      	b.n	8005bf8 <_printf_i+0x150>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7fa faa6 	bl	80001e0 <memchr>
 8005c94:	b108      	cbz	r0, 8005c9a <_printf_i+0x1f2>
 8005c96:	1b40      	subs	r0, r0, r5
 8005c98:	6060      	str	r0, [r4, #4]
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	e7a8      	b.n	8005bf8 <_printf_i+0x150>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4649      	mov	r1, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	47d0      	blx	sl
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0ab      	beq.n	8005c0c <_printf_i+0x164>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d413      	bmi.n	8005ce2 <_printf_i+0x23a>
 8005cba:	68e0      	ldr	r0, [r4, #12]
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bfb8      	it	lt
 8005cc2:	4618      	movlt	r0, r3
 8005cc4:	e7a4      	b.n	8005c10 <_printf_i+0x168>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	47d0      	blx	sl
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d09b      	beq.n	8005c0c <_printf_i+0x164>
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	9903      	ldr	r1, [sp, #12]
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dcf2      	bgt.n	8005cc6 <_printf_i+0x21e>
 8005ce0:	e7eb      	b.n	8005cba <_printf_i+0x212>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	f104 0619 	add.w	r6, r4, #25
 8005ce8:	e7f5      	b.n	8005cd6 <_printf_i+0x22e>
 8005cea:	bf00      	nop
 8005cec:	080077fd 	.word	0x080077fd
 8005cf0:	0800780e 	.word	0x0800780e

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d06      	ldr	r5, [pc, #24]	; (8005d10 <_sbrk_r+0x1c>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f7fb fbe6 	bl	80014d0 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	200001a0 	.word	0x200001a0

08005d14 <strcpy>:
 8005d14:	4603      	mov	r3, r0
 8005d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d1a:	f803 2b01 	strb.w	r2, [r3], #1
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d1f9      	bne.n	8005d16 <strcpy+0x2>
 8005d22:	4770      	bx	lr

08005d24 <__assert_func>:
 8005d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d26:	4614      	mov	r4, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <__assert_func+0x2c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4605      	mov	r5, r0
 8005d30:	68d8      	ldr	r0, [r3, #12]
 8005d32:	b14c      	cbz	r4, 8005d48 <__assert_func+0x24>
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <__assert_func+0x30>)
 8005d36:	9100      	str	r1, [sp, #0]
 8005d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d3c:	4906      	ldr	r1, [pc, #24]	; (8005d58 <__assert_func+0x34>)
 8005d3e:	462b      	mov	r3, r5
 8005d40:	f000 fe88 	bl	8006a54 <fiprintf>
 8005d44:	f001 f942 	bl	8006fcc <abort>
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <__assert_func+0x38>)
 8005d4a:	461c      	mov	r4, r3
 8005d4c:	e7f3      	b.n	8005d36 <__assert_func+0x12>
 8005d4e:	bf00      	nop
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	0800781f 	.word	0x0800781f
 8005d58:	0800782c 	.word	0x0800782c
 8005d5c:	0800785a 	.word	0x0800785a

08005d60 <quorem>:
 8005d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	6903      	ldr	r3, [r0, #16]
 8005d66:	690c      	ldr	r4, [r1, #16]
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	4607      	mov	r7, r0
 8005d6c:	f2c0 8081 	blt.w	8005e72 <quorem+0x112>
 8005d70:	3c01      	subs	r4, #1
 8005d72:	f101 0814 	add.w	r8, r1, #20
 8005d76:	f100 0514 	add.w	r5, r0, #20
 8005d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d98:	d331      	bcc.n	8005dfe <quorem+0x9e>
 8005d9a:	f04f 0e00 	mov.w	lr, #0
 8005d9e:	4640      	mov	r0, r8
 8005da0:	46ac      	mov	ip, r5
 8005da2:	46f2      	mov	sl, lr
 8005da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005da8:	b293      	uxth	r3, r2
 8005daa:	fb06 e303 	mla	r3, r6, r3, lr
 8005dae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ebaa 0303 	sub.w	r3, sl, r3
 8005db8:	f8dc a000 	ldr.w	sl, [ip]
 8005dbc:	0c12      	lsrs	r2, r2, #16
 8005dbe:	fa13 f38a 	uxtah	r3, r3, sl
 8005dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	9b00      	ldr	r3, [sp, #0]
 8005dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ddc:	4581      	cmp	r9, r0
 8005dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005de2:	f84c 3b04 	str.w	r3, [ip], #4
 8005de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dea:	d2db      	bcs.n	8005da4 <quorem+0x44>
 8005dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8005df0:	b92b      	cbnz	r3, 8005dfe <quorem+0x9e>
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	429d      	cmp	r5, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	d32e      	bcc.n	8005e5a <quorem+0xfa>
 8005dfc:	613c      	str	r4, [r7, #16]
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f7ff fa90 	bl	8005324 <__mcmp>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	db24      	blt.n	8005e52 <quorem+0xf2>
 8005e08:	3601      	adds	r6, #1
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f04f 0c00 	mov.w	ip, #0
 8005e10:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e14:	f8d0 e000 	ldr.w	lr, [r0]
 8005e18:	b293      	uxth	r3, r2
 8005e1a:	ebac 0303 	sub.w	r3, ip, r3
 8005e1e:	0c12      	lsrs	r2, r2, #16
 8005e20:	fa13 f38e 	uxtah	r3, r3, lr
 8005e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e32:	45c1      	cmp	r9, r8
 8005e34:	f840 3b04 	str.w	r3, [r0], #4
 8005e38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e3c:	d2e8      	bcs.n	8005e10 <quorem+0xb0>
 8005e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e46:	b922      	cbnz	r2, 8005e52 <quorem+0xf2>
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	d30a      	bcc.n	8005e66 <quorem+0x106>
 8005e50:	613c      	str	r4, [r7, #16]
 8005e52:	4630      	mov	r0, r6
 8005e54:	b003      	add	sp, #12
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d1cc      	bne.n	8005dfc <quorem+0x9c>
 8005e62:	3c01      	subs	r4, #1
 8005e64:	e7c7      	b.n	8005df6 <quorem+0x96>
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	d1f0      	bne.n	8005e50 <quorem+0xf0>
 8005e6e:	3c01      	subs	r4, #1
 8005e70:	e7eb      	b.n	8005e4a <quorem+0xea>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e7ee      	b.n	8005e54 <quorem+0xf4>
	...

08005e78 <_dtoa_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	ed2d 8b04 	vpush	{d8-d9}
 8005e80:	ec57 6b10 	vmov	r6, r7, d0
 8005e84:	b093      	sub	sp, #76	; 0x4c
 8005e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e8c:	9106      	str	r1, [sp, #24]
 8005e8e:	ee10 aa10 	vmov	sl, s0
 8005e92:	4604      	mov	r4, r0
 8005e94:	9209      	str	r2, [sp, #36]	; 0x24
 8005e96:	930c      	str	r3, [sp, #48]	; 0x30
 8005e98:	46bb      	mov	fp, r7
 8005e9a:	b975      	cbnz	r5, 8005eba <_dtoa_r+0x42>
 8005e9c:	2010      	movs	r0, #16
 8005e9e:	f000 fdeb 	bl	8006a78 <malloc>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ea6:	b920      	cbnz	r0, 8005eb2 <_dtoa_r+0x3a>
 8005ea8:	4ba7      	ldr	r3, [pc, #668]	; (8006148 <_dtoa_r+0x2d0>)
 8005eaa:	21ea      	movs	r1, #234	; 0xea
 8005eac:	48a7      	ldr	r0, [pc, #668]	; (800614c <_dtoa_r+0x2d4>)
 8005eae:	f7ff ff39 	bl	8005d24 <__assert_func>
 8005eb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005eb6:	6005      	str	r5, [r0, #0]
 8005eb8:	60c5      	str	r5, [r0, #12]
 8005eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	b151      	cbz	r1, 8005ed6 <_dtoa_r+0x5e>
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	604a      	str	r2, [r1, #4]
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4093      	lsls	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fe ffe8 	bl	8004ea0 <_Bfree>
 8005ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	1e3b      	subs	r3, r7, #0
 8005ed8:	bfaa      	itet	ge
 8005eda:	2300      	movge	r3, #0
 8005edc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ee0:	f8c8 3000 	strge.w	r3, [r8]
 8005ee4:	4b9a      	ldr	r3, [pc, #616]	; (8006150 <_dtoa_r+0x2d8>)
 8005ee6:	bfbc      	itt	lt
 8005ee8:	2201      	movlt	r2, #1
 8005eea:	f8c8 2000 	strlt.w	r2, [r8]
 8005eee:	ea33 030b 	bics.w	r3, r3, fp
 8005ef2:	d11b      	bne.n	8005f2c <_dtoa_r+0xb4>
 8005ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ef6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f00:	4333      	orrs	r3, r6
 8005f02:	f000 8592 	beq.w	8006a2a <_dtoa_r+0xbb2>
 8005f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f08:	b963      	cbnz	r3, 8005f24 <_dtoa_r+0xac>
 8005f0a:	4b92      	ldr	r3, [pc, #584]	; (8006154 <_dtoa_r+0x2dc>)
 8005f0c:	e022      	b.n	8005f54 <_dtoa_r+0xdc>
 8005f0e:	4b92      	ldr	r3, [pc, #584]	; (8006158 <_dtoa_r+0x2e0>)
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	3308      	adds	r3, #8
 8005f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	9801      	ldr	r0, [sp, #4]
 8005f1a:	b013      	add	sp, #76	; 0x4c
 8005f1c:	ecbd 8b04 	vpop	{d8-d9}
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	4b8b      	ldr	r3, [pc, #556]	; (8006154 <_dtoa_r+0x2dc>)
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	3303      	adds	r3, #3
 8005f2a:	e7f3      	b.n	8005f14 <_dtoa_r+0x9c>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4650      	mov	r0, sl
 8005f32:	4659      	mov	r1, fp
 8005f34:	f7fa fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f38:	ec4b ab19 	vmov	d9, sl, fp
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	b158      	cbz	r0, 8005f58 <_dtoa_r+0xe0>
 8005f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f42:	2301      	movs	r3, #1
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 856b 	beq.w	8006a24 <_dtoa_r+0xbac>
 8005f4e:	4883      	ldr	r0, [pc, #524]	; (800615c <_dtoa_r+0x2e4>)
 8005f50:	6018      	str	r0, [r3, #0]
 8005f52:	1e43      	subs	r3, r0, #1
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	e7df      	b.n	8005f18 <_dtoa_r+0xa0>
 8005f58:	ec4b ab10 	vmov	d0, sl, fp
 8005f5c:	aa10      	add	r2, sp, #64	; 0x40
 8005f5e:	a911      	add	r1, sp, #68	; 0x44
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fa85 	bl	8005470 <__d2b>
 8005f66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f6a:	ee08 0a10 	vmov	s16, r0
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	f000 8084 	beq.w	800607c <_dtoa_r+0x204>
 8005f74:	ee19 3a90 	vmov	r3, s19
 8005f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f80:	4656      	mov	r6, sl
 8005f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f8e:	4b74      	ldr	r3, [pc, #464]	; (8006160 <_dtoa_r+0x2e8>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	4630      	mov	r0, r6
 8005f94:	4639      	mov	r1, r7
 8005f96:	f7fa f977 	bl	8000288 <__aeabi_dsub>
 8005f9a:	a365      	add	r3, pc, #404	; (adr r3, 8006130 <_dtoa_r+0x2b8>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa fb2a 	bl	80005f8 <__aeabi_dmul>
 8005fa4:	a364      	add	r3, pc, #400	; (adr r3, 8006138 <_dtoa_r+0x2c0>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4606      	mov	r6, r0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	460f      	mov	r7, r1
 8005fb4:	f7fa fab6 	bl	8000524 <__aeabi_i2d>
 8005fb8:	a361      	add	r3, pc, #388	; (adr r3, 8006140 <_dtoa_r+0x2c8>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	f7fa f95f 	bl	800028c <__adddf3>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	f7fa fdab 	bl	8000b2c <__aeabi_d2iz>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	4630      	mov	r0, r6
 8005fde:	4639      	mov	r1, r7
 8005fe0:	f7fa fd7c 	bl	8000adc <__aeabi_dcmplt>
 8005fe4:	b150      	cbz	r0, 8005ffc <_dtoa_r+0x184>
 8005fe6:	9800      	ldr	r0, [sp, #0]
 8005fe8:	f7fa fa9c 	bl	8000524 <__aeabi_i2d>
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	f7fa fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff4:	b910      	cbnz	r0, 8005ffc <_dtoa_r+0x184>
 8005ff6:	9b00      	ldr	r3, [sp, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	2b16      	cmp	r3, #22
 8006000:	d85a      	bhi.n	80060b8 <_dtoa_r+0x240>
 8006002:	9a00      	ldr	r2, [sp, #0]
 8006004:	4b57      	ldr	r3, [pc, #348]	; (8006164 <_dtoa_r+0x2ec>)
 8006006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	ec51 0b19 	vmov	r0, r1, d9
 8006012:	f7fa fd63 	bl	8000adc <__aeabi_dcmplt>
 8006016:	2800      	cmp	r0, #0
 8006018:	d050      	beq.n	80060bc <_dtoa_r+0x244>
 800601a:	9b00      	ldr	r3, [sp, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	930b      	str	r3, [sp, #44]	; 0x2c
 8006024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006026:	1b5d      	subs	r5, r3, r5
 8006028:	1e6b      	subs	r3, r5, #1
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	bf45      	ittet	mi
 800602e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006032:	9304      	strmi	r3, [sp, #16]
 8006034:	2300      	movpl	r3, #0
 8006036:	2300      	movmi	r3, #0
 8006038:	bf4c      	ite	mi
 800603a:	9305      	strmi	r3, [sp, #20]
 800603c:	9304      	strpl	r3, [sp, #16]
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	db3d      	blt.n	80060c0 <_dtoa_r+0x248>
 8006044:	9b05      	ldr	r3, [sp, #20]
 8006046:	9a00      	ldr	r2, [sp, #0]
 8006048:	920a      	str	r2, [sp, #40]	; 0x28
 800604a:	4413      	add	r3, r2
 800604c:	9305      	str	r3, [sp, #20]
 800604e:	2300      	movs	r3, #0
 8006050:	9307      	str	r3, [sp, #28]
 8006052:	9b06      	ldr	r3, [sp, #24]
 8006054:	2b09      	cmp	r3, #9
 8006056:	f200 8089 	bhi.w	800616c <_dtoa_r+0x2f4>
 800605a:	2b05      	cmp	r3, #5
 800605c:	bfc4      	itt	gt
 800605e:	3b04      	subgt	r3, #4
 8006060:	9306      	strgt	r3, [sp, #24]
 8006062:	9b06      	ldr	r3, [sp, #24]
 8006064:	f1a3 0302 	sub.w	r3, r3, #2
 8006068:	bfcc      	ite	gt
 800606a:	2500      	movgt	r5, #0
 800606c:	2501      	movle	r5, #1
 800606e:	2b03      	cmp	r3, #3
 8006070:	f200 8087 	bhi.w	8006182 <_dtoa_r+0x30a>
 8006074:	e8df f003 	tbb	[pc, r3]
 8006078:	59383a2d 	.word	0x59383a2d
 800607c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006080:	441d      	add	r5, r3
 8006082:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006086:	2b20      	cmp	r3, #32
 8006088:	bfc1      	itttt	gt
 800608a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800608e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006092:	fa0b f303 	lslgt.w	r3, fp, r3
 8006096:	fa26 f000 	lsrgt.w	r0, r6, r0
 800609a:	bfda      	itte	le
 800609c:	f1c3 0320 	rsble	r3, r3, #32
 80060a0:	fa06 f003 	lslle.w	r0, r6, r3
 80060a4:	4318      	orrgt	r0, r3
 80060a6:	f7fa fa2d 	bl	8000504 <__aeabi_ui2d>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4606      	mov	r6, r0
 80060ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060b2:	3d01      	subs	r5, #1
 80060b4:	930e      	str	r3, [sp, #56]	; 0x38
 80060b6:	e76a      	b.n	8005f8e <_dtoa_r+0x116>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e7b2      	b.n	8006022 <_dtoa_r+0x1aa>
 80060bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80060be:	e7b1      	b.n	8006024 <_dtoa_r+0x1ac>
 80060c0:	9b04      	ldr	r3, [sp, #16]
 80060c2:	9a00      	ldr	r2, [sp, #0]
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	4253      	negs	r3, r2
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	; 0x28
 80060d0:	e7bf      	b.n	8006052 <_dtoa_r+0x1da>
 80060d2:	2300      	movs	r3, #0
 80060d4:	9308      	str	r3, [sp, #32]
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc55      	bgt.n	8006188 <_dtoa_r+0x310>
 80060dc:	2301      	movs	r3, #1
 80060de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060e2:	461a      	mov	r2, r3
 80060e4:	9209      	str	r2, [sp, #36]	; 0x24
 80060e6:	e00c      	b.n	8006102 <_dtoa_r+0x28a>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7f3      	b.n	80060d4 <_dtoa_r+0x25c>
 80060ec:	2300      	movs	r3, #0
 80060ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	3301      	adds	r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	bfb8      	it	lt
 8006100:	2301      	movlt	r3, #1
 8006102:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006104:	2200      	movs	r2, #0
 8006106:	6042      	str	r2, [r0, #4]
 8006108:	2204      	movs	r2, #4
 800610a:	f102 0614 	add.w	r6, r2, #20
 800610e:	429e      	cmp	r6, r3
 8006110:	6841      	ldr	r1, [r0, #4]
 8006112:	d93d      	bls.n	8006190 <_dtoa_r+0x318>
 8006114:	4620      	mov	r0, r4
 8006116:	f7fe fe83 	bl	8004e20 <_Balloc>
 800611a:	9001      	str	r0, [sp, #4]
 800611c:	2800      	cmp	r0, #0
 800611e:	d13b      	bne.n	8006198 <_dtoa_r+0x320>
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <_dtoa_r+0x2f0>)
 8006122:	4602      	mov	r2, r0
 8006124:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006128:	e6c0      	b.n	8005eac <_dtoa_r+0x34>
 800612a:	2301      	movs	r3, #1
 800612c:	e7df      	b.n	80060ee <_dtoa_r+0x276>
 800612e:	bf00      	nop
 8006130:	636f4361 	.word	0x636f4361
 8006134:	3fd287a7 	.word	0x3fd287a7
 8006138:	8b60c8b3 	.word	0x8b60c8b3
 800613c:	3fc68a28 	.word	0x3fc68a28
 8006140:	509f79fb 	.word	0x509f79fb
 8006144:	3fd34413 	.word	0x3fd34413
 8006148:	0800766c 	.word	0x0800766c
 800614c:	0800786a 	.word	0x0800786a
 8006150:	7ff00000 	.word	0x7ff00000
 8006154:	08007864 	.word	0x08007864
 8006158:	0800785b 	.word	0x0800785b
 800615c:	08007869 	.word	0x08007869
 8006160:	3ff80000 	.word	0x3ff80000
 8006164:	08007718 	.word	0x08007718
 8006168:	080076df 	.word	0x080076df
 800616c:	2501      	movs	r5, #1
 800616e:	2300      	movs	r3, #0
 8006170:	9306      	str	r3, [sp, #24]
 8006172:	9508      	str	r5, [sp, #32]
 8006174:	f04f 33ff 	mov.w	r3, #4294967295
 8006178:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	2312      	movs	r3, #18
 8006180:	e7b0      	b.n	80060e4 <_dtoa_r+0x26c>
 8006182:	2301      	movs	r3, #1
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	e7f5      	b.n	8006174 <_dtoa_r+0x2fc>
 8006188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800618e:	e7b8      	b.n	8006102 <_dtoa_r+0x28a>
 8006190:	3101      	adds	r1, #1
 8006192:	6041      	str	r1, [r0, #4]
 8006194:	0052      	lsls	r2, r2, #1
 8006196:	e7b8      	b.n	800610a <_dtoa_r+0x292>
 8006198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800619a:	9a01      	ldr	r2, [sp, #4]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	2b0e      	cmp	r3, #14
 80061a2:	f200 809d 	bhi.w	80062e0 <_dtoa_r+0x468>
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	f000 809a 	beq.w	80062e0 <_dtoa_r+0x468>
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd32      	ble.n	8006218 <_dtoa_r+0x3a0>
 80061b2:	4ab7      	ldr	r2, [pc, #732]	; (8006490 <_dtoa_r+0x618>)
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061c0:	9b00      	ldr	r3, [sp, #0]
 80061c2:	05d8      	lsls	r0, r3, #23
 80061c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061c8:	d516      	bpl.n	80061f8 <_dtoa_r+0x380>
 80061ca:	4bb2      	ldr	r3, [pc, #712]	; (8006494 <_dtoa_r+0x61c>)
 80061cc:	ec51 0b19 	vmov	r0, r1, d9
 80061d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061d4:	f7fa fb3a 	bl	800084c <__aeabi_ddiv>
 80061d8:	f007 070f 	and.w	r7, r7, #15
 80061dc:	4682      	mov	sl, r0
 80061de:	468b      	mov	fp, r1
 80061e0:	2503      	movs	r5, #3
 80061e2:	4eac      	ldr	r6, [pc, #688]	; (8006494 <_dtoa_r+0x61c>)
 80061e4:	b957      	cbnz	r7, 80061fc <_dtoa_r+0x384>
 80061e6:	4642      	mov	r2, r8
 80061e8:	464b      	mov	r3, r9
 80061ea:	4650      	mov	r0, sl
 80061ec:	4659      	mov	r1, fp
 80061ee:	f7fa fb2d 	bl	800084c <__aeabi_ddiv>
 80061f2:	4682      	mov	sl, r0
 80061f4:	468b      	mov	fp, r1
 80061f6:	e028      	b.n	800624a <_dtoa_r+0x3d2>
 80061f8:	2502      	movs	r5, #2
 80061fa:	e7f2      	b.n	80061e2 <_dtoa_r+0x36a>
 80061fc:	07f9      	lsls	r1, r7, #31
 80061fe:	d508      	bpl.n	8006212 <_dtoa_r+0x39a>
 8006200:	4640      	mov	r0, r8
 8006202:	4649      	mov	r1, r9
 8006204:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	3501      	adds	r5, #1
 800620e:	4680      	mov	r8, r0
 8006210:	4689      	mov	r9, r1
 8006212:	107f      	asrs	r7, r7, #1
 8006214:	3608      	adds	r6, #8
 8006216:	e7e5      	b.n	80061e4 <_dtoa_r+0x36c>
 8006218:	f000 809b 	beq.w	8006352 <_dtoa_r+0x4da>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	4f9d      	ldr	r7, [pc, #628]	; (8006494 <_dtoa_r+0x61c>)
 8006220:	425e      	negs	r6, r3
 8006222:	4b9b      	ldr	r3, [pc, #620]	; (8006490 <_dtoa_r+0x618>)
 8006224:	f006 020f 	and.w	r2, r6, #15
 8006228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	ec51 0b19 	vmov	r0, r1, d9
 8006234:	f7fa f9e0 	bl	80005f8 <__aeabi_dmul>
 8006238:	1136      	asrs	r6, r6, #4
 800623a:	4682      	mov	sl, r0
 800623c:	468b      	mov	fp, r1
 800623e:	2300      	movs	r3, #0
 8006240:	2502      	movs	r5, #2
 8006242:	2e00      	cmp	r6, #0
 8006244:	d17a      	bne.n	800633c <_dtoa_r+0x4c4>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1d3      	bne.n	80061f2 <_dtoa_r+0x37a>
 800624a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8082 	beq.w	8006356 <_dtoa_r+0x4de>
 8006252:	4b91      	ldr	r3, [pc, #580]	; (8006498 <_dtoa_r+0x620>)
 8006254:	2200      	movs	r2, #0
 8006256:	4650      	mov	r0, sl
 8006258:	4659      	mov	r1, fp
 800625a:	f7fa fc3f 	bl	8000adc <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d079      	beq.n	8006356 <_dtoa_r+0x4de>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d076      	beq.n	8006356 <_dtoa_r+0x4de>
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	dd36      	ble.n	80062dc <_dtoa_r+0x464>
 800626e:	9b00      	ldr	r3, [sp, #0]
 8006270:	4650      	mov	r0, sl
 8006272:	4659      	mov	r1, fp
 8006274:	1e5f      	subs	r7, r3, #1
 8006276:	2200      	movs	r2, #0
 8006278:	4b88      	ldr	r3, [pc, #544]	; (800649c <_dtoa_r+0x624>)
 800627a:	f7fa f9bd 	bl	80005f8 <__aeabi_dmul>
 800627e:	9e02      	ldr	r6, [sp, #8]
 8006280:	4682      	mov	sl, r0
 8006282:	468b      	mov	fp, r1
 8006284:	3501      	adds	r5, #1
 8006286:	4628      	mov	r0, r5
 8006288:	f7fa f94c 	bl	8000524 <__aeabi_i2d>
 800628c:	4652      	mov	r2, sl
 800628e:	465b      	mov	r3, fp
 8006290:	f7fa f9b2 	bl	80005f8 <__aeabi_dmul>
 8006294:	4b82      	ldr	r3, [pc, #520]	; (80064a0 <_dtoa_r+0x628>)
 8006296:	2200      	movs	r2, #0
 8006298:	f7f9 fff8 	bl	800028c <__adddf3>
 800629c:	46d0      	mov	r8, sl
 800629e:	46d9      	mov	r9, fp
 80062a0:	4682      	mov	sl, r0
 80062a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062a6:	2e00      	cmp	r6, #0
 80062a8:	d158      	bne.n	800635c <_dtoa_r+0x4e4>
 80062aa:	4b7e      	ldr	r3, [pc, #504]	; (80064a4 <_dtoa_r+0x62c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7f9 ffe9 	bl	8000288 <__aeabi_dsub>
 80062b6:	4652      	mov	r2, sl
 80062b8:	465b      	mov	r3, fp
 80062ba:	4680      	mov	r8, r0
 80062bc:	4689      	mov	r9, r1
 80062be:	f7fa fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f040 8295 	bne.w	80067f2 <_dtoa_r+0x97a>
 80062c8:	4652      	mov	r2, sl
 80062ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7fa fc03 	bl	8000adc <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f040 8289 	bne.w	80067ee <_dtoa_r+0x976>
 80062dc:	ec5b ab19 	vmov	sl, fp, d9
 80062e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f2c0 8148 	blt.w	8006578 <_dtoa_r+0x700>
 80062e8:	9a00      	ldr	r2, [sp, #0]
 80062ea:	2a0e      	cmp	r2, #14
 80062ec:	f300 8144 	bgt.w	8006578 <_dtoa_r+0x700>
 80062f0:	4b67      	ldr	r3, [pc, #412]	; (8006490 <_dtoa_r+0x618>)
 80062f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f280 80d5 	bge.w	80064ac <_dtoa_r+0x634>
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f300 80d1 	bgt.w	80064ac <_dtoa_r+0x634>
 800630a:	f040 826f 	bne.w	80067ec <_dtoa_r+0x974>
 800630e:	4b65      	ldr	r3, [pc, #404]	; (80064a4 <_dtoa_r+0x62c>)
 8006310:	2200      	movs	r2, #0
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7fa f96f 	bl	80005f8 <__aeabi_dmul>
 800631a:	4652      	mov	r2, sl
 800631c:	465b      	mov	r3, fp
 800631e:	f7fa fbf1 	bl	8000b04 <__aeabi_dcmpge>
 8006322:	9e03      	ldr	r6, [sp, #12]
 8006324:	4637      	mov	r7, r6
 8006326:	2800      	cmp	r0, #0
 8006328:	f040 8245 	bne.w	80067b6 <_dtoa_r+0x93e>
 800632c:	9d01      	ldr	r5, [sp, #4]
 800632e:	2331      	movs	r3, #49	; 0x31
 8006330:	f805 3b01 	strb.w	r3, [r5], #1
 8006334:	9b00      	ldr	r3, [sp, #0]
 8006336:	3301      	adds	r3, #1
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	e240      	b.n	80067be <_dtoa_r+0x946>
 800633c:	07f2      	lsls	r2, r6, #31
 800633e:	d505      	bpl.n	800634c <_dtoa_r+0x4d4>
 8006340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006344:	f7fa f958 	bl	80005f8 <__aeabi_dmul>
 8006348:	3501      	adds	r5, #1
 800634a:	2301      	movs	r3, #1
 800634c:	1076      	asrs	r6, r6, #1
 800634e:	3708      	adds	r7, #8
 8006350:	e777      	b.n	8006242 <_dtoa_r+0x3ca>
 8006352:	2502      	movs	r5, #2
 8006354:	e779      	b.n	800624a <_dtoa_r+0x3d2>
 8006356:	9f00      	ldr	r7, [sp, #0]
 8006358:	9e03      	ldr	r6, [sp, #12]
 800635a:	e794      	b.n	8006286 <_dtoa_r+0x40e>
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	4b4c      	ldr	r3, [pc, #304]	; (8006490 <_dtoa_r+0x618>)
 8006360:	4431      	add	r1, r6
 8006362:	910d      	str	r1, [sp, #52]	; 0x34
 8006364:	9908      	ldr	r1, [sp, #32]
 8006366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800636a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800636e:	2900      	cmp	r1, #0
 8006370:	d043      	beq.n	80063fa <_dtoa_r+0x582>
 8006372:	494d      	ldr	r1, [pc, #308]	; (80064a8 <_dtoa_r+0x630>)
 8006374:	2000      	movs	r0, #0
 8006376:	f7fa fa69 	bl	800084c <__aeabi_ddiv>
 800637a:	4652      	mov	r2, sl
 800637c:	465b      	mov	r3, fp
 800637e:	f7f9 ff83 	bl	8000288 <__aeabi_dsub>
 8006382:	9d01      	ldr	r5, [sp, #4]
 8006384:	4682      	mov	sl, r0
 8006386:	468b      	mov	fp, r1
 8006388:	4649      	mov	r1, r9
 800638a:	4640      	mov	r0, r8
 800638c:	f7fa fbce 	bl	8000b2c <__aeabi_d2iz>
 8006390:	4606      	mov	r6, r0
 8006392:	f7fa f8c7 	bl	8000524 <__aeabi_i2d>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7f9 ff73 	bl	8000288 <__aeabi_dsub>
 80063a2:	3630      	adds	r6, #48	; 0x30
 80063a4:	f805 6b01 	strb.w	r6, [r5], #1
 80063a8:	4652      	mov	r2, sl
 80063aa:	465b      	mov	r3, fp
 80063ac:	4680      	mov	r8, r0
 80063ae:	4689      	mov	r9, r1
 80063b0:	f7fa fb94 	bl	8000adc <__aeabi_dcmplt>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d163      	bne.n	8006480 <_dtoa_r+0x608>
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	4936      	ldr	r1, [pc, #216]	; (8006498 <_dtoa_r+0x620>)
 80063be:	2000      	movs	r0, #0
 80063c0:	f7f9 ff62 	bl	8000288 <__aeabi_dsub>
 80063c4:	4652      	mov	r2, sl
 80063c6:	465b      	mov	r3, fp
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 80b5 	bne.w	800653c <_dtoa_r+0x6c4>
 80063d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d4:	429d      	cmp	r5, r3
 80063d6:	d081      	beq.n	80062dc <_dtoa_r+0x464>
 80063d8:	4b30      	ldr	r3, [pc, #192]	; (800649c <_dtoa_r+0x624>)
 80063da:	2200      	movs	r2, #0
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <_dtoa_r+0x624>)
 80063e6:	4682      	mov	sl, r0
 80063e8:	468b      	mov	fp, r1
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	2200      	movs	r2, #0
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	4680      	mov	r8, r0
 80063f6:	4689      	mov	r9, r1
 80063f8:	e7c6      	b.n	8006388 <_dtoa_r+0x510>
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	f7fa f8fb 	bl	80005f8 <__aeabi_dmul>
 8006402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006404:	9d01      	ldr	r5, [sp, #4]
 8006406:	930f      	str	r3, [sp, #60]	; 0x3c
 8006408:	4682      	mov	sl, r0
 800640a:	468b      	mov	fp, r1
 800640c:	4649      	mov	r1, r9
 800640e:	4640      	mov	r0, r8
 8006410:	f7fa fb8c 	bl	8000b2c <__aeabi_d2iz>
 8006414:	4606      	mov	r6, r0
 8006416:	f7fa f885 	bl	8000524 <__aeabi_i2d>
 800641a:	3630      	adds	r6, #48	; 0x30
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7f9 ff30 	bl	8000288 <__aeabi_dsub>
 8006428:	f805 6b01 	strb.w	r6, [r5], #1
 800642c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800642e:	429d      	cmp	r5, r3
 8006430:	4680      	mov	r8, r0
 8006432:	4689      	mov	r9, r1
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	d124      	bne.n	8006484 <_dtoa_r+0x60c>
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <_dtoa_r+0x630>)
 800643c:	4650      	mov	r0, sl
 800643e:	4659      	mov	r1, fp
 8006440:	f7f9 ff24 	bl	800028c <__adddf3>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7fa fb64 	bl	8000b18 <__aeabi_dcmpgt>
 8006450:	2800      	cmp	r0, #0
 8006452:	d173      	bne.n	800653c <_dtoa_r+0x6c4>
 8006454:	4652      	mov	r2, sl
 8006456:	465b      	mov	r3, fp
 8006458:	4913      	ldr	r1, [pc, #76]	; (80064a8 <_dtoa_r+0x630>)
 800645a:	2000      	movs	r0, #0
 800645c:	f7f9 ff14 	bl	8000288 <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4640      	mov	r0, r8
 8006466:	4649      	mov	r1, r9
 8006468:	f7fa fb38 	bl	8000adc <__aeabi_dcmplt>
 800646c:	2800      	cmp	r0, #0
 800646e:	f43f af35 	beq.w	80062dc <_dtoa_r+0x464>
 8006472:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006474:	1e6b      	subs	r3, r5, #1
 8006476:	930f      	str	r3, [sp, #60]	; 0x3c
 8006478:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d0f8      	beq.n	8006472 <_dtoa_r+0x5fa>
 8006480:	9700      	str	r7, [sp, #0]
 8006482:	e049      	b.n	8006518 <_dtoa_r+0x6a0>
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <_dtoa_r+0x624>)
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	4680      	mov	r8, r0
 800648c:	4689      	mov	r9, r1
 800648e:	e7bd      	b.n	800640c <_dtoa_r+0x594>
 8006490:	08007718 	.word	0x08007718
 8006494:	080076f0 	.word	0x080076f0
 8006498:	3ff00000 	.word	0x3ff00000
 800649c:	40240000 	.word	0x40240000
 80064a0:	401c0000 	.word	0x401c0000
 80064a4:	40140000 	.word	0x40140000
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	9d01      	ldr	r5, [sp, #4]
 80064ae:	4656      	mov	r6, sl
 80064b0:	465f      	mov	r7, fp
 80064b2:	4642      	mov	r2, r8
 80064b4:	464b      	mov	r3, r9
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f9c7 	bl	800084c <__aeabi_ddiv>
 80064be:	f7fa fb35 	bl	8000b2c <__aeabi_d2iz>
 80064c2:	4682      	mov	sl, r0
 80064c4:	f7fa f82e 	bl	8000524 <__aeabi_i2d>
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	f7fa f894 	bl	80005f8 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064dc:	f7f9 fed4 	bl	8000288 <__aeabi_dsub>
 80064e0:	f805 6b01 	strb.w	r6, [r5], #1
 80064e4:	9e01      	ldr	r6, [sp, #4]
 80064e6:	9f03      	ldr	r7, [sp, #12]
 80064e8:	1bae      	subs	r6, r5, r6
 80064ea:	42b7      	cmp	r7, r6
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	d135      	bne.n	800655e <_dtoa_r+0x6e6>
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	f7fa fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8006502:	b9d0      	cbnz	r0, 800653a <_dtoa_r+0x6c2>
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7fa fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006510:	b110      	cbz	r0, 8006518 <_dtoa_r+0x6a0>
 8006512:	f01a 0f01 	tst.w	sl, #1
 8006516:	d110      	bne.n	800653a <_dtoa_r+0x6c2>
 8006518:	4620      	mov	r0, r4
 800651a:	ee18 1a10 	vmov	r1, s16
 800651e:	f7fe fcbf 	bl	8004ea0 <_Bfree>
 8006522:	2300      	movs	r3, #0
 8006524:	9800      	ldr	r0, [sp, #0]
 8006526:	702b      	strb	r3, [r5, #0]
 8006528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800652a:	3001      	adds	r0, #1
 800652c:	6018      	str	r0, [r3, #0]
 800652e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006530:	2b00      	cmp	r3, #0
 8006532:	f43f acf1 	beq.w	8005f18 <_dtoa_r+0xa0>
 8006536:	601d      	str	r5, [r3, #0]
 8006538:	e4ee      	b.n	8005f18 <_dtoa_r+0xa0>
 800653a:	9f00      	ldr	r7, [sp, #0]
 800653c:	462b      	mov	r3, r5
 800653e:	461d      	mov	r5, r3
 8006540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006544:	2a39      	cmp	r2, #57	; 0x39
 8006546:	d106      	bne.n	8006556 <_dtoa_r+0x6de>
 8006548:	9a01      	ldr	r2, [sp, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d1f7      	bne.n	800653e <_dtoa_r+0x6c6>
 800654e:	9901      	ldr	r1, [sp, #4]
 8006550:	2230      	movs	r2, #48	; 0x30
 8006552:	3701      	adds	r7, #1
 8006554:	700a      	strb	r2, [r1, #0]
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	3201      	adds	r2, #1
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	e790      	b.n	8006480 <_dtoa_r+0x608>
 800655e:	4ba6      	ldr	r3, [pc, #664]	; (80067f8 <_dtoa_r+0x980>)
 8006560:	2200      	movs	r2, #0
 8006562:	f7fa f849 	bl	80005f8 <__aeabi_dmul>
 8006566:	2200      	movs	r2, #0
 8006568:	2300      	movs	r3, #0
 800656a:	4606      	mov	r6, r0
 800656c:	460f      	mov	r7, r1
 800656e:	f7fa faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006572:	2800      	cmp	r0, #0
 8006574:	d09d      	beq.n	80064b2 <_dtoa_r+0x63a>
 8006576:	e7cf      	b.n	8006518 <_dtoa_r+0x6a0>
 8006578:	9a08      	ldr	r2, [sp, #32]
 800657a:	2a00      	cmp	r2, #0
 800657c:	f000 80d7 	beq.w	800672e <_dtoa_r+0x8b6>
 8006580:	9a06      	ldr	r2, [sp, #24]
 8006582:	2a01      	cmp	r2, #1
 8006584:	f300 80ba 	bgt.w	80066fc <_dtoa_r+0x884>
 8006588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800658a:	2a00      	cmp	r2, #0
 800658c:	f000 80b2 	beq.w	80066f4 <_dtoa_r+0x87c>
 8006590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006594:	9e07      	ldr	r6, [sp, #28]
 8006596:	9d04      	ldr	r5, [sp, #16]
 8006598:	9a04      	ldr	r2, [sp, #16]
 800659a:	441a      	add	r2, r3
 800659c:	9204      	str	r2, [sp, #16]
 800659e:	9a05      	ldr	r2, [sp, #20]
 80065a0:	2101      	movs	r1, #1
 80065a2:	441a      	add	r2, r3
 80065a4:	4620      	mov	r0, r4
 80065a6:	9205      	str	r2, [sp, #20]
 80065a8:	f7fe fd32 	bl	8005010 <__i2b>
 80065ac:	4607      	mov	r7, r0
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	dd0c      	ble.n	80065cc <_dtoa_r+0x754>
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dd09      	ble.n	80065cc <_dtoa_r+0x754>
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	9a04      	ldr	r2, [sp, #16]
 80065bc:	bfa8      	it	ge
 80065be:	462b      	movge	r3, r5
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	9204      	str	r2, [sp, #16]
 80065c4:	9a05      	ldr	r2, [sp, #20]
 80065c6:	1aed      	subs	r5, r5, r3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	9305      	str	r3, [sp, #20]
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	b31b      	cbz	r3, 8006618 <_dtoa_r+0x7a0>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80af 	beq.w	8006736 <_dtoa_r+0x8be>
 80065d8:	2e00      	cmp	r6, #0
 80065da:	dd13      	ble.n	8006604 <_dtoa_r+0x78c>
 80065dc:	4639      	mov	r1, r7
 80065de:	4632      	mov	r2, r6
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7fe fdd5 	bl	8005190 <__pow5mult>
 80065e6:	ee18 2a10 	vmov	r2, s16
 80065ea:	4601      	mov	r1, r0
 80065ec:	4607      	mov	r7, r0
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7fe fd24 	bl	800503c <__multiply>
 80065f4:	ee18 1a10 	vmov	r1, s16
 80065f8:	4680      	mov	r8, r0
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fe fc50 	bl	8004ea0 <_Bfree>
 8006600:	ee08 8a10 	vmov	s16, r8
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	1b9a      	subs	r2, r3, r6
 8006608:	d006      	beq.n	8006618 <_dtoa_r+0x7a0>
 800660a:	ee18 1a10 	vmov	r1, s16
 800660e:	4620      	mov	r0, r4
 8006610:	f7fe fdbe 	bl	8005190 <__pow5mult>
 8006614:	ee08 0a10 	vmov	s16, r0
 8006618:	2101      	movs	r1, #1
 800661a:	4620      	mov	r0, r4
 800661c:	f7fe fcf8 	bl	8005010 <__i2b>
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	4606      	mov	r6, r0
 8006626:	f340 8088 	ble.w	800673a <_dtoa_r+0x8c2>
 800662a:	461a      	mov	r2, r3
 800662c:	4601      	mov	r1, r0
 800662e:	4620      	mov	r0, r4
 8006630:	f7fe fdae 	bl	8005190 <__pow5mult>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	2b01      	cmp	r3, #1
 8006638:	4606      	mov	r6, r0
 800663a:	f340 8081 	ble.w	8006740 <_dtoa_r+0x8c8>
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	6933      	ldr	r3, [r6, #16]
 8006644:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006648:	6918      	ldr	r0, [r3, #16]
 800664a:	f7fe fc91 	bl	8004f70 <__hi0bits>
 800664e:	f1c0 0020 	rsb	r0, r0, #32
 8006652:	9b05      	ldr	r3, [sp, #20]
 8006654:	4418      	add	r0, r3
 8006656:	f010 001f 	ands.w	r0, r0, #31
 800665a:	f000 8092 	beq.w	8006782 <_dtoa_r+0x90a>
 800665e:	f1c0 0320 	rsb	r3, r0, #32
 8006662:	2b04      	cmp	r3, #4
 8006664:	f340 808a 	ble.w	800677c <_dtoa_r+0x904>
 8006668:	f1c0 001c 	rsb	r0, r0, #28
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	4403      	add	r3, r0
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	4403      	add	r3, r0
 8006676:	4405      	add	r5, r0
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	9b04      	ldr	r3, [sp, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	dd07      	ble.n	8006690 <_dtoa_r+0x818>
 8006680:	ee18 1a10 	vmov	r1, s16
 8006684:	461a      	mov	r2, r3
 8006686:	4620      	mov	r0, r4
 8006688:	f7fe fddc 	bl	8005244 <__lshift>
 800668c:	ee08 0a10 	vmov	s16, r0
 8006690:	9b05      	ldr	r3, [sp, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	dd05      	ble.n	80066a2 <_dtoa_r+0x82a>
 8006696:	4631      	mov	r1, r6
 8006698:	461a      	mov	r2, r3
 800669a:	4620      	mov	r0, r4
 800669c:	f7fe fdd2 	bl	8005244 <__lshift>
 80066a0:	4606      	mov	r6, r0
 80066a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d06e      	beq.n	8006786 <_dtoa_r+0x90e>
 80066a8:	ee18 0a10 	vmov	r0, s16
 80066ac:	4631      	mov	r1, r6
 80066ae:	f7fe fe39 	bl	8005324 <__mcmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	da67      	bge.n	8006786 <_dtoa_r+0x90e>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	ee18 1a10 	vmov	r1, s16
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	220a      	movs	r2, #10
 80066c2:	2300      	movs	r3, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7fe fc0d 	bl	8004ee4 <__multadd>
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	ee08 0a10 	vmov	s16, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 81b1 	beq.w	8006a38 <_dtoa_r+0xbc0>
 80066d6:	2300      	movs	r3, #0
 80066d8:	4639      	mov	r1, r7
 80066da:	220a      	movs	r2, #10
 80066dc:	4620      	mov	r0, r4
 80066de:	f7fe fc01 	bl	8004ee4 <__multadd>
 80066e2:	9b02      	ldr	r3, [sp, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	4607      	mov	r7, r0
 80066e8:	f300 808e 	bgt.w	8006808 <_dtoa_r+0x990>
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	dc51      	bgt.n	8006796 <_dtoa_r+0x91e>
 80066f2:	e089      	b.n	8006808 <_dtoa_r+0x990>
 80066f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066fa:	e74b      	b.n	8006594 <_dtoa_r+0x71c>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	1e5e      	subs	r6, r3, #1
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	42b3      	cmp	r3, r6
 8006704:	bfbf      	itttt	lt
 8006706:	9b07      	ldrlt	r3, [sp, #28]
 8006708:	9607      	strlt	r6, [sp, #28]
 800670a:	1af2      	sublt	r2, r6, r3
 800670c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800670e:	bfb6      	itet	lt
 8006710:	189b      	addlt	r3, r3, r2
 8006712:	1b9e      	subge	r6, r3, r6
 8006714:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	bfb8      	it	lt
 800671a:	2600      	movlt	r6, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfb7      	itett	lt
 8006720:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006724:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006728:	1a9d      	sublt	r5, r3, r2
 800672a:	2300      	movlt	r3, #0
 800672c:	e734      	b.n	8006598 <_dtoa_r+0x720>
 800672e:	9e07      	ldr	r6, [sp, #28]
 8006730:	9d04      	ldr	r5, [sp, #16]
 8006732:	9f08      	ldr	r7, [sp, #32]
 8006734:	e73b      	b.n	80065ae <_dtoa_r+0x736>
 8006736:	9a07      	ldr	r2, [sp, #28]
 8006738:	e767      	b.n	800660a <_dtoa_r+0x792>
 800673a:	9b06      	ldr	r3, [sp, #24]
 800673c:	2b01      	cmp	r3, #1
 800673e:	dc18      	bgt.n	8006772 <_dtoa_r+0x8fa>
 8006740:	f1ba 0f00 	cmp.w	sl, #0
 8006744:	d115      	bne.n	8006772 <_dtoa_r+0x8fa>
 8006746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800674a:	b993      	cbnz	r3, 8006772 <_dtoa_r+0x8fa>
 800674c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006750:	0d1b      	lsrs	r3, r3, #20
 8006752:	051b      	lsls	r3, r3, #20
 8006754:	b183      	cbz	r3, 8006778 <_dtoa_r+0x900>
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	3301      	adds	r3, #1
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	3301      	adds	r3, #1
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	f04f 0801 	mov.w	r8, #1
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af6a 	bne.w	8006642 <_dtoa_r+0x7ca>
 800676e:	2001      	movs	r0, #1
 8006770:	e76f      	b.n	8006652 <_dtoa_r+0x7da>
 8006772:	f04f 0800 	mov.w	r8, #0
 8006776:	e7f6      	b.n	8006766 <_dtoa_r+0x8ee>
 8006778:	4698      	mov	r8, r3
 800677a:	e7f4      	b.n	8006766 <_dtoa_r+0x8ee>
 800677c:	f43f af7d 	beq.w	800667a <_dtoa_r+0x802>
 8006780:	4618      	mov	r0, r3
 8006782:	301c      	adds	r0, #28
 8006784:	e772      	b.n	800666c <_dtoa_r+0x7f4>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc37      	bgt.n	80067fc <_dtoa_r+0x984>
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	2b02      	cmp	r3, #2
 8006790:	dd34      	ble.n	80067fc <_dtoa_r+0x984>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	9302      	str	r3, [sp, #8]
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	b96b      	cbnz	r3, 80067b6 <_dtoa_r+0x93e>
 800679a:	4631      	mov	r1, r6
 800679c:	2205      	movs	r2, #5
 800679e:	4620      	mov	r0, r4
 80067a0:	f7fe fba0 	bl	8004ee4 <__multadd>
 80067a4:	4601      	mov	r1, r0
 80067a6:	4606      	mov	r6, r0
 80067a8:	ee18 0a10 	vmov	r0, s16
 80067ac:	f7fe fdba 	bl	8005324 <__mcmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f73f adbb 	bgt.w	800632c <_dtoa_r+0x4b4>
 80067b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b8:	9d01      	ldr	r5, [sp, #4]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	4631      	mov	r1, r6
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7fe fb6b 	bl	8004ea0 <_Bfree>
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	f43f aea4 	beq.w	8006518 <_dtoa_r+0x6a0>
 80067d0:	f1b8 0f00 	cmp.w	r8, #0
 80067d4:	d005      	beq.n	80067e2 <_dtoa_r+0x96a>
 80067d6:	45b8      	cmp	r8, r7
 80067d8:	d003      	beq.n	80067e2 <_dtoa_r+0x96a>
 80067da:	4641      	mov	r1, r8
 80067dc:	4620      	mov	r0, r4
 80067de:	f7fe fb5f 	bl	8004ea0 <_Bfree>
 80067e2:	4639      	mov	r1, r7
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7fe fb5b 	bl	8004ea0 <_Bfree>
 80067ea:	e695      	b.n	8006518 <_dtoa_r+0x6a0>
 80067ec:	2600      	movs	r6, #0
 80067ee:	4637      	mov	r7, r6
 80067f0:	e7e1      	b.n	80067b6 <_dtoa_r+0x93e>
 80067f2:	9700      	str	r7, [sp, #0]
 80067f4:	4637      	mov	r7, r6
 80067f6:	e599      	b.n	800632c <_dtoa_r+0x4b4>
 80067f8:	40240000 	.word	0x40240000
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 80ca 	beq.w	8006998 <_dtoa_r+0xb20>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	9302      	str	r3, [sp, #8]
 8006808:	2d00      	cmp	r5, #0
 800680a:	dd05      	ble.n	8006818 <_dtoa_r+0x9a0>
 800680c:	4639      	mov	r1, r7
 800680e:	462a      	mov	r2, r5
 8006810:	4620      	mov	r0, r4
 8006812:	f7fe fd17 	bl	8005244 <__lshift>
 8006816:	4607      	mov	r7, r0
 8006818:	f1b8 0f00 	cmp.w	r8, #0
 800681c:	d05b      	beq.n	80068d6 <_dtoa_r+0xa5e>
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4620      	mov	r0, r4
 8006822:	f7fe fafd 	bl	8004e20 <_Balloc>
 8006826:	4605      	mov	r5, r0
 8006828:	b928      	cbnz	r0, 8006836 <_dtoa_r+0x9be>
 800682a:	4b87      	ldr	r3, [pc, #540]	; (8006a48 <_dtoa_r+0xbd0>)
 800682c:	4602      	mov	r2, r0
 800682e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006832:	f7ff bb3b 	b.w	8005eac <_dtoa_r+0x34>
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	3202      	adds	r2, #2
 800683a:	0092      	lsls	r2, r2, #2
 800683c:	f107 010c 	add.w	r1, r7, #12
 8006840:	300c      	adds	r0, #12
 8006842:	f000 f921 	bl	8006a88 <memcpy>
 8006846:	2201      	movs	r2, #1
 8006848:	4629      	mov	r1, r5
 800684a:	4620      	mov	r0, r4
 800684c:	f7fe fcfa 	bl	8005244 <__lshift>
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	f103 0901 	add.w	r9, r3, #1
 8006856:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800685a:	4413      	add	r3, r2
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f00a 0301 	and.w	r3, sl, #1
 8006862:	46b8      	mov	r8, r7
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	4607      	mov	r7, r0
 8006868:	4631      	mov	r1, r6
 800686a:	ee18 0a10 	vmov	r0, s16
 800686e:	f7ff fa77 	bl	8005d60 <quorem>
 8006872:	4641      	mov	r1, r8
 8006874:	9002      	str	r0, [sp, #8]
 8006876:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800687a:	ee18 0a10 	vmov	r0, s16
 800687e:	f7fe fd51 	bl	8005324 <__mcmp>
 8006882:	463a      	mov	r2, r7
 8006884:	9003      	str	r0, [sp, #12]
 8006886:	4631      	mov	r1, r6
 8006888:	4620      	mov	r0, r4
 800688a:	f7fe fd67 	bl	800535c <__mdiff>
 800688e:	68c2      	ldr	r2, [r0, #12]
 8006890:	f109 3bff 	add.w	fp, r9, #4294967295
 8006894:	4605      	mov	r5, r0
 8006896:	bb02      	cbnz	r2, 80068da <_dtoa_r+0xa62>
 8006898:	4601      	mov	r1, r0
 800689a:	ee18 0a10 	vmov	r0, s16
 800689e:	f7fe fd41 	bl	8005324 <__mcmp>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4629      	mov	r1, r5
 80068a6:	4620      	mov	r0, r4
 80068a8:	9207      	str	r2, [sp, #28]
 80068aa:	f7fe faf9 	bl	8004ea0 <_Bfree>
 80068ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068b2:	ea43 0102 	orr.w	r1, r3, r2
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	464d      	mov	r5, r9
 80068bc:	d10f      	bne.n	80068de <_dtoa_r+0xa66>
 80068be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068c2:	d02a      	beq.n	800691a <_dtoa_r+0xaa2>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd02      	ble.n	80068d0 <_dtoa_r+0xa58>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068d0:	f88b a000 	strb.w	sl, [fp]
 80068d4:	e775      	b.n	80067c2 <_dtoa_r+0x94a>
 80068d6:	4638      	mov	r0, r7
 80068d8:	e7ba      	b.n	8006850 <_dtoa_r+0x9d8>
 80068da:	2201      	movs	r2, #1
 80068dc:	e7e2      	b.n	80068a4 <_dtoa_r+0xa2c>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	db04      	blt.n	80068ee <_dtoa_r+0xa76>
 80068e4:	9906      	ldr	r1, [sp, #24]
 80068e6:	430b      	orrs	r3, r1
 80068e8:	9904      	ldr	r1, [sp, #16]
 80068ea:	430b      	orrs	r3, r1
 80068ec:	d122      	bne.n	8006934 <_dtoa_r+0xabc>
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	ddee      	ble.n	80068d0 <_dtoa_r+0xa58>
 80068f2:	ee18 1a10 	vmov	r1, s16
 80068f6:	2201      	movs	r2, #1
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7fe fca3 	bl	8005244 <__lshift>
 80068fe:	4631      	mov	r1, r6
 8006900:	ee08 0a10 	vmov	s16, r0
 8006904:	f7fe fd0e 	bl	8005324 <__mcmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	dc03      	bgt.n	8006914 <_dtoa_r+0xa9c>
 800690c:	d1e0      	bne.n	80068d0 <_dtoa_r+0xa58>
 800690e:	f01a 0f01 	tst.w	sl, #1
 8006912:	d0dd      	beq.n	80068d0 <_dtoa_r+0xa58>
 8006914:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006918:	d1d7      	bne.n	80068ca <_dtoa_r+0xa52>
 800691a:	2339      	movs	r3, #57	; 0x39
 800691c:	f88b 3000 	strb.w	r3, [fp]
 8006920:	462b      	mov	r3, r5
 8006922:	461d      	mov	r5, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800692a:	2a39      	cmp	r2, #57	; 0x39
 800692c:	d071      	beq.n	8006a12 <_dtoa_r+0xb9a>
 800692e:	3201      	adds	r2, #1
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e746      	b.n	80067c2 <_dtoa_r+0x94a>
 8006934:	2a00      	cmp	r2, #0
 8006936:	dd07      	ble.n	8006948 <_dtoa_r+0xad0>
 8006938:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800693c:	d0ed      	beq.n	800691a <_dtoa_r+0xaa2>
 800693e:	f10a 0301 	add.w	r3, sl, #1
 8006942:	f88b 3000 	strb.w	r3, [fp]
 8006946:	e73c      	b.n	80067c2 <_dtoa_r+0x94a>
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800694e:	4599      	cmp	r9, r3
 8006950:	d047      	beq.n	80069e2 <_dtoa_r+0xb6a>
 8006952:	ee18 1a10 	vmov	r1, s16
 8006956:	2300      	movs	r3, #0
 8006958:	220a      	movs	r2, #10
 800695a:	4620      	mov	r0, r4
 800695c:	f7fe fac2 	bl	8004ee4 <__multadd>
 8006960:	45b8      	cmp	r8, r7
 8006962:	ee08 0a10 	vmov	s16, r0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	f04f 020a 	mov.w	r2, #10
 800696e:	4641      	mov	r1, r8
 8006970:	4620      	mov	r0, r4
 8006972:	d106      	bne.n	8006982 <_dtoa_r+0xb0a>
 8006974:	f7fe fab6 	bl	8004ee4 <__multadd>
 8006978:	4680      	mov	r8, r0
 800697a:	4607      	mov	r7, r0
 800697c:	f109 0901 	add.w	r9, r9, #1
 8006980:	e772      	b.n	8006868 <_dtoa_r+0x9f0>
 8006982:	f7fe faaf 	bl	8004ee4 <__multadd>
 8006986:	4639      	mov	r1, r7
 8006988:	4680      	mov	r8, r0
 800698a:	2300      	movs	r3, #0
 800698c:	220a      	movs	r2, #10
 800698e:	4620      	mov	r0, r4
 8006990:	f7fe faa8 	bl	8004ee4 <__multadd>
 8006994:	4607      	mov	r7, r0
 8006996:	e7f1      	b.n	800697c <_dtoa_r+0xb04>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	9302      	str	r3, [sp, #8]
 800699c:	9d01      	ldr	r5, [sp, #4]
 800699e:	ee18 0a10 	vmov	r0, s16
 80069a2:	4631      	mov	r1, r6
 80069a4:	f7ff f9dc 	bl	8005d60 <quorem>
 80069a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	f805 ab01 	strb.w	sl, [r5], #1
 80069b2:	1aea      	subs	r2, r5, r3
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	dd09      	ble.n	80069ce <_dtoa_r+0xb56>
 80069ba:	ee18 1a10 	vmov	r1, s16
 80069be:	2300      	movs	r3, #0
 80069c0:	220a      	movs	r2, #10
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7fe fa8e 	bl	8004ee4 <__multadd>
 80069c8:	ee08 0a10 	vmov	s16, r0
 80069cc:	e7e7      	b.n	800699e <_dtoa_r+0xb26>
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bfc8      	it	gt
 80069d4:	461d      	movgt	r5, r3
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	bfd8      	it	le
 80069da:	2501      	movle	r5, #1
 80069dc:	441d      	add	r5, r3
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	ee18 1a10 	vmov	r1, s16
 80069e6:	2201      	movs	r2, #1
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7fe fc2b 	bl	8005244 <__lshift>
 80069ee:	4631      	mov	r1, r6
 80069f0:	ee08 0a10 	vmov	s16, r0
 80069f4:	f7fe fc96 	bl	8005324 <__mcmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	dc91      	bgt.n	8006920 <_dtoa_r+0xaa8>
 80069fc:	d102      	bne.n	8006a04 <_dtoa_r+0xb8c>
 80069fe:	f01a 0f01 	tst.w	sl, #1
 8006a02:	d18d      	bne.n	8006920 <_dtoa_r+0xaa8>
 8006a04:	462b      	mov	r3, r5
 8006a06:	461d      	mov	r5, r3
 8006a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a0c:	2a30      	cmp	r2, #48	; 0x30
 8006a0e:	d0fa      	beq.n	8006a06 <_dtoa_r+0xb8e>
 8006a10:	e6d7      	b.n	80067c2 <_dtoa_r+0x94a>
 8006a12:	9a01      	ldr	r2, [sp, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d184      	bne.n	8006922 <_dtoa_r+0xaaa>
 8006a18:	9b00      	ldr	r3, [sp, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2331      	movs	r3, #49	; 0x31
 8006a20:	7013      	strb	r3, [r2, #0]
 8006a22:	e6ce      	b.n	80067c2 <_dtoa_r+0x94a>
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <_dtoa_r+0xbd4>)
 8006a26:	f7ff ba95 	b.w	8005f54 <_dtoa_r+0xdc>
 8006a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f aa6e 	bne.w	8005f0e <_dtoa_r+0x96>
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <_dtoa_r+0xbd8>)
 8006a34:	f7ff ba8e 	b.w	8005f54 <_dtoa_r+0xdc>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dcae      	bgt.n	800699c <_dtoa_r+0xb24>
 8006a3e:	9b06      	ldr	r3, [sp, #24]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f73f aea8 	bgt.w	8006796 <_dtoa_r+0x91e>
 8006a46:	e7a9      	b.n	800699c <_dtoa_r+0xb24>
 8006a48:	080076df 	.word	0x080076df
 8006a4c:	08007868 	.word	0x08007868
 8006a50:	0800785b 	.word	0x0800785b

08006a54 <fiprintf>:
 8006a54:	b40e      	push	{r1, r2, r3}
 8006a56:	b503      	push	{r0, r1, lr}
 8006a58:	4601      	mov	r1, r0
 8006a5a:	ab03      	add	r3, sp, #12
 8006a5c:	4805      	ldr	r0, [pc, #20]	; (8006a74 <fiprintf+0x20>)
 8006a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	f000 f8c1 	bl	8006bec <_vfiprintf_r>
 8006a6a:	b002      	add	sp, #8
 8006a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a70:	b003      	add	sp, #12
 8006a72:	4770      	bx	lr
 8006a74:	2000000c 	.word	0x2000000c

08006a78 <malloc>:
 8006a78:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <malloc+0xc>)
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f7fe bda7 	b.w	80055d0 <_malloc_r>
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c

08006a88 <memcpy>:
 8006a88:	440a      	add	r2, r1
 8006a8a:	4291      	cmp	r1, r2
 8006a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a90:	d100      	bne.n	8006a94 <memcpy+0xc>
 8006a92:	4770      	bx	lr
 8006a94:	b510      	push	{r4, lr}
 8006a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a9e:	4291      	cmp	r1, r2
 8006aa0:	d1f9      	bne.n	8006a96 <memcpy+0xe>
 8006aa2:	bd10      	pop	{r4, pc}

08006aa4 <memmove>:
 8006aa4:	4288      	cmp	r0, r1
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	eb01 0402 	add.w	r4, r1, r2
 8006aac:	d902      	bls.n	8006ab4 <memmove+0x10>
 8006aae:	4284      	cmp	r4, r0
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	d807      	bhi.n	8006ac4 <memmove+0x20>
 8006ab4:	1e43      	subs	r3, r0, #1
 8006ab6:	42a1      	cmp	r1, r4
 8006ab8:	d008      	beq.n	8006acc <memmove+0x28>
 8006aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac2:	e7f8      	b.n	8006ab6 <memmove+0x12>
 8006ac4:	4402      	add	r2, r0
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	428a      	cmp	r2, r1
 8006aca:	d100      	bne.n	8006ace <memmove+0x2a>
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad6:	e7f7      	b.n	8006ac8 <memmove+0x24>

08006ad8 <__malloc_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_lock+0x8>)
 8006ada:	f000 bc37 	b.w	800734c <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200001a4 	.word	0x200001a4

08006ae4 <__malloc_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__malloc_unlock+0x8>)
 8006ae6:	f000 bc32 	b.w	800734e <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	200001a4 	.word	0x200001a4

08006af0 <_free_r>:
 8006af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af2:	2900      	cmp	r1, #0
 8006af4:	d044      	beq.n	8006b80 <_free_r+0x90>
 8006af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afa:	9001      	str	r0, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f1a1 0404 	sub.w	r4, r1, #4
 8006b02:	bfb8      	it	lt
 8006b04:	18e4      	addlt	r4, r4, r3
 8006b06:	f7ff ffe7 	bl	8006ad8 <__malloc_lock>
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <_free_r+0x94>)
 8006b0c:	9801      	ldr	r0, [sp, #4]
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	b933      	cbnz	r3, 8006b20 <_free_r+0x30>
 8006b12:	6063      	str	r3, [r4, #4]
 8006b14:	6014      	str	r4, [r2, #0]
 8006b16:	b003      	add	sp, #12
 8006b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b1c:	f7ff bfe2 	b.w	8006ae4 <__malloc_unlock>
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d908      	bls.n	8006b36 <_free_r+0x46>
 8006b24:	6825      	ldr	r5, [r4, #0]
 8006b26:	1961      	adds	r1, r4, r5
 8006b28:	428b      	cmp	r3, r1
 8006b2a:	bf01      	itttt	eq
 8006b2c:	6819      	ldreq	r1, [r3, #0]
 8006b2e:	685b      	ldreq	r3, [r3, #4]
 8006b30:	1949      	addeq	r1, r1, r5
 8006b32:	6021      	streq	r1, [r4, #0]
 8006b34:	e7ed      	b.n	8006b12 <_free_r+0x22>
 8006b36:	461a      	mov	r2, r3
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b10b      	cbz	r3, 8006b40 <_free_r+0x50>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x46>
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	1855      	adds	r5, r2, r1
 8006b44:	42a5      	cmp	r5, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x70>
 8006b48:	6824      	ldr	r4, [r4, #0]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	d1e0      	bne.n	8006b16 <_free_r+0x26>
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	4421      	add	r1, r4
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	e7da      	b.n	8006b16 <_free_r+0x26>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x78>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	e7d6      	b.n	8006b16 <_free_r+0x26>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1949      	addeq	r1, r1, r5
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6054      	str	r4, [r2, #4]
 8006b7e:	e7ca      	b.n	8006b16 <_free_r+0x26>
 8006b80:	b003      	add	sp, #12
 8006b82:	bd30      	pop	{r4, r5, pc}
 8006b84:	20000198 	.word	0x20000198

08006b88 <_malloc_usable_size_r>:
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f18      	subs	r0, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfbc      	itt	lt
 8006b92:	580b      	ldrlt	r3, [r1, r0]
 8006b94:	18c0      	addlt	r0, r0, r3
 8006b96:	4770      	bx	lr

08006b98 <__sfputc_r>:
 8006b98:	6893      	ldr	r3, [r2, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	b410      	push	{r4}
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	da08      	bge.n	8006bb6 <__sfputc_r+0x1e>
 8006ba4:	6994      	ldr	r4, [r2, #24]
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	db01      	blt.n	8006bae <__sfputc_r+0x16>
 8006baa:	290a      	cmp	r1, #10
 8006bac:	d103      	bne.n	8006bb6 <__sfputc_r+0x1e>
 8006bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb2:	f000 b94b 	b.w	8006e4c <__swbuf_r>
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	1c58      	adds	r0, r3, #1
 8006bba:	6010      	str	r0, [r2, #0]
 8006bbc:	7019      	strb	r1, [r3, #0]
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <__sfputs_r>:
 8006bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc8:	4606      	mov	r6, r0
 8006bca:	460f      	mov	r7, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	18d5      	adds	r5, r2, r3
 8006bd0:	42ac      	cmp	r4, r5
 8006bd2:	d101      	bne.n	8006bd8 <__sfputs_r+0x12>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e007      	b.n	8006be8 <__sfputs_r+0x22>
 8006bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bdc:	463a      	mov	r2, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ffda 	bl	8006b98 <__sfputc_r>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d1f3      	bne.n	8006bd0 <__sfputs_r+0xa>
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bec <_vfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	b09d      	sub	sp, #116	; 0x74
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4698      	mov	r8, r3
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	b118      	cbz	r0, 8006c04 <_vfiprintf_r+0x18>
 8006bfc:	6983      	ldr	r3, [r0, #24]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x18>
 8006c00:	f000 fb06 	bl	8007210 <__sinit>
 8006c04:	4b89      	ldr	r3, [pc, #548]	; (8006e2c <_vfiprintf_r+0x240>)
 8006c06:	429d      	cmp	r5, r3
 8006c08:	d11b      	bne.n	8006c42 <_vfiprintf_r+0x56>
 8006c0a:	6875      	ldr	r5, [r6, #4]
 8006c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c0e:	07d9      	lsls	r1, r3, #31
 8006c10:	d405      	bmi.n	8006c1e <_vfiprintf_r+0x32>
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	059a      	lsls	r2, r3, #22
 8006c16:	d402      	bmi.n	8006c1e <_vfiprintf_r+0x32>
 8006c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1a:	f000 fb97 	bl	800734c <__retarget_lock_acquire_recursive>
 8006c1e:	89ab      	ldrh	r3, [r5, #12]
 8006c20:	071b      	lsls	r3, r3, #28
 8006c22:	d501      	bpl.n	8006c28 <_vfiprintf_r+0x3c>
 8006c24:	692b      	ldr	r3, [r5, #16]
 8006c26:	b9eb      	cbnz	r3, 8006c64 <_vfiprintf_r+0x78>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f960 	bl	8006ef0 <__swsetup_r>
 8006c30:	b1c0      	cbz	r0, 8006c64 <_vfiprintf_r+0x78>
 8006c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c34:	07dc      	lsls	r4, r3, #31
 8006c36:	d50e      	bpl.n	8006c56 <_vfiprintf_r+0x6a>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	b01d      	add	sp, #116	; 0x74
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c42:	4b7b      	ldr	r3, [pc, #492]	; (8006e30 <_vfiprintf_r+0x244>)
 8006c44:	429d      	cmp	r5, r3
 8006c46:	d101      	bne.n	8006c4c <_vfiprintf_r+0x60>
 8006c48:	68b5      	ldr	r5, [r6, #8]
 8006c4a:	e7df      	b.n	8006c0c <_vfiprintf_r+0x20>
 8006c4c:	4b79      	ldr	r3, [pc, #484]	; (8006e34 <_vfiprintf_r+0x248>)
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	bf08      	it	eq
 8006c52:	68f5      	ldreq	r5, [r6, #12]
 8006c54:	e7da      	b.n	8006c0c <_vfiprintf_r+0x20>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	0598      	lsls	r0, r3, #22
 8006c5a:	d4ed      	bmi.n	8006c38 <_vfiprintf_r+0x4c>
 8006c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c5e:	f000 fb76 	bl	800734e <__retarget_lock_release_recursive>
 8006c62:	e7e9      	b.n	8006c38 <_vfiprintf_r+0x4c>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9309      	str	r3, [sp, #36]	; 0x24
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c72:	2330      	movs	r3, #48	; 0x30
 8006c74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e38 <_vfiprintf_r+0x24c>
 8006c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c7c:	f04f 0901 	mov.w	r9, #1
 8006c80:	4623      	mov	r3, r4
 8006c82:	469a      	mov	sl, r3
 8006c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c88:	b10a      	cbz	r2, 8006c8e <_vfiprintf_r+0xa2>
 8006c8a:	2a25      	cmp	r2, #37	; 0x25
 8006c8c:	d1f9      	bne.n	8006c82 <_vfiprintf_r+0x96>
 8006c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c92:	d00b      	beq.n	8006cac <_vfiprintf_r+0xc0>
 8006c94:	465b      	mov	r3, fp
 8006c96:	4622      	mov	r2, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7ff ff93 	bl	8006bc6 <__sfputs_r>
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f000 80aa 	beq.w	8006dfa <_vfiprintf_r+0x20e>
 8006ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca8:	445a      	add	r2, fp
 8006caa:	9209      	str	r2, [sp, #36]	; 0x24
 8006cac:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80a2 	beq.w	8006dfa <_vfiprintf_r+0x20e>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc0:	f10a 0a01 	add.w	sl, sl, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8006cce:	4654      	mov	r4, sl
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd6:	4858      	ldr	r0, [pc, #352]	; (8006e38 <_vfiprintf_r+0x24c>)
 8006cd8:	f7f9 fa82 	bl	80001e0 <memchr>
 8006cdc:	9a04      	ldr	r2, [sp, #16]
 8006cde:	b9d8      	cbnz	r0, 8006d18 <_vfiprintf_r+0x12c>
 8006ce0:	06d1      	lsls	r1, r2, #27
 8006ce2:	bf44      	itt	mi
 8006ce4:	2320      	movmi	r3, #32
 8006ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cea:	0713      	lsls	r3, r2, #28
 8006cec:	bf44      	itt	mi
 8006cee:	232b      	movmi	r3, #43	; 0x2b
 8006cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfa:	d015      	beq.n	8006d28 <_vfiprintf_r+0x13c>
 8006cfc:	9a07      	ldr	r2, [sp, #28]
 8006cfe:	4654      	mov	r4, sl
 8006d00:	2000      	movs	r0, #0
 8006d02:	f04f 0c0a 	mov.w	ip, #10
 8006d06:	4621      	mov	r1, r4
 8006d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0c:	3b30      	subs	r3, #48	; 0x30
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d94e      	bls.n	8006db0 <_vfiprintf_r+0x1c4>
 8006d12:	b1b0      	cbz	r0, 8006d42 <_vfiprintf_r+0x156>
 8006d14:	9207      	str	r2, [sp, #28]
 8006d16:	e014      	b.n	8006d42 <_vfiprintf_r+0x156>
 8006d18:	eba0 0308 	sub.w	r3, r0, r8
 8006d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	46a2      	mov	sl, r4
 8006d26:	e7d2      	b.n	8006cce <_vfiprintf_r+0xe2>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	1d19      	adds	r1, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	9103      	str	r1, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bfbb      	ittet	lt
 8006d34:	425b      	neglt	r3, r3
 8006d36:	f042 0202 	orrlt.w	r2, r2, #2
 8006d3a:	9307      	strge	r3, [sp, #28]
 8006d3c:	9307      	strlt	r3, [sp, #28]
 8006d3e:	bfb8      	it	lt
 8006d40:	9204      	strlt	r2, [sp, #16]
 8006d42:	7823      	ldrb	r3, [r4, #0]
 8006d44:	2b2e      	cmp	r3, #46	; 0x2e
 8006d46:	d10c      	bne.n	8006d62 <_vfiprintf_r+0x176>
 8006d48:	7863      	ldrb	r3, [r4, #1]
 8006d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4c:	d135      	bne.n	8006dba <_vfiprintf_r+0x1ce>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	1d1a      	adds	r2, r3, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	9203      	str	r2, [sp, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfb8      	it	lt
 8006d5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d5e:	3402      	adds	r4, #2
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e48 <_vfiprintf_r+0x25c>
 8006d66:	7821      	ldrb	r1, [r4, #0]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	f7f9 fa38 	bl	80001e0 <memchr>
 8006d70:	b140      	cbz	r0, 8006d84 <_vfiprintf_r+0x198>
 8006d72:	2340      	movs	r3, #64	; 0x40
 8006d74:	eba0 000a 	sub.w	r0, r0, sl
 8006d78:	fa03 f000 	lsl.w	r0, r3, r0
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	4303      	orrs	r3, r0
 8006d80:	3401      	adds	r4, #1
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d88:	482c      	ldr	r0, [pc, #176]	; (8006e3c <_vfiprintf_r+0x250>)
 8006d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d8e:	2206      	movs	r2, #6
 8006d90:	f7f9 fa26 	bl	80001e0 <memchr>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d03f      	beq.n	8006e18 <_vfiprintf_r+0x22c>
 8006d98:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <_vfiprintf_r+0x254>)
 8006d9a:	bb1b      	cbnz	r3, 8006de4 <_vfiprintf_r+0x1f8>
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	3307      	adds	r3, #7
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	3308      	adds	r3, #8
 8006da6:	9303      	str	r3, [sp, #12]
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	443b      	add	r3, r7
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	e767      	b.n	8006c80 <_vfiprintf_r+0x94>
 8006db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db4:	460c      	mov	r4, r1
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7a5      	b.n	8006d06 <_vfiprintf_r+0x11a>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	3401      	adds	r4, #1
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f04f 0c0a 	mov.w	ip, #10
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dcc:	3a30      	subs	r2, #48	; 0x30
 8006dce:	2a09      	cmp	r2, #9
 8006dd0:	d903      	bls.n	8006dda <_vfiprintf_r+0x1ee>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0c5      	beq.n	8006d62 <_vfiprintf_r+0x176>
 8006dd6:	9105      	str	r1, [sp, #20]
 8006dd8:	e7c3      	b.n	8006d62 <_vfiprintf_r+0x176>
 8006dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dde:	4604      	mov	r4, r0
 8006de0:	2301      	movs	r3, #1
 8006de2:	e7f0      	b.n	8006dc6 <_vfiprintf_r+0x1da>
 8006de4:	ab03      	add	r3, sp, #12
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	462a      	mov	r2, r5
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <_vfiprintf_r+0x258>)
 8006dec:	a904      	add	r1, sp, #16
 8006dee:	4630      	mov	r0, r6
 8006df0:	f3af 8000 	nop.w
 8006df4:	4607      	mov	r7, r0
 8006df6:	1c78      	adds	r0, r7, #1
 8006df8:	d1d6      	bne.n	8006da8 <_vfiprintf_r+0x1bc>
 8006dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dfc:	07d9      	lsls	r1, r3, #31
 8006dfe:	d405      	bmi.n	8006e0c <_vfiprintf_r+0x220>
 8006e00:	89ab      	ldrh	r3, [r5, #12]
 8006e02:	059a      	lsls	r2, r3, #22
 8006e04:	d402      	bmi.n	8006e0c <_vfiprintf_r+0x220>
 8006e06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e08:	f000 faa1 	bl	800734e <__retarget_lock_release_recursive>
 8006e0c:	89ab      	ldrh	r3, [r5, #12]
 8006e0e:	065b      	lsls	r3, r3, #25
 8006e10:	f53f af12 	bmi.w	8006c38 <_vfiprintf_r+0x4c>
 8006e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e16:	e711      	b.n	8006c3c <_vfiprintf_r+0x50>
 8006e18:	ab03      	add	r3, sp, #12
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <_vfiprintf_r+0x258>)
 8006e20:	a904      	add	r1, sp, #16
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7fe fe40 	bl	8005aa8 <_printf_i>
 8006e28:	e7e4      	b.n	8006df4 <_vfiprintf_r+0x208>
 8006e2a:	bf00      	nop
 8006e2c:	080078e8 	.word	0x080078e8
 8006e30:	08007908 	.word	0x08007908
 8006e34:	080078c8 	.word	0x080078c8
 8006e38:	080077ec 	.word	0x080077ec
 8006e3c:	080077f6 	.word	0x080077f6
 8006e40:	00000000 	.word	0x00000000
 8006e44:	08006bc7 	.word	0x08006bc7
 8006e48:	080077f2 	.word	0x080077f2

08006e4c <__swbuf_r>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	460e      	mov	r6, r1
 8006e50:	4614      	mov	r4, r2
 8006e52:	4605      	mov	r5, r0
 8006e54:	b118      	cbz	r0, 8006e5e <__swbuf_r+0x12>
 8006e56:	6983      	ldr	r3, [r0, #24]
 8006e58:	b90b      	cbnz	r3, 8006e5e <__swbuf_r+0x12>
 8006e5a:	f000 f9d9 	bl	8007210 <__sinit>
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <__swbuf_r+0x98>)
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d12b      	bne.n	8006ebc <__swbuf_r+0x70>
 8006e64:	686c      	ldr	r4, [r5, #4]
 8006e66:	69a3      	ldr	r3, [r4, #24]
 8006e68:	60a3      	str	r3, [r4, #8]
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	071a      	lsls	r2, r3, #28
 8006e6e:	d52f      	bpl.n	8006ed0 <__swbuf_r+0x84>
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	b36b      	cbz	r3, 8006ed0 <__swbuf_r+0x84>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	1ac0      	subs	r0, r0, r3
 8006e7a:	6963      	ldr	r3, [r4, #20]
 8006e7c:	b2f6      	uxtb	r6, r6
 8006e7e:	4283      	cmp	r3, r0
 8006e80:	4637      	mov	r7, r6
 8006e82:	dc04      	bgt.n	8006e8e <__swbuf_r+0x42>
 8006e84:	4621      	mov	r1, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 f92e 	bl	80070e8 <_fflush_r>
 8006e8c:	bb30      	cbnz	r0, 8006edc <__swbuf_r+0x90>
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	60a3      	str	r3, [r4, #8]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	701e      	strb	r6, [r3, #0]
 8006e9c:	6963      	ldr	r3, [r4, #20]
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	4283      	cmp	r3, r0
 8006ea2:	d004      	beq.n	8006eae <__swbuf_r+0x62>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d506      	bpl.n	8006eb8 <__swbuf_r+0x6c>
 8006eaa:	2e0a      	cmp	r6, #10
 8006eac:	d104      	bne.n	8006eb8 <__swbuf_r+0x6c>
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f000 f919 	bl	80070e8 <_fflush_r>
 8006eb6:	b988      	cbnz	r0, 8006edc <__swbuf_r+0x90>
 8006eb8:	4638      	mov	r0, r7
 8006eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <__swbuf_r+0x9c>)
 8006ebe:	429c      	cmp	r4, r3
 8006ec0:	d101      	bne.n	8006ec6 <__swbuf_r+0x7a>
 8006ec2:	68ac      	ldr	r4, [r5, #8]
 8006ec4:	e7cf      	b.n	8006e66 <__swbuf_r+0x1a>
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <__swbuf_r+0xa0>)
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	bf08      	it	eq
 8006ecc:	68ec      	ldreq	r4, [r5, #12]
 8006ece:	e7ca      	b.n	8006e66 <__swbuf_r+0x1a>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f000 f80c 	bl	8006ef0 <__swsetup_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d0cb      	beq.n	8006e74 <__swbuf_r+0x28>
 8006edc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ee0:	e7ea      	b.n	8006eb8 <__swbuf_r+0x6c>
 8006ee2:	bf00      	nop
 8006ee4:	080078e8 	.word	0x080078e8
 8006ee8:	08007908 	.word	0x08007908
 8006eec:	080078c8 	.word	0x080078c8

08006ef0 <__swsetup_r>:
 8006ef0:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <__swsetup_r+0xcc>)
 8006ef2:	b570      	push	{r4, r5, r6, lr}
 8006ef4:	681d      	ldr	r5, [r3, #0]
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	b125      	cbz	r5, 8006f06 <__swsetup_r+0x16>
 8006efc:	69ab      	ldr	r3, [r5, #24]
 8006efe:	b913      	cbnz	r3, 8006f06 <__swsetup_r+0x16>
 8006f00:	4628      	mov	r0, r5
 8006f02:	f000 f985 	bl	8007210 <__sinit>
 8006f06:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <__swsetup_r+0xd0>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	d10f      	bne.n	8006f2c <__swsetup_r+0x3c>
 8006f0c:	686c      	ldr	r4, [r5, #4]
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f14:	0719      	lsls	r1, r3, #28
 8006f16:	d42c      	bmi.n	8006f72 <__swsetup_r+0x82>
 8006f18:	06dd      	lsls	r5, r3, #27
 8006f1a:	d411      	bmi.n	8006f40 <__swsetup_r+0x50>
 8006f1c:	2309      	movs	r3, #9
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	e03e      	b.n	8006faa <__swsetup_r+0xba>
 8006f2c:	4b25      	ldr	r3, [pc, #148]	; (8006fc4 <__swsetup_r+0xd4>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <__swsetup_r+0x46>
 8006f32:	68ac      	ldr	r4, [r5, #8]
 8006f34:	e7eb      	b.n	8006f0e <__swsetup_r+0x1e>
 8006f36:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <__swsetup_r+0xd8>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68ec      	ldreq	r4, [r5, #12]
 8006f3e:	e7e6      	b.n	8006f0e <__swsetup_r+0x1e>
 8006f40:	0758      	lsls	r0, r3, #29
 8006f42:	d512      	bpl.n	8006f6a <__swsetup_r+0x7a>
 8006f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f46:	b141      	cbz	r1, 8006f5a <__swsetup_r+0x6a>
 8006f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d002      	beq.n	8006f56 <__swsetup_r+0x66>
 8006f50:	4630      	mov	r0, r6
 8006f52:	f7ff fdcd 	bl	8006af0 <_free_r>
 8006f56:	2300      	movs	r3, #0
 8006f58:	6363      	str	r3, [r4, #52]	; 0x34
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	b94b      	cbnz	r3, 8006f8a <__swsetup_r+0x9a>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f80:	d003      	beq.n	8006f8a <__swsetup_r+0x9a>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 fa09 	bl	800739c <__smakebuf_r>
 8006f8a:	89a0      	ldrh	r0, [r4, #12]
 8006f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f90:	f010 0301 	ands.w	r3, r0, #1
 8006f94:	d00a      	beq.n	8006fac <__swsetup_r+0xbc>
 8006f96:	2300      	movs	r3, #0
 8006f98:	60a3      	str	r3, [r4, #8]
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	61a3      	str	r3, [r4, #24]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	b943      	cbnz	r3, 8006fb6 <__swsetup_r+0xc6>
 8006fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fa8:	d1ba      	bne.n	8006f20 <__swsetup_r+0x30>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	0781      	lsls	r1, r0, #30
 8006fae:	bf58      	it	pl
 8006fb0:	6963      	ldrpl	r3, [r4, #20]
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	e7f4      	b.n	8006fa0 <__swsetup_r+0xb0>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e7f7      	b.n	8006faa <__swsetup_r+0xba>
 8006fba:	bf00      	nop
 8006fbc:	2000000c 	.word	0x2000000c
 8006fc0:	080078e8 	.word	0x080078e8
 8006fc4:	08007908 	.word	0x08007908
 8006fc8:	080078c8 	.word	0x080078c8

08006fcc <abort>:
 8006fcc:	b508      	push	{r3, lr}
 8006fce:	2006      	movs	r0, #6
 8006fd0:	f000 fa4c 	bl	800746c <raise>
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	f7fa fa03 	bl	80013e0 <_exit>
	...

08006fdc <__sflush_r>:
 8006fdc:	898a      	ldrh	r2, [r1, #12]
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	0710      	lsls	r0, r2, #28
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	d458      	bmi.n	800709c <__sflush_r+0xc0>
 8006fea:	684b      	ldr	r3, [r1, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dc05      	bgt.n	8006ffc <__sflush_r+0x20>
 8006ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dc02      	bgt.n	8006ffc <__sflush_r+0x20>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	d0f9      	beq.n	8006ff6 <__sflush_r+0x1a>
 8007002:	2300      	movs	r3, #0
 8007004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007008:	682f      	ldr	r7, [r5, #0]
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	d032      	beq.n	8007074 <__sflush_r+0x98>
 800700e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	075a      	lsls	r2, r3, #29
 8007014:	d505      	bpl.n	8007022 <__sflush_r+0x46>
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	1ac0      	subs	r0, r0, r3
 800701a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800701c:	b10b      	cbz	r3, 8007022 <__sflush_r+0x46>
 800701e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007020:	1ac0      	subs	r0, r0, r3
 8007022:	2300      	movs	r3, #0
 8007024:	4602      	mov	r2, r0
 8007026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007028:	6a21      	ldr	r1, [r4, #32]
 800702a:	4628      	mov	r0, r5
 800702c:	47b0      	blx	r6
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	d106      	bne.n	8007042 <__sflush_r+0x66>
 8007034:	6829      	ldr	r1, [r5, #0]
 8007036:	291d      	cmp	r1, #29
 8007038:	d82c      	bhi.n	8007094 <__sflush_r+0xb8>
 800703a:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <__sflush_r+0x108>)
 800703c:	40ca      	lsrs	r2, r1
 800703e:	07d6      	lsls	r6, r2, #31
 8007040:	d528      	bpl.n	8007094 <__sflush_r+0xb8>
 8007042:	2200      	movs	r2, #0
 8007044:	6062      	str	r2, [r4, #4]
 8007046:	04d9      	lsls	r1, r3, #19
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	d504      	bpl.n	8007058 <__sflush_r+0x7c>
 800704e:	1c42      	adds	r2, r0, #1
 8007050:	d101      	bne.n	8007056 <__sflush_r+0x7a>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	b903      	cbnz	r3, 8007058 <__sflush_r+0x7c>
 8007056:	6560      	str	r0, [r4, #84]	; 0x54
 8007058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705a:	602f      	str	r7, [r5, #0]
 800705c:	2900      	cmp	r1, #0
 800705e:	d0ca      	beq.n	8006ff6 <__sflush_r+0x1a>
 8007060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007064:	4299      	cmp	r1, r3
 8007066:	d002      	beq.n	800706e <__sflush_r+0x92>
 8007068:	4628      	mov	r0, r5
 800706a:	f7ff fd41 	bl	8006af0 <_free_r>
 800706e:	2000      	movs	r0, #0
 8007070:	6360      	str	r0, [r4, #52]	; 0x34
 8007072:	e7c1      	b.n	8006ff8 <__sflush_r+0x1c>
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	2301      	movs	r3, #1
 8007078:	4628      	mov	r0, r5
 800707a:	47b0      	blx	r6
 800707c:	1c41      	adds	r1, r0, #1
 800707e:	d1c7      	bne.n	8007010 <__sflush_r+0x34>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0c4      	beq.n	8007010 <__sflush_r+0x34>
 8007086:	2b1d      	cmp	r3, #29
 8007088:	d001      	beq.n	800708e <__sflush_r+0xb2>
 800708a:	2b16      	cmp	r3, #22
 800708c:	d101      	bne.n	8007092 <__sflush_r+0xb6>
 800708e:	602f      	str	r7, [r5, #0]
 8007090:	e7b1      	b.n	8006ff6 <__sflush_r+0x1a>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	e7ad      	b.n	8006ff8 <__sflush_r+0x1c>
 800709c:	690f      	ldr	r7, [r1, #16]
 800709e:	2f00      	cmp	r7, #0
 80070a0:	d0a9      	beq.n	8006ff6 <__sflush_r+0x1a>
 80070a2:	0793      	lsls	r3, r2, #30
 80070a4:	680e      	ldr	r6, [r1, #0]
 80070a6:	bf08      	it	eq
 80070a8:	694b      	ldreq	r3, [r1, #20]
 80070aa:	600f      	str	r7, [r1, #0]
 80070ac:	bf18      	it	ne
 80070ae:	2300      	movne	r3, #0
 80070b0:	eba6 0807 	sub.w	r8, r6, r7
 80070b4:	608b      	str	r3, [r1, #8]
 80070b6:	f1b8 0f00 	cmp.w	r8, #0
 80070ba:	dd9c      	ble.n	8006ff6 <__sflush_r+0x1a>
 80070bc:	6a21      	ldr	r1, [r4, #32]
 80070be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070c0:	4643      	mov	r3, r8
 80070c2:	463a      	mov	r2, r7
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b0      	blx	r6
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dc06      	bgt.n	80070da <__sflush_r+0xfe>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	e78e      	b.n	8006ff8 <__sflush_r+0x1c>
 80070da:	4407      	add	r7, r0
 80070dc:	eba8 0800 	sub.w	r8, r8, r0
 80070e0:	e7e9      	b.n	80070b6 <__sflush_r+0xda>
 80070e2:	bf00      	nop
 80070e4:	20400001 	.word	0x20400001

080070e8 <_fflush_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	4605      	mov	r5, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	b913      	cbnz	r3, 80070f8 <_fflush_r+0x10>
 80070f2:	2500      	movs	r5, #0
 80070f4:	4628      	mov	r0, r5
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	b118      	cbz	r0, 8007102 <_fflush_r+0x1a>
 80070fa:	6983      	ldr	r3, [r0, #24]
 80070fc:	b90b      	cbnz	r3, 8007102 <_fflush_r+0x1a>
 80070fe:	f000 f887 	bl	8007210 <__sinit>
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <_fflush_r+0x6c>)
 8007104:	429c      	cmp	r4, r3
 8007106:	d11b      	bne.n	8007140 <_fflush_r+0x58>
 8007108:	686c      	ldr	r4, [r5, #4]
 800710a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0ef      	beq.n	80070f2 <_fflush_r+0xa>
 8007112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007114:	07d0      	lsls	r0, r2, #31
 8007116:	d404      	bmi.n	8007122 <_fflush_r+0x3a>
 8007118:	0599      	lsls	r1, r3, #22
 800711a:	d402      	bmi.n	8007122 <_fflush_r+0x3a>
 800711c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711e:	f000 f915 	bl	800734c <__retarget_lock_acquire_recursive>
 8007122:	4628      	mov	r0, r5
 8007124:	4621      	mov	r1, r4
 8007126:	f7ff ff59 	bl	8006fdc <__sflush_r>
 800712a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800712c:	07da      	lsls	r2, r3, #31
 800712e:	4605      	mov	r5, r0
 8007130:	d4e0      	bmi.n	80070f4 <_fflush_r+0xc>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	059b      	lsls	r3, r3, #22
 8007136:	d4dd      	bmi.n	80070f4 <_fflush_r+0xc>
 8007138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713a:	f000 f908 	bl	800734e <__retarget_lock_release_recursive>
 800713e:	e7d9      	b.n	80070f4 <_fflush_r+0xc>
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <_fflush_r+0x70>)
 8007142:	429c      	cmp	r4, r3
 8007144:	d101      	bne.n	800714a <_fflush_r+0x62>
 8007146:	68ac      	ldr	r4, [r5, #8]
 8007148:	e7df      	b.n	800710a <_fflush_r+0x22>
 800714a:	4b04      	ldr	r3, [pc, #16]	; (800715c <_fflush_r+0x74>)
 800714c:	429c      	cmp	r4, r3
 800714e:	bf08      	it	eq
 8007150:	68ec      	ldreq	r4, [r5, #12]
 8007152:	e7da      	b.n	800710a <_fflush_r+0x22>
 8007154:	080078e8 	.word	0x080078e8
 8007158:	08007908 	.word	0x08007908
 800715c:	080078c8 	.word	0x080078c8

08007160 <std>:
 8007160:	2300      	movs	r3, #0
 8007162:	b510      	push	{r4, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	e9c0 3300 	strd	r3, r3, [r0]
 800716a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800716e:	6083      	str	r3, [r0, #8]
 8007170:	8181      	strh	r1, [r0, #12]
 8007172:	6643      	str	r3, [r0, #100]	; 0x64
 8007174:	81c2      	strh	r2, [r0, #14]
 8007176:	6183      	str	r3, [r0, #24]
 8007178:	4619      	mov	r1, r3
 800717a:	2208      	movs	r2, #8
 800717c:	305c      	adds	r0, #92	; 0x5c
 800717e:	f7fd fced 	bl	8004b5c <memset>
 8007182:	4b05      	ldr	r3, [pc, #20]	; (8007198 <std+0x38>)
 8007184:	6263      	str	r3, [r4, #36]	; 0x24
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <std+0x3c>)
 8007188:	62a3      	str	r3, [r4, #40]	; 0x28
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <std+0x40>)
 800718c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800718e:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <std+0x44>)
 8007190:	6224      	str	r4, [r4, #32]
 8007192:	6323      	str	r3, [r4, #48]	; 0x30
 8007194:	bd10      	pop	{r4, pc}
 8007196:	bf00      	nop
 8007198:	080074a5 	.word	0x080074a5
 800719c:	080074c7 	.word	0x080074c7
 80071a0:	080074ff 	.word	0x080074ff
 80071a4:	08007523 	.word	0x08007523

080071a8 <_cleanup_r>:
 80071a8:	4901      	ldr	r1, [pc, #4]	; (80071b0 <_cleanup_r+0x8>)
 80071aa:	f000 b8af 	b.w	800730c <_fwalk_reent>
 80071ae:	bf00      	nop
 80071b0:	080070e9 	.word	0x080070e9

080071b4 <__sfmoreglue>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	2268      	movs	r2, #104	; 0x68
 80071b8:	1e4d      	subs	r5, r1, #1
 80071ba:	4355      	muls	r5, r2
 80071bc:	460e      	mov	r6, r1
 80071be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071c2:	f7fe fa05 	bl	80055d0 <_malloc_r>
 80071c6:	4604      	mov	r4, r0
 80071c8:	b140      	cbz	r0, 80071dc <__sfmoreglue+0x28>
 80071ca:	2100      	movs	r1, #0
 80071cc:	e9c0 1600 	strd	r1, r6, [r0]
 80071d0:	300c      	adds	r0, #12
 80071d2:	60a0      	str	r0, [r4, #8]
 80071d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071d8:	f7fd fcc0 	bl	8004b5c <memset>
 80071dc:	4620      	mov	r0, r4
 80071de:	bd70      	pop	{r4, r5, r6, pc}

080071e0 <__sfp_lock_acquire>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__sfp_lock_acquire+0x8>)
 80071e2:	f000 b8b3 	b.w	800734c <__retarget_lock_acquire_recursive>
 80071e6:	bf00      	nop
 80071e8:	200001a5 	.word	0x200001a5

080071ec <__sfp_lock_release>:
 80071ec:	4801      	ldr	r0, [pc, #4]	; (80071f4 <__sfp_lock_release+0x8>)
 80071ee:	f000 b8ae 	b.w	800734e <__retarget_lock_release_recursive>
 80071f2:	bf00      	nop
 80071f4:	200001a5 	.word	0x200001a5

080071f8 <__sinit_lock_acquire>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__sinit_lock_acquire+0x8>)
 80071fa:	f000 b8a7 	b.w	800734c <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	200001a6 	.word	0x200001a6

08007204 <__sinit_lock_release>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__sinit_lock_release+0x8>)
 8007206:	f000 b8a2 	b.w	800734e <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	200001a6 	.word	0x200001a6

08007210 <__sinit>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	f7ff fff0 	bl	80071f8 <__sinit_lock_acquire>
 8007218:	69a3      	ldr	r3, [r4, #24]
 800721a:	b11b      	cbz	r3, 8007224 <__sinit+0x14>
 800721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007220:	f7ff bff0 	b.w	8007204 <__sinit_lock_release>
 8007224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007228:	6523      	str	r3, [r4, #80]	; 0x50
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <__sinit+0x68>)
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <__sinit+0x6c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	62a2      	str	r2, [r4, #40]	; 0x28
 8007232:	42a3      	cmp	r3, r4
 8007234:	bf04      	itt	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	61a3      	streq	r3, [r4, #24]
 800723a:	4620      	mov	r0, r4
 800723c:	f000 f820 	bl	8007280 <__sfp>
 8007240:	6060      	str	r0, [r4, #4]
 8007242:	4620      	mov	r0, r4
 8007244:	f000 f81c 	bl	8007280 <__sfp>
 8007248:	60a0      	str	r0, [r4, #8]
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f818 	bl	8007280 <__sfp>
 8007250:	2200      	movs	r2, #0
 8007252:	60e0      	str	r0, [r4, #12]
 8007254:	2104      	movs	r1, #4
 8007256:	6860      	ldr	r0, [r4, #4]
 8007258:	f7ff ff82 	bl	8007160 <std>
 800725c:	68a0      	ldr	r0, [r4, #8]
 800725e:	2201      	movs	r2, #1
 8007260:	2109      	movs	r1, #9
 8007262:	f7ff ff7d 	bl	8007160 <std>
 8007266:	68e0      	ldr	r0, [r4, #12]
 8007268:	2202      	movs	r2, #2
 800726a:	2112      	movs	r1, #18
 800726c:	f7ff ff78 	bl	8007160 <std>
 8007270:	2301      	movs	r3, #1
 8007272:	61a3      	str	r3, [r4, #24]
 8007274:	e7d2      	b.n	800721c <__sinit+0xc>
 8007276:	bf00      	nop
 8007278:	08007668 	.word	0x08007668
 800727c:	080071a9 	.word	0x080071a9

08007280 <__sfp>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	4607      	mov	r7, r0
 8007284:	f7ff ffac 	bl	80071e0 <__sfp_lock_acquire>
 8007288:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <__sfp+0x84>)
 800728a:	681e      	ldr	r6, [r3, #0]
 800728c:	69b3      	ldr	r3, [r6, #24]
 800728e:	b913      	cbnz	r3, 8007296 <__sfp+0x16>
 8007290:	4630      	mov	r0, r6
 8007292:	f7ff ffbd 	bl	8007210 <__sinit>
 8007296:	3648      	adds	r6, #72	; 0x48
 8007298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800729c:	3b01      	subs	r3, #1
 800729e:	d503      	bpl.n	80072a8 <__sfp+0x28>
 80072a0:	6833      	ldr	r3, [r6, #0]
 80072a2:	b30b      	cbz	r3, 80072e8 <__sfp+0x68>
 80072a4:	6836      	ldr	r6, [r6, #0]
 80072a6:	e7f7      	b.n	8007298 <__sfp+0x18>
 80072a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072ac:	b9d5      	cbnz	r5, 80072e4 <__sfp+0x64>
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <__sfp+0x88>)
 80072b0:	60e3      	str	r3, [r4, #12]
 80072b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b6:	6665      	str	r5, [r4, #100]	; 0x64
 80072b8:	f000 f847 	bl	800734a <__retarget_lock_init_recursive>
 80072bc:	f7ff ff96 	bl	80071ec <__sfp_lock_release>
 80072c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072c8:	6025      	str	r5, [r4, #0]
 80072ca:	61a5      	str	r5, [r4, #24]
 80072cc:	2208      	movs	r2, #8
 80072ce:	4629      	mov	r1, r5
 80072d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072d4:	f7fd fc42 	bl	8004b5c <memset>
 80072d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072e0:	4620      	mov	r0, r4
 80072e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e4:	3468      	adds	r4, #104	; 0x68
 80072e6:	e7d9      	b.n	800729c <__sfp+0x1c>
 80072e8:	2104      	movs	r1, #4
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff ff62 	bl	80071b4 <__sfmoreglue>
 80072f0:	4604      	mov	r4, r0
 80072f2:	6030      	str	r0, [r6, #0]
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1d5      	bne.n	80072a4 <__sfp+0x24>
 80072f8:	f7ff ff78 	bl	80071ec <__sfp_lock_release>
 80072fc:	230c      	movs	r3, #12
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	e7ee      	b.n	80072e0 <__sfp+0x60>
 8007302:	bf00      	nop
 8007304:	08007668 	.word	0x08007668
 8007308:	ffff0001 	.word	0xffff0001

0800730c <_fwalk_reent>:
 800730c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007310:	4606      	mov	r6, r0
 8007312:	4688      	mov	r8, r1
 8007314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007318:	2700      	movs	r7, #0
 800731a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800731e:	f1b9 0901 	subs.w	r9, r9, #1
 8007322:	d505      	bpl.n	8007330 <_fwalk_reent+0x24>
 8007324:	6824      	ldr	r4, [r4, #0]
 8007326:	2c00      	cmp	r4, #0
 8007328:	d1f7      	bne.n	800731a <_fwalk_reent+0xe>
 800732a:	4638      	mov	r0, r7
 800732c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d907      	bls.n	8007346 <_fwalk_reent+0x3a>
 8007336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800733a:	3301      	adds	r3, #1
 800733c:	d003      	beq.n	8007346 <_fwalk_reent+0x3a>
 800733e:	4629      	mov	r1, r5
 8007340:	4630      	mov	r0, r6
 8007342:	47c0      	blx	r8
 8007344:	4307      	orrs	r7, r0
 8007346:	3568      	adds	r5, #104	; 0x68
 8007348:	e7e9      	b.n	800731e <_fwalk_reent+0x12>

0800734a <__retarget_lock_init_recursive>:
 800734a:	4770      	bx	lr

0800734c <__retarget_lock_acquire_recursive>:
 800734c:	4770      	bx	lr

0800734e <__retarget_lock_release_recursive>:
 800734e:	4770      	bx	lr

08007350 <__swhatbuf_r>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007358:	2900      	cmp	r1, #0
 800735a:	b096      	sub	sp, #88	; 0x58
 800735c:	4614      	mov	r4, r2
 800735e:	461d      	mov	r5, r3
 8007360:	da08      	bge.n	8007374 <__swhatbuf_r+0x24>
 8007362:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	061a      	lsls	r2, r3, #24
 800736c:	d410      	bmi.n	8007390 <__swhatbuf_r+0x40>
 800736e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007372:	e00e      	b.n	8007392 <__swhatbuf_r+0x42>
 8007374:	466a      	mov	r2, sp
 8007376:	f000 f8fb 	bl	8007570 <_fstat_r>
 800737a:	2800      	cmp	r0, #0
 800737c:	dbf1      	blt.n	8007362 <__swhatbuf_r+0x12>
 800737e:	9a01      	ldr	r2, [sp, #4]
 8007380:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007384:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007388:	425a      	negs	r2, r3
 800738a:	415a      	adcs	r2, r3
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	e7ee      	b.n	800736e <__swhatbuf_r+0x1e>
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	2000      	movs	r0, #0
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	b016      	add	sp, #88	; 0x58
 8007398:	bd70      	pop	{r4, r5, r6, pc}
	...

0800739c <__smakebuf_r>:
 800739c:	898b      	ldrh	r3, [r1, #12]
 800739e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073a0:	079d      	lsls	r5, r3, #30
 80073a2:	4606      	mov	r6, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	d507      	bpl.n	80073b8 <__smakebuf_r+0x1c>
 80073a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2301      	movs	r3, #1
 80073b2:	6163      	str	r3, [r4, #20]
 80073b4:	b002      	add	sp, #8
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	ab01      	add	r3, sp, #4
 80073ba:	466a      	mov	r2, sp
 80073bc:	f7ff ffc8 	bl	8007350 <__swhatbuf_r>
 80073c0:	9900      	ldr	r1, [sp, #0]
 80073c2:	4605      	mov	r5, r0
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fe f903 	bl	80055d0 <_malloc_r>
 80073ca:	b948      	cbnz	r0, 80073e0 <__smakebuf_r+0x44>
 80073cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d0:	059a      	lsls	r2, r3, #22
 80073d2:	d4ef      	bmi.n	80073b4 <__smakebuf_r+0x18>
 80073d4:	f023 0303 	bic.w	r3, r3, #3
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	e7e3      	b.n	80073a8 <__smakebuf_r+0xc>
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <__smakebuf_r+0x7c>)
 80073e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	6020      	str	r0, [r4, #0]
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	6163      	str	r3, [r4, #20]
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	6120      	str	r0, [r4, #16]
 80073f6:	b15b      	cbz	r3, 8007410 <__smakebuf_r+0x74>
 80073f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 f8c9 	bl	8007594 <_isatty_r>
 8007402:	b128      	cbz	r0, 8007410 <__smakebuf_r+0x74>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	89a0      	ldrh	r0, [r4, #12]
 8007412:	4305      	orrs	r5, r0
 8007414:	81a5      	strh	r5, [r4, #12]
 8007416:	e7cd      	b.n	80073b4 <__smakebuf_r+0x18>
 8007418:	080071a9 	.word	0x080071a9

0800741c <_raise_r>:
 800741c:	291f      	cmp	r1, #31
 800741e:	b538      	push	{r3, r4, r5, lr}
 8007420:	4604      	mov	r4, r0
 8007422:	460d      	mov	r5, r1
 8007424:	d904      	bls.n	8007430 <_raise_r+0x14>
 8007426:	2316      	movs	r3, #22
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007432:	b112      	cbz	r2, 800743a <_raise_r+0x1e>
 8007434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007438:	b94b      	cbnz	r3, 800744e <_raise_r+0x32>
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f830 	bl	80074a0 <_getpid_r>
 8007440:	462a      	mov	r2, r5
 8007442:	4601      	mov	r1, r0
 8007444:	4620      	mov	r0, r4
 8007446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800744a:	f000 b817 	b.w	800747c <_kill_r>
 800744e:	2b01      	cmp	r3, #1
 8007450:	d00a      	beq.n	8007468 <_raise_r+0x4c>
 8007452:	1c59      	adds	r1, r3, #1
 8007454:	d103      	bne.n	800745e <_raise_r+0x42>
 8007456:	2316      	movs	r3, #22
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	2001      	movs	r0, #1
 800745c:	e7e7      	b.n	800742e <_raise_r+0x12>
 800745e:	2400      	movs	r4, #0
 8007460:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007464:	4628      	mov	r0, r5
 8007466:	4798      	blx	r3
 8007468:	2000      	movs	r0, #0
 800746a:	e7e0      	b.n	800742e <_raise_r+0x12>

0800746c <raise>:
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <raise+0xc>)
 800746e:	4601      	mov	r1, r0
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	f7ff bfd3 	b.w	800741c <_raise_r>
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c

0800747c <_kill_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d07      	ldr	r5, [pc, #28]	; (800749c <_kill_r+0x20>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	f7f9 ff99 	bl	80013c0 <_kill>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d102      	bne.n	8007498 <_kill_r+0x1c>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b103      	cbz	r3, 8007498 <_kill_r+0x1c>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	200001a0 	.word	0x200001a0

080074a0 <_getpid_r>:
 80074a0:	f7f9 bf86 	b.w	80013b0 <_getpid>

080074a4 <__sread>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	460c      	mov	r4, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	f000 f894 	bl	80075d8 <_read_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	bfab      	itete	ge
 80074b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b6:	89a3      	ldrhlt	r3, [r4, #12]
 80074b8:	181b      	addge	r3, r3, r0
 80074ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074be:	bfac      	ite	ge
 80074c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074c2:	81a3      	strhlt	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__swrite>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	461f      	mov	r7, r3
 80074cc:	898b      	ldrh	r3, [r1, #12]
 80074ce:	05db      	lsls	r3, r3, #23
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4616      	mov	r6, r2
 80074d6:	d505      	bpl.n	80074e4 <__swrite+0x1e>
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f000 f868 	bl	80075b4 <_lseek_r>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	f000 b817 	b.w	800752c <_write_r>

080074fe <__sseek>:
 80074fe:	b510      	push	{r4, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f000 f855 	bl	80075b4 <_lseek_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	bf15      	itete	ne
 8007510:	6560      	strne	r0, [r4, #84]	; 0x54
 8007512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800751a:	81a3      	strheq	r3, [r4, #12]
 800751c:	bf18      	it	ne
 800751e:	81a3      	strhne	r3, [r4, #12]
 8007520:	bd10      	pop	{r4, pc}

08007522 <__sclose>:
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 b813 	b.w	8007550 <_close_r>
	...

0800752c <_write_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	; (800754c <_write_r+0x20>)
 8007530:	4604      	mov	r4, r0
 8007532:	4608      	mov	r0, r1
 8007534:	4611      	mov	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f7f9 ff77 	bl	800142e <_write>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_write_r+0x1e>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_write_r+0x1e>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200001a0 	.word	0x200001a0

08007550 <_close_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d06      	ldr	r5, [pc, #24]	; (800756c <_close_r+0x1c>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	f7f9 ff83 	bl	8001466 <_close>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_close_r+0x1a>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_close_r+0x1a>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	200001a0 	.word	0x200001a0

08007570 <_fstat_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	; (8007590 <_fstat_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7f9 ff7e 	bl	800147e <_fstat>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_fstat_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_fstat_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	200001a0 	.word	0x200001a0

08007594 <_isatty_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d06      	ldr	r5, [pc, #24]	; (80075b0 <_isatty_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7f9 ff7d 	bl	800149e <_isatty>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_isatty_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_isatty_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200001a0 	.word	0x200001a0

080075b4 <_lseek_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d07      	ldr	r5, [pc, #28]	; (80075d4 <_lseek_r+0x20>)
 80075b8:	4604      	mov	r4, r0
 80075ba:	4608      	mov	r0, r1
 80075bc:	4611      	mov	r1, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f7f9 ff76 	bl	80014b4 <_lseek>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_lseek_r+0x1e>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_lseek_r+0x1e>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200001a0 	.word	0x200001a0

080075d8 <_read_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	; (80075f8 <_read_r+0x20>)
 80075dc:	4604      	mov	r4, r0
 80075de:	4608      	mov	r0, r1
 80075e0:	4611      	mov	r1, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f7f9 ff04 	bl	80013f4 <_read>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_read_r+0x1e>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_read_r+0x1e>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	200001a0 	.word	0x200001a0

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
