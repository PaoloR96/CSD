
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000808c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008220  08008220  00018220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008520  08008520  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008520  08008520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000248  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f53  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002530  00000000  00000000  00030ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d40  00000000  00000000  00034360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0c0  00000000  00000000  000350a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001220f  00000000  00000000  00054160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8cf5  00000000  00000000  0006636f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f064  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ca8  00000000  00000000  0011f0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008204 	.word	0x08008204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008204 	.word	0x08008204

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c36:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c56:	bf00      	nop
     __ASM volatile ("NOP");
 8000c58:	bf00      	nop
  __ASM volatile ("NOP");
 8000c5a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000c64:	2300      	movs	r3, #0
 8000c66:	e000      	b.n	8000c6a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000c68:	2301      	movs	r3, #1
  }
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000edf0 	.word	0xe000edf0
 8000c78:	e0001000 	.word	0xe0001000

08000c7c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <delay+0x40>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c8a:	f002 fdb3 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <delay+0x44>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ca0:	bf00      	nop
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <delay+0x40>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3f8      	bcc.n	8000ca2 <delay+0x26>
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e0001000 	.word	0xe0001000
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 f9b0 	bl	8002058 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f001 f992 	bl	8002058 <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DHT_Start>:


void DHT_Start (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000d40:	f7ff ff6c 	bl	8000c1c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000d44:	2120      	movs	r1, #32
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f7ff ffbb 	bl	8000cc4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f001 fb11 	bl	800237c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000d5a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000d5e:	f7ff ff8d 	bl	8000c7c <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 fb07 	bl	800237c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f7ff ff84 	bl	8000c7c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffc1 	bl	8000d00 <Set_Pin_Input>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000d8c:	2028      	movs	r0, #40	; 0x28
 8000d8e:	f7ff ff75 	bl	8000c7c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000d92:	2120      	movs	r1, #32
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fad8 	bl	800234c <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <DHT_Check_Response+0x40>
	{
		delay (80);
 8000da2:	2050      	movs	r0, #80	; 0x50
 8000da4:	f7ff ff6a 	bl	8000c7c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000da8:	2120      	movs	r1, #32
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f001 facd 	bl	800234c <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <DHT_Check_Response+0x3c>
 8000db8:	2301      	movs	r3, #1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	e001      	b.n	8000dc2 <DHT_Check_Response+0x40>
		else Response = -1;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000dc2:	bf00      	nop
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fabf 	bl	800234c <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f7      	bne.n	8000dc4 <DHT_Check_Response+0x42>

	return Response;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	71bb      	strb	r3, [r7, #6]
 8000de8:	e03a      	b.n	8000e60 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000dea:	bf00      	nop
 8000dec:	2120      	movs	r1, #32
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 faab 	bl	800234c <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f7      	beq.n	8000dec <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f7ff ff3d 	bl	8000c7c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000e02:	2120      	movs	r1, #32
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 faa0 	bl	800234c <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	f1c3 0307 	rsb	r3, r3, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e00b      	b.n	8000e48 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000e48:	bf00      	nop
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 fa7c 	bl	800234c <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f7      	bne.n	8000e4a <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9c1      	bls.n	8000dea <DHT_Read+0xc>
	}
	return i;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000e78:	f7ff ff60 	bl	8000d3c <DHT_Start>
	Presence = DHT_Check_Response ();
 8000e7c:	f7ff ff81 	bl	8000d82 <DHT_Check_Response>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <DHT_GetData+0xc8>)
 8000e86:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000e88:	f7ff ffa9 	bl	8000dde <DHT_Read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <DHT_GetData+0xcc>)
 8000e92:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000e94:	f7ff ffa3 	bl	8000dde <DHT_Read>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <DHT_GetData+0xd0>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000ea0:	f7ff ff9d 	bl	8000dde <DHT_Read>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <DHT_GetData+0xd4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000eac:	f7ff ff97 	bl	8000dde <DHT_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <DHT_GetData+0xd8>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000eb8:	f7ff ff91 	bl	8000dde <DHT_Read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <DHT_GetData+0xcc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <DHT_GetData+0xd0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <DHT_GetData+0xd4>)
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <DHT_GetData+0xd8>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d123      	bne.n	8000f2e <DHT_GetData+0xbe>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->TemperatureD = Temp_byte1;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <DHT_GetData+0xd4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->HumidityD = Rh_byte1;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <DHT_GetData+0xcc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edc3 7a02 	vstr	s15, [r3, #8]

			DHT_Data->TemperatureU = Temp_byte2;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <DHT_GetData+0xd8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->HumidityU = Rh_byte2;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <DHT_GetData+0xd0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a03 	vstr	s15, [r3, #12]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000092 	.word	0x20000092
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	2000008d 	.word	0x2000008d
 8000f44:	2000008e 	.word	0x2000008e
 8000f48:	2000008f 	.word	0x2000008f
 8000f4c:	20000090 	.word	0x20000090

08000f50 <TruncatedMean_Init>:
#include "TruncateMean.h"
void TruncatedMean_Init(TruncatedMeanData *data) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < SAMPLES; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e011      	b.n	8000f82 <TruncatedMean_Init+0x32>
    data->temperature[i] = 0;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
    data->humidity[i] = 0;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	331e      	adds	r3, #30
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES; i++) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b1d      	cmp	r3, #29
 8000f86:	ddea      	ble.n	8000f5e <TruncatedMean_Init+0xe>
  }
  data->index = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <TruncatedMean_AddSample>:

void TruncatedMean_AddSample(TruncatedMeanData *data, float temperature, float humidity) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa8:	edc7 0a01 	vstr	s1, [r7, #4]
  data->temperature[data->index] = temperature;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
  data->humidity[data->index] = humidity;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	331e      	adds	r3, #30
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
  data->index = (data->index + 1) % SAMPLES;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <TruncatedMean_AddSample+0x64>)
 8000fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fdc:	4413      	add	r3, r2
 8000fde:	1119      	asrs	r1, r3, #4
 8000fe0:	17d3      	asrs	r3, r2, #31
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	1a5b      	subs	r3, r3, r1
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	1ad1      	subs	r1, r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	88888889 	.word	0x88888889

08001004 <TruncatedMean_CalculateTemperature>:

float TruncatedMean_CalculateTemperature(TruncatedMeanData *data) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  float sum = 0;
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

  float min = data->temperature[0];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
  float max = data->temperature[0];
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	e034      	b.n	800108e <TruncatedMean_CalculateTemperature+0x8a>
    sum += data->temperature[i];
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ed97 7a05 	vldr	s14, [r7, #20]
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->temperature[i] < min) {
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ed97 7a04 	vldr	s14, [r7, #16]
 800104c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	dd05      	ble.n	8001062 <TruncatedMean_CalculateTemperature+0x5e>
      min = data->temperature[i];
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
    }
    if (data->temperature[i] > max) {
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d505      	bpl.n	8001088 <TruncatedMean_CalculateTemperature+0x84>
      max = data->temperature[i];
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b1d      	cmp	r3, #29
 8001092:	ddc7      	ble.n	8001024 <TruncatedMean_CalculateTemperature+0x20>
    }
  }
  sum -= min;
 8001094:	ed97 7a05 	vldr	s14, [r7, #20]
 8001098:	edd7 7a04 	vldr	s15, [r7, #16]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 80010a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80010bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <TruncatedMean_CalculateHumidity>:

float TruncatedMean_CalculateHumidity(TruncatedMeanData *data) {
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  float sum = 0;
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  float min = data->humidity[0];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010e4:	613b      	str	r3, [r7, #16]
  float max = data->humidity[0];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010ea:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	e039      	b.n	8001166 <TruncatedMean_CalculateHumidity+0x94>
    sum += data->humidity[i];
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	331e      	adds	r3, #30
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->humidity[i] < min) {
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	331e      	adds	r3, #30
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed97 7a04 	vldr	s14, [r7, #16]
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd06      	ble.n	8001136 <TruncatedMean_CalculateHumidity+0x64>
      min = data->humidity[i];
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331e      	adds	r3, #30
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
    }
    if (data->humidity[i] > max) {
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	331e      	adds	r3, #30
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed97 7a03 	vldr	s14, [r7, #12]
 8001148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d506      	bpl.n	8001160 <TruncatedMean_CalculateHumidity+0x8e>
      max = data->humidity[i];
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	331e      	adds	r3, #30
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3301      	adds	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b1d      	cmp	r3, #29
 800116a:	ddc2      	ble.n	80010f2 <TruncatedMean_CalculateHumidity+0x20>
    }
  }
  sum -= min;
 800116c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001170:	edd7 7a04 	vldr	s15, [r7, #16]
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 800117c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001180:	edd7 7a03 	vldr	s15, [r7, #12]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001194:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001198:	eef0 7a66 	vmov.f32	s15, s13
}
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_UART_RxCpltCallback>:
char bufferH[10],bufferT[10];
char msgRx;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive_IT(&huart1, &msgRx, 1) == HAL_OK && msgRx==one) {
 80011b4:	2201      	movs	r2, #1
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <HAL_UART_RxCpltCallback+0x3c>)
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x40>)
 80011ba:	f003 f8ab 	bl	8004314 <HAL_UART_Receive_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <HAL_UART_RxCpltCallback+0x32>
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_UART_RxCpltCallback+0x3c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b31      	cmp	r3, #49	; 0x31
 80011ca:	d108      	bne.n	80011de <HAL_UART_RxCpltCallback+0x32>
			       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_UART_RxCpltCallback+0x44>)
 80011d4:	f001 f8d2 	bl	800237c <HAL_GPIO_WritePin>
			       StartSystem=true;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_UART_RxCpltCallback+0x48>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]

	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000029e 	.word	0x2000029e
 80011ec:	200000e0 	.word	0x200000e0
 80011f0:	48001000 	.word	0x48001000
 80011f4:	20000280 	.word	0x20000280

080011f8 <HAL_TIM_PeriodElapsedCallback>:

bool StartTx=false;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if( StartSystem==true){
 8001200:	4b91      	ldr	r3, [pc, #580]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 81c5 	beq.w	8001594 <HAL_TIM_PeriodElapsedCallback+0x39c>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001210:	488e      	ldr	r0, [pc, #568]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001212:	f001 f8b3 	bl	800237c <HAL_GPIO_WritePin>
	DHT_GetData(&DHT11_Data);
 8001216:	488e      	ldr	r0, [pc, #568]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001218:	f7ff fe2a 	bl	8000e70 <DHT_GetData>
	//lettura dati
	Temperature = DHT11_Data.TemperatureD +(0.1)*DHT11_Data.TemperatureU;
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	a382      	add	r3, pc, #520	; (adr r3, 8001440 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff f821 	bl	800028c <__adddf3>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc93 	bl	8000b7c <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a7e      	ldr	r2, [pc, #504]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800125a:	6013      	str	r3, [r2, #0]
	Humidity =    DHT11_Data.HumidityD +(0.1)*DHT11_Data.HumidityU;
 800125c:	4b7c      	ldr	r3, [pc, #496]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f96a 	bl	8000548 <__aeabi_f2d>
 8001274:	a372      	add	r3, pc, #456	; (adr r3, 8001440 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f801 	bl	800028c <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc73 	bl	8000b7c <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800129a:	6013      	str	r3, [r2, #0]
	if(modo==0){
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 80ed 	bne.w	8001480 <HAL_TIM_PeriodElapsedCallback+0x288>
            	if(i<=SAMPLES){
 80012a6:	4b6e      	ldr	r3, [pc, #440]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b1e      	cmp	r3, #30
 80012ac:	dc6e      	bgt.n	800138c <HAL_TIM_PeriodElapsedCallback+0x194>
            			TruncatedMean_AddSample(&data,Temperature,Humidity);
 80012ae:	4b69      	ldr	r3, [pc, #420]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	eef0 0a47 	vmov.f32	s1, s14
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	4868      	ldr	r0, [pc, #416]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80012c4:	f7ff fe6a 	bl	8000f9c <TruncatedMean_AddSample>
            			//gcvt(Temperature, sizeof(Temperature), bufferT);
            			//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
            			//sprintf(bufferT, "\r\n");
            			//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);

						if(i==0 && StartTx==false){
 80012c8:	4b65      	ldr	r3, [pc, #404]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d157      	bne.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x188>
 80012d0:	4b65      	ldr	r3, [pc, #404]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d050      	beq.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x188>
							//Trasmissione Temp
							// sprintf(bufferT, "TMP:");
							//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
							  gcvt(Temperature, sizeof(Temperature), bufferT);
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f930 	bl	8000548 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	495f      	ldr	r1, [pc, #380]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80012ee:	2004      	movs	r0, #4
 80012f0:	ec43 2b10 	vmov	d0, r2, r3
 80012f4:	f004 f9e8 	bl	80056c8 <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80012f8:	485c      	ldr	r0, [pc, #368]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80012fa:	f7fe ff69 	bl	80001d0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	4959      	ldr	r1, [pc, #356]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001308:	4859      	ldr	r0, [pc, #356]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800130a:	f002 ff79 	bl	8004200 <HAL_UART_Transmit>
							   sprintf(bufferT, "+");
 800130e:	4959      	ldr	r1, [pc, #356]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001310:	4856      	ldr	r0, [pc, #344]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001312:	f004 fa2f 	bl	8005774 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001316:	4855      	ldr	r0, [pc, #340]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001318:	f7fe ff5a 	bl	80001d0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	4951      	ldr	r1, [pc, #324]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001326:	4852      	ldr	r0, [pc, #328]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001328:	f002 ff6a 	bl	8004200 <HAL_UART_Transmit>

							   //Trasmissione Umidità
							   //sprintf(bufferH, "HDY:");
							   //HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
							   gcvt(Humidity, sizeof(Humidity), bufferH);
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	494f      	ldr	r1, [pc, #316]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800133c:	2004      	movs	r0, #4
 800133e:	ec43 2b10 	vmov	d0, r2, r3
 8001342:	f004 f9c1 	bl	80056c8 <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001346:	484c      	ldr	r0, [pc, #304]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001348:	f7fe ff42 	bl	80001d0 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	4948      	ldr	r1, [pc, #288]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001356:	4846      	ldr	r0, [pc, #280]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001358:	f002 ff52 	bl	8004200 <HAL_UART_Transmit>
							    sprintf(bufferH, "s");
 800135c:	4947      	ldr	r1, [pc, #284]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800135e:	4846      	ldr	r0, [pc, #280]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001360:	f004 fa08 	bl	8005774 <siprintf>
							     HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001364:	4844      	ldr	r0, [pc, #272]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001366:	f7fe ff33 	bl	80001d0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	4941      	ldr	r1, [pc, #260]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001374:	483e      	ldr	r0, [pc, #248]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001376:	f002 ff43 	bl	8004200 <HAL_UART_Transmit>
							     StartTx=true;
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

						}
						i++;
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001388:	6013      	str	r3, [r2, #0]
	}

 }


}
 800138a:	e103      	b.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x39c>
						i=0;
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
						float TmpMean= TruncatedMean_CalculateTemperature(&data);
 8001392:	4834      	ldr	r0, [pc, #208]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001394:	f7ff fe36 	bl	8001004 <TruncatedMean_CalculateTemperature>
 8001398:	ed87 0a03 	vstr	s0, [r7, #12]
						float TmpHmdy= TruncatedMean_CalculateHumidity(&data);
 800139c:	4831      	ldr	r0, [pc, #196]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800139e:	f7ff fe98 	bl	80010d2 <TruncatedMean_CalculateHumidity>
 80013a2:	ed87 0a02 	vstr	s0, [r7, #8]
            			gcvt(TmpMean, sizeof(TmpMean), bufferT);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff f8ce 	bl	8000548 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	492e      	ldr	r1, [pc, #184]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013b2:	2004      	movs	r0, #4
 80013b4:	ec43 2b10 	vmov	d0, r2, r3
 80013b8:	f004 f986 	bl	80056c8 <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80013bc:	482b      	ldr	r0, [pc, #172]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013be:	f7fe ff07 	bl	80001d0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	4928      	ldr	r1, [pc, #160]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013cc:	4828      	ldr	r0, [pc, #160]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013ce:	f002 ff17 	bl	8004200 <HAL_UART_Transmit>
            			sprintf(bufferT, "+");
 80013d2:	4928      	ldr	r1, [pc, #160]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013d4:	4825      	ldr	r0, [pc, #148]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013d6:	f004 f9cd 	bl	8005774 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80013da:	4824      	ldr	r0, [pc, #144]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013dc:	f7fe fef8 	bl	80001d0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	4920      	ldr	r1, [pc, #128]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013ea:	4821      	ldr	r0, [pc, #132]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013ec:	f002 ff08 	bl	8004200 <HAL_UART_Transmit>
            			gcvt(TmpHmdy, sizeof(TmpHmdy), bufferH);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff f8a9 	bl	8000548 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	491f      	ldr	r1, [pc, #124]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80013fc:	2004      	movs	r0, #4
 80013fe:	ec43 2b10 	vmov	d0, r2, r3
 8001402:	f004 f961 	bl	80056c8 <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001406:	481c      	ldr	r0, [pc, #112]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	4918      	ldr	r1, [pc, #96]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001416:	4816      	ldr	r0, [pc, #88]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001418:	f002 fef2 	bl	8004200 <HAL_UART_Transmit>
            			sprintf(bufferH, "s");
 800141c:	4917      	ldr	r1, [pc, #92]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800141e:	4816      	ldr	r0, [pc, #88]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001420:	f004 f9a8 	bl	8005774 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001426:	f7fe fed3 	bl	80001d0 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4911      	ldr	r1, [pc, #68]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001434:	480e      	ldr	r0, [pc, #56]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001436:	f002 fee3 	bl	8004200 <HAL_UART_Transmit>
}
 800143a:	e0ab      	b.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x39c>
 800143c:	f3af 8000 	nop.w
 8001440:	9999999a 	.word	0x9999999a
 8001444:	3fb99999 	.word	0x3fb99999
 8001448:	20000280 	.word	0x20000280
 800144c:	48001000 	.word	0x48001000
 8001450:	20000168 	.word	0x20000168
 8001454:	2000026c 	.word	0x2000026c
 8001458:	20000270 	.word	0x20000270
 800145c:	2000027c 	.word	0x2000027c
 8001460:	20000284 	.word	0x20000284
 8001464:	20000178 	.word	0x20000178
 8001468:	2000029f 	.word	0x2000029f
 800146c:	20000294 	.word	0x20000294
 8001470:	200000e0 	.word	0x200000e0
 8001474:	08008220 	.word	0x08008220
 8001478:	20000288 	.word	0x20000288
 800147c:	08008224 	.word	0x08008224
					if((Temperature!=LastTemperature)||(LastHumidity!=Humidity)){
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001482:	ed93 7a00 	vldr	s14, [r3]
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d10a      	bne.n	80014ac <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	d073      	beq.n	8001594 <HAL_TIM_PeriodElapsedCallback+0x39c>
						if (Temperature - LastTemperature >= DT || LastTemperature - Temperature >= DT ) {
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	da0e      	bge.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	db4d      	blt.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x38c>
							gcvt(Temperature, sizeof(Temperature), bufferT);
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_f2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	492d      	ldr	r1, [pc, #180]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80014f8:	2004      	movs	r0, #4
 80014fa:	ec43 2b10 	vmov	d0, r2, r3
 80014fe:	f004 f8e3 	bl	80056c8 <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001502:	482a      	ldr	r0, [pc, #168]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001504:	f7fe fe64 	bl	80001d0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4926      	ldr	r1, [pc, #152]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001512:	4827      	ldr	r0, [pc, #156]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001514:	f002 fe74 	bl	8004200 <HAL_UART_Transmit>
							sprintf(bufferT, "+");
 8001518:	4926      	ldr	r1, [pc, #152]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800151a:	4824      	ldr	r0, [pc, #144]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800151c:	f004 f92a 	bl	8005774 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001520:	4822      	ldr	r0, [pc, #136]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001522:	f7fe fe55 	bl	80001d0 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	491f      	ldr	r1, [pc, #124]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001530:	481f      	ldr	r0, [pc, #124]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001532:	f002 fe65 	bl	8004200 <HAL_UART_Transmit>
							gcvt(Humidity, sizeof(Humidity), bufferH);
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f804 	bl	8000548 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	491c      	ldr	r1, [pc, #112]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001546:	2004      	movs	r0, #4
 8001548:	ec43 2b10 	vmov	d0, r2, r3
 800154c:	f004 f8bc 	bl	80056c8 <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001552:	f7fe fe3d 	bl	80001d0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001562:	f002 fe4d 	bl	8004200 <HAL_UART_Transmit>
							sprintf(bufferH, "s");
 8001566:	4915      	ldr	r1, [pc, #84]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800156a:	f004 f903 	bl	8005774 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001570:	f7fe fe2e 	bl	80001d0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001580:	f002 fe3e 	bl	8004200 <HAL_UART_Transmit>
						LastTemperature=Temperature;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800158a:	6013      	str	r3, [r2, #0]
						LastHumidity=Humidity;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	2000026c 	.word	0x2000026c
 80015a0:	20000274 	.word	0x20000274
 80015a4:	20000278 	.word	0x20000278
 80015a8:	20000270 	.word	0x20000270
 80015ac:	20000294 	.word	0x20000294
 80015b0:	200000e0 	.word	0x200000e0
 80015b4:	08008220 	.word	0x08008220
 80015b8:	20000288 	.word	0x20000288
 80015bc:	08008224 	.word	0x08008224

080015c0 <main>:




int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c4:	f000 fb5a 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c8:	f000 f87c 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015cc:	f000 f920 	bl	8001810 <MX_GPIO_Init>
  MX_TIM16_Init();
 80015d0:	f000 f8c8 	bl	8001764 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80015d4:	f000 f8ec 	bl	80017b0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim16);
 80015d8:	482f      	ldr	r0, [pc, #188]	; (8001698 <main+0xd8>)
 80015da:	f002 fb63 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
  TruncatedMean_Init(&data);
 80015de:	482f      	ldr	r0, [pc, #188]	; (800169c <main+0xdc>)
 80015e0:	f7ff fcb6 	bl	8000f50 <TruncatedMean_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	482d      	ldr	r0, [pc, #180]	; (80016a0 <main+0xe0>)
 80015ec:	f000 fec6 	bl	800237c <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &msgRx, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	492c      	ldr	r1, [pc, #176]	; (80016a4 <main+0xe4>)
 80015f4:	482c      	ldr	r0, [pc, #176]	; (80016a8 <main+0xe8>)
 80015f6:	f002 fe8d 	bl	8004314 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001600:	4827      	ldr	r0, [pc, #156]	; (80016a0 <main+0xe0>)
 8001602:	f000 febb 	bl	800237c <HAL_GPIO_WritePin>



	  	  if((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0 &&  StartSystem==true){
 8001606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d1f2      	bne.n	80015fa <main+0x3a>
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <main+0xec>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <main+0x3a>
	  	 		  while((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0);
 800161c:	bf00      	nop
 800161e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d0f8      	beq.n	800161e <main+0x5e>
	  	 		  if(modo==0){
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <main+0xf0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d117      	bne.n	8001664 <main+0xa4>
	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4819      	ldr	r0, [pc, #100]	; (80016a0 <main+0xe0>)
 800163c:	f000 fe9e 	bl	800237c <HAL_GPIO_WritePin>
	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001646:	4816      	ldr	r0, [pc, #88]	; (80016a0 <main+0xe0>)
 8001648:	f000 fe98 	bl	800237c <HAL_GPIO_WritePin>
	  	 			  modo=1;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <main+0xf0>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
	  	 			  LastTemperature=0;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <main+0xf4>)
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
	  	 			  LastHumidity=0;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <main+0xf8>)
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e7ca      	b.n	80015fa <main+0x3a>


	  	 		  }else{
	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <main+0xe0>)
 800166c:	f000 fe86 	bl	800237c <HAL_GPIO_WritePin>
	  	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <main+0xe0>)
 8001678:	f000 fe80 	bl	800237c <HAL_GPIO_WritePin>
	  	 			  modo=0;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <main+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
	  	 			  i=0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <main+0xfc>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
	  	 			  TruncatedMean_Init(&data);
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <main+0xdc>)
 800168a:	f7ff fc61 	bl	8000f50 <TruncatedMean_Init>
	  	 			  StartTx=false;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <main+0x100>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8001694:	e7b1      	b.n	80015fa <main+0x3a>
 8001696:	bf00      	nop
 8001698:	20000094 	.word	0x20000094
 800169c:	20000178 	.word	0x20000178
 80016a0:	48001000 	.word	0x48001000
 80016a4:	2000029e 	.word	0x2000029e
 80016a8:	200000e0 	.word	0x200000e0
 80016ac:	20000280 	.word	0x20000280
 80016b0:	2000027c 	.word	0x2000027c
 80016b4:	20000274 	.word	0x20000274
 80016b8:	20000278 	.word	0x20000278
 80016bc:	20000284 	.word	0x20000284
 80016c0:	2000029f 	.word	0x2000029f

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b09e      	sub	sp, #120	; 0x78
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016ce:	2228      	movs	r2, #40	; 0x28
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f846 	bl	8005764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	223c      	movs	r2, #60	; 0x3c
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f838 	bl	8005764 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f4:	2302      	movs	r3, #2
 80016f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fc:	2310      	movs	r3, #16
 80016fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fe4f 	bl	80023ac <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001714:	f000 f8d6 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800171c:	2300      	movs	r3, #0
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800172c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fe78 	bl	8003428 <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800173e:	f000 f8c1 	bl	80018c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001742:	2301      	movs	r3, #1
 8001744:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4618      	mov	r0, r3
 800174e:	f002 f8a1 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001758:	f000 f8b4 	bl	80018c4 <Error_Handler>
  }
}
 800175c:	bf00      	nop
 800175e:	3778      	adds	r7, #120	; 0x78
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_TIM16_Init+0x44>)
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <MX_TIM16_Init+0x48>)
 800176c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50000;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_TIM16_Init+0x44>)
 8001770:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001774:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_TIM16_Init+0x44>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_TIM16_Init+0x44>)
 800177e:	2264      	movs	r2, #100	; 0x64
 8001780:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_TIM16_Init+0x44>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_TIM16_Init+0x44>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_TIM16_Init+0x44>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_TIM16_Init+0x44>)
 8001796:	f002 fa2d 	bl	8003bf4 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80017a0:	f000 f890 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000094 	.word	0x20000094
 80017ac:	40014400 	.word	0x40014400

080017b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_USART1_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART1_UART_Init+0x58>)
 80017f4:	f002 fcb6 	bl	8004164 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f861 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000e0 	.word	0x200000e0
 800180c:	40013800 	.word	0x40013800

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <MX_GPIO_Init+0xac>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a24      	ldr	r2, [pc, #144]	; (80018bc <MX_GPIO_Init+0xac>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	6153      	str	r3, [r2, #20]
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_GPIO_Init+0xac>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_GPIO_Init+0xac>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <MX_GPIO_Init+0xac>)
 8001844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001848:	6153      	str	r3, [r2, #20]
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_GPIO_Init+0xac>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_GPIO_Init+0xac>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <MX_GPIO_Init+0xac>)
 800185c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001860:	6153      	str	r3, [r2, #20]
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_GPIO_Init+0xac>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_GPIO_Init+0xb0>)
 8001876:	f000 fd81 	bl	800237c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800187a:	2321      	movs	r3, #33	; 0x21
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f000 fbe2 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001894:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001898:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_GPIO_Init+0xb0>)
 80018ae:	f000 fbd3 	bl	8002058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48001000 	.word	0x48001000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_MspInit+0x44>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_MspInit+0x44>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_MspInit+0x44>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_MspInit+0x44>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_MspInit+0x44>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_MspInit+0x44>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_TIM_Base_MspInit+0x44>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2102      	movs	r1, #2
 8001946:	2019      	movs	r0, #25
 8001948:	f000 fad9 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800194c:	2019      	movs	r0, #25
 800194e:	f000 faf2 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40014400 	.word	0x40014400
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_UART_MspInit+0x8c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12f      	bne.n	80019e6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_UART_MspInit+0x90>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_UART_MspInit+0x90>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x90>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x90>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_UART_MspInit+0x90>)
 80019a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019a8:	6153      	str	r3, [r2, #20]
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_UART_MspInit+0x90>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019b6:	2330      	movs	r3, #48	; 0x30
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c6:	2307      	movs	r3, #7
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <HAL_UART_MspInit+0x94>)
 80019d2:	f000 fb41 	bl	8002058 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2101      	movs	r1, #1
 80019da:	2025      	movs	r0, #37	; 0x25
 80019dc:	f000 fa8f 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e0:	2025      	movs	r0, #37	; 0x25
 80019e2:	f000 faa8 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f95e 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a56:	f002 f98f 	bl	8003d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000094 	.word	0x20000094

08001a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <USART1_IRQHandler+0x10>)
 8001a6a:	f002 fc97 	bl	800439c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000e0 	.word	0x200000e0

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	f003 fe3d 	bl	8005710 <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2216      	movs	r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe7 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	e7fe      	b.n	8001aba <_exit+0x12>

08001abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ace:	f3af 8000 	nop.w
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
  }

  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e009      	b.n	8001b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	60ba      	str	r2, [r7, #8]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbf1      	blt.n	8001b08 <_write+0x12>
  }
  return len;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_close>:

int _close(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b56:	605a      	str	r2, [r3, #4]
  return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_isatty>:

int _isatty(int file)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f003 fda2 	bl	8005710 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <_sbrk+0x64>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000a000 	.word	0x2000a000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	200002a0 	.word	0x200002a0
 8001c00:	200002b8 	.word	0x200002b8

08001c04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <SystemInit+0x20>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <SystemInit+0x20>)
 8001c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c2c:	f7ff ffea 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	; (8001c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <LoopForever+0xe>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	; (8001c74 <LoopForever+0x16>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c56:	f003 fd61 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c5a:	f7ff fcb1 	bl	80015c0 <main>

08001c5e <LoopForever>:

LoopForever:
    b LoopForever
 8001c5e:	e7fe      	b.n	8001c5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c6c:	08008528 	.word	0x08008528
  ldr r2, =_sbss
 8001c70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c74:	200002b8 	.word	0x200002b8

08001c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_2_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_Init+0x28>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_Init+0x28>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f92b 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fe1a 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f943 	bl	8001f52 <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f90b 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	200002a4 	.word	0x200002a4

08001d30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200002a4 	.word	0x200002a4

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e020      	b.n	8001fd0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020e 	bic.w	r2, r2, #14
 8001f9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d005      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e027      	b.n	800204e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 020e 	bic.w	r2, r2, #14
 800200c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
    } 
  }
  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e154      	b.n	8002312 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8146 	beq.w	800230c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d005      	beq.n	8002098 <HAL_GPIO_Init+0x40>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b03      	cmp	r3, #3
 8002104:	d017      	beq.n	8002136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d123      	bne.n	800218a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	6939      	ldr	r1, [r7, #16]
 8002186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80a0 	beq.w	800230c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a57      	ldr	r2, [pc, #348]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_GPIO_Init+0x2d8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_GPIO_Init+0x2dc>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800220e:	d019      	beq.n	8002244 <HAL_GPIO_Init+0x1ec>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_GPIO_Init+0x2e0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1e8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a48      	ldr	r2, [pc, #288]	; (800233c <HAL_GPIO_Init+0x2e4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a47      	ldr	r2, [pc, #284]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1dc>
 8002230:	2304      	movs	r3, #4
 8002232:	e008      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002234:	2305      	movs	r3, #5
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002238:	2303      	movs	r3, #3
 800223a:	e004      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002244:	2300      	movs	r3, #0
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	4093      	lsls	r3, r2
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002256:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_GPIO_Init+0x2dc>)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002288:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022dc:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f aea3 	bne.w	8002068 <HAL_GPIO_Init+0x10>
  }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	48000400 	.word	0x48000400
 800233c:	48000800 	.word	0x48000800
 8002340:	48000c00 	.word	0x48000c00
 8002344:	48001000 	.word	0x48001000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f001 b823 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 817d 	beq.w	80026e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e8:	4bbc      	ldr	r3, [pc, #752]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f4:	4bb9      	ldr	r3, [pc, #740]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d15c      	bne.n	80024ba <HAL_RCC_OscConfig+0x10e>
 8002400:	4bb6      	ldr	r3, [pc, #728]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d155      	bne.n	80024ba <HAL_RCC_OscConfig+0x10e>
 800240e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002412:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002422:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0x94>
 800243a:	4ba8      	ldr	r3, [pc, #672]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e015      	b.n	800246c <HAL_RCC_OscConfig+0xc0>
 8002440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002444:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002458:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800245c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002468:	4b9c      	ldr	r3, [pc, #624]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002470:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002474:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002480:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 811f 	beq.w	80026e0 <HAL_RCC_OscConfig+0x334>
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8116 	bne.w	80026e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f000 bfaf 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x12e>
 80024cc:	4b83      	ldr	r3, [pc, #524]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a82      	ldr	r2, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e036      	b.n	8002548 <HAL_RCC_OscConfig+0x19c>
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x158>
 80024ea:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7b      	ldr	r2, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b79      	ldr	r3, [pc, #484]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a78      	ldr	r2, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80024fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e021      	b.n	8002548 <HAL_RCC_OscConfig+0x19c>
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x184>
 8002516:	4b71      	ldr	r3, [pc, #452]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6e      	ldr	r3, [pc, #440]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6d      	ldr	r2, [pc, #436]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0x19c>
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002548:	4b64      	ldr	r3, [pc, #400]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f023 020f 	bic.w	r2, r3, #15
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	495f      	ldr	r1, [pc, #380]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 800255e:	4313      	orrs	r3, r2
 8002560:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d059      	beq.n	8002626 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff fbdd 	bl	8001d30 <HAL_GetTick>
 8002576:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fbd8 	bl	8001d30 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d902      	bls.n	8002592 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	f000 bf43 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002596:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_RCC_OscConfig+0x218>
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e015      	b.n	80025f0 <HAL_RCC_OscConfig+0x244>
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025fc:	fa92 f2a2 	rbit	r2, r2
 8002600:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002604:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ab      	beq.n	800257c <HAL_RCC_OscConfig+0x1d0>
 8002624:	e05d      	b.n	80026e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff fb83 	bl	8001d30 <HAL_GetTick>
 800262a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7ff fb7e 	bl	8001d30 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d902      	bls.n	8002646 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	f000 bee9 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800265a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0x2cc>
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	e015      	b.n	80026a4 <HAL_RCC_OscConfig+0x2f8>
 8002678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800267c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800268c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002690:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002694:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_RCC_OscConfig+0x330>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026b0:	fa92 f2a2 	rbit	r2, r2
 80026b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ab      	bne.n	8002630 <HAL_RCC_OscConfig+0x284>
 80026d8:	e003      	b.n	80026e2 <HAL_RCC_OscConfig+0x336>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 817d 	beq.w	80029f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f8:	4ba6      	ldr	r3, [pc, #664]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002704:	4ba3      	ldr	r3, [pc, #652]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d172      	bne.n	80027f6 <HAL_RCC_OscConfig+0x44a>
 8002710:	4ba0      	ldr	r3, [pc, #640]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d16c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x44a>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800272e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0x3a0>
 8002746:	4b93      	ldr	r3, [pc, #588]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x3c8>
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002764:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002770:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800277a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002786:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCC_OscConfig+0x410>
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f000 be2e 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b75      	ldr	r3, [pc, #468]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	21f8      	movs	r1, #248	; 0xf8
 80027d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027da:	fa91 f1a1 	rbit	r1, r1
 80027de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027e6:	fab1 f181 	clz	r1, r1
 80027ea:	b2c9      	uxtb	r1, r1
 80027ec:	408b      	lsls	r3, r1
 80027ee:	4969      	ldr	r1, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f4:	e0fd      	b.n	80029f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8088 	beq.w	8002918 <HAL_RCC_OscConfig+0x56c>
 8002808:	2301      	movs	r3, #1
 800280a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800281a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	461a      	mov	r2, r3
 8002830:	2301      	movs	r3, #1
 8002832:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff fa7c 	bl	8001d30 <HAL_GetTick>
 8002838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff fa77 	bl	8001d30 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	f000 bde2 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002866:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0x4d8>
 800287e:	4b45      	ldr	r3, [pc, #276]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0x500>
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800289c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2202      	movs	r2, #2
 80028ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028b6:	fa92 f2a2 	rbit	r2, r2
 80028ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0af      	beq.n	800283e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	21f8      	movs	r1, #248	; 0xf8
 80028f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028fc:	fa91 f1a1 	rbit	r1, r1
 8002900:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002904:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002908:	fab1 f181 	clz	r1, r1
 800290c:	b2c9      	uxtb	r1, r1
 800290e:	408b      	lsls	r3, r1
 8002910:	4920      	ldr	r1, [pc, #128]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
 8002916:	e06c      	b.n	80029f2 <HAL_RCC_OscConfig+0x646>
 8002918:	2301      	movs	r3, #1
 800291a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800292a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	461a      	mov	r2, r3
 8002940:	2300      	movs	r3, #0
 8002942:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f9f4 	bl	8001d30 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294e:	f7ff f9ef 	bl	8001d30 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	f000 bd5a 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d104      	bne.n	8002998 <HAL_RCC_OscConfig+0x5ec>
 800298e:	4b01      	ldr	r3, [pc, #4]	; (8002994 <HAL_RCC_OscConfig+0x5e8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e015      	b.n	80029c0 <HAL_RCC_OscConfig+0x614>
 8002994:	40021000 	.word	0x40021000
 8002998:	2302      	movs	r3, #2
 800299a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029bc:	4bc8      	ldr	r3, [pc, #800]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2202      	movs	r2, #2
 80029c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029ca:	fa92 f2a2 	rbit	r2, r2
 80029ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ad      	bne.n	800294e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8110 	beq.w	8002c28 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d079      	beq.n	8002b0c <HAL_RCC_OscConfig+0x760>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4bab      	ldr	r3, [pc, #684]	; (8002ce4 <HAL_RCC_OscConfig+0x938>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2301      	movs	r3, #1
 8002a40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7ff f975 	bl	8001d30 <HAL_GetTick>
 8002a46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f970 	bl	8001d30 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f000 bcdb 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002aba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abc:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac8:	2102      	movs	r1, #2
 8002aca:	6019      	str	r1, [r3, #0]
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f1a3 	rbit	r1, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae2:	6019      	str	r1, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0a0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x6a0>
 8002b0a:	e08d      	b.n	8002c28 <HAL_RCC_OscConfig+0x87c>
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f2a3 	rbit	r2, r3
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b2e:	601a      	str	r2, [r3, #0]
  return result;
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x938>)
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff f8ef 	bl	8001d30 <HAL_GetTick>
 8002b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7ff f8ea 	bl	8001d30 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d902      	bls.n	8002b6e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f000 bc55 	b.w	8003418 <HAL_RCC_OscConfig+0x106c>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002be6:	2102      	movs	r1, #2
 8002be8:	6019      	str	r1, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f1a3 	rbit	r1, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c00:	6019      	str	r1, [r3, #0]
  return result;
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d197      	bne.n	8002b58 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 81a1 	beq.w	8002f80 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c44:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCC_OscConfig+0x93c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x93c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_RCC_OscConfig+0x93c>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7ff f84b 	bl	8001d30 <HAL_GetTick>
 8002c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7ff f846 	bl	8001d30 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e3b1      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCC_OscConfig+0x93c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_OscConfig+0x940>
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCC_OscConfig+0x934>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	e03c      	b.n	8002d58 <HAL_RCC_OscConfig+0x9ac>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	10908120 	.word	0x10908120
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x96a>
 8002cfc:	4bc1      	ldr	r3, [pc, #772]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4ac0      	ldr	r2, [pc, #768]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4bbe      	ldr	r3, [pc, #760]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4abd      	ldr	r2, [pc, #756]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e020      	b.n	8002d58 <HAL_RCC_OscConfig+0x9ac>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x994>
 8002d26:	4bb7      	ldr	r3, [pc, #732]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4ab6      	ldr	r2, [pc, #728]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4bb4      	ldr	r3, [pc, #720]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4ab3      	ldr	r2, [pc, #716]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x9ac>
 8002d40:	4bb0      	ldr	r3, [pc, #704]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4aaf      	ldr	r2, [pc, #700]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4bad      	ldr	r3, [pc, #692]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4aac      	ldr	r2, [pc, #688]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8081 	beq.w	8002e6c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe ffe1 	bl	8001d30 <HAL_GetTick>
 8002d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe ffdc 	bl	8001d30 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e345      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db8:	2202      	movs	r2, #2
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ddc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0xa4c>
 8002df2:	4b84      	ldr	r3, [pc, #528]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0xa74>
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f2a3 	rbit	r2, r3
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b79      	ldr	r3, [pc, #484]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e28:	2102      	movs	r1, #2
 8002e2a:	6011      	str	r1, [r2, #0]
 8002e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	fa92 f1a2 	rbit	r1, r2
 8002e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e42:	6011      	str	r1, [r2, #0]
  return result;
 8002e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e48:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	fab2 f282 	clz	r2, r2
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f002 021f 	and.w	r2, r2, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d084      	beq.n	8002d74 <HAL_RCC_OscConfig+0x9c8>
 8002e6a:	e07f      	b.n	8002f6c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe ff60 	bl	8001d30 <HAL_GetTick>
 8002e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe ff5b 	bl	8001d30 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e2c4      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed4:	601a      	str	r2, [r3, #0]
  return result;
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ede:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_OscConfig+0xb4e>
 8002ef4:	4b43      	ldr	r3, [pc, #268]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	e013      	b.n	8002f22 <HAL_RCC_OscConfig+0xb76>
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f02:	2202      	movs	r2, #2
 8002f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fa93 f2a3 	rbit	r2, r3
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	6011      	str	r1, [r2, #0]
 8002f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	fa92 f1a2 	rbit	r1, r2
 8002f3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f44:	6011      	str	r1, [r2, #0]
  return result;
 8002f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f4a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f002 021f 	and.w	r2, r2, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d184      	bne.n	8002e76 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8242 	beq.w	8003416 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <HAL_RCC_OscConfig+0xc58>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	f000 8213 	beq.w	80033c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f040 8162 	bne.w	8003276 <HAL_RCC_OscConfig+0xeca>
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	fa93 f2a3 	rbit	r2, r3
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd6:	601a      	str	r2, [r3, #0]
  return result;
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fe0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe9a 	bl	8001d30 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0xc70>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fe92 	bl	8001d30 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1fd      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fa93 f2a3 	rbit	r2, r3
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003040:	601a      	str	r2, [r3, #0]
  return result;
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800304a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0xcba>
 8003060:	4bb0      	ldr	r3, [pc, #704]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	e027      	b.n	80030b6 <HAL_RCC_OscConfig+0xd0a>
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800306e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	4b9c      	ldr	r3, [pc, #624]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030c2:	6011      	str	r1, [r2, #0]
 80030c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	fa92 f1a2 	rbit	r1, r2
 80030d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030da:	6011      	str	r1, [r2, #0]
  return result;
 80030dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	fab2 f282 	clz	r2, r2
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f042 0220 	orr.w	r2, r2, #32
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f002 021f 	and.w	r2, r2, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d182      	bne.n	8003008 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	430b      	orrs	r3, r1
 8003124:	497f      	ldr	r1, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003132:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003158:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fdde 	bl	8001d30 <HAL_GetTick>
 8003174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003178:	e009      	b.n	800318e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe fdd9 	bl	8001d30 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e144      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031b2:	601a      	str	r2, [r3, #0]
  return result;
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_OscConfig+0xe2c>
 80031d2:	4b54      	ldr	r3, [pc, #336]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	e027      	b.n	8003228 <HAL_RCC_OscConfig+0xe7c>
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003230:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	fa92 f1a2 	rbit	r1, r2
 8003244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003248:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800324c:	6011      	str	r1, [r2, #0]
  return result;
 800324e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003252:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d082      	beq.n	800317a <HAL_RCC_OscConfig+0xdce>
 8003274:	e0cf      	b.n	8003416 <HAL_RCC_OscConfig+0x106a>
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800327e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003288:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800329a:	601a      	str	r2, [r3, #0]
  return result;
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	461a      	mov	r2, r3
 80032b8:	2300      	movs	r3, #0
 80032ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fd38 	bl	8001d30 <HAL_GetTick>
 80032c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	e009      	b.n	80032da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fd33 	bl	8001d30 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e09e      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fe:	601a      	str	r2, [r3, #0]
  return result;
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003308:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d104      	bne.n	8003328 <HAL_RCC_OscConfig+0xf7c>
 800331e:	4b01      	ldr	r3, [pc, #4]	; (8003324 <HAL_RCC_OscConfig+0xf78>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e029      	b.n	8003378 <HAL_RCC_OscConfig+0xfcc>
 8003324:	40021000 	.word	0x40021000
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	fa93 f2a3 	rbit	r2, r3
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_OscConfig+0x1078>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003380:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003384:	6011      	str	r1, [r2, #0]
 8003386:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800338a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	fa92 f1a2 	rbit	r1, r2
 8003394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003398:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800339c:	6011      	str	r1, [r2, #0]
  return result;
 800339e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f002 021f 	and.w	r2, r2, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d180      	bne.n	80032c6 <HAL_RCC_OscConfig+0xf1a>
 80033c4:	e027      	b.n	8003416 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e01e      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_OscConfig+0x1078>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d10b      	bne.n	8003412 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b09e      	sub	sp, #120	; 0x78
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e162      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b90      	ldr	r3, [pc, #576]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d910      	bls.n	8003470 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b8d      	ldr	r3, [pc, #564]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	498b      	ldr	r1, [pc, #556]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e14a      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	497f      	ldr	r1, [pc, #508]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80dc 	beq.w	8003654 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d13c      	bne.n	800351e <HAL_RCC_ClockConfig+0xf6>
 80034a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_ClockConfig+0xa6>
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e00f      	b.n	80034ee <HAL_RCC_ClockConfig+0xc6>
 80034ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
 80034dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80034f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d17b      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0f3      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d13c      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x178>
 8003526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_RCC_ClockConfig+0x128>
 800354a:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	e00f      	b.n	8003570 <HAL_RCC_ClockConfig+0x148>
 8003550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003554:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003562:	643b      	str	r3, [r7, #64]	; 0x40
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003574:	63ba      	str	r2, [r7, #56]	; 0x38
 8003576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003578:	fa92 f2a2 	rbit	r2, r2
 800357c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800357e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003580:	fab2 f282 	clz	r2, r2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	f042 0220 	orr.w	r2, r2, #32
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f002 021f 	and.w	r2, r2, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f202 	lsl.w	r2, r1, r2
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d13a      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b2      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
 80035a0:	2302      	movs	r3, #2
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	e00d      	b.n	80035e4 <HAL_RCC_ClockConfig+0x1bc>
 80035c8:	2302      	movs	r3, #2
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	2302      	movs	r3, #2
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2202      	movs	r2, #2
 80035e6:	61ba      	str	r2, [r7, #24]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	fa92 f2a2 	rbit	r2, r2
 80035ee:	617a      	str	r2, [r7, #20]
  return result;
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	fab2 f282 	clz	r2, r2
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	f042 0220 	orr.w	r2, r2, #32
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	f002 021f 	and.w	r2, r2, #31
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e079      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	491a      	ldr	r1, [pc, #104]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7fe fb84 	bl	8001d30 <HAL_GetTick>
 8003628:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fb80 	bl	8001d30 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e061      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_ClockConfig+0x260>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d214      	bcs.n	800368c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4906      	ldr	r1, [pc, #24]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <HAL_RCC_ClockConfig+0x25c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e040      	b.n	8003706 <HAL_RCC_ClockConfig+0x2de>
 8003684:	40022000 	.word	0x40022000
 8003688:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_ClockConfig+0x2e8>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	491a      	ldr	r1, [pc, #104]	; (8003710 <HAL_RCC_ClockConfig+0x2e8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x2e8>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4912      	ldr	r1, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x2e8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ca:	f000 f829 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036ce:	4601      	mov	r1, r0
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_RCC_ClockConfig+0x2e8>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d8:	22f0      	movs	r2, #240	; 0xf0
 80036da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	fa92 f2a2 	rbit	r2, r2
 80036e2:	60fa      	str	r2, [r7, #12]
  return result;
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	fab2 f282 	clz	r2, r2
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	40d3      	lsrs	r3, r2
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x2ec>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	fa21 f303 	lsr.w	r3, r1, r3
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCC_ClockConfig+0x2f0>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_RCC_ClockConfig+0x2f4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fad2 	bl	8001ca8 <HAL_InitTick>
  
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3778      	adds	r7, #120	; 0x78
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	08008228 	.word	0x08008228
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x30>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x36>
 800374e:	e03c      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003752:	623b      	str	r3, [r7, #32]
      break;
 8003754:	e03c      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800375c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003760:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	fa92 f2a2 	rbit	r2, r2
 8003768:	607a      	str	r2, [r7, #4]
  return result;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	fab2 f282 	clz	r2, r2
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	40d3      	lsrs	r3, r2
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800377a:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	220f      	movs	r2, #15
 8003784:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	fa92 f2a2 	rbit	r2, r2
 800378c:	60fa      	str	r2, [r7, #12]
  return result;
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	40d3      	lsrs	r3, r2
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e004      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	623b      	str	r3, [r7, #32]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037cc:	623b      	str	r3, [r7, #32]
      break;
 80037ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	372c      	adds	r7, #44	; 0x2c
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	08008240 	.word	0x08008240
 80037ec:	08008250 	.word	0x08008250
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003812:	f7ff ffef 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003820:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	fa92 f2a2 	rbit	r2, r2
 800382c:	603a      	str	r2, [r7, #0]
  return result;
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	40d3      	lsrs	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_RCC_GetPCLK1Freq+0x40>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	08008238 	.word	0x08008238

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003856:	f7ff ffcd 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800385a:	4601      	mov	r1, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003864:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003868:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	603a      	str	r2, [r7, #0]
  return result;
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	fab2 f282 	clz	r2, r2
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	40d3      	lsrs	r3, r2
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x40>)
 800387e:	5cd3      	ldrb	r3, [r2, r3]
 8003880:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	08008238 	.word	0x08008238

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b092      	sub	sp, #72	; 0x48
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80d4 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b8:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ce:	61d3      	str	r3, [r2, #28]
 80038d0:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a41      	ldr	r2, [pc, #260]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fa19 	bl	8001d30 <HAL_GetTick>
 80038fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe fa15 	bl	8001d30 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e169      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8084 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800393c:	429a      	cmp	r2, r3
 800393e:	d07c      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003940:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	461a      	mov	r2, r3
 800396a:	2301      	movs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	461a      	mov	r2, r3
 800398e:	2300      	movs	r3, #0
 8003990:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04b      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe f9c5 	bl	8001d30 <HAL_GetTick>
 80039a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe f9c1 	bl	8001d30 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e113      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80039c0:	2302      	movs	r3, #2
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
 80039cc:	2302      	movs	r3, #2
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	61fb      	str	r3, [r7, #28]
  return result;
 80039d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d108      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039ee:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	e00d      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	10908100 	.word	0x10908100
 8003a00:	2302      	movs	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	613a      	str	r2, [r7, #16]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	f002 021f 	and.w	r2, r2, #31
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0b7      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	496a      	ldr	r1, [pc, #424]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6c:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f023 0203 	bic.w	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	495d      	ldr	r1, [pc, #372]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4956      	ldr	r1, [pc, #344]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa8:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	494e      	ldr	r1, [pc, #312]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4947      	ldr	r1, [pc, #284]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	493f      	ldr	r1, [pc, #252]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f023 0220 	bic.w	r2, r3, #32
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4938      	ldr	r1, [pc, #224]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	4930      	ldr	r1, [pc, #192]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4929      	ldr	r1, [pc, #164]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4921      	ldr	r1, [pc, #132]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3748      	adds	r7, #72	; 0x48
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e049      	b.n	8003c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fe7c 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 f9e8 	bl	8004008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e04a      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d018      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x6c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d013      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00e      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x6c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x6c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x6c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d115      	bne.n	8003d3c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d015      	beq.n	8003d4e <HAL_TIM_Base_Start_IT+0xaa>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d011      	beq.n	8003d4e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3a:	e008      	b.n	8003d4e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40013400 	.word	0x40013400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	00010007 	.word	0x00010007

08003d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0202 	mvn.w	r2, #2
 8003da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f905 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8f7 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f908 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0204 	mvn.w	r2, #4
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8db 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8cd 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8de 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0208 	mvn.w	r2, #8
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8b1 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8a3 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8b4 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0210 	mvn.w	r2, #16
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f887 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f879 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f88a 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0201 	mvn.w	r2, #1
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f97e 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f90a 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d10e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8fd 	bl	8004150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d10e      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f838 	bl	8003ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d10e      	bne.n	8003fae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d107      	bne.n	8003fae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0220 	mvn.w	r2, #32
 8003fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8bd 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x104>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a39      	ldr	r2, [pc, #228]	; (8004110 <TIM_Base_SetConfig+0x108>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <TIM_Base_SetConfig+0x10c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a37      	ldr	r2, [pc, #220]	; (8004118 <TIM_Base_SetConfig+0x110>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2d      	ldr	r2, [pc, #180]	; (800410c <TIM_Base_SetConfig+0x104>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01b      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d017      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x108>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x10c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00f      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x110>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00b      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x114>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x11c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d108      	bne.n	80040a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <TIM_Base_SetConfig+0x104>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00f      	beq.n	80040f0 <TIM_Base_SetConfig+0xe8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a11      	ldr	r2, [pc, #68]	; (8004118 <TIM_Base_SetConfig+0x110>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_Base_SetConfig+0xe8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_Base_SetConfig+0xe8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0f      	ldr	r2, [pc, #60]	; (8004120 <TIM_Base_SetConfig+0x118>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0xe8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <TIM_Base_SetConfig+0x11c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e040      	b.n	80041f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fbec 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fc00 	bl	80049a8 <UART_SetConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fdc8 	bl	8004d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fe4f 	bl	8004e94 <UART_CheckIdleState>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004214:	2b20      	cmp	r3, #32
 8004216:	d178      	bne.n	800430a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Transmit+0x24>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e071      	b.n	800430c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	; 0x21
 8004234:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004236:	f7fd fd7b 	bl	8001d30 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004254:	d108      	bne.n	8004268 <HAL_UART_Transmit+0x68>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e003      	b.n	8004270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004270:	e030      	b.n	80042d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 feb1 	bl	8004fe4 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e03c      	b.n	800430c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a4:	b292      	uxth	r2, r2
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	3302      	adds	r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e008      	b.n	80042c2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	b292      	uxth	r2, r2
 80042ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1c8      	bne.n	8004272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fe7a 	bl	8004fe4 <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e005      	b.n	800430c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	2b20      	cmp	r3, #32
 800432a:	d132      	bne.n	8004392 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_UART_Receive_IT+0x24>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e02b      	b.n	8004394 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d018      	beq.n	8004382 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	613b      	str	r3, [r7, #16]
   return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	6a3a      	ldr	r2, [r7, #32]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	61bb      	str	r3, [r7, #24]
   return(result);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e6      	bne.n	8004350 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	461a      	mov	r2, r3
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fe93 	bl	80050b4 <UART_Start_Receive_IT>
 800438e:	4603      	mov	r3, r0
 8004390:	e000      	b.n	8004394 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	; 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b0ba      	sub	sp, #232	; 0xe8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80043ca:	4013      	ands	r3, r2
 80043cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d115      	bne.n	8004404 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00f      	beq.n	8004404 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 82ab 	beq.w	8004950 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
      }
      return;
 8004402:	e2a5      	b.n	8004950 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8117 	beq.w	800463c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800441a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_UART_IRQHandler+0x298>)
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 810a 	beq.w	800463c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_UART_IRQHandler+0xbc>
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <HAL_UART_IRQHandler+0xec>
 8004464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2202      	movs	r2, #2
 8004476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <HAL_UART_IRQHandler+0x11c>
 8004494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2204      	movs	r2, #4
 80044a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <HAL_UART_IRQHandler+0x18a>
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8211 	beq.w	8004954 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800453e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d005      	beq.n	800457e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04f      	beq.n	800461e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fe4c 	bl	800521c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d141      	bne.n	8004616 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3308      	adds	r3, #8
 8004598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1d9      	bne.n	8004592 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d013      	beq.n	800460e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4a13      	ldr	r2, [pc, #76]	; (8004638 <HAL_UART_IRQHandler+0x29c>)
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fcf2 	bl	8001fdc <HAL_DMA_Abort_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004608:	4610      	mov	r0, r2
 800460a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e00f      	b.n	800462e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9b4 	bl	800497c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e00b      	b.n	800462e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9b0 	bl	800497c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e007      	b.n	800462e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9ac 	bl	800497c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800462c:	e192      	b.n	8004954 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	bf00      	nop
    return;
 8004630:	e190      	b.n	8004954 <HAL_UART_IRQHandler+0x5b8>
 8004632:	bf00      	nop
 8004634:	04000120 	.word	0x04000120
 8004638:	080052e5 	.word	0x080052e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 814b 	bne.w	80048dc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8144 	beq.w	80048dc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 813d 	beq.w	80048dc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2210      	movs	r2, #16
 8004668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	f040 80b5 	bne.w	80047e4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004686:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8164 	beq.w	8004958 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800469a:	429a      	cmp	r2, r3
 800469c:	f080 815c 	bcs.w	8004958 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f000 8086 	beq.w	80047c2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1da      	bne.n	80046b6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004724:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004728:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800472c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e1      	bne.n	8004700 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800474c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004760:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800476e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e3      	bne.n	800473c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	f023 0310 	bic.w	r3, r3, #16
 8004796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e4      	bne.n	8004782 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fbd4 	bl	8001f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8d7 	bl	8004990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047e2:	e0b9      	b.n	8004958 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80ab 	beq.w	800495c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a6 	beq.w	800495c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
 8004834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e4      	bne.n	8004810 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	623b      	str	r3, [r7, #32]
   return(result);
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800486a:	633a      	str	r2, [r7, #48]	; 0x30
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e3      	bne.n	8004846 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	617b      	str	r3, [r7, #20]
   return(result);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e4      	bne.n	8004892 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f85b 	bl	8004990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048da:	e03f      	b.n	800495c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00e      	beq.n	8004906 <HAL_UART_IRQHandler+0x56a>
 80048e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fed8 	bl	80056b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004904:	e02d      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00e      	beq.n	8004930 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01c      	beq.n	8004960 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
    }
    return;
 800492e:	e017      	b.n	8004960 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <HAL_UART_IRQHandler+0x5c6>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fce1 	bl	8005310 <UART_EndTransmit_IT>
    return;
 800494e:	e008      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004950:	bf00      	nop
 8004952:	e006      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004954:	bf00      	nop
 8004956:	e004      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004958:	bf00      	nop
 800495a:	e002      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
      return;
 800495c:	bf00      	nop
 800495e:	e000      	b.n	8004962 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004960:	bf00      	nop
  }

}
 8004962:	37e8      	adds	r7, #232	; 0xe8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049d6:	f023 030c 	bic.w	r3, r3, #12
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	6979      	ldr	r1, [r7, #20]
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4aa7      	ldr	r2, [pc, #668]	; (8004cc0 <UART_SetConfig+0x318>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d120      	bne.n	8004a6a <UART_SetConfig+0xc2>
 8004a28:	4ba6      	ldr	r3, [pc, #664]	; (8004cc4 <UART_SetConfig+0x31c>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d817      	bhi.n	8004a64 <UART_SetConfig+0xbc>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x94>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004a5f 	.word	0x08004a5f
 8004a48:	08004a53 	.word	0x08004a53
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e0b5      	b.n	8004bbe <UART_SetConfig+0x216>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e0b2      	b.n	8004bbe <UART_SetConfig+0x216>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e0af      	b.n	8004bbe <UART_SetConfig+0x216>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e0ac      	b.n	8004bbe <UART_SetConfig+0x216>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e0a9      	b.n	8004bbe <UART_SetConfig+0x216>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a96      	ldr	r2, [pc, #600]	; (8004cc8 <UART_SetConfig+0x320>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d124      	bne.n	8004abe <UART_SetConfig+0x116>
 8004a74:	4b93      	ldr	r3, [pc, #588]	; (8004cc4 <UART_SetConfig+0x31c>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a80:	d011      	beq.n	8004aa6 <UART_SetConfig+0xfe>
 8004a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a86:	d817      	bhi.n	8004ab8 <UART_SetConfig+0x110>
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d011      	beq.n	8004ab2 <UART_SetConfig+0x10a>
 8004a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a92:	d811      	bhi.n	8004ab8 <UART_SetConfig+0x110>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <UART_SetConfig+0xf8>
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d006      	beq.n	8004aac <UART_SetConfig+0x104>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x110>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e08b      	b.n	8004bbe <UART_SetConfig+0x216>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e088      	b.n	8004bbe <UART_SetConfig+0x216>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e085      	b.n	8004bbe <UART_SetConfig+0x216>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e082      	b.n	8004bbe <UART_SetConfig+0x216>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e07f      	b.n	8004bbe <UART_SetConfig+0x216>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a82      	ldr	r2, [pc, #520]	; (8004ccc <UART_SetConfig+0x324>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d124      	bne.n	8004b12 <UART_SetConfig+0x16a>
 8004ac8:	4b7e      	ldr	r3, [pc, #504]	; (8004cc4 <UART_SetConfig+0x31c>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ad0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad4:	d011      	beq.n	8004afa <UART_SetConfig+0x152>
 8004ad6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ada:	d817      	bhi.n	8004b0c <UART_SetConfig+0x164>
 8004adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae0:	d011      	beq.n	8004b06 <UART_SetConfig+0x15e>
 8004ae2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae6:	d811      	bhi.n	8004b0c <UART_SetConfig+0x164>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <UART_SetConfig+0x14c>
 8004aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004af0:	d006      	beq.n	8004b00 <UART_SetConfig+0x158>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x164>
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e061      	b.n	8004bbe <UART_SetConfig+0x216>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e05e      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e05b      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e058      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e055      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6e      	ldr	r2, [pc, #440]	; (8004cd0 <UART_SetConfig+0x328>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d124      	bne.n	8004b66 <UART_SetConfig+0x1be>
 8004b1c:	4b69      	ldr	r3, [pc, #420]	; (8004cc4 <UART_SetConfig+0x31c>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b28:	d011      	beq.n	8004b4e <UART_SetConfig+0x1a6>
 8004b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b2e:	d817      	bhi.n	8004b60 <UART_SetConfig+0x1b8>
 8004b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b34:	d011      	beq.n	8004b5a <UART_SetConfig+0x1b2>
 8004b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3a:	d811      	bhi.n	8004b60 <UART_SetConfig+0x1b8>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <UART_SetConfig+0x1a0>
 8004b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b44:	d006      	beq.n	8004b54 <UART_SetConfig+0x1ac>
 8004b46:	e00b      	b.n	8004b60 <UART_SetConfig+0x1b8>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e037      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e034      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e031      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e02e      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e02b      	b.n	8004bbe <UART_SetConfig+0x216>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <UART_SetConfig+0x32c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d124      	bne.n	8004bba <UART_SetConfig+0x212>
 8004b70:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <UART_SetConfig+0x31c>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b7c:	d011      	beq.n	8004ba2 <UART_SetConfig+0x1fa>
 8004b7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b82:	d817      	bhi.n	8004bb4 <UART_SetConfig+0x20c>
 8004b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b88:	d011      	beq.n	8004bae <UART_SetConfig+0x206>
 8004b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b8e:	d811      	bhi.n	8004bb4 <UART_SetConfig+0x20c>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x1f4>
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b98:	d006      	beq.n	8004ba8 <UART_SetConfig+0x200>
 8004b9a:	e00b      	b.n	8004bb4 <UART_SetConfig+0x20c>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e00d      	b.n	8004bbe <UART_SetConfig+0x216>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e00a      	b.n	8004bbe <UART_SetConfig+0x216>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e007      	b.n	8004bbe <UART_SetConfig+0x216>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e004      	b.n	8004bbe <UART_SetConfig+0x216>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e001      	b.n	8004bbe <UART_SetConfig+0x216>
 8004bba:	2310      	movs	r3, #16
 8004bbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc6:	d15b      	bne.n	8004c80 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004bc8:	7ffb      	ldrb	r3, [r7, #31]
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d827      	bhi.n	8004c1e <UART_SetConfig+0x276>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x22c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c1f 	.word	0x08004c1f
 8004be4:	08004c0f 	.word	0x08004c0f
 8004be8:	08004c1f 	.word	0x08004c1f
 8004bec:	08004c1f 	.word	0x08004c1f
 8004bf0:	08004c1f 	.word	0x08004c1f
 8004bf4:	08004c17 	.word	0x08004c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe fe08 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8004bfc:	61b8      	str	r0, [r7, #24]
        break;
 8004bfe:	e013      	b.n	8004c28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe fe26 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004c04:	61b8      	str	r0, [r7, #24]
        break;
 8004c06:	e00f      	b.n	8004c28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <UART_SetConfig+0x330>)
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e00c      	b.n	8004c28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0e:	f7fe fd87 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8004c12:	61b8      	str	r0, [r7, #24]
        break;
 8004c14:	e008      	b.n	8004c28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1a:	61bb      	str	r3, [r7, #24]
        break;
 8004c1c:	e004      	b.n	8004c28 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	77bb      	strb	r3, [r7, #30]
        break;
 8004c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8082 	beq.w	8004d34 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	005a      	lsls	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	441a      	add	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d916      	bls.n	8004c7a <UART_SetConfig+0x2d2>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d212      	bcs.n	8004c7a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	89fa      	ldrh	r2, [r7, #14]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e05c      	b.n	8004d34 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77bb      	strb	r3, [r7, #30]
 8004c7e:	e059      	b.n	8004d34 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d835      	bhi.n	8004cf2 <UART_SetConfig+0x34a>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0x2e4>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cf3 	.word	0x08004cf3
 8004c9c:	08004ce3 	.word	0x08004ce3
 8004ca0:	08004cf3 	.word	0x08004cf3
 8004ca4:	08004cf3 	.word	0x08004cf3
 8004ca8:	08004cf3 	.word	0x08004cf3
 8004cac:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7fe fdac 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8004cb4:	61b8      	str	r0, [r7, #24]
        break;
 8004cb6:	e021      	b.n	8004cfc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fdca 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004cbc:	61b8      	str	r0, [r7, #24]
        break;
 8004cbe:	e01d      	b.n	8004cfc <UART_SetConfig+0x354>
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40004400 	.word	0x40004400
 8004ccc:	40004800 	.word	0x40004800
 8004cd0:	40004c00 	.word	0x40004c00
 8004cd4:	40005000 	.word	0x40005000
 8004cd8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <UART_SetConfig+0x3a4>)
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e00c      	b.n	8004cfc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fd1d 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61b8      	str	r0, [r7, #24]
        break;
 8004ce8:	e008      	b.n	8004cfc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e004      	b.n	8004cfc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085a      	lsrs	r2, r3, #1
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b0f      	cmp	r3, #15
 8004d1a:	d909      	bls.n	8004d30 <UART_SetConfig+0x388>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d22:	d205      	bcs.n	8004d30 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e001      	b.n	8004d34 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01a      	beq.n	8004e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4e:	d10a      	bne.n	8004e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b098      	sub	sp, #96	; 0x60
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ea4:	f7fc ff44 	bl	8001d30 <HAL_GetTick>
 8004ea8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d12e      	bne.n	8004f16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f88c 	bl	8004fe4 <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d021      	beq.n	8004f16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e6      	bne.n	8004ed2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e062      	b.n	8004fdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d149      	bne.n	8004fb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f856 	bl	8004fe4 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d03c      	beq.n	8004fb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f90:	61fa      	str	r2, [r7, #28]
 8004f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e011      	b.n	8004fdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3758      	adds	r7, #88	; 0x58
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff4:	e049      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d045      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fc fe97 	bl	8001d30 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <UART_WaitOnFlagUntilTimeout+0x30>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e048      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d031      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d110      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2208      	movs	r2, #8
 800503a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f8ed 	bl	800521c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2208      	movs	r2, #8
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e029      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005064:	d111      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800506e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f8d3 	bl	800521c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e00f      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d0a6      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b097      	sub	sp, #92	; 0x5c
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d10e      	bne.n	8005106 <UART_Start_Receive_IT+0x52>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <UART_Start_Receive_IT+0x48>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050fa:	e01a      	b.n	8005132 <UART_Start_Receive_IT+0x7e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	22ff      	movs	r2, #255	; 0xff
 8005100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005104:	e015      	b.n	8005132 <UART_Start_Receive_IT+0x7e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10d      	bne.n	800512a <UART_Start_Receive_IT+0x76>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <UART_Start_Receive_IT+0x6c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800511e:	e008      	b.n	8005132 <UART_Start_Receive_IT+0x7e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	227f      	movs	r2, #127	; 0x7f
 8005124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005128:	e003      	b.n	8005132 <UART_Start_Receive_IT+0x7e>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2222      	movs	r2, #34	; 0x22
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	657b      	str	r3, [r7, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005162:	64ba      	str	r2, [r7, #72]	; 0x48
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517e:	d107      	bne.n	8005190 <UART_Start_Receive_IT+0xdc>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a22      	ldr	r2, [pc, #136]	; (8005214 <UART_Start_Receive_IT+0x160>)
 800518c:	669a      	str	r2, [r3, #104]	; 0x68
 800518e:	e002      	b.n	8005196 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <UART_Start_Receive_IT+0x164>)
 8005194:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
 80051be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_Start_Receive_IT+0xea>
 80051d0:	e018      	b.n	8005204 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	613b      	str	r3, [r7, #16]
   return(result);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f043 0320 	orr.w	r3, r3, #32
 80051e6:	653b      	str	r3, [r7, #80]	; 0x50
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	375c      	adds	r7, #92	; 0x5c
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	0800550d 	.word	0x0800550d
 8005218:	08005365 	.word	0x08005365

0800521c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b095      	sub	sp, #84	; 0x54
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	643b      	str	r3, [r7, #64]	; 0x40
 8005244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	61fb      	str	r3, [r7, #28]
   return(result);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	64bb      	str	r3, [r7, #72]	; 0x48
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e5      	bne.n	8005256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	2b01      	cmp	r3, #1
 8005290:	d118      	bne.n	80052c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	647b      	str	r3, [r7, #68]	; 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052d8:	bf00      	nop
 80052da:	3754      	adds	r7, #84	; 0x54
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fb3a 	bl	800497c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fb06 	bl	8004968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b09c      	sub	sp, #112	; 0x70
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005372:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537c:	2b22      	cmp	r3, #34	; 0x22
 800537e:	f040 80b9 	bne.w	80054f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005388:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800538c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005390:	b2d9      	uxtb	r1, r3
 8005392:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005396:	b2da      	uxtb	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	400a      	ands	r2, r1
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 809c 	bne.w	8005504 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	667b      	str	r3, [r7, #100]	; 0x64
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800541e:	647a      	str	r2, [r7, #68]	; 0x44
 8005420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d018      	beq.n	8005486 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	623b      	str	r3, [r7, #32]
   return(result);
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005468:	663b      	str	r3, [r7, #96]	; 0x60
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
 8005474:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	2b01      	cmp	r3, #1
 800548c:	d12e      	bne.n	80054ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 0310 	bic.w	r3, r3, #16
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	617b      	str	r3, [r7, #20]
   return(result);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e6      	bne.n	8005494 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d103      	bne.n	80054dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fa53 	bl	8004990 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ea:	e00b      	b.n	8005504 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fb fe5d 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 80054f2:	e007      	b.n	8005504 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0208 	orr.w	r2, r2, #8
 8005502:	619a      	str	r2, [r3, #24]
}
 8005504:	bf00      	nop
 8005506:	3770      	adds	r7, #112	; 0x70
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b09c      	sub	sp, #112	; 0x70
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800551a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005524:	2b22      	cmp	r3, #34	; 0x22
 8005526:	f040 80b9 	bne.w	800569c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005530:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800553a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800553e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005542:	4013      	ands	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005548:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	1c9a      	adds	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 809c 	bne.w	80056ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005588:	667b      	str	r3, [r7, #100]	; 0x64
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005592:	657b      	str	r3, [r7, #84]	; 0x54
 8005594:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e6      	bne.n	8005574 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	663b      	str	r3, [r7, #96]	; 0x60
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055c6:	643a      	str	r2, [r7, #64]	; 0x40
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d018      	beq.n	800562e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	61fb      	str	r3, [r7, #28]
   return(result);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005632:	2b01      	cmp	r3, #1
 8005634:	d12e      	bne.n	8005694 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	60bb      	str	r3, [r7, #8]
   return(result);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0310 	bic.w	r3, r3, #16
 8005650:	65bb      	str	r3, [r7, #88]	; 0x58
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	613b      	str	r3, [r7, #16]
   return(result);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e6      	bne.n	800563c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b10      	cmp	r3, #16
 800567a:	d103      	bne.n	8005684 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2210      	movs	r2, #16
 8005682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff f97f 	bl	8004990 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005692:	e00b      	b.n	80056ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fb fd89 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 800569a:	e007      	b.n	80056ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	619a      	str	r2, [r3, #24]
}
 80056ac:	bf00      	nop
 80056ae:	3770      	adds	r7, #112	; 0x70
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <gcvt>:
 80056c8:	b530      	push	{r4, r5, lr}
 80056ca:	2200      	movs	r2, #0
 80056cc:	b085      	sub	sp, #20
 80056ce:	460c      	mov	r4, r1
 80056d0:	4605      	mov	r5, r0
 80056d2:	2300      	movs	r3, #0
 80056d4:	ec51 0b10 	vmov	r0, r1, d0
 80056d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056dc:	f7fb f9fe 	bl	8000adc <__aeabi_dcmplt>
 80056e0:	ed9d 0b02 	vldr	d0, [sp, #8]
 80056e4:	4622      	mov	r2, r4
 80056e6:	b118      	cbz	r0, 80056f0 <gcvt+0x28>
 80056e8:	232d      	movs	r3, #45	; 0x2d
 80056ea:	f802 3b01 	strb.w	r3, [r2], #1
 80056ee:	3d01      	subs	r5, #1
 80056f0:	2300      	movs	r3, #0
 80056f2:	4806      	ldr	r0, [pc, #24]	; (800570c <gcvt+0x44>)
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	4629      	mov	r1, r5
 80056f8:	2367      	movs	r3, #103	; 0x67
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	f000 f8d4 	bl	80058a8 <_gcvt>
 8005700:	2800      	cmp	r0, #0
 8005702:	bf14      	ite	ne
 8005704:	4620      	movne	r0, r4
 8005706:	2000      	moveq	r0, #0
 8005708:	b005      	add	sp, #20
 800570a:	bd30      	pop	{r4, r5, pc}
 800570c:	2000000c 	.word	0x2000000c

08005710 <__errno>:
 8005710:	4b01      	ldr	r3, [pc, #4]	; (8005718 <__errno+0x8>)
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	2000000c 	.word	0x2000000c

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4d0d      	ldr	r5, [pc, #52]	; (8005754 <__libc_init_array+0x38>)
 8005720:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005722:	1b64      	subs	r4, r4, r5
 8005724:	10a4      	asrs	r4, r4, #2
 8005726:	2600      	movs	r6, #0
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	4d0b      	ldr	r5, [pc, #44]	; (800575c <__libc_init_array+0x40>)
 800572e:	4c0c      	ldr	r4, [pc, #48]	; (8005760 <__libc_init_array+0x44>)
 8005730:	f002 fd68 	bl	8008204 <_init>
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	2600      	movs	r6, #0
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08008520 	.word	0x08008520
 8005758:	08008520 	.word	0x08008520
 800575c:	08008520 	.word	0x08008520
 8005760:	08008524 	.word	0x08008524

08005764 <memset>:
 8005764:	4402      	add	r2, r0
 8005766:	4603      	mov	r3, r0
 8005768:	4293      	cmp	r3, r2
 800576a:	d100      	bne.n	800576e <memset+0xa>
 800576c:	4770      	bx	lr
 800576e:	f803 1b01 	strb.w	r1, [r3], #1
 8005772:	e7f9      	b.n	8005768 <memset+0x4>

08005774 <siprintf>:
 8005774:	b40e      	push	{r1, r2, r3}
 8005776:	b500      	push	{lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	ab1d      	add	r3, sp, #116	; 0x74
 800577c:	9002      	str	r0, [sp, #8]
 800577e:	9006      	str	r0, [sp, #24]
 8005780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005784:	4809      	ldr	r0, [pc, #36]	; (80057ac <siprintf+0x38>)
 8005786:	9107      	str	r1, [sp, #28]
 8005788:	9104      	str	r1, [sp, #16]
 800578a:	4909      	ldr	r1, [pc, #36]	; (80057b0 <siprintf+0x3c>)
 800578c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005790:	9105      	str	r1, [sp, #20]
 8005792:	6800      	ldr	r0, [r0, #0]
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	a902      	add	r1, sp, #8
 8005798:	f000 fe1c 	bl	80063d4 <_svfiprintf_r>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	b01c      	add	sp, #112	; 0x70
 80057a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a8:	b003      	add	sp, #12
 80057aa:	4770      	bx	lr
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	ffff0208 	.word	0xffff0208

080057b4 <print_e>:
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	ec43 2b10 	vmov	d0, r2, r3
 80057bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80057be:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80057c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80057c4:	ab04      	add	r3, sp, #16
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	ab03      	add	r3, sp, #12
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	1c62      	adds	r2, r4, #1
 80057ce:	ab05      	add	r3, sp, #20
 80057d0:	460f      	mov	r7, r1
 80057d2:	2102      	movs	r1, #2
 80057d4:	f001 f954 	bl	8006a80 <_dtoa_r>
 80057d8:	9a05      	ldr	r2, [sp, #20]
 80057da:	f242 730f 	movw	r3, #9999	; 0x270f
 80057de:	429a      	cmp	r2, r3
 80057e0:	d105      	bne.n	80057ee <print_e+0x3a>
 80057e2:	4601      	mov	r1, r0
 80057e4:	4638      	mov	r0, r7
 80057e6:	f001 f899 	bl	800691c <strcpy>
 80057ea:	b007      	add	sp, #28
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	463b      	mov	r3, r7
 80057f0:	7801      	ldrb	r1, [r0, #0]
 80057f2:	f803 1b01 	strb.w	r1, [r3], #1
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	bfc8      	it	gt
 80057fa:	2501      	movgt	r5, #1
 80057fc:	212e      	movs	r1, #46	; 0x2e
 80057fe:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005802:	b10f      	cbz	r7, 8005808 <print_e+0x54>
 8005804:	2c00      	cmp	r4, #0
 8005806:	dc37      	bgt.n	8005878 <print_e+0xc4>
 8005808:	2e67      	cmp	r6, #103	; 0x67
 800580a:	d046      	beq.n	800589a <print_e+0xe6>
 800580c:	2e47      	cmp	r6, #71	; 0x47
 800580e:	d046      	beq.n	800589e <print_e+0xea>
 8005810:	212e      	movs	r1, #46	; 0x2e
 8005812:	2030      	movs	r0, #48	; 0x30
 8005814:	2c00      	cmp	r4, #0
 8005816:	dc38      	bgt.n	800588a <print_e+0xd6>
 8005818:	1e51      	subs	r1, r2, #1
 800581a:	2900      	cmp	r1, #0
 800581c:	bfb8      	it	lt
 800581e:	f1c2 0201 	rsblt	r2, r2, #1
 8005822:	4618      	mov	r0, r3
 8005824:	9105      	str	r1, [sp, #20]
 8005826:	bfac      	ite	ge
 8005828:	222b      	movge	r2, #43	; 0x2b
 800582a:	9205      	strlt	r2, [sp, #20]
 800582c:	f800 6b02 	strb.w	r6, [r0], #2
 8005830:	bfa8      	it	ge
 8005832:	705a      	strbge	r2, [r3, #1]
 8005834:	9a05      	ldr	r2, [sp, #20]
 8005836:	bfbc      	itt	lt
 8005838:	212d      	movlt	r1, #45	; 0x2d
 800583a:	7059      	strblt	r1, [r3, #1]
 800583c:	2a63      	cmp	r2, #99	; 0x63
 800583e:	dd0b      	ble.n	8005858 <print_e+0xa4>
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb92 f1f1 	sdiv	r1, r2, r1
 8005846:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800584a:	1cd8      	adds	r0, r3, #3
 800584c:	709c      	strb	r4, [r3, #2]
 800584e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005852:	fb03 2201 	mla	r2, r3, r1, r2
 8005856:	9205      	str	r2, [sp, #20]
 8005858:	9b05      	ldr	r3, [sp, #20]
 800585a:	220a      	movs	r2, #10
 800585c:	fb93 f2f2 	sdiv	r2, r3, r2
 8005860:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005864:	7001      	strb	r1, [r0, #0]
 8005866:	f06f 0109 	mvn.w	r1, #9
 800586a:	fb01 3302 	mla	r3, r1, r2, r3
 800586e:	3330      	adds	r3, #48	; 0x30
 8005870:	7043      	strb	r3, [r0, #1]
 8005872:	2300      	movs	r3, #0
 8005874:	7083      	strb	r3, [r0, #2]
 8005876:	e7b8      	b.n	80057ea <print_e+0x36>
 8005878:	b10d      	cbz	r5, 800587e <print_e+0xca>
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	7805      	ldrb	r5, [r0, #0]
 8005880:	f803 5b01 	strb.w	r5, [r3], #1
 8005884:	3c01      	subs	r4, #1
 8005886:	2500      	movs	r5, #0
 8005888:	e7b9      	b.n	80057fe <print_e+0x4a>
 800588a:	b10d      	cbz	r5, 8005890 <print_e+0xdc>
 800588c:	f803 1b01 	strb.w	r1, [r3], #1
 8005890:	f803 0b01 	strb.w	r0, [r3], #1
 8005894:	3c01      	subs	r4, #1
 8005896:	2500      	movs	r5, #0
 8005898:	e7bc      	b.n	8005814 <print_e+0x60>
 800589a:	2665      	movs	r6, #101	; 0x65
 800589c:	e7bc      	b.n	8005818 <print_e+0x64>
 800589e:	2645      	movs	r6, #69	; 0x45
 80058a0:	e7ba      	b.n	8005818 <print_e+0x64>
 80058a2:	0000      	movs	r0, r0
 80058a4:	0000      	movs	r0, r0
	...

080058a8 <_gcvt>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	ec55 4b10 	vmov	r4, r5, d0
 80058b0:	b088      	sub	sp, #32
 80058b2:	4681      	mov	r9, r0
 80058b4:	4688      	mov	r8, r1
 80058b6:	4616      	mov	r6, r2
 80058b8:	469a      	mov	sl, r3
 80058ba:	ee10 0a10 	vmov	r0, s0
 80058be:	2200      	movs	r2, #0
 80058c0:	2300      	movs	r3, #0
 80058c2:	4629      	mov	r1, r5
 80058c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80058c6:	f7fb f909 	bl	8000adc <__aeabi_dcmplt>
 80058ca:	b110      	cbz	r0, 80058d2 <_gcvt+0x2a>
 80058cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058d0:	461d      	mov	r5, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	2300      	movs	r3, #0
 80058d6:	4620      	mov	r0, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	f7fb f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80058de:	b138      	cbz	r0, 80058f0 <_gcvt+0x48>
 80058e0:	2330      	movs	r3, #48	; 0x30
 80058e2:	7033      	strb	r3, [r6, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	7073      	strb	r3, [r6, #1]
 80058e8:	4630      	mov	r0, r6
 80058ea:	b008      	add	sp, #32
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	a34b      	add	r3, pc, #300	; (adr r3, 8005a20 <_gcvt+0x178>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fb f8f9 	bl	8000af0 <__aeabi_dcmple>
 80058fe:	b158      	cbz	r0, 8005918 <_gcvt+0x70>
 8005900:	f108 31ff 	add.w	r1, r8, #4294967295
 8005904:	9100      	str	r1, [sp, #0]
 8005906:	e9cd a701 	strd	sl, r7, [sp, #4]
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	4631      	mov	r1, r6
 8005910:	4648      	mov	r0, r9
 8005912:	f7ff ff4f 	bl	80057b4 <print_e>
 8005916:	e7e7      	b.n	80058e8 <_gcvt+0x40>
 8005918:	4640      	mov	r0, r8
 800591a:	f000 fc09 	bl	8006130 <_mprec_log10>
 800591e:	4622      	mov	r2, r4
 8005920:	ec51 0b10 	vmov	r0, r1, d0
 8005924:	462b      	mov	r3, r5
 8005926:	f7fb f8e3 	bl	8000af0 <__aeabi_dcmple>
 800592a:	2800      	cmp	r0, #0
 800592c:	d1e8      	bne.n	8005900 <_gcvt+0x58>
 800592e:	ab07      	add	r3, sp, #28
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	ab06      	add	r3, sp, #24
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4642      	mov	r2, r8
 8005938:	ab05      	add	r3, sp, #20
 800593a:	ec45 4b10 	vmov	d0, r4, r5
 800593e:	2102      	movs	r1, #2
 8005940:	4648      	mov	r0, r9
 8005942:	f001 f89d 	bl	8006a80 <_dtoa_r>
 8005946:	9a05      	ldr	r2, [sp, #20]
 8005948:	f242 730f 	movw	r3, #9999	; 0x270f
 800594c:	429a      	cmp	r2, r3
 800594e:	d00e      	beq.n	800596e <_gcvt+0xc6>
 8005950:	4633      	mov	r3, r6
 8005952:	44b0      	add	r8, r6
 8005954:	4605      	mov	r5, r0
 8005956:	f810 1b01 	ldrb.w	r1, [r0], #1
 800595a:	9c05      	ldr	r4, [sp, #20]
 800595c:	eba8 0203 	sub.w	r2, r8, r3
 8005960:	b109      	cbz	r1, 8005966 <_gcvt+0xbe>
 8005962:	2c00      	cmp	r4, #0
 8005964:	dc08      	bgt.n	8005978 <_gcvt+0xd0>
 8005966:	2100      	movs	r1, #0
 8005968:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800596c:	e00d      	b.n	800598a <_gcvt+0xe2>
 800596e:	4601      	mov	r1, r0
 8005970:	4630      	mov	r0, r6
 8005972:	f000 ffd3 	bl	800691c <strcpy>
 8005976:	e7b7      	b.n	80058e8 <_gcvt+0x40>
 8005978:	3c01      	subs	r4, #1
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	9405      	str	r4, [sp, #20]
 8005980:	e7e8      	b.n	8005954 <_gcvt+0xac>
 8005982:	f803 cb01 	strb.w	ip, [r3], #1
 8005986:	3a01      	subs	r2, #1
 8005988:	2101      	movs	r1, #1
 800598a:	2c00      	cmp	r4, #0
 800598c:	4620      	mov	r0, r4
 800598e:	dc2a      	bgt.n	80059e6 <_gcvt+0x13e>
 8005990:	b101      	cbz	r1, 8005994 <_gcvt+0xec>
 8005992:	9405      	str	r4, [sp, #20]
 8005994:	b90f      	cbnz	r7, 800599a <_gcvt+0xf2>
 8005996:	7829      	ldrb	r1, [r5, #0]
 8005998:	b311      	cbz	r1, 80059e0 <_gcvt+0x138>
 800599a:	42b3      	cmp	r3, r6
 800599c:	bf04      	itt	eq
 800599e:	2130      	moveq	r1, #48	; 0x30
 80059a0:	f803 1b01 	strbeq.w	r1, [r3], #1
 80059a4:	212e      	movs	r1, #46	; 0x2e
 80059a6:	7019      	strb	r1, [r3, #0]
 80059a8:	9905      	ldr	r1, [sp, #20]
 80059aa:	4618      	mov	r0, r3
 80059ac:	2400      	movs	r4, #0
 80059ae:	eba1 0c03 	sub.w	ip, r1, r3
 80059b2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80059b6:	eb1c 0f00 	cmn.w	ip, r0
 80059ba:	d41c      	bmi.n	80059f6 <_gcvt+0x14e>
 80059bc:	2900      	cmp	r1, #0
 80059be:	f1c1 0000 	rsb	r0, r1, #0
 80059c2:	bfc8      	it	gt
 80059c4:	2000      	movgt	r0, #0
 80059c6:	f100 0c01 	add.w	ip, r0, #1
 80059ca:	4463      	add	r3, ip
 80059cc:	4401      	add	r1, r0
 80059ce:	b104      	cbz	r4, 80059d2 <_gcvt+0x12a>
 80059d0:	9105      	str	r1, [sp, #20]
 80059d2:	1e69      	subs	r1, r5, #1
 80059d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80059d8:	b108      	cbz	r0, 80059de <_gcvt+0x136>
 80059da:	2a00      	cmp	r2, #0
 80059dc:	dc0f      	bgt.n	80059fe <_gcvt+0x156>
 80059de:	b9df      	cbnz	r7, 8005a18 <_gcvt+0x170>
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e780      	b.n	80058e8 <_gcvt+0x40>
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	f104 34ff 	add.w	r4, r4, #4294967295
 80059ec:	dcc9      	bgt.n	8005982 <_gcvt+0xda>
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d0d0      	beq.n	8005994 <_gcvt+0xec>
 80059f2:	9005      	str	r0, [sp, #20]
 80059f4:	e7ce      	b.n	8005994 <_gcvt+0xec>
 80059f6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80059fa:	2401      	movs	r4, #1
 80059fc:	e7db      	b.n	80059b6 <_gcvt+0x10e>
 80059fe:	f803 0b01 	strb.w	r0, [r3], #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	e7e6      	b.n	80059d4 <_gcvt+0x12c>
 8005a06:	f801 5b01 	strb.w	r5, [r1], #1
 8005a0a:	1a60      	subs	r0, r4, r1
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	dcfa      	bgt.n	8005a06 <_gcvt+0x15e>
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	bfa8      	it	ge
 8005a14:	189b      	addge	r3, r3, r2
 8005a16:	e7e3      	b.n	80059e0 <_gcvt+0x138>
 8005a18:	4619      	mov	r1, r3
 8005a1a:	189c      	adds	r4, r3, r2
 8005a1c:	2530      	movs	r5, #48	; 0x30
 8005a1e:	e7f4      	b.n	8005a0a <_gcvt+0x162>
 8005a20:	eb1c432d 	.word	0xeb1c432d
 8005a24:	3f1a36e2 	.word	0x3f1a36e2

08005a28 <_Balloc>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	b976      	cbnz	r6, 8005a50 <_Balloc+0x28>
 8005a32:	2010      	movs	r0, #16
 8005a34:	f001 fe24 	bl	8007680 <malloc>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a3c:	b920      	cbnz	r0, 8005a48 <_Balloc+0x20>
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <_Balloc+0x78>)
 8005a40:	4818      	ldr	r0, [pc, #96]	; (8005aa4 <_Balloc+0x7c>)
 8005a42:	2166      	movs	r1, #102	; 0x66
 8005a44:	f000 ff72 	bl	800692c <__assert_func>
 8005a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a4c:	6006      	str	r6, [r0, #0]
 8005a4e:	60c6      	str	r6, [r0, #12]
 8005a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a52:	68f3      	ldr	r3, [r6, #12]
 8005a54:	b183      	cbz	r3, 8005a78 <_Balloc+0x50>
 8005a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a5e:	b9b8      	cbnz	r0, 8005a90 <_Balloc+0x68>
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f605 	lsl.w	r6, r1, r5
 8005a66:	1d72      	adds	r2, r6, #5
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fb7e 	bl	800616c <_calloc_r>
 8005a70:	b160      	cbz	r0, 8005a8c <_Balloc+0x64>
 8005a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a76:	e00e      	b.n	8005a96 <_Balloc+0x6e>
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fb75 	bl	800616c <_calloc_r>
 8005a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a84:	60f0      	str	r0, [r6, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e4      	bne.n	8005a56 <_Balloc+0x2e>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	6802      	ldr	r2, [r0, #0]
 8005a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a96:	2300      	movs	r3, #0
 8005a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a9c:	e7f7      	b.n	8005a8e <_Balloc+0x66>
 8005a9e:	bf00      	nop
 8005aa0:	08008264 	.word	0x08008264
 8005aa4:	0800827b 	.word	0x0800827b

08005aa8 <_Bfree>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005aac:	4605      	mov	r5, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	b976      	cbnz	r6, 8005ad0 <_Bfree+0x28>
 8005ab2:	2010      	movs	r0, #16
 8005ab4:	f001 fde4 	bl	8007680 <malloc>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6268      	str	r0, [r5, #36]	; 0x24
 8005abc:	b920      	cbnz	r0, 8005ac8 <_Bfree+0x20>
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <_Bfree+0x3c>)
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <_Bfree+0x40>)
 8005ac2:	218a      	movs	r1, #138	; 0x8a
 8005ac4:	f000 ff32 	bl	800692c <__assert_func>
 8005ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005acc:	6006      	str	r6, [r0, #0]
 8005ace:	60c6      	str	r6, [r0, #12]
 8005ad0:	b13c      	cbz	r4, 8005ae2 <_Bfree+0x3a>
 8005ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad4:	6862      	ldr	r2, [r4, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005adc:	6021      	str	r1, [r4, #0]
 8005ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	08008264 	.word	0x08008264
 8005ae8:	0800827b 	.word	0x0800827b

08005aec <__multadd>:
 8005aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	690d      	ldr	r5, [r1, #16]
 8005af2:	4607      	mov	r7, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	461e      	mov	r6, r3
 8005af8:	f101 0c14 	add.w	ip, r1, #20
 8005afc:	2000      	movs	r0, #0
 8005afe:	f8dc 3000 	ldr.w	r3, [ip]
 8005b02:	b299      	uxth	r1, r3
 8005b04:	fb02 6101 	mla	r1, r2, r1, r6
 8005b08:	0c1e      	lsrs	r6, r3, #16
 8005b0a:	0c0b      	lsrs	r3, r1, #16
 8005b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8005b10:	b289      	uxth	r1, r1
 8005b12:	3001      	adds	r0, #1
 8005b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b18:	4285      	cmp	r5, r0
 8005b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b22:	dcec      	bgt.n	8005afe <__multadd+0x12>
 8005b24:	b30e      	cbz	r6, 8005b6a <__multadd+0x7e>
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc19      	bgt.n	8005b60 <__multadd+0x74>
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	3101      	adds	r1, #1
 8005b32:	f7ff ff79 	bl	8005a28 <_Balloc>
 8005b36:	4680      	mov	r8, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__multadd+0x5a>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <__multadd+0x84>)
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <__multadd+0x88>)
 8005b40:	21b5      	movs	r1, #181	; 0xb5
 8005b42:	f000 fef3 	bl	800692c <__assert_func>
 8005b46:	6922      	ldr	r2, [r4, #16]
 8005b48:	3202      	adds	r2, #2
 8005b4a:	f104 010c 	add.w	r1, r4, #12
 8005b4e:	0092      	lsls	r2, r2, #2
 8005b50:	300c      	adds	r0, #12
 8005b52:	f001 fd9d 	bl	8007690 <memcpy>
 8005b56:	4621      	mov	r1, r4
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ffa5 	bl	8005aa8 <_Bfree>
 8005b5e:	4644      	mov	r4, r8
 8005b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b64:	3501      	adds	r5, #1
 8005b66:	615e      	str	r6, [r3, #20]
 8005b68:	6125      	str	r5, [r4, #16]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	080082d7 	.word	0x080082d7
 8005b74:	0800827b 	.word	0x0800827b

08005b78 <__hi0bits>:
 8005b78:	0c03      	lsrs	r3, r0, #16
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	b9d3      	cbnz	r3, 8005bb4 <__hi0bits+0x3c>
 8005b7e:	0400      	lsls	r0, r0, #16
 8005b80:	2310      	movs	r3, #16
 8005b82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b86:	bf04      	itt	eq
 8005b88:	0200      	lsleq	r0, r0, #8
 8005b8a:	3308      	addeq	r3, #8
 8005b8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b90:	bf04      	itt	eq
 8005b92:	0100      	lsleq	r0, r0, #4
 8005b94:	3304      	addeq	r3, #4
 8005b96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b9a:	bf04      	itt	eq
 8005b9c:	0080      	lsleq	r0, r0, #2
 8005b9e:	3302      	addeq	r3, #2
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	db05      	blt.n	8005bb0 <__hi0bits+0x38>
 8005ba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ba8:	f103 0301 	add.w	r3, r3, #1
 8005bac:	bf08      	it	eq
 8005bae:	2320      	moveq	r3, #32
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4770      	bx	lr
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e7e4      	b.n	8005b82 <__hi0bits+0xa>

08005bb8 <__lo0bits>:
 8005bb8:	6803      	ldr	r3, [r0, #0]
 8005bba:	f013 0207 	ands.w	r2, r3, #7
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	d00b      	beq.n	8005bda <__lo0bits+0x22>
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d423      	bmi.n	8005c0e <__lo0bits+0x56>
 8005bc6:	0798      	lsls	r0, r3, #30
 8005bc8:	bf49      	itett	mi
 8005bca:	085b      	lsrmi	r3, r3, #1
 8005bcc:	089b      	lsrpl	r3, r3, #2
 8005bce:	2001      	movmi	r0, #1
 8005bd0:	600b      	strmi	r3, [r1, #0]
 8005bd2:	bf5c      	itt	pl
 8005bd4:	600b      	strpl	r3, [r1, #0]
 8005bd6:	2002      	movpl	r0, #2
 8005bd8:	4770      	bx	lr
 8005bda:	b298      	uxth	r0, r3
 8005bdc:	b9a8      	cbnz	r0, 8005c0a <__lo0bits+0x52>
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	2010      	movs	r0, #16
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	b90a      	cbnz	r2, 8005bea <__lo0bits+0x32>
 8005be6:	3008      	adds	r0, #8
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	071a      	lsls	r2, r3, #28
 8005bec:	bf04      	itt	eq
 8005bee:	091b      	lsreq	r3, r3, #4
 8005bf0:	3004      	addeq	r0, #4
 8005bf2:	079a      	lsls	r2, r3, #30
 8005bf4:	bf04      	itt	eq
 8005bf6:	089b      	lsreq	r3, r3, #2
 8005bf8:	3002      	addeq	r0, #2
 8005bfa:	07da      	lsls	r2, r3, #31
 8005bfc:	d403      	bmi.n	8005c06 <__lo0bits+0x4e>
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	f100 0001 	add.w	r0, r0, #1
 8005c04:	d005      	beq.n	8005c12 <__lo0bits+0x5a>
 8005c06:	600b      	str	r3, [r1, #0]
 8005c08:	4770      	bx	lr
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	e7e9      	b.n	8005be2 <__lo0bits+0x2a>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	4770      	bx	lr
 8005c12:	2020      	movs	r0, #32
 8005c14:	4770      	bx	lr
	...

08005c18 <__i2b>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	f7ff ff03 	bl	8005a28 <_Balloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	b928      	cbnz	r0, 8005c32 <__i2b+0x1a>
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <__i2b+0x24>)
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <__i2b+0x28>)
 8005c2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c2e:	f000 fe7d 	bl	800692c <__assert_func>
 8005c32:	2301      	movs	r3, #1
 8005c34:	6144      	str	r4, [r0, #20]
 8005c36:	6103      	str	r3, [r0, #16]
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	080082d7 	.word	0x080082d7
 8005c40:	0800827b 	.word	0x0800827b

08005c44 <__multiply>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4691      	mov	r9, r2
 8005c4a:	690a      	ldr	r2, [r1, #16]
 8005c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	bfb8      	it	lt
 8005c54:	460b      	movlt	r3, r1
 8005c56:	460c      	mov	r4, r1
 8005c58:	bfbc      	itt	lt
 8005c5a:	464c      	movlt	r4, r9
 8005c5c:	4699      	movlt	r9, r3
 8005c5e:	6927      	ldr	r7, [r4, #16]
 8005c60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c64:	68a3      	ldr	r3, [r4, #8]
 8005c66:	6861      	ldr	r1, [r4, #4]
 8005c68:	eb07 060a 	add.w	r6, r7, sl
 8005c6c:	42b3      	cmp	r3, r6
 8005c6e:	b085      	sub	sp, #20
 8005c70:	bfb8      	it	lt
 8005c72:	3101      	addlt	r1, #1
 8005c74:	f7ff fed8 	bl	8005a28 <_Balloc>
 8005c78:	b930      	cbnz	r0, 8005c88 <__multiply+0x44>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b44      	ldr	r3, [pc, #272]	; (8005d90 <__multiply+0x14c>)
 8005c7e:	4845      	ldr	r0, [pc, #276]	; (8005d94 <__multiply+0x150>)
 8005c80:	f240 115d 	movw	r1, #349	; 0x15d
 8005c84:	f000 fe52 	bl	800692c <__assert_func>
 8005c88:	f100 0514 	add.w	r5, r0, #20
 8005c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c90:	462b      	mov	r3, r5
 8005c92:	2200      	movs	r2, #0
 8005c94:	4543      	cmp	r3, r8
 8005c96:	d321      	bcc.n	8005cdc <__multiply+0x98>
 8005c98:	f104 0314 	add.w	r3, r4, #20
 8005c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ca0:	f109 0314 	add.w	r3, r9, #20
 8005ca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ca8:	9202      	str	r2, [sp, #8]
 8005caa:	1b3a      	subs	r2, r7, r4
 8005cac:	3a15      	subs	r2, #21
 8005cae:	f022 0203 	bic.w	r2, r2, #3
 8005cb2:	3204      	adds	r2, #4
 8005cb4:	f104 0115 	add.w	r1, r4, #21
 8005cb8:	428f      	cmp	r7, r1
 8005cba:	bf38      	it	cc
 8005cbc:	2204      	movcc	r2, #4
 8005cbe:	9201      	str	r2, [sp, #4]
 8005cc0:	9a02      	ldr	r2, [sp, #8]
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d80c      	bhi.n	8005ce2 <__multiply+0x9e>
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	dd03      	ble.n	8005cd4 <__multiply+0x90>
 8005ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d05a      	beq.n	8005d8a <__multiply+0x146>
 8005cd4:	6106      	str	r6, [r0, #16]
 8005cd6:	b005      	add	sp, #20
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	f843 2b04 	str.w	r2, [r3], #4
 8005ce0:	e7d8      	b.n	8005c94 <__multiply+0x50>
 8005ce2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ce6:	f1ba 0f00 	cmp.w	sl, #0
 8005cea:	d024      	beq.n	8005d36 <__multiply+0xf2>
 8005cec:	f104 0e14 	add.w	lr, r4, #20
 8005cf0:	46a9      	mov	r9, r5
 8005cf2:	f04f 0c00 	mov.w	ip, #0
 8005cf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cfa:	f8d9 1000 	ldr.w	r1, [r9]
 8005cfe:	fa1f fb82 	uxth.w	fp, r2
 8005d02:	b289      	uxth	r1, r1
 8005d04:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d10:	4461      	add	r1, ip
 8005d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d16:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d1e:	b289      	uxth	r1, r1
 8005d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d24:	4577      	cmp	r7, lr
 8005d26:	f849 1b04 	str.w	r1, [r9], #4
 8005d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d2e:	d8e2      	bhi.n	8005cf6 <__multiply+0xb2>
 8005d30:	9a01      	ldr	r2, [sp, #4]
 8005d32:	f845 c002 	str.w	ip, [r5, r2]
 8005d36:	9a03      	ldr	r2, [sp, #12]
 8005d38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	f1b9 0f00 	cmp.w	r9, #0
 8005d42:	d020      	beq.n	8005d86 <__multiply+0x142>
 8005d44:	6829      	ldr	r1, [r5, #0]
 8005d46:	f104 0c14 	add.w	ip, r4, #20
 8005d4a:	46ae      	mov	lr, r5
 8005d4c:	f04f 0a00 	mov.w	sl, #0
 8005d50:	f8bc b000 	ldrh.w	fp, [ip]
 8005d54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d58:	fb09 220b 	mla	r2, r9, fp, r2
 8005d5c:	4492      	add	sl, r2
 8005d5e:	b289      	uxth	r1, r1
 8005d60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d64:	f84e 1b04 	str.w	r1, [lr], #4
 8005d68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8005d70:	0c12      	lsrs	r2, r2, #16
 8005d72:	fb09 1102 	mla	r1, r9, r2, r1
 8005d76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d7a:	4567      	cmp	r7, ip
 8005d7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d80:	d8e6      	bhi.n	8005d50 <__multiply+0x10c>
 8005d82:	9a01      	ldr	r2, [sp, #4]
 8005d84:	50a9      	str	r1, [r5, r2]
 8005d86:	3504      	adds	r5, #4
 8005d88:	e79a      	b.n	8005cc0 <__multiply+0x7c>
 8005d8a:	3e01      	subs	r6, #1
 8005d8c:	e79c      	b.n	8005cc8 <__multiply+0x84>
 8005d8e:	bf00      	nop
 8005d90:	080082d7 	.word	0x080082d7
 8005d94:	0800827b 	.word	0x0800827b

08005d98 <__pow5mult>:
 8005d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	f012 0203 	ands.w	r2, r2, #3
 8005da2:	4606      	mov	r6, r0
 8005da4:	460f      	mov	r7, r1
 8005da6:	d007      	beq.n	8005db8 <__pow5mult+0x20>
 8005da8:	4c25      	ldr	r4, [pc, #148]	; (8005e40 <__pow5mult+0xa8>)
 8005daa:	3a01      	subs	r2, #1
 8005dac:	2300      	movs	r3, #0
 8005dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005db2:	f7ff fe9b 	bl	8005aec <__multadd>
 8005db6:	4607      	mov	r7, r0
 8005db8:	10ad      	asrs	r5, r5, #2
 8005dba:	d03d      	beq.n	8005e38 <__pow5mult+0xa0>
 8005dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dbe:	b97c      	cbnz	r4, 8005de0 <__pow5mult+0x48>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	f001 fc5d 	bl	8007680 <malloc>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dca:	b928      	cbnz	r0, 8005dd8 <__pow5mult+0x40>
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <__pow5mult+0xac>)
 8005dce:	481e      	ldr	r0, [pc, #120]	; (8005e48 <__pow5mult+0xb0>)
 8005dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005dd4:	f000 fdaa 	bl	800692c <__assert_func>
 8005dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ddc:	6004      	str	r4, [r0, #0]
 8005dde:	60c4      	str	r4, [r0, #12]
 8005de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005de8:	b94c      	cbnz	r4, 8005dfe <__pow5mult+0x66>
 8005dea:	f240 2171 	movw	r1, #625	; 0x271
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ff12 	bl	8005c18 <__i2b>
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	07eb      	lsls	r3, r5, #31
 8005e04:	d50a      	bpl.n	8005e1c <__pow5mult+0x84>
 8005e06:	4639      	mov	r1, r7
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff1a 	bl	8005c44 <__multiply>
 8005e10:	4639      	mov	r1, r7
 8005e12:	4680      	mov	r8, r0
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff fe47 	bl	8005aa8 <_Bfree>
 8005e1a:	4647      	mov	r7, r8
 8005e1c:	106d      	asrs	r5, r5, #1
 8005e1e:	d00b      	beq.n	8005e38 <__pow5mult+0xa0>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	b938      	cbnz	r0, 8005e34 <__pow5mult+0x9c>
 8005e24:	4622      	mov	r2, r4
 8005e26:	4621      	mov	r1, r4
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ff0b 	bl	8005c44 <__multiply>
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	f8c0 9000 	str.w	r9, [r0]
 8005e34:	4604      	mov	r4, r0
 8005e36:	e7e4      	b.n	8005e02 <__pow5mult+0x6a>
 8005e38:	4638      	mov	r0, r7
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	bf00      	nop
 8005e40:	080083d8 	.word	0x080083d8
 8005e44:	08008264 	.word	0x08008264
 8005e48:	0800827b 	.word	0x0800827b

08005e4c <__lshift>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4691      	mov	r9, r2
 8005e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e64:	f108 0601 	add.w	r6, r8, #1
 8005e68:	42b3      	cmp	r3, r6
 8005e6a:	db0b      	blt.n	8005e84 <__lshift+0x38>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff fddb 	bl	8005a28 <_Balloc>
 8005e72:	4605      	mov	r5, r0
 8005e74:	b948      	cbnz	r0, 8005e8a <__lshift+0x3e>
 8005e76:	4602      	mov	r2, r0
 8005e78:	4b2a      	ldr	r3, [pc, #168]	; (8005f24 <__lshift+0xd8>)
 8005e7a:	482b      	ldr	r0, [pc, #172]	; (8005f28 <__lshift+0xdc>)
 8005e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e80:	f000 fd54 	bl	800692c <__assert_func>
 8005e84:	3101      	adds	r1, #1
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	e7ee      	b.n	8005e68 <__lshift+0x1c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f100 0114 	add.w	r1, r0, #20
 8005e90:	f100 0210 	add.w	r2, r0, #16
 8005e94:	4618      	mov	r0, r3
 8005e96:	4553      	cmp	r3, sl
 8005e98:	db37      	blt.n	8005f0a <__lshift+0xbe>
 8005e9a:	6920      	ldr	r0, [r4, #16]
 8005e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ea0:	f104 0314 	add.w	r3, r4, #20
 8005ea4:	f019 091f 	ands.w	r9, r9, #31
 8005ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eb0:	d02f      	beq.n	8005f12 <__lshift+0xc6>
 8005eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005eb6:	468a      	mov	sl, r1
 8005eb8:	f04f 0c00 	mov.w	ip, #0
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	fa02 f209 	lsl.w	r2, r2, r9
 8005ec2:	ea42 020c 	orr.w	r2, r2, ip
 8005ec6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ed4:	d8f2      	bhi.n	8005ebc <__lshift+0x70>
 8005ed6:	1b03      	subs	r3, r0, r4
 8005ed8:	3b15      	subs	r3, #21
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	3304      	adds	r3, #4
 8005ee0:	f104 0215 	add.w	r2, r4, #21
 8005ee4:	4290      	cmp	r0, r2
 8005ee6:	bf38      	it	cc
 8005ee8:	2304      	movcc	r3, #4
 8005eea:	f841 c003 	str.w	ip, [r1, r3]
 8005eee:	f1bc 0f00 	cmp.w	ip, #0
 8005ef2:	d001      	beq.n	8005ef8 <__lshift+0xac>
 8005ef4:	f108 0602 	add.w	r6, r8, #2
 8005ef8:	3e01      	subs	r6, #1
 8005efa:	4638      	mov	r0, r7
 8005efc:	612e      	str	r6, [r5, #16]
 8005efe:	4621      	mov	r1, r4
 8005f00:	f7ff fdd2 	bl	8005aa8 <_Bfree>
 8005f04:	4628      	mov	r0, r5
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f0e:	3301      	adds	r3, #1
 8005f10:	e7c1      	b.n	8005e96 <__lshift+0x4a>
 8005f12:	3904      	subs	r1, #4
 8005f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f1c:	4298      	cmp	r0, r3
 8005f1e:	d8f9      	bhi.n	8005f14 <__lshift+0xc8>
 8005f20:	e7ea      	b.n	8005ef8 <__lshift+0xac>
 8005f22:	bf00      	nop
 8005f24:	080082d7 	.word	0x080082d7
 8005f28:	0800827b 	.word	0x0800827b

08005f2c <__mcmp>:
 8005f2c:	b530      	push	{r4, r5, lr}
 8005f2e:	6902      	ldr	r2, [r0, #16]
 8005f30:	690c      	ldr	r4, [r1, #16]
 8005f32:	1b12      	subs	r2, r2, r4
 8005f34:	d10e      	bne.n	8005f54 <__mcmp+0x28>
 8005f36:	f100 0314 	add.w	r3, r0, #20
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f4c:	42a5      	cmp	r5, r4
 8005f4e:	d003      	beq.n	8005f58 <__mcmp+0x2c>
 8005f50:	d305      	bcc.n	8005f5e <__mcmp+0x32>
 8005f52:	2201      	movs	r2, #1
 8005f54:	4610      	mov	r0, r2
 8005f56:	bd30      	pop	{r4, r5, pc}
 8005f58:	4283      	cmp	r3, r0
 8005f5a:	d3f3      	bcc.n	8005f44 <__mcmp+0x18>
 8005f5c:	e7fa      	b.n	8005f54 <__mcmp+0x28>
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	e7f7      	b.n	8005f54 <__mcmp+0x28>

08005f64 <__mdiff>:
 8005f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	460c      	mov	r4, r1
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4690      	mov	r8, r2
 8005f72:	f7ff ffdb 	bl	8005f2c <__mcmp>
 8005f76:	1e05      	subs	r5, r0, #0
 8005f78:	d110      	bne.n	8005f9c <__mdiff+0x38>
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7ff fd53 	bl	8005a28 <_Balloc>
 8005f82:	b930      	cbnz	r0, 8005f92 <__mdiff+0x2e>
 8005f84:	4b3a      	ldr	r3, [pc, #232]	; (8006070 <__mdiff+0x10c>)
 8005f86:	4602      	mov	r2, r0
 8005f88:	f240 2132 	movw	r1, #562	; 0x232
 8005f8c:	4839      	ldr	r0, [pc, #228]	; (8006074 <__mdiff+0x110>)
 8005f8e:	f000 fccd 	bl	800692c <__assert_func>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	bfa4      	itt	ge
 8005f9e:	4643      	movge	r3, r8
 8005fa0:	46a0      	movge	r8, r4
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fa8:	bfa6      	itte	ge
 8005faa:	461c      	movge	r4, r3
 8005fac:	2500      	movge	r5, #0
 8005fae:	2501      	movlt	r5, #1
 8005fb0:	f7ff fd3a 	bl	8005a28 <_Balloc>
 8005fb4:	b920      	cbnz	r0, 8005fc0 <__mdiff+0x5c>
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <__mdiff+0x10c>)
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fbe:	e7e5      	b.n	8005f8c <__mdiff+0x28>
 8005fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fc4:	6926      	ldr	r6, [r4, #16]
 8005fc6:	60c5      	str	r5, [r0, #12]
 8005fc8:	f104 0914 	add.w	r9, r4, #20
 8005fcc:	f108 0514 	add.w	r5, r8, #20
 8005fd0:	f100 0e14 	add.w	lr, r0, #20
 8005fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fdc:	f108 0210 	add.w	r2, r8, #16
 8005fe0:	46f2      	mov	sl, lr
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fec:	fa1f f883 	uxth.w	r8, r3
 8005ff0:	fa11 f18b 	uxtah	r1, r1, fp
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	eba1 0808 	sub.w	r8, r1, r8
 8005ffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006002:	fa1f f888 	uxth.w	r8, r8
 8006006:	1419      	asrs	r1, r3, #16
 8006008:	454e      	cmp	r6, r9
 800600a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800600e:	f84a 3b04 	str.w	r3, [sl], #4
 8006012:	d8e7      	bhi.n	8005fe4 <__mdiff+0x80>
 8006014:	1b33      	subs	r3, r6, r4
 8006016:	3b15      	subs	r3, #21
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3304      	adds	r3, #4
 800601e:	3415      	adds	r4, #21
 8006020:	42a6      	cmp	r6, r4
 8006022:	bf38      	it	cc
 8006024:	2304      	movcc	r3, #4
 8006026:	441d      	add	r5, r3
 8006028:	4473      	add	r3, lr
 800602a:	469e      	mov	lr, r3
 800602c:	462e      	mov	r6, r5
 800602e:	4566      	cmp	r6, ip
 8006030:	d30e      	bcc.n	8006050 <__mdiff+0xec>
 8006032:	f10c 0203 	add.w	r2, ip, #3
 8006036:	1b52      	subs	r2, r2, r5
 8006038:	f022 0203 	bic.w	r2, r2, #3
 800603c:	3d03      	subs	r5, #3
 800603e:	45ac      	cmp	ip, r5
 8006040:	bf38      	it	cc
 8006042:	2200      	movcc	r2, #0
 8006044:	441a      	add	r2, r3
 8006046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800604a:	b17b      	cbz	r3, 800606c <__mdiff+0x108>
 800604c:	6107      	str	r7, [r0, #16]
 800604e:	e7a3      	b.n	8005f98 <__mdiff+0x34>
 8006050:	f856 8b04 	ldr.w	r8, [r6], #4
 8006054:	fa11 f288 	uxtah	r2, r1, r8
 8006058:	1414      	asrs	r4, r2, #16
 800605a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800605e:	b292      	uxth	r2, r2
 8006060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006064:	f84e 2b04 	str.w	r2, [lr], #4
 8006068:	1421      	asrs	r1, r4, #16
 800606a:	e7e0      	b.n	800602e <__mdiff+0xca>
 800606c:	3f01      	subs	r7, #1
 800606e:	e7ea      	b.n	8006046 <__mdiff+0xe2>
 8006070:	080082d7 	.word	0x080082d7
 8006074:	0800827b 	.word	0x0800827b

08006078 <__d2b>:
 8006078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4689      	mov	r9, r1
 800607e:	2101      	movs	r1, #1
 8006080:	ec57 6b10 	vmov	r6, r7, d0
 8006084:	4690      	mov	r8, r2
 8006086:	f7ff fccf 	bl	8005a28 <_Balloc>
 800608a:	4604      	mov	r4, r0
 800608c:	b930      	cbnz	r0, 800609c <__d2b+0x24>
 800608e:	4602      	mov	r2, r0
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <__d2b+0xb0>)
 8006092:	4826      	ldr	r0, [pc, #152]	; (800612c <__d2b+0xb4>)
 8006094:	f240 310a 	movw	r1, #778	; 0x30a
 8006098:	f000 fc48 	bl	800692c <__assert_func>
 800609c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060a4:	bb35      	cbnz	r5, 80060f4 <__d2b+0x7c>
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	d028      	beq.n	80060fe <__d2b+0x86>
 80060ac:	4668      	mov	r0, sp
 80060ae:	9600      	str	r6, [sp, #0]
 80060b0:	f7ff fd82 	bl	8005bb8 <__lo0bits>
 80060b4:	9900      	ldr	r1, [sp, #0]
 80060b6:	b300      	cbz	r0, 80060fa <__d2b+0x82>
 80060b8:	9a01      	ldr	r2, [sp, #4]
 80060ba:	f1c0 0320 	rsb	r3, r0, #32
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	430b      	orrs	r3, r1
 80060c4:	40c2      	lsrs	r2, r0
 80060c6:	6163      	str	r3, [r4, #20]
 80060c8:	9201      	str	r2, [sp, #4]
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	61a3      	str	r3, [r4, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2202      	movne	r2, #2
 80060d4:	2201      	moveq	r2, #1
 80060d6:	6122      	str	r2, [r4, #16]
 80060d8:	b1d5      	cbz	r5, 8006110 <__d2b+0x98>
 80060da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060de:	4405      	add	r5, r0
 80060e0:	f8c9 5000 	str.w	r5, [r9]
 80060e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060e8:	f8c8 0000 	str.w	r0, [r8]
 80060ec:	4620      	mov	r0, r4
 80060ee:	b003      	add	sp, #12
 80060f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f8:	e7d5      	b.n	80060a6 <__d2b+0x2e>
 80060fa:	6161      	str	r1, [r4, #20]
 80060fc:	e7e5      	b.n	80060ca <__d2b+0x52>
 80060fe:	a801      	add	r0, sp, #4
 8006100:	f7ff fd5a 	bl	8005bb8 <__lo0bits>
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	6163      	str	r3, [r4, #20]
 8006108:	2201      	movs	r2, #1
 800610a:	6122      	str	r2, [r4, #16]
 800610c:	3020      	adds	r0, #32
 800610e:	e7e3      	b.n	80060d8 <__d2b+0x60>
 8006110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006118:	f8c9 0000 	str.w	r0, [r9]
 800611c:	6918      	ldr	r0, [r3, #16]
 800611e:	f7ff fd2b 	bl	8005b78 <__hi0bits>
 8006122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006126:	e7df      	b.n	80060e8 <__d2b+0x70>
 8006128:	080082d7 	.word	0x080082d7
 800612c:	0800827b 	.word	0x0800827b

08006130 <_mprec_log10>:
 8006130:	2817      	cmp	r0, #23
 8006132:	b5d0      	push	{r4, r6, r7, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	dc07      	bgt.n	8006148 <_mprec_log10+0x18>
 8006138:	4809      	ldr	r0, [pc, #36]	; (8006160 <_mprec_log10+0x30>)
 800613a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800613e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006142:	ec41 0b10 	vmov	d0, r0, r1
 8006146:	bdd0      	pop	{r4, r6, r7, pc}
 8006148:	4906      	ldr	r1, [pc, #24]	; (8006164 <_mprec_log10+0x34>)
 800614a:	4f07      	ldr	r7, [pc, #28]	; (8006168 <_mprec_log10+0x38>)
 800614c:	2000      	movs	r0, #0
 800614e:	2600      	movs	r6, #0
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	3c01      	subs	r4, #1
 800615a:	d1f9      	bne.n	8006150 <_mprec_log10+0x20>
 800615c:	e7f1      	b.n	8006142 <_mprec_log10+0x12>
 800615e:	bf00      	nop
 8006160:	08008310 	.word	0x08008310
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000

0800616c <_calloc_r>:
 800616c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800616e:	fba1 2402 	umull	r2, r4, r1, r2
 8006172:	b94c      	cbnz	r4, 8006188 <_calloc_r+0x1c>
 8006174:	4611      	mov	r1, r2
 8006176:	9201      	str	r2, [sp, #4]
 8006178:	f000 f82e 	bl	80061d8 <_malloc_r>
 800617c:	9a01      	ldr	r2, [sp, #4]
 800617e:	4605      	mov	r5, r0
 8006180:	b930      	cbnz	r0, 8006190 <_calloc_r+0x24>
 8006182:	4628      	mov	r0, r5
 8006184:	b003      	add	sp, #12
 8006186:	bd30      	pop	{r4, r5, pc}
 8006188:	220c      	movs	r2, #12
 800618a:	6002      	str	r2, [r0, #0]
 800618c:	2500      	movs	r5, #0
 800618e:	e7f8      	b.n	8006182 <_calloc_r+0x16>
 8006190:	4621      	mov	r1, r4
 8006192:	f7ff fae7 	bl	8005764 <memset>
 8006196:	e7f4      	b.n	8006182 <_calloc_r+0x16>

08006198 <sbrk_aligned>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4e0e      	ldr	r6, [pc, #56]	; (80061d4 <sbrk_aligned+0x3c>)
 800619c:	460c      	mov	r4, r1
 800619e:	6831      	ldr	r1, [r6, #0]
 80061a0:	4605      	mov	r5, r0
 80061a2:	b911      	cbnz	r1, 80061aa <sbrk_aligned+0x12>
 80061a4:	f000 fbaa 	bl	80068fc <_sbrk_r>
 80061a8:	6030      	str	r0, [r6, #0]
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fba5 	bl	80068fc <_sbrk_r>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	d00a      	beq.n	80061cc <sbrk_aligned+0x34>
 80061b6:	1cc4      	adds	r4, r0, #3
 80061b8:	f024 0403 	bic.w	r4, r4, #3
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d007      	beq.n	80061d0 <sbrk_aligned+0x38>
 80061c0:	1a21      	subs	r1, r4, r0
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 fb9a 	bl	80068fc <_sbrk_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d101      	bne.n	80061d0 <sbrk_aligned+0x38>
 80061cc:	f04f 34ff 	mov.w	r4, #4294967295
 80061d0:	4620      	mov	r0, r4
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	200002ac 	.word	0x200002ac

080061d8 <_malloc_r>:
 80061d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061dc:	1ccd      	adds	r5, r1, #3
 80061de:	f025 0503 	bic.w	r5, r5, #3
 80061e2:	3508      	adds	r5, #8
 80061e4:	2d0c      	cmp	r5, #12
 80061e6:	bf38      	it	cc
 80061e8:	250c      	movcc	r5, #12
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	4607      	mov	r7, r0
 80061ee:	db01      	blt.n	80061f4 <_malloc_r+0x1c>
 80061f0:	42a9      	cmp	r1, r5
 80061f2:	d905      	bls.n	8006200 <_malloc_r+0x28>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	2600      	movs	r6, #0
 80061fa:	4630      	mov	r0, r6
 80061fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006200:	4e2e      	ldr	r6, [pc, #184]	; (80062bc <_malloc_r+0xe4>)
 8006202:	f001 fa6d 	bl	80076e0 <__malloc_lock>
 8006206:	6833      	ldr	r3, [r6, #0]
 8006208:	461c      	mov	r4, r3
 800620a:	bb34      	cbnz	r4, 800625a <_malloc_r+0x82>
 800620c:	4629      	mov	r1, r5
 800620e:	4638      	mov	r0, r7
 8006210:	f7ff ffc2 	bl	8006198 <sbrk_aligned>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	4604      	mov	r4, r0
 8006218:	d14d      	bne.n	80062b6 <_malloc_r+0xde>
 800621a:	6834      	ldr	r4, [r6, #0]
 800621c:	4626      	mov	r6, r4
 800621e:	2e00      	cmp	r6, #0
 8006220:	d140      	bne.n	80062a4 <_malloc_r+0xcc>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	4631      	mov	r1, r6
 8006226:	4638      	mov	r0, r7
 8006228:	eb04 0803 	add.w	r8, r4, r3
 800622c:	f000 fb66 	bl	80068fc <_sbrk_r>
 8006230:	4580      	cmp	r8, r0
 8006232:	d13a      	bne.n	80062aa <_malloc_r+0xd2>
 8006234:	6821      	ldr	r1, [r4, #0]
 8006236:	3503      	adds	r5, #3
 8006238:	1a6d      	subs	r5, r5, r1
 800623a:	f025 0503 	bic.w	r5, r5, #3
 800623e:	3508      	adds	r5, #8
 8006240:	2d0c      	cmp	r5, #12
 8006242:	bf38      	it	cc
 8006244:	250c      	movcc	r5, #12
 8006246:	4629      	mov	r1, r5
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ffa5 	bl	8006198 <sbrk_aligned>
 800624e:	3001      	adds	r0, #1
 8006250:	d02b      	beq.n	80062aa <_malloc_r+0xd2>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	442b      	add	r3, r5
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	e00e      	b.n	8006278 <_malloc_r+0xa0>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	1b52      	subs	r2, r2, r5
 800625e:	d41e      	bmi.n	800629e <_malloc_r+0xc6>
 8006260:	2a0b      	cmp	r2, #11
 8006262:	d916      	bls.n	8006292 <_malloc_r+0xba>
 8006264:	1961      	adds	r1, r4, r5
 8006266:	42a3      	cmp	r3, r4
 8006268:	6025      	str	r5, [r4, #0]
 800626a:	bf18      	it	ne
 800626c:	6059      	strne	r1, [r3, #4]
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	bf08      	it	eq
 8006272:	6031      	streq	r1, [r6, #0]
 8006274:	5162      	str	r2, [r4, r5]
 8006276:	604b      	str	r3, [r1, #4]
 8006278:	4638      	mov	r0, r7
 800627a:	f104 060b 	add.w	r6, r4, #11
 800627e:	f001 fa35 	bl	80076ec <__malloc_unlock>
 8006282:	f026 0607 	bic.w	r6, r6, #7
 8006286:	1d23      	adds	r3, r4, #4
 8006288:	1af2      	subs	r2, r6, r3
 800628a:	d0b6      	beq.n	80061fa <_malloc_r+0x22>
 800628c:	1b9b      	subs	r3, r3, r6
 800628e:	50a3      	str	r3, [r4, r2]
 8006290:	e7b3      	b.n	80061fa <_malloc_r+0x22>
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	42a3      	cmp	r3, r4
 8006296:	bf0c      	ite	eq
 8006298:	6032      	streq	r2, [r6, #0]
 800629a:	605a      	strne	r2, [r3, #4]
 800629c:	e7ec      	b.n	8006278 <_malloc_r+0xa0>
 800629e:	4623      	mov	r3, r4
 80062a0:	6864      	ldr	r4, [r4, #4]
 80062a2:	e7b2      	b.n	800620a <_malloc_r+0x32>
 80062a4:	4634      	mov	r4, r6
 80062a6:	6876      	ldr	r6, [r6, #4]
 80062a8:	e7b9      	b.n	800621e <_malloc_r+0x46>
 80062aa:	230c      	movs	r3, #12
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4638      	mov	r0, r7
 80062b0:	f001 fa1c 	bl	80076ec <__malloc_unlock>
 80062b4:	e7a1      	b.n	80061fa <_malloc_r+0x22>
 80062b6:	6025      	str	r5, [r4, #0]
 80062b8:	e7de      	b.n	8006278 <_malloc_r+0xa0>
 80062ba:	bf00      	nop
 80062bc:	200002a8 	.word	0x200002a8

080062c0 <_realloc_r>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4680      	mov	r8, r0
 80062c6:	4614      	mov	r4, r2
 80062c8:	460e      	mov	r6, r1
 80062ca:	b921      	cbnz	r1, 80062d6 <_realloc_r+0x16>
 80062cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	4611      	mov	r1, r2
 80062d2:	f7ff bf81 	b.w	80061d8 <_malloc_r>
 80062d6:	b92a      	cbnz	r2, 80062e4 <_realloc_r+0x24>
 80062d8:	f001 fa0e 	bl	80076f8 <_free_r>
 80062dc:	4625      	mov	r5, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	f001 fa54 	bl	8007790 <_malloc_usable_size_r>
 80062e8:	4284      	cmp	r4, r0
 80062ea:	4607      	mov	r7, r0
 80062ec:	d802      	bhi.n	80062f4 <_realloc_r+0x34>
 80062ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062f2:	d812      	bhi.n	800631a <_realloc_r+0x5a>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff ff6e 	bl	80061d8 <_malloc_r>
 80062fc:	4605      	mov	r5, r0
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0ed      	beq.n	80062de <_realloc_r+0x1e>
 8006302:	42bc      	cmp	r4, r7
 8006304:	4622      	mov	r2, r4
 8006306:	4631      	mov	r1, r6
 8006308:	bf28      	it	cs
 800630a:	463a      	movcs	r2, r7
 800630c:	f001 f9c0 	bl	8007690 <memcpy>
 8006310:	4631      	mov	r1, r6
 8006312:	4640      	mov	r0, r8
 8006314:	f001 f9f0 	bl	80076f8 <_free_r>
 8006318:	e7e1      	b.n	80062de <_realloc_r+0x1e>
 800631a:	4635      	mov	r5, r6
 800631c:	e7df      	b.n	80062de <_realloc_r+0x1e>

0800631e <__ssputs_r>:
 800631e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006322:	688e      	ldr	r6, [r1, #8]
 8006324:	429e      	cmp	r6, r3
 8006326:	4682      	mov	sl, r0
 8006328:	460c      	mov	r4, r1
 800632a:	4690      	mov	r8, r2
 800632c:	461f      	mov	r7, r3
 800632e:	d838      	bhi.n	80063a2 <__ssputs_r+0x84>
 8006330:	898a      	ldrh	r2, [r1, #12]
 8006332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006336:	d032      	beq.n	800639e <__ssputs_r+0x80>
 8006338:	6825      	ldr	r5, [r4, #0]
 800633a:	6909      	ldr	r1, [r1, #16]
 800633c:	eba5 0901 	sub.w	r9, r5, r1
 8006340:	6965      	ldr	r5, [r4, #20]
 8006342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800634a:	3301      	adds	r3, #1
 800634c:	444b      	add	r3, r9
 800634e:	106d      	asrs	r5, r5, #1
 8006350:	429d      	cmp	r5, r3
 8006352:	bf38      	it	cc
 8006354:	461d      	movcc	r5, r3
 8006356:	0553      	lsls	r3, r2, #21
 8006358:	d531      	bpl.n	80063be <__ssputs_r+0xa0>
 800635a:	4629      	mov	r1, r5
 800635c:	f7ff ff3c 	bl	80061d8 <_malloc_r>
 8006360:	4606      	mov	r6, r0
 8006362:	b950      	cbnz	r0, 800637a <__ssputs_r+0x5c>
 8006364:	230c      	movs	r3, #12
 8006366:	f8ca 3000 	str.w	r3, [sl]
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	6921      	ldr	r1, [r4, #16]
 800637c:	464a      	mov	r2, r9
 800637e:	f001 f987 	bl	8007690 <memcpy>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	6126      	str	r6, [r4, #16]
 8006390:	6165      	str	r5, [r4, #20]
 8006392:	444e      	add	r6, r9
 8006394:	eba5 0509 	sub.w	r5, r5, r9
 8006398:	6026      	str	r6, [r4, #0]
 800639a:	60a5      	str	r5, [r4, #8]
 800639c:	463e      	mov	r6, r7
 800639e:	42be      	cmp	r6, r7
 80063a0:	d900      	bls.n	80063a4 <__ssputs_r+0x86>
 80063a2:	463e      	mov	r6, r7
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	4632      	mov	r2, r6
 80063a8:	4641      	mov	r1, r8
 80063aa:	f001 f97f 	bl	80076ac <memmove>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	1b9b      	subs	r3, r3, r6
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	4433      	add	r3, r6
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	2000      	movs	r0, #0
 80063bc:	e7db      	b.n	8006376 <__ssputs_r+0x58>
 80063be:	462a      	mov	r2, r5
 80063c0:	f7ff ff7e 	bl	80062c0 <_realloc_r>
 80063c4:	4606      	mov	r6, r0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d1e1      	bne.n	800638e <__ssputs_r+0x70>
 80063ca:	6921      	ldr	r1, [r4, #16]
 80063cc:	4650      	mov	r0, sl
 80063ce:	f001 f993 	bl	80076f8 <_free_r>
 80063d2:	e7c7      	b.n	8006364 <__ssputs_r+0x46>

080063d4 <_svfiprintf_r>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4698      	mov	r8, r3
 80063da:	898b      	ldrh	r3, [r1, #12]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	b09d      	sub	sp, #116	; 0x74
 80063e0:	4607      	mov	r7, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	d50e      	bpl.n	8006406 <_svfiprintf_r+0x32>
 80063e8:	690b      	ldr	r3, [r1, #16]
 80063ea:	b963      	cbnz	r3, 8006406 <_svfiprintf_r+0x32>
 80063ec:	2140      	movs	r1, #64	; 0x40
 80063ee:	f7ff fef3 	bl	80061d8 <_malloc_r>
 80063f2:	6028      	str	r0, [r5, #0]
 80063f4:	6128      	str	r0, [r5, #16]
 80063f6:	b920      	cbnz	r0, 8006402 <_svfiprintf_r+0x2e>
 80063f8:	230c      	movs	r3, #12
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e0d1      	b.n	80065a6 <_svfiprintf_r+0x1d2>
 8006402:	2340      	movs	r3, #64	; 0x40
 8006404:	616b      	str	r3, [r5, #20]
 8006406:	2300      	movs	r3, #0
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	2320      	movs	r3, #32
 800640c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006410:	f8cd 800c 	str.w	r8, [sp, #12]
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065c0 <_svfiprintf_r+0x1ec>
 800641a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800641e:	f04f 0901 	mov.w	r9, #1
 8006422:	4623      	mov	r3, r4
 8006424:	469a      	mov	sl, r3
 8006426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800642a:	b10a      	cbz	r2, 8006430 <_svfiprintf_r+0x5c>
 800642c:	2a25      	cmp	r2, #37	; 0x25
 800642e:	d1f9      	bne.n	8006424 <_svfiprintf_r+0x50>
 8006430:	ebba 0b04 	subs.w	fp, sl, r4
 8006434:	d00b      	beq.n	800644e <_svfiprintf_r+0x7a>
 8006436:	465b      	mov	r3, fp
 8006438:	4622      	mov	r2, r4
 800643a:	4629      	mov	r1, r5
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff ff6e 	bl	800631e <__ssputs_r>
 8006442:	3001      	adds	r0, #1
 8006444:	f000 80aa 	beq.w	800659c <_svfiprintf_r+0x1c8>
 8006448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644a:	445a      	add	r2, fp
 800644c:	9209      	str	r2, [sp, #36]	; 0x24
 800644e:	f89a 3000 	ldrb.w	r3, [sl]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a2 	beq.w	800659c <_svfiprintf_r+0x1c8>
 8006458:	2300      	movs	r3, #0
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006462:	f10a 0a01 	add.w	sl, sl, #1
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800646e:	931a      	str	r3, [sp, #104]	; 0x68
 8006470:	4654      	mov	r4, sl
 8006472:	2205      	movs	r2, #5
 8006474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006478:	4851      	ldr	r0, [pc, #324]	; (80065c0 <_svfiprintf_r+0x1ec>)
 800647a:	f7f9 feb1 	bl	80001e0 <memchr>
 800647e:	9a04      	ldr	r2, [sp, #16]
 8006480:	b9d8      	cbnz	r0, 80064ba <_svfiprintf_r+0xe6>
 8006482:	06d0      	lsls	r0, r2, #27
 8006484:	bf44      	itt	mi
 8006486:	2320      	movmi	r3, #32
 8006488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800648c:	0711      	lsls	r1, r2, #28
 800648e:	bf44      	itt	mi
 8006490:	232b      	movmi	r3, #43	; 0x2b
 8006492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006496:	f89a 3000 	ldrb.w	r3, [sl]
 800649a:	2b2a      	cmp	r3, #42	; 0x2a
 800649c:	d015      	beq.n	80064ca <_svfiprintf_r+0xf6>
 800649e:	9a07      	ldr	r2, [sp, #28]
 80064a0:	4654      	mov	r4, sl
 80064a2:	2000      	movs	r0, #0
 80064a4:	f04f 0c0a 	mov.w	ip, #10
 80064a8:	4621      	mov	r1, r4
 80064aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ae:	3b30      	subs	r3, #48	; 0x30
 80064b0:	2b09      	cmp	r3, #9
 80064b2:	d94e      	bls.n	8006552 <_svfiprintf_r+0x17e>
 80064b4:	b1b0      	cbz	r0, 80064e4 <_svfiprintf_r+0x110>
 80064b6:	9207      	str	r2, [sp, #28]
 80064b8:	e014      	b.n	80064e4 <_svfiprintf_r+0x110>
 80064ba:	eba0 0308 	sub.w	r3, r0, r8
 80064be:	fa09 f303 	lsl.w	r3, r9, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	46a2      	mov	sl, r4
 80064c8:	e7d2      	b.n	8006470 <_svfiprintf_r+0x9c>
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	9103      	str	r1, [sp, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bfbb      	ittet	lt
 80064d6:	425b      	neglt	r3, r3
 80064d8:	f042 0202 	orrlt.w	r2, r2, #2
 80064dc:	9307      	strge	r3, [sp, #28]
 80064de:	9307      	strlt	r3, [sp, #28]
 80064e0:	bfb8      	it	lt
 80064e2:	9204      	strlt	r2, [sp, #16]
 80064e4:	7823      	ldrb	r3, [r4, #0]
 80064e6:	2b2e      	cmp	r3, #46	; 0x2e
 80064e8:	d10c      	bne.n	8006504 <_svfiprintf_r+0x130>
 80064ea:	7863      	ldrb	r3, [r4, #1]
 80064ec:	2b2a      	cmp	r3, #42	; 0x2a
 80064ee:	d135      	bne.n	800655c <_svfiprintf_r+0x188>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfb8      	it	lt
 80064fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006500:	3402      	adds	r4, #2
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065d0 <_svfiprintf_r+0x1fc>
 8006508:	7821      	ldrb	r1, [r4, #0]
 800650a:	2203      	movs	r2, #3
 800650c:	4650      	mov	r0, sl
 800650e:	f7f9 fe67 	bl	80001e0 <memchr>
 8006512:	b140      	cbz	r0, 8006526 <_svfiprintf_r+0x152>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	eba0 000a 	sub.w	r0, r0, sl
 800651a:	fa03 f000 	lsl.w	r0, r3, r0
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	4303      	orrs	r3, r0
 8006522:	3401      	adds	r4, #1
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652a:	4826      	ldr	r0, [pc, #152]	; (80065c4 <_svfiprintf_r+0x1f0>)
 800652c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006530:	2206      	movs	r2, #6
 8006532:	f7f9 fe55 	bl	80001e0 <memchr>
 8006536:	2800      	cmp	r0, #0
 8006538:	d038      	beq.n	80065ac <_svfiprintf_r+0x1d8>
 800653a:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <_svfiprintf_r+0x1f4>)
 800653c:	bb1b      	cbnz	r3, 8006586 <_svfiprintf_r+0x1b2>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	3307      	adds	r3, #7
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	3308      	adds	r3, #8
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	4433      	add	r3, r6
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	e767      	b.n	8006422 <_svfiprintf_r+0x4e>
 8006552:	fb0c 3202 	mla	r2, ip, r2, r3
 8006556:	460c      	mov	r4, r1
 8006558:	2001      	movs	r0, #1
 800655a:	e7a5      	b.n	80064a8 <_svfiprintf_r+0xd4>
 800655c:	2300      	movs	r3, #0
 800655e:	3401      	adds	r4, #1
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	4619      	mov	r1, r3
 8006564:	f04f 0c0a 	mov.w	ip, #10
 8006568:	4620      	mov	r0, r4
 800656a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656e:	3a30      	subs	r2, #48	; 0x30
 8006570:	2a09      	cmp	r2, #9
 8006572:	d903      	bls.n	800657c <_svfiprintf_r+0x1a8>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0c5      	beq.n	8006504 <_svfiprintf_r+0x130>
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	e7c3      	b.n	8006504 <_svfiprintf_r+0x130>
 800657c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006580:	4604      	mov	r4, r0
 8006582:	2301      	movs	r3, #1
 8006584:	e7f0      	b.n	8006568 <_svfiprintf_r+0x194>
 8006586:	ab03      	add	r3, sp, #12
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	462a      	mov	r2, r5
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <_svfiprintf_r+0x1f8>)
 800658e:	a904      	add	r1, sp, #16
 8006590:	4638      	mov	r0, r7
 8006592:	f3af 8000 	nop.w
 8006596:	1c42      	adds	r2, r0, #1
 8006598:	4606      	mov	r6, r0
 800659a:	d1d6      	bne.n	800654a <_svfiprintf_r+0x176>
 800659c:	89ab      	ldrh	r3, [r5, #12]
 800659e:	065b      	lsls	r3, r3, #25
 80065a0:	f53f af2c 	bmi.w	80063fc <_svfiprintf_r+0x28>
 80065a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a6:	b01d      	add	sp, #116	; 0x74
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	462a      	mov	r2, r5
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <_svfiprintf_r+0x1f8>)
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	4638      	mov	r0, r7
 80065b8:	f000 f87a 	bl	80066b0 <_printf_i>
 80065bc:	e7eb      	b.n	8006596 <_svfiprintf_r+0x1c2>
 80065be:	bf00      	nop
 80065c0:	080083e4 	.word	0x080083e4
 80065c4:	080083ee 	.word	0x080083ee
 80065c8:	00000000 	.word	0x00000000
 80065cc:	0800631f 	.word	0x0800631f
 80065d0:	080083ea 	.word	0x080083ea

080065d4 <_printf_common>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	4616      	mov	r6, r2
 80065da:	4699      	mov	r9, r3
 80065dc:	688a      	ldr	r2, [r1, #8]
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bfb8      	it	lt
 80065e8:	4613      	movlt	r3, r2
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f0:	4607      	mov	r7, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	b10a      	cbz	r2, 80065fa <_printf_common+0x26>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	0699      	lsls	r1, r3, #26
 80065fe:	bf42      	ittt	mi
 8006600:	6833      	ldrmi	r3, [r6, #0]
 8006602:	3302      	addmi	r3, #2
 8006604:	6033      	strmi	r3, [r6, #0]
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	f015 0506 	ands.w	r5, r5, #6
 800660c:	d106      	bne.n	800661c <_printf_common+0x48>
 800660e:	f104 0a19 	add.w	sl, r4, #25
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	6832      	ldr	r2, [r6, #0]
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc26      	bgt.n	800666a <_printf_common+0x96>
 800661c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006620:	1e13      	subs	r3, r2, #0
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	bf18      	it	ne
 8006626:	2301      	movne	r3, #1
 8006628:	0692      	lsls	r2, r2, #26
 800662a:	d42b      	bmi.n	8006684 <_printf_common+0xb0>
 800662c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d01e      	beq.n	8006678 <_printf_common+0xa4>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	68e5      	ldr	r5, [r4, #12]
 800663e:	6832      	ldr	r2, [r6, #0]
 8006640:	f003 0306 	and.w	r3, r3, #6
 8006644:	2b04      	cmp	r3, #4
 8006646:	bf08      	it	eq
 8006648:	1aad      	subeq	r5, r5, r2
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	bf0c      	ite	eq
 8006650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006654:	2500      	movne	r5, #0
 8006656:	4293      	cmp	r3, r2
 8006658:	bfc4      	itt	gt
 800665a:	1a9b      	subgt	r3, r3, r2
 800665c:	18ed      	addgt	r5, r5, r3
 800665e:	2600      	movs	r6, #0
 8006660:	341a      	adds	r4, #26
 8006662:	42b5      	cmp	r5, r6
 8006664:	d11a      	bne.n	800669c <_printf_common+0xc8>
 8006666:	2000      	movs	r0, #0
 8006668:	e008      	b.n	800667c <_printf_common+0xa8>
 800666a:	2301      	movs	r3, #1
 800666c:	4652      	mov	r2, sl
 800666e:	4649      	mov	r1, r9
 8006670:	4638      	mov	r0, r7
 8006672:	47c0      	blx	r8
 8006674:	3001      	adds	r0, #1
 8006676:	d103      	bne.n	8006680 <_printf_common+0xac>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006680:	3501      	adds	r5, #1
 8006682:	e7c6      	b.n	8006612 <_printf_common+0x3e>
 8006684:	18e1      	adds	r1, r4, r3
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	2030      	movs	r0, #48	; 0x30
 800668a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800668e:	4422      	add	r2, r4
 8006690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006698:	3302      	adds	r3, #2
 800669a:	e7c7      	b.n	800662c <_printf_common+0x58>
 800669c:	2301      	movs	r3, #1
 800669e:	4622      	mov	r2, r4
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d0e6      	beq.n	8006678 <_printf_common+0xa4>
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7d9      	b.n	8006662 <_printf_common+0x8e>
	...

080066b0 <_printf_i>:
 80066b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	7e0f      	ldrb	r7, [r1, #24]
 80066b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066b8:	2f78      	cmp	r7, #120	; 0x78
 80066ba:	4691      	mov	r9, r2
 80066bc:	4680      	mov	r8, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	469a      	mov	sl, r3
 80066c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066c6:	d807      	bhi.n	80066d8 <_printf_i+0x28>
 80066c8:	2f62      	cmp	r7, #98	; 0x62
 80066ca:	d80a      	bhi.n	80066e2 <_printf_i+0x32>
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	f000 80d8 	beq.w	8006882 <_printf_i+0x1d2>
 80066d2:	2f58      	cmp	r7, #88	; 0x58
 80066d4:	f000 80a3 	beq.w	800681e <_printf_i+0x16e>
 80066d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e0:	e03a      	b.n	8006758 <_printf_i+0xa8>
 80066e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066e6:	2b15      	cmp	r3, #21
 80066e8:	d8f6      	bhi.n	80066d8 <_printf_i+0x28>
 80066ea:	a101      	add	r1, pc, #4	; (adr r1, 80066f0 <_printf_i+0x40>)
 80066ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f0:	08006749 	.word	0x08006749
 80066f4:	0800675d 	.word	0x0800675d
 80066f8:	080066d9 	.word	0x080066d9
 80066fc:	080066d9 	.word	0x080066d9
 8006700:	080066d9 	.word	0x080066d9
 8006704:	080066d9 	.word	0x080066d9
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080066d9 	.word	0x080066d9
 8006710:	080066d9 	.word	0x080066d9
 8006714:	080066d9 	.word	0x080066d9
 8006718:	080066d9 	.word	0x080066d9
 800671c:	08006869 	.word	0x08006869
 8006720:	0800678d 	.word	0x0800678d
 8006724:	0800684b 	.word	0x0800684b
 8006728:	080066d9 	.word	0x080066d9
 800672c:	080066d9 	.word	0x080066d9
 8006730:	0800688b 	.word	0x0800688b
 8006734:	080066d9 	.word	0x080066d9
 8006738:	0800678d 	.word	0x0800678d
 800673c:	080066d9 	.word	0x080066d9
 8006740:	080066d9 	.word	0x080066d9
 8006744:	08006853 	.word	0x08006853
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	602a      	str	r2, [r5, #0]
 8006750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006758:	2301      	movs	r3, #1
 800675a:	e0a3      	b.n	80068a4 <_printf_i+0x1f4>
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	6829      	ldr	r1, [r5, #0]
 8006760:	0606      	lsls	r6, r0, #24
 8006762:	f101 0304 	add.w	r3, r1, #4
 8006766:	d50a      	bpl.n	800677e <_printf_i+0xce>
 8006768:	680e      	ldr	r6, [r1, #0]
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	2e00      	cmp	r6, #0
 800676e:	da03      	bge.n	8006778 <_printf_i+0xc8>
 8006770:	232d      	movs	r3, #45	; 0x2d
 8006772:	4276      	negs	r6, r6
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	485e      	ldr	r0, [pc, #376]	; (80068f4 <_printf_i+0x244>)
 800677a:	230a      	movs	r3, #10
 800677c:	e019      	b.n	80067b2 <_printf_i+0x102>
 800677e:	680e      	ldr	r6, [r1, #0]
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006786:	bf18      	it	ne
 8006788:	b236      	sxthne	r6, r6
 800678a:	e7ef      	b.n	800676c <_printf_i+0xbc>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	6820      	ldr	r0, [r4, #0]
 8006790:	1d19      	adds	r1, r3, #4
 8006792:	6029      	str	r1, [r5, #0]
 8006794:	0601      	lsls	r1, r0, #24
 8006796:	d501      	bpl.n	800679c <_printf_i+0xec>
 8006798:	681e      	ldr	r6, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0xf2>
 800679c:	0646      	lsls	r6, r0, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0xe8>
 80067a0:	881e      	ldrh	r6, [r3, #0]
 80067a2:	4854      	ldr	r0, [pc, #336]	; (80068f4 <_printf_i+0x244>)
 80067a4:	2f6f      	cmp	r7, #111	; 0x6f
 80067a6:	bf0c      	ite	eq
 80067a8:	2308      	moveq	r3, #8
 80067aa:	230a      	movne	r3, #10
 80067ac:	2100      	movs	r1, #0
 80067ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067b2:	6865      	ldr	r5, [r4, #4]
 80067b4:	60a5      	str	r5, [r4, #8]
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	bfa2      	ittt	ge
 80067ba:	6821      	ldrge	r1, [r4, #0]
 80067bc:	f021 0104 	bicge.w	r1, r1, #4
 80067c0:	6021      	strge	r1, [r4, #0]
 80067c2:	b90e      	cbnz	r6, 80067c8 <_printf_i+0x118>
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	d04d      	beq.n	8006864 <_printf_i+0x1b4>
 80067c8:	4615      	mov	r5, r2
 80067ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80067ce:	fb03 6711 	mls	r7, r3, r1, r6
 80067d2:	5dc7      	ldrb	r7, [r0, r7]
 80067d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067d8:	4637      	mov	r7, r6
 80067da:	42bb      	cmp	r3, r7
 80067dc:	460e      	mov	r6, r1
 80067de:	d9f4      	bls.n	80067ca <_printf_i+0x11a>
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d10b      	bne.n	80067fc <_printf_i+0x14c>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	07de      	lsls	r6, r3, #31
 80067e8:	d508      	bpl.n	80067fc <_printf_i+0x14c>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	6861      	ldr	r1, [r4, #4]
 80067ee:	4299      	cmp	r1, r3
 80067f0:	bfde      	ittt	le
 80067f2:	2330      	movle	r3, #48	; 0x30
 80067f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067fc:	1b52      	subs	r2, r2, r5
 80067fe:	6122      	str	r2, [r4, #16]
 8006800:	f8cd a000 	str.w	sl, [sp]
 8006804:	464b      	mov	r3, r9
 8006806:	aa03      	add	r2, sp, #12
 8006808:	4621      	mov	r1, r4
 800680a:	4640      	mov	r0, r8
 800680c:	f7ff fee2 	bl	80065d4 <_printf_common>
 8006810:	3001      	adds	r0, #1
 8006812:	d14c      	bne.n	80068ae <_printf_i+0x1fe>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	b004      	add	sp, #16
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	4835      	ldr	r0, [pc, #212]	; (80068f4 <_printf_i+0x244>)
 8006820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006824:	6829      	ldr	r1, [r5, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	f851 6b04 	ldr.w	r6, [r1], #4
 800682c:	6029      	str	r1, [r5, #0]
 800682e:	061d      	lsls	r5, r3, #24
 8006830:	d514      	bpl.n	800685c <_printf_i+0x1ac>
 8006832:	07df      	lsls	r7, r3, #31
 8006834:	bf44      	itt	mi
 8006836:	f043 0320 	orrmi.w	r3, r3, #32
 800683a:	6023      	strmi	r3, [r4, #0]
 800683c:	b91e      	cbnz	r6, 8006846 <_printf_i+0x196>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f023 0320 	bic.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	2310      	movs	r3, #16
 8006848:	e7b0      	b.n	80067ac <_printf_i+0xfc>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f043 0320 	orr.w	r3, r3, #32
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	2378      	movs	r3, #120	; 0x78
 8006854:	4828      	ldr	r0, [pc, #160]	; (80068f8 <_printf_i+0x248>)
 8006856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800685a:	e7e3      	b.n	8006824 <_printf_i+0x174>
 800685c:	0659      	lsls	r1, r3, #25
 800685e:	bf48      	it	mi
 8006860:	b2b6      	uxthmi	r6, r6
 8006862:	e7e6      	b.n	8006832 <_printf_i+0x182>
 8006864:	4615      	mov	r5, r2
 8006866:	e7bb      	b.n	80067e0 <_printf_i+0x130>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	6826      	ldr	r6, [r4, #0]
 800686c:	6961      	ldr	r1, [r4, #20]
 800686e:	1d18      	adds	r0, r3, #4
 8006870:	6028      	str	r0, [r5, #0]
 8006872:	0635      	lsls	r5, r6, #24
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	d501      	bpl.n	800687c <_printf_i+0x1cc>
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	e002      	b.n	8006882 <_printf_i+0x1d2>
 800687c:	0670      	lsls	r0, r6, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0x1c8>
 8006880:	8019      	strh	r1, [r3, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	4615      	mov	r5, r2
 8006888:	e7ba      	b.n	8006800 <_printf_i+0x150>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	1d1a      	adds	r2, r3, #4
 800688e:	602a      	str	r2, [r5, #0]
 8006890:	681d      	ldr	r5, [r3, #0]
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	2100      	movs	r1, #0
 8006896:	4628      	mov	r0, r5
 8006898:	f7f9 fca2 	bl	80001e0 <memchr>
 800689c:	b108      	cbz	r0, 80068a2 <_printf_i+0x1f2>
 800689e:	1b40      	subs	r0, r0, r5
 80068a0:	6060      	str	r0, [r4, #4]
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	2300      	movs	r3, #0
 80068a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ac:	e7a8      	b.n	8006800 <_printf_i+0x150>
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	462a      	mov	r2, r5
 80068b2:	4649      	mov	r1, r9
 80068b4:	4640      	mov	r0, r8
 80068b6:	47d0      	blx	sl
 80068b8:	3001      	adds	r0, #1
 80068ba:	d0ab      	beq.n	8006814 <_printf_i+0x164>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	079b      	lsls	r3, r3, #30
 80068c0:	d413      	bmi.n	80068ea <_printf_i+0x23a>
 80068c2:	68e0      	ldr	r0, [r4, #12]
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	4298      	cmp	r0, r3
 80068c8:	bfb8      	it	lt
 80068ca:	4618      	movlt	r0, r3
 80068cc:	e7a4      	b.n	8006818 <_printf_i+0x168>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4632      	mov	r2, r6
 80068d2:	4649      	mov	r1, r9
 80068d4:	4640      	mov	r0, r8
 80068d6:	47d0      	blx	sl
 80068d8:	3001      	adds	r0, #1
 80068da:	d09b      	beq.n	8006814 <_printf_i+0x164>
 80068dc:	3501      	adds	r5, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	9903      	ldr	r1, [sp, #12]
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	dcf2      	bgt.n	80068ce <_printf_i+0x21e>
 80068e8:	e7eb      	b.n	80068c2 <_printf_i+0x212>
 80068ea:	2500      	movs	r5, #0
 80068ec:	f104 0619 	add.w	r6, r4, #25
 80068f0:	e7f5      	b.n	80068de <_printf_i+0x22e>
 80068f2:	bf00      	nop
 80068f4:	080083f5 	.word	0x080083f5
 80068f8:	08008406 	.word	0x08008406

080068fc <_sbrk_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d06      	ldr	r5, [pc, #24]	; (8006918 <_sbrk_r+0x1c>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fb f946 	bl	8001b98 <_sbrk>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_sbrk_r+0x1a>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_sbrk_r+0x1a>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	200002b0 	.word	0x200002b0

0800691c <strcpy>:
 800691c:	4603      	mov	r3, r0
 800691e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006922:	f803 2b01 	strb.w	r2, [r3], #1
 8006926:	2a00      	cmp	r2, #0
 8006928:	d1f9      	bne.n	800691e <strcpy+0x2>
 800692a:	4770      	bx	lr

0800692c <__assert_func>:
 800692c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800692e:	4614      	mov	r4, r2
 8006930:	461a      	mov	r2, r3
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <__assert_func+0x2c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4605      	mov	r5, r0
 8006938:	68d8      	ldr	r0, [r3, #12]
 800693a:	b14c      	cbz	r4, 8006950 <__assert_func+0x24>
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <__assert_func+0x30>)
 800693e:	9100      	str	r1, [sp, #0]
 8006940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006944:	4906      	ldr	r1, [pc, #24]	; (8006960 <__assert_func+0x34>)
 8006946:	462b      	mov	r3, r5
 8006948:	f000 fe88 	bl	800765c <fiprintf>
 800694c:	f001 f942 	bl	8007bd4 <abort>
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <__assert_func+0x38>)
 8006952:	461c      	mov	r4, r3
 8006954:	e7f3      	b.n	800693e <__assert_func+0x12>
 8006956:	bf00      	nop
 8006958:	2000000c 	.word	0x2000000c
 800695c:	08008417 	.word	0x08008417
 8006960:	08008424 	.word	0x08008424
 8006964:	08008452 	.word	0x08008452

08006968 <quorem>:
 8006968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	6903      	ldr	r3, [r0, #16]
 800696e:	690c      	ldr	r4, [r1, #16]
 8006970:	42a3      	cmp	r3, r4
 8006972:	4607      	mov	r7, r0
 8006974:	f2c0 8081 	blt.w	8006a7a <quorem+0x112>
 8006978:	3c01      	subs	r4, #1
 800697a:	f101 0814 	add.w	r8, r1, #20
 800697e:	f100 0514 	add.w	r5, r0, #20
 8006982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800698c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006990:	3301      	adds	r3, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800699c:	fbb2 f6f3 	udiv	r6, r2, r3
 80069a0:	d331      	bcc.n	8006a06 <quorem+0x9e>
 80069a2:	f04f 0e00 	mov.w	lr, #0
 80069a6:	4640      	mov	r0, r8
 80069a8:	46ac      	mov	ip, r5
 80069aa:	46f2      	mov	sl, lr
 80069ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80069b0:	b293      	uxth	r3, r2
 80069b2:	fb06 e303 	mla	r3, r6, r3, lr
 80069b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ebaa 0303 	sub.w	r3, sl, r3
 80069c0:	f8dc a000 	ldr.w	sl, [ip]
 80069c4:	0c12      	lsrs	r2, r2, #16
 80069c6:	fa13 f38a 	uxtah	r3, r3, sl
 80069ca:	fb06 e202 	mla	r2, r6, r2, lr
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	9b00      	ldr	r3, [sp, #0]
 80069d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069d6:	b292      	uxth	r2, r2
 80069d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80069e4:	4581      	cmp	r9, r0
 80069e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ea:	f84c 3b04 	str.w	r3, [ip], #4
 80069ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069f2:	d2db      	bcs.n	80069ac <quorem+0x44>
 80069f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80069f8:	b92b      	cbnz	r3, 8006a06 <quorem+0x9e>
 80069fa:	9b01      	ldr	r3, [sp, #4]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	429d      	cmp	r5, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	d32e      	bcc.n	8006a62 <quorem+0xfa>
 8006a04:	613c      	str	r4, [r7, #16]
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff fa90 	bl	8005f2c <__mcmp>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	db24      	blt.n	8006a5a <quorem+0xf2>
 8006a10:	3601      	adds	r6, #1
 8006a12:	4628      	mov	r0, r5
 8006a14:	f04f 0c00 	mov.w	ip, #0
 8006a18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006a20:	b293      	uxth	r3, r2
 8006a22:	ebac 0303 	sub.w	r3, ip, r3
 8006a26:	0c12      	lsrs	r2, r2, #16
 8006a28:	fa13 f38e 	uxtah	r3, r3, lr
 8006a2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a3a:	45c1      	cmp	r9, r8
 8006a3c:	f840 3b04 	str.w	r3, [r0], #4
 8006a40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a44:	d2e8      	bcs.n	8006a18 <quorem+0xb0>
 8006a46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a4e:	b922      	cbnz	r2, 8006a5a <quorem+0xf2>
 8006a50:	3b04      	subs	r3, #4
 8006a52:	429d      	cmp	r5, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	d30a      	bcc.n	8006a6e <quorem+0x106>
 8006a58:	613c      	str	r4, [r7, #16]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	b003      	add	sp, #12
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	3b04      	subs	r3, #4
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	d1cc      	bne.n	8006a04 <quorem+0x9c>
 8006a6a:	3c01      	subs	r4, #1
 8006a6c:	e7c7      	b.n	80069fe <quorem+0x96>
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	3b04      	subs	r3, #4
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	d1f0      	bne.n	8006a58 <quorem+0xf0>
 8006a76:	3c01      	subs	r4, #1
 8006a78:	e7eb      	b.n	8006a52 <quorem+0xea>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e7ee      	b.n	8006a5c <quorem+0xf4>
	...

08006a80 <_dtoa_r>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	ed2d 8b04 	vpush	{d8-d9}
 8006a88:	ec57 6b10 	vmov	r6, r7, d0
 8006a8c:	b093      	sub	sp, #76	; 0x4c
 8006a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a94:	9106      	str	r1, [sp, #24]
 8006a96:	ee10 aa10 	vmov	sl, s0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006aa0:	46bb      	mov	fp, r7
 8006aa2:	b975      	cbnz	r5, 8006ac2 <_dtoa_r+0x42>
 8006aa4:	2010      	movs	r0, #16
 8006aa6:	f000 fdeb 	bl	8007680 <malloc>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	6260      	str	r0, [r4, #36]	; 0x24
 8006aae:	b920      	cbnz	r0, 8006aba <_dtoa_r+0x3a>
 8006ab0:	4ba7      	ldr	r3, [pc, #668]	; (8006d50 <_dtoa_r+0x2d0>)
 8006ab2:	21ea      	movs	r1, #234	; 0xea
 8006ab4:	48a7      	ldr	r0, [pc, #668]	; (8006d54 <_dtoa_r+0x2d4>)
 8006ab6:	f7ff ff39 	bl	800692c <__assert_func>
 8006aba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006abe:	6005      	str	r5, [r0, #0]
 8006ac0:	60c5      	str	r5, [r0, #12]
 8006ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	b151      	cbz	r1, 8006ade <_dtoa_r+0x5e>
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	604a      	str	r2, [r1, #4]
 8006acc:	2301      	movs	r3, #1
 8006ace:	4093      	lsls	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7fe ffe8 	bl	8005aa8 <_Bfree>
 8006ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	1e3b      	subs	r3, r7, #0
 8006ae0:	bfaa      	itet	ge
 8006ae2:	2300      	movge	r3, #0
 8006ae4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006ae8:	f8c8 3000 	strge.w	r3, [r8]
 8006aec:	4b9a      	ldr	r3, [pc, #616]	; (8006d58 <_dtoa_r+0x2d8>)
 8006aee:	bfbc      	itt	lt
 8006af0:	2201      	movlt	r2, #1
 8006af2:	f8c8 2000 	strlt.w	r2, [r8]
 8006af6:	ea33 030b 	bics.w	r3, r3, fp
 8006afa:	d11b      	bne.n	8006b34 <_dtoa_r+0xb4>
 8006afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006afe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b08:	4333      	orrs	r3, r6
 8006b0a:	f000 8592 	beq.w	8007632 <_dtoa_r+0xbb2>
 8006b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b10:	b963      	cbnz	r3, 8006b2c <_dtoa_r+0xac>
 8006b12:	4b92      	ldr	r3, [pc, #584]	; (8006d5c <_dtoa_r+0x2dc>)
 8006b14:	e022      	b.n	8006b5c <_dtoa_r+0xdc>
 8006b16:	4b92      	ldr	r3, [pc, #584]	; (8006d60 <_dtoa_r+0x2e0>)
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	9801      	ldr	r0, [sp, #4]
 8006b22:	b013      	add	sp, #76	; 0x4c
 8006b24:	ecbd 8b04 	vpop	{d8-d9}
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	4b8b      	ldr	r3, [pc, #556]	; (8006d5c <_dtoa_r+0x2dc>)
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	3303      	adds	r3, #3
 8006b32:	e7f3      	b.n	8006b1c <_dtoa_r+0x9c>
 8006b34:	2200      	movs	r2, #0
 8006b36:	2300      	movs	r3, #0
 8006b38:	4650      	mov	r0, sl
 8006b3a:	4659      	mov	r1, fp
 8006b3c:	f7f9 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b40:	ec4b ab19 	vmov	d9, sl, fp
 8006b44:	4680      	mov	r8, r0
 8006b46:	b158      	cbz	r0, 8006b60 <_dtoa_r+0xe0>
 8006b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 856b 	beq.w	800762c <_dtoa_r+0xbac>
 8006b56:	4883      	ldr	r0, [pc, #524]	; (8006d64 <_dtoa_r+0x2e4>)
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	1e43      	subs	r3, r0, #1
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	e7df      	b.n	8006b20 <_dtoa_r+0xa0>
 8006b60:	ec4b ab10 	vmov	d0, sl, fp
 8006b64:	aa10      	add	r2, sp, #64	; 0x40
 8006b66:	a911      	add	r1, sp, #68	; 0x44
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff fa85 	bl	8006078 <__d2b>
 8006b6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b72:	ee08 0a10 	vmov	s16, r0
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	f000 8084 	beq.w	8006c84 <_dtoa_r+0x204>
 8006b7c:	ee19 3a90 	vmov	r3, s19
 8006b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b88:	4656      	mov	r6, sl
 8006b8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b96:	4b74      	ldr	r3, [pc, #464]	; (8006d68 <_dtoa_r+0x2e8>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7f9 fb73 	bl	8000288 <__aeabi_dsub>
 8006ba2:	a365      	add	r3, pc, #404	; (adr r3, 8006d38 <_dtoa_r+0x2b8>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fd26 	bl	80005f8 <__aeabi_dmul>
 8006bac:	a364      	add	r3, pc, #400	; (adr r3, 8006d40 <_dtoa_r+0x2c0>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb6b 	bl	800028c <__adddf3>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	4628      	mov	r0, r5
 8006bba:	460f      	mov	r7, r1
 8006bbc:	f7f9 fcb2 	bl	8000524 <__aeabi_i2d>
 8006bc0:	a361      	add	r3, pc, #388	; (adr r3, 8006d48 <_dtoa_r+0x2c8>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fb5b 	bl	800028c <__adddf3>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	f7f9 ffa7 	bl	8000b2c <__aeabi_d2iz>
 8006bde:	2200      	movs	r2, #0
 8006be0:	9000      	str	r0, [sp, #0]
 8006be2:	2300      	movs	r3, #0
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7f9 ff78 	bl	8000adc <__aeabi_dcmplt>
 8006bec:	b150      	cbz	r0, 8006c04 <_dtoa_r+0x184>
 8006bee:	9800      	ldr	r0, [sp, #0]
 8006bf0:	f7f9 fc98 	bl	8000524 <__aeabi_i2d>
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	f7f9 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bfc:	b910      	cbnz	r0, 8006c04 <_dtoa_r+0x184>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	9b00      	ldr	r3, [sp, #0]
 8006c06:	2b16      	cmp	r3, #22
 8006c08:	d85a      	bhi.n	8006cc0 <_dtoa_r+0x240>
 8006c0a:	9a00      	ldr	r2, [sp, #0]
 8006c0c:	4b57      	ldr	r3, [pc, #348]	; (8006d6c <_dtoa_r+0x2ec>)
 8006c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	ec51 0b19 	vmov	r0, r1, d9
 8006c1a:	f7f9 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d050      	beq.n	8006cc4 <_dtoa_r+0x244>
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c2e:	1b5d      	subs	r5, r3, r5
 8006c30:	1e6b      	subs	r3, r5, #1
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	bf45      	ittet	mi
 8006c36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c3a:	9304      	strmi	r3, [sp, #16]
 8006c3c:	2300      	movpl	r3, #0
 8006c3e:	2300      	movmi	r3, #0
 8006c40:	bf4c      	ite	mi
 8006c42:	9305      	strmi	r3, [sp, #20]
 8006c44:	9304      	strpl	r3, [sp, #16]
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	db3d      	blt.n	8006cc8 <_dtoa_r+0x248>
 8006c4c:	9b05      	ldr	r3, [sp, #20]
 8006c4e:	9a00      	ldr	r2, [sp, #0]
 8006c50:	920a      	str	r2, [sp, #40]	; 0x28
 8006c52:	4413      	add	r3, r2
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	2300      	movs	r3, #0
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	9b06      	ldr	r3, [sp, #24]
 8006c5c:	2b09      	cmp	r3, #9
 8006c5e:	f200 8089 	bhi.w	8006d74 <_dtoa_r+0x2f4>
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	bfc4      	itt	gt
 8006c66:	3b04      	subgt	r3, #4
 8006c68:	9306      	strgt	r3, [sp, #24]
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c70:	bfcc      	ite	gt
 8006c72:	2500      	movgt	r5, #0
 8006c74:	2501      	movle	r5, #1
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	f200 8087 	bhi.w	8006d8a <_dtoa_r+0x30a>
 8006c7c:	e8df f003 	tbb	[pc, r3]
 8006c80:	59383a2d 	.word	0x59383a2d
 8006c84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c88:	441d      	add	r5, r3
 8006c8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	bfc1      	itttt	gt
 8006c92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ca2:	bfda      	itte	le
 8006ca4:	f1c3 0320 	rsble	r3, r3, #32
 8006ca8:	fa06 f003 	lslle.w	r0, r6, r3
 8006cac:	4318      	orrgt	r0, r3
 8006cae:	f7f9 fc29 	bl	8000504 <__aeabi_ui2d>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006cba:	3d01      	subs	r5, #1
 8006cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006cbe:	e76a      	b.n	8006b96 <_dtoa_r+0x116>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e7b2      	b.n	8006c2a <_dtoa_r+0x1aa>
 8006cc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cc6:	e7b1      	b.n	8006c2c <_dtoa_r+0x1ac>
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	9a00      	ldr	r2, [sp, #0]
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	4253      	negs	r3, r2
 8006cd2:	9307      	str	r3, [sp, #28]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd8:	e7bf      	b.n	8006c5a <_dtoa_r+0x1da>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9308      	str	r3, [sp, #32]
 8006cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dc55      	bgt.n	8006d90 <_dtoa_r+0x310>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cea:	461a      	mov	r2, r3
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	e00c      	b.n	8006d0a <_dtoa_r+0x28a>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e7f3      	b.n	8006cdc <_dtoa_r+0x25c>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf8:	9308      	str	r3, [sp, #32]
 8006cfa:	9b00      	ldr	r3, [sp, #0]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	3301      	adds	r3, #1
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	bfb8      	it	lt
 8006d08:	2301      	movlt	r3, #1
 8006d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6042      	str	r2, [r0, #4]
 8006d10:	2204      	movs	r2, #4
 8006d12:	f102 0614 	add.w	r6, r2, #20
 8006d16:	429e      	cmp	r6, r3
 8006d18:	6841      	ldr	r1, [r0, #4]
 8006d1a:	d93d      	bls.n	8006d98 <_dtoa_r+0x318>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7fe fe83 	bl	8005a28 <_Balloc>
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d13b      	bne.n	8006da0 <_dtoa_r+0x320>
 8006d28:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <_dtoa_r+0x2f0>)
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d30:	e6c0      	b.n	8006ab4 <_dtoa_r+0x34>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e7df      	b.n	8006cf6 <_dtoa_r+0x276>
 8006d36:	bf00      	nop
 8006d38:	636f4361 	.word	0x636f4361
 8006d3c:	3fd287a7 	.word	0x3fd287a7
 8006d40:	8b60c8b3 	.word	0x8b60c8b3
 8006d44:	3fc68a28 	.word	0x3fc68a28
 8006d48:	509f79fb 	.word	0x509f79fb
 8006d4c:	3fd34413 	.word	0x3fd34413
 8006d50:	08008264 	.word	0x08008264
 8006d54:	08008462 	.word	0x08008462
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	0800845c 	.word	0x0800845c
 8006d60:	08008453 	.word	0x08008453
 8006d64:	08008461 	.word	0x08008461
 8006d68:	3ff80000 	.word	0x3ff80000
 8006d6c:	08008310 	.word	0x08008310
 8006d70:	080082d7 	.word	0x080082d7
 8006d74:	2501      	movs	r5, #1
 8006d76:	2300      	movs	r3, #0
 8006d78:	9306      	str	r3, [sp, #24]
 8006d7a:	9508      	str	r5, [sp, #32]
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2312      	movs	r3, #18
 8006d88:	e7b0      	b.n	8006cec <_dtoa_r+0x26c>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	e7f5      	b.n	8006d7c <_dtoa_r+0x2fc>
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d96:	e7b8      	b.n	8006d0a <_dtoa_r+0x28a>
 8006d98:	3101      	adds	r1, #1
 8006d9a:	6041      	str	r1, [r0, #4]
 8006d9c:	0052      	lsls	r2, r2, #1
 8006d9e:	e7b8      	b.n	8006d12 <_dtoa_r+0x292>
 8006da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	2b0e      	cmp	r3, #14
 8006daa:	f200 809d 	bhi.w	8006ee8 <_dtoa_r+0x468>
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	f000 809a 	beq.w	8006ee8 <_dtoa_r+0x468>
 8006db4:	9b00      	ldr	r3, [sp, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd32      	ble.n	8006e20 <_dtoa_r+0x3a0>
 8006dba:	4ab7      	ldr	r2, [pc, #732]	; (8007098 <_dtoa_r+0x618>)
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dc8:	9b00      	ldr	r3, [sp, #0]
 8006dca:	05d8      	lsls	r0, r3, #23
 8006dcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006dd0:	d516      	bpl.n	8006e00 <_dtoa_r+0x380>
 8006dd2:	4bb2      	ldr	r3, [pc, #712]	; (800709c <_dtoa_r+0x61c>)
 8006dd4:	ec51 0b19 	vmov	r0, r1, d9
 8006dd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ddc:	f7f9 fd36 	bl	800084c <__aeabi_ddiv>
 8006de0:	f007 070f 	and.w	r7, r7, #15
 8006de4:	4682      	mov	sl, r0
 8006de6:	468b      	mov	fp, r1
 8006de8:	2503      	movs	r5, #3
 8006dea:	4eac      	ldr	r6, [pc, #688]	; (800709c <_dtoa_r+0x61c>)
 8006dec:	b957      	cbnz	r7, 8006e04 <_dtoa_r+0x384>
 8006dee:	4642      	mov	r2, r8
 8006df0:	464b      	mov	r3, r9
 8006df2:	4650      	mov	r0, sl
 8006df4:	4659      	mov	r1, fp
 8006df6:	f7f9 fd29 	bl	800084c <__aeabi_ddiv>
 8006dfa:	4682      	mov	sl, r0
 8006dfc:	468b      	mov	fp, r1
 8006dfe:	e028      	b.n	8006e52 <_dtoa_r+0x3d2>
 8006e00:	2502      	movs	r5, #2
 8006e02:	e7f2      	b.n	8006dea <_dtoa_r+0x36a>
 8006e04:	07f9      	lsls	r1, r7, #31
 8006e06:	d508      	bpl.n	8006e1a <_dtoa_r+0x39a>
 8006e08:	4640      	mov	r0, r8
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e10:	f7f9 fbf2 	bl	80005f8 <__aeabi_dmul>
 8006e14:	3501      	adds	r5, #1
 8006e16:	4680      	mov	r8, r0
 8006e18:	4689      	mov	r9, r1
 8006e1a:	107f      	asrs	r7, r7, #1
 8006e1c:	3608      	adds	r6, #8
 8006e1e:	e7e5      	b.n	8006dec <_dtoa_r+0x36c>
 8006e20:	f000 809b 	beq.w	8006f5a <_dtoa_r+0x4da>
 8006e24:	9b00      	ldr	r3, [sp, #0]
 8006e26:	4f9d      	ldr	r7, [pc, #628]	; (800709c <_dtoa_r+0x61c>)
 8006e28:	425e      	negs	r6, r3
 8006e2a:	4b9b      	ldr	r3, [pc, #620]	; (8007098 <_dtoa_r+0x618>)
 8006e2c:	f006 020f 	and.w	r2, r6, #15
 8006e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	ec51 0b19 	vmov	r0, r1, d9
 8006e3c:	f7f9 fbdc 	bl	80005f8 <__aeabi_dmul>
 8006e40:	1136      	asrs	r6, r6, #4
 8006e42:	4682      	mov	sl, r0
 8006e44:	468b      	mov	fp, r1
 8006e46:	2300      	movs	r3, #0
 8006e48:	2502      	movs	r5, #2
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d17a      	bne.n	8006f44 <_dtoa_r+0x4c4>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1d3      	bne.n	8006dfa <_dtoa_r+0x37a>
 8006e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8082 	beq.w	8006f5e <_dtoa_r+0x4de>
 8006e5a:	4b91      	ldr	r3, [pc, #580]	; (80070a0 <_dtoa_r+0x620>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4650      	mov	r0, sl
 8006e60:	4659      	mov	r1, fp
 8006e62:	f7f9 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d079      	beq.n	8006f5e <_dtoa_r+0x4de>
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d076      	beq.n	8006f5e <_dtoa_r+0x4de>
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dd36      	ble.n	8006ee4 <_dtoa_r+0x464>
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	4650      	mov	r0, sl
 8006e7a:	4659      	mov	r1, fp
 8006e7c:	1e5f      	subs	r7, r3, #1
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b88      	ldr	r3, [pc, #544]	; (80070a4 <_dtoa_r+0x624>)
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	9e02      	ldr	r6, [sp, #8]
 8006e88:	4682      	mov	sl, r0
 8006e8a:	468b      	mov	fp, r1
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7f9 fb48 	bl	8000524 <__aeabi_i2d>
 8006e94:	4652      	mov	r2, sl
 8006e96:	465b      	mov	r3, fp
 8006e98:	f7f9 fbae 	bl	80005f8 <__aeabi_dmul>
 8006e9c:	4b82      	ldr	r3, [pc, #520]	; (80070a8 <_dtoa_r+0x628>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f7f9 f9f4 	bl	800028c <__adddf3>
 8006ea4:	46d0      	mov	r8, sl
 8006ea6:	46d9      	mov	r9, fp
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	d158      	bne.n	8006f64 <_dtoa_r+0x4e4>
 8006eb2:	4b7e      	ldr	r3, [pc, #504]	; (80070ac <_dtoa_r+0x62c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	f7f9 f9e5 	bl	8000288 <__aeabi_dsub>
 8006ebe:	4652      	mov	r2, sl
 8006ec0:	465b      	mov	r3, fp
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	4689      	mov	r9, r1
 8006ec6:	f7f9 fe27 	bl	8000b18 <__aeabi_dcmpgt>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	f040 8295 	bne.w	80073fa <_dtoa_r+0x97a>
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	f7f9 fdff 	bl	8000adc <__aeabi_dcmplt>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f040 8289 	bne.w	80073f6 <_dtoa_r+0x976>
 8006ee4:	ec5b ab19 	vmov	sl, fp, d9
 8006ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f2c0 8148 	blt.w	8007180 <_dtoa_r+0x700>
 8006ef0:	9a00      	ldr	r2, [sp, #0]
 8006ef2:	2a0e      	cmp	r2, #14
 8006ef4:	f300 8144 	bgt.w	8007180 <_dtoa_r+0x700>
 8006ef8:	4b67      	ldr	r3, [pc, #412]	; (8007098 <_dtoa_r+0x618>)
 8006efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f280 80d5 	bge.w	80070b4 <_dtoa_r+0x634>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f300 80d1 	bgt.w	80070b4 <_dtoa_r+0x634>
 8006f12:	f040 826f 	bne.w	80073f4 <_dtoa_r+0x974>
 8006f16:	4b65      	ldr	r3, [pc, #404]	; (80070ac <_dtoa_r+0x62c>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	4652      	mov	r2, sl
 8006f24:	465b      	mov	r3, fp
 8006f26:	f7f9 fded 	bl	8000b04 <__aeabi_dcmpge>
 8006f2a:	9e03      	ldr	r6, [sp, #12]
 8006f2c:	4637      	mov	r7, r6
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 8245 	bne.w	80073be <_dtoa_r+0x93e>
 8006f34:	9d01      	ldr	r5, [sp, #4]
 8006f36:	2331      	movs	r3, #49	; 0x31
 8006f38:	f805 3b01 	strb.w	r3, [r5], #1
 8006f3c:	9b00      	ldr	r3, [sp, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	e240      	b.n	80073c6 <_dtoa_r+0x946>
 8006f44:	07f2      	lsls	r2, r6, #31
 8006f46:	d505      	bpl.n	8006f54 <_dtoa_r+0x4d4>
 8006f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4c:	f7f9 fb54 	bl	80005f8 <__aeabi_dmul>
 8006f50:	3501      	adds	r5, #1
 8006f52:	2301      	movs	r3, #1
 8006f54:	1076      	asrs	r6, r6, #1
 8006f56:	3708      	adds	r7, #8
 8006f58:	e777      	b.n	8006e4a <_dtoa_r+0x3ca>
 8006f5a:	2502      	movs	r5, #2
 8006f5c:	e779      	b.n	8006e52 <_dtoa_r+0x3d2>
 8006f5e:	9f00      	ldr	r7, [sp, #0]
 8006f60:	9e03      	ldr	r6, [sp, #12]
 8006f62:	e794      	b.n	8006e8e <_dtoa_r+0x40e>
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	4b4c      	ldr	r3, [pc, #304]	; (8007098 <_dtoa_r+0x618>)
 8006f68:	4431      	add	r1, r6
 8006f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f6c:	9908      	ldr	r1, [sp, #32]
 8006f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d043      	beq.n	8007002 <_dtoa_r+0x582>
 8006f7a:	494d      	ldr	r1, [pc, #308]	; (80070b0 <_dtoa_r+0x630>)
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f7f9 fc65 	bl	800084c <__aeabi_ddiv>
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	f7f9 f97f 	bl	8000288 <__aeabi_dsub>
 8006f8a:	9d01      	ldr	r5, [sp, #4]
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	468b      	mov	fp, r1
 8006f90:	4649      	mov	r1, r9
 8006f92:	4640      	mov	r0, r8
 8006f94:	f7f9 fdca 	bl	8000b2c <__aeabi_d2iz>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	f7f9 fac3 	bl	8000524 <__aeabi_i2d>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f96f 	bl	8000288 <__aeabi_dsub>
 8006faa:	3630      	adds	r6, #48	; 0x30
 8006fac:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb0:	4652      	mov	r2, sl
 8006fb2:	465b      	mov	r3, fp
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4689      	mov	r9, r1
 8006fb8:	f7f9 fd90 	bl	8000adc <__aeabi_dcmplt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d163      	bne.n	8007088 <_dtoa_r+0x608>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	4936      	ldr	r1, [pc, #216]	; (80070a0 <_dtoa_r+0x620>)
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f7f9 f95e 	bl	8000288 <__aeabi_dsub>
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	f7f9 fd84 	bl	8000adc <__aeabi_dcmplt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f040 80b5 	bne.w	8007144 <_dtoa_r+0x6c4>
 8006fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	d081      	beq.n	8006ee4 <_dtoa_r+0x464>
 8006fe0:	4b30      	ldr	r3, [pc, #192]	; (80070a4 <_dtoa_r+0x624>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <_dtoa_r+0x624>)
 8006fee:	4682      	mov	sl, r0
 8006ff0:	468b      	mov	fp, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f7f9 fafe 	bl	80005f8 <__aeabi_dmul>
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	4689      	mov	r9, r1
 8007000:	e7c6      	b.n	8006f90 <_dtoa_r+0x510>
 8007002:	4650      	mov	r0, sl
 8007004:	4659      	mov	r1, fp
 8007006:	f7f9 faf7 	bl	80005f8 <__aeabi_dmul>
 800700a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800700c:	9d01      	ldr	r5, [sp, #4]
 800700e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007010:	4682      	mov	sl, r0
 8007012:	468b      	mov	fp, r1
 8007014:	4649      	mov	r1, r9
 8007016:	4640      	mov	r0, r8
 8007018:	f7f9 fd88 	bl	8000b2c <__aeabi_d2iz>
 800701c:	4606      	mov	r6, r0
 800701e:	f7f9 fa81 	bl	8000524 <__aeabi_i2d>
 8007022:	3630      	adds	r6, #48	; 0x30
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4640      	mov	r0, r8
 800702a:	4649      	mov	r1, r9
 800702c:	f7f9 f92c 	bl	8000288 <__aeabi_dsub>
 8007030:	f805 6b01 	strb.w	r6, [r5], #1
 8007034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007036:	429d      	cmp	r5, r3
 8007038:	4680      	mov	r8, r0
 800703a:	4689      	mov	r9, r1
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	d124      	bne.n	800708c <_dtoa_r+0x60c>
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <_dtoa_r+0x630>)
 8007044:	4650      	mov	r0, sl
 8007046:	4659      	mov	r1, fp
 8007048:	f7f9 f920 	bl	800028c <__adddf3>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8007058:	2800      	cmp	r0, #0
 800705a:	d173      	bne.n	8007144 <_dtoa_r+0x6c4>
 800705c:	4652      	mov	r2, sl
 800705e:	465b      	mov	r3, fp
 8007060:	4913      	ldr	r1, [pc, #76]	; (80070b0 <_dtoa_r+0x630>)
 8007062:	2000      	movs	r0, #0
 8007064:	f7f9 f910 	bl	8000288 <__aeabi_dsub>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 fd34 	bl	8000adc <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	f43f af35 	beq.w	8006ee4 <_dtoa_r+0x464>
 800707a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800707c:	1e6b      	subs	r3, r5, #1
 800707e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007080:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007084:	2b30      	cmp	r3, #48	; 0x30
 8007086:	d0f8      	beq.n	800707a <_dtoa_r+0x5fa>
 8007088:	9700      	str	r7, [sp, #0]
 800708a:	e049      	b.n	8007120 <_dtoa_r+0x6a0>
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <_dtoa_r+0x624>)
 800708e:	f7f9 fab3 	bl	80005f8 <__aeabi_dmul>
 8007092:	4680      	mov	r8, r0
 8007094:	4689      	mov	r9, r1
 8007096:	e7bd      	b.n	8007014 <_dtoa_r+0x594>
 8007098:	08008310 	.word	0x08008310
 800709c:	080082e8 	.word	0x080082e8
 80070a0:	3ff00000 	.word	0x3ff00000
 80070a4:	40240000 	.word	0x40240000
 80070a8:	401c0000 	.word	0x401c0000
 80070ac:	40140000 	.word	0x40140000
 80070b0:	3fe00000 	.word	0x3fe00000
 80070b4:	9d01      	ldr	r5, [sp, #4]
 80070b6:	4656      	mov	r6, sl
 80070b8:	465f      	mov	r7, fp
 80070ba:	4642      	mov	r2, r8
 80070bc:	464b      	mov	r3, r9
 80070be:	4630      	mov	r0, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	f7f9 fbc3 	bl	800084c <__aeabi_ddiv>
 80070c6:	f7f9 fd31 	bl	8000b2c <__aeabi_d2iz>
 80070ca:	4682      	mov	sl, r0
 80070cc:	f7f9 fa2a 	bl	8000524 <__aeabi_i2d>
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070e4:	f7f9 f8d0 	bl	8000288 <__aeabi_dsub>
 80070e8:	f805 6b01 	strb.w	r6, [r5], #1
 80070ec:	9e01      	ldr	r6, [sp, #4]
 80070ee:	9f03      	ldr	r7, [sp, #12]
 80070f0:	1bae      	subs	r6, r5, r6
 80070f2:	42b7      	cmp	r7, r6
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	d135      	bne.n	8007166 <_dtoa_r+0x6e6>
 80070fa:	f7f9 f8c7 	bl	800028c <__adddf3>
 80070fe:	4642      	mov	r2, r8
 8007100:	464b      	mov	r3, r9
 8007102:	4606      	mov	r6, r0
 8007104:	460f      	mov	r7, r1
 8007106:	f7f9 fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800710a:	b9d0      	cbnz	r0, 8007142 <_dtoa_r+0x6c2>
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007118:	b110      	cbz	r0, 8007120 <_dtoa_r+0x6a0>
 800711a:	f01a 0f01 	tst.w	sl, #1
 800711e:	d110      	bne.n	8007142 <_dtoa_r+0x6c2>
 8007120:	4620      	mov	r0, r4
 8007122:	ee18 1a10 	vmov	r1, s16
 8007126:	f7fe fcbf 	bl	8005aa8 <_Bfree>
 800712a:	2300      	movs	r3, #0
 800712c:	9800      	ldr	r0, [sp, #0]
 800712e:	702b      	strb	r3, [r5, #0]
 8007130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007132:	3001      	adds	r0, #1
 8007134:	6018      	str	r0, [r3, #0]
 8007136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007138:	2b00      	cmp	r3, #0
 800713a:	f43f acf1 	beq.w	8006b20 <_dtoa_r+0xa0>
 800713e:	601d      	str	r5, [r3, #0]
 8007140:	e4ee      	b.n	8006b20 <_dtoa_r+0xa0>
 8007142:	9f00      	ldr	r7, [sp, #0]
 8007144:	462b      	mov	r3, r5
 8007146:	461d      	mov	r5, r3
 8007148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800714c:	2a39      	cmp	r2, #57	; 0x39
 800714e:	d106      	bne.n	800715e <_dtoa_r+0x6de>
 8007150:	9a01      	ldr	r2, [sp, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d1f7      	bne.n	8007146 <_dtoa_r+0x6c6>
 8007156:	9901      	ldr	r1, [sp, #4]
 8007158:	2230      	movs	r2, #48	; 0x30
 800715a:	3701      	adds	r7, #1
 800715c:	700a      	strb	r2, [r1, #0]
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	3201      	adds	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e790      	b.n	8007088 <_dtoa_r+0x608>
 8007166:	4ba6      	ldr	r3, [pc, #664]	; (8007400 <_dtoa_r+0x980>)
 8007168:	2200      	movs	r2, #0
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	2200      	movs	r2, #0
 8007170:	2300      	movs	r3, #0
 8007172:	4606      	mov	r6, r0
 8007174:	460f      	mov	r7, r1
 8007176:	f7f9 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800717a:	2800      	cmp	r0, #0
 800717c:	d09d      	beq.n	80070ba <_dtoa_r+0x63a>
 800717e:	e7cf      	b.n	8007120 <_dtoa_r+0x6a0>
 8007180:	9a08      	ldr	r2, [sp, #32]
 8007182:	2a00      	cmp	r2, #0
 8007184:	f000 80d7 	beq.w	8007336 <_dtoa_r+0x8b6>
 8007188:	9a06      	ldr	r2, [sp, #24]
 800718a:	2a01      	cmp	r2, #1
 800718c:	f300 80ba 	bgt.w	8007304 <_dtoa_r+0x884>
 8007190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007192:	2a00      	cmp	r2, #0
 8007194:	f000 80b2 	beq.w	80072fc <_dtoa_r+0x87c>
 8007198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800719c:	9e07      	ldr	r6, [sp, #28]
 800719e:	9d04      	ldr	r5, [sp, #16]
 80071a0:	9a04      	ldr	r2, [sp, #16]
 80071a2:	441a      	add	r2, r3
 80071a4:	9204      	str	r2, [sp, #16]
 80071a6:	9a05      	ldr	r2, [sp, #20]
 80071a8:	2101      	movs	r1, #1
 80071aa:	441a      	add	r2, r3
 80071ac:	4620      	mov	r0, r4
 80071ae:	9205      	str	r2, [sp, #20]
 80071b0:	f7fe fd32 	bl	8005c18 <__i2b>
 80071b4:	4607      	mov	r7, r0
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	dd0c      	ble.n	80071d4 <_dtoa_r+0x754>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dd09      	ble.n	80071d4 <_dtoa_r+0x754>
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	9a04      	ldr	r2, [sp, #16]
 80071c4:	bfa8      	it	ge
 80071c6:	462b      	movge	r3, r5
 80071c8:	1ad2      	subs	r2, r2, r3
 80071ca:	9204      	str	r2, [sp, #16]
 80071cc:	9a05      	ldr	r2, [sp, #20]
 80071ce:	1aed      	subs	r5, r5, r3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	b31b      	cbz	r3, 8007220 <_dtoa_r+0x7a0>
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 80af 	beq.w	800733e <_dtoa_r+0x8be>
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	dd13      	ble.n	800720c <_dtoa_r+0x78c>
 80071e4:	4639      	mov	r1, r7
 80071e6:	4632      	mov	r2, r6
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7fe fdd5 	bl	8005d98 <__pow5mult>
 80071ee:	ee18 2a10 	vmov	r2, s16
 80071f2:	4601      	mov	r1, r0
 80071f4:	4607      	mov	r7, r0
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7fe fd24 	bl	8005c44 <__multiply>
 80071fc:	ee18 1a10 	vmov	r1, s16
 8007200:	4680      	mov	r8, r0
 8007202:	4620      	mov	r0, r4
 8007204:	f7fe fc50 	bl	8005aa8 <_Bfree>
 8007208:	ee08 8a10 	vmov	s16, r8
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	1b9a      	subs	r2, r3, r6
 8007210:	d006      	beq.n	8007220 <_dtoa_r+0x7a0>
 8007212:	ee18 1a10 	vmov	r1, s16
 8007216:	4620      	mov	r0, r4
 8007218:	f7fe fdbe 	bl	8005d98 <__pow5mult>
 800721c:	ee08 0a10 	vmov	s16, r0
 8007220:	2101      	movs	r1, #1
 8007222:	4620      	mov	r0, r4
 8007224:	f7fe fcf8 	bl	8005c18 <__i2b>
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	4606      	mov	r6, r0
 800722e:	f340 8088 	ble.w	8007342 <_dtoa_r+0x8c2>
 8007232:	461a      	mov	r2, r3
 8007234:	4601      	mov	r1, r0
 8007236:	4620      	mov	r0, r4
 8007238:	f7fe fdae 	bl	8005d98 <__pow5mult>
 800723c:	9b06      	ldr	r3, [sp, #24]
 800723e:	2b01      	cmp	r3, #1
 8007240:	4606      	mov	r6, r0
 8007242:	f340 8081 	ble.w	8007348 <_dtoa_r+0x8c8>
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	6933      	ldr	r3, [r6, #16]
 800724c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007250:	6918      	ldr	r0, [r3, #16]
 8007252:	f7fe fc91 	bl	8005b78 <__hi0bits>
 8007256:	f1c0 0020 	rsb	r0, r0, #32
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	4418      	add	r0, r3
 800725e:	f010 001f 	ands.w	r0, r0, #31
 8007262:	f000 8092 	beq.w	800738a <_dtoa_r+0x90a>
 8007266:	f1c0 0320 	rsb	r3, r0, #32
 800726a:	2b04      	cmp	r3, #4
 800726c:	f340 808a 	ble.w	8007384 <_dtoa_r+0x904>
 8007270:	f1c0 001c 	rsb	r0, r0, #28
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	4403      	add	r3, r0
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	4403      	add	r3, r0
 800727e:	4405      	add	r5, r0
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd07      	ble.n	8007298 <_dtoa_r+0x818>
 8007288:	ee18 1a10 	vmov	r1, s16
 800728c:	461a      	mov	r2, r3
 800728e:	4620      	mov	r0, r4
 8007290:	f7fe fddc 	bl	8005e4c <__lshift>
 8007294:	ee08 0a10 	vmov	s16, r0
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	dd05      	ble.n	80072aa <_dtoa_r+0x82a>
 800729e:	4631      	mov	r1, r6
 80072a0:	461a      	mov	r2, r3
 80072a2:	4620      	mov	r0, r4
 80072a4:	f7fe fdd2 	bl	8005e4c <__lshift>
 80072a8:	4606      	mov	r6, r0
 80072aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d06e      	beq.n	800738e <_dtoa_r+0x90e>
 80072b0:	ee18 0a10 	vmov	r0, s16
 80072b4:	4631      	mov	r1, r6
 80072b6:	f7fe fe39 	bl	8005f2c <__mcmp>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	da67      	bge.n	800738e <_dtoa_r+0x90e>
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	ee18 1a10 	vmov	r1, s16
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	220a      	movs	r2, #10
 80072ca:	2300      	movs	r3, #0
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7fe fc0d 	bl	8005aec <__multadd>
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	ee08 0a10 	vmov	s16, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 81b1 	beq.w	8007640 <_dtoa_r+0xbc0>
 80072de:	2300      	movs	r3, #0
 80072e0:	4639      	mov	r1, r7
 80072e2:	220a      	movs	r2, #10
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7fe fc01 	bl	8005aec <__multadd>
 80072ea:	9b02      	ldr	r3, [sp, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	4607      	mov	r7, r0
 80072f0:	f300 808e 	bgt.w	8007410 <_dtoa_r+0x990>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	dc51      	bgt.n	800739e <_dtoa_r+0x91e>
 80072fa:	e089      	b.n	8007410 <_dtoa_r+0x990>
 80072fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007302:	e74b      	b.n	800719c <_dtoa_r+0x71c>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1e5e      	subs	r6, r3, #1
 8007308:	9b07      	ldr	r3, [sp, #28]
 800730a:	42b3      	cmp	r3, r6
 800730c:	bfbf      	itttt	lt
 800730e:	9b07      	ldrlt	r3, [sp, #28]
 8007310:	9607      	strlt	r6, [sp, #28]
 8007312:	1af2      	sublt	r2, r6, r3
 8007314:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007316:	bfb6      	itet	lt
 8007318:	189b      	addlt	r3, r3, r2
 800731a:	1b9e      	subge	r6, r3, r6
 800731c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	bfb8      	it	lt
 8007322:	2600      	movlt	r6, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	bfb7      	itett	lt
 8007328:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800732c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007330:	1a9d      	sublt	r5, r3, r2
 8007332:	2300      	movlt	r3, #0
 8007334:	e734      	b.n	80071a0 <_dtoa_r+0x720>
 8007336:	9e07      	ldr	r6, [sp, #28]
 8007338:	9d04      	ldr	r5, [sp, #16]
 800733a:	9f08      	ldr	r7, [sp, #32]
 800733c:	e73b      	b.n	80071b6 <_dtoa_r+0x736>
 800733e:	9a07      	ldr	r2, [sp, #28]
 8007340:	e767      	b.n	8007212 <_dtoa_r+0x792>
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	2b01      	cmp	r3, #1
 8007346:	dc18      	bgt.n	800737a <_dtoa_r+0x8fa>
 8007348:	f1ba 0f00 	cmp.w	sl, #0
 800734c:	d115      	bne.n	800737a <_dtoa_r+0x8fa>
 800734e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007352:	b993      	cbnz	r3, 800737a <_dtoa_r+0x8fa>
 8007354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007358:	0d1b      	lsrs	r3, r3, #20
 800735a:	051b      	lsls	r3, r3, #20
 800735c:	b183      	cbz	r3, 8007380 <_dtoa_r+0x900>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	3301      	adds	r3, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	9b05      	ldr	r3, [sp, #20]
 8007366:	3301      	adds	r3, #1
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	f04f 0801 	mov.w	r8, #1
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f af6a 	bne.w	800724a <_dtoa_r+0x7ca>
 8007376:	2001      	movs	r0, #1
 8007378:	e76f      	b.n	800725a <_dtoa_r+0x7da>
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	e7f6      	b.n	800736e <_dtoa_r+0x8ee>
 8007380:	4698      	mov	r8, r3
 8007382:	e7f4      	b.n	800736e <_dtoa_r+0x8ee>
 8007384:	f43f af7d 	beq.w	8007282 <_dtoa_r+0x802>
 8007388:	4618      	mov	r0, r3
 800738a:	301c      	adds	r0, #28
 800738c:	e772      	b.n	8007274 <_dtoa_r+0x7f4>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc37      	bgt.n	8007404 <_dtoa_r+0x984>
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	2b02      	cmp	r3, #2
 8007398:	dd34      	ble.n	8007404 <_dtoa_r+0x984>
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	9302      	str	r3, [sp, #8]
 800739e:	9b02      	ldr	r3, [sp, #8]
 80073a0:	b96b      	cbnz	r3, 80073be <_dtoa_r+0x93e>
 80073a2:	4631      	mov	r1, r6
 80073a4:	2205      	movs	r2, #5
 80073a6:	4620      	mov	r0, r4
 80073a8:	f7fe fba0 	bl	8005aec <__multadd>
 80073ac:	4601      	mov	r1, r0
 80073ae:	4606      	mov	r6, r0
 80073b0:	ee18 0a10 	vmov	r0, s16
 80073b4:	f7fe fdba 	bl	8005f2c <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f73f adbb 	bgt.w	8006f34 <_dtoa_r+0x4b4>
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	9d01      	ldr	r5, [sp, #4]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	4631      	mov	r1, r6
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7fe fb6b 	bl	8005aa8 <_Bfree>
 80073d2:	2f00      	cmp	r7, #0
 80073d4:	f43f aea4 	beq.w	8007120 <_dtoa_r+0x6a0>
 80073d8:	f1b8 0f00 	cmp.w	r8, #0
 80073dc:	d005      	beq.n	80073ea <_dtoa_r+0x96a>
 80073de:	45b8      	cmp	r8, r7
 80073e0:	d003      	beq.n	80073ea <_dtoa_r+0x96a>
 80073e2:	4641      	mov	r1, r8
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7fe fb5f 	bl	8005aa8 <_Bfree>
 80073ea:	4639      	mov	r1, r7
 80073ec:	4620      	mov	r0, r4
 80073ee:	f7fe fb5b 	bl	8005aa8 <_Bfree>
 80073f2:	e695      	b.n	8007120 <_dtoa_r+0x6a0>
 80073f4:	2600      	movs	r6, #0
 80073f6:	4637      	mov	r7, r6
 80073f8:	e7e1      	b.n	80073be <_dtoa_r+0x93e>
 80073fa:	9700      	str	r7, [sp, #0]
 80073fc:	4637      	mov	r7, r6
 80073fe:	e599      	b.n	8006f34 <_dtoa_r+0x4b4>
 8007400:	40240000 	.word	0x40240000
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80ca 	beq.w	80075a0 <_dtoa_r+0xb20>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	9302      	str	r3, [sp, #8]
 8007410:	2d00      	cmp	r5, #0
 8007412:	dd05      	ble.n	8007420 <_dtoa_r+0x9a0>
 8007414:	4639      	mov	r1, r7
 8007416:	462a      	mov	r2, r5
 8007418:	4620      	mov	r0, r4
 800741a:	f7fe fd17 	bl	8005e4c <__lshift>
 800741e:	4607      	mov	r7, r0
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	d05b      	beq.n	80074de <_dtoa_r+0xa5e>
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4620      	mov	r0, r4
 800742a:	f7fe fafd 	bl	8005a28 <_Balloc>
 800742e:	4605      	mov	r5, r0
 8007430:	b928      	cbnz	r0, 800743e <_dtoa_r+0x9be>
 8007432:	4b87      	ldr	r3, [pc, #540]	; (8007650 <_dtoa_r+0xbd0>)
 8007434:	4602      	mov	r2, r0
 8007436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800743a:	f7ff bb3b 	b.w	8006ab4 <_dtoa_r+0x34>
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	3202      	adds	r2, #2
 8007442:	0092      	lsls	r2, r2, #2
 8007444:	f107 010c 	add.w	r1, r7, #12
 8007448:	300c      	adds	r0, #12
 800744a:	f000 f921 	bl	8007690 <memcpy>
 800744e:	2201      	movs	r2, #1
 8007450:	4629      	mov	r1, r5
 8007452:	4620      	mov	r0, r4
 8007454:	f7fe fcfa 	bl	8005e4c <__lshift>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	f103 0901 	add.w	r9, r3, #1
 800745e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007462:	4413      	add	r3, r2
 8007464:	9305      	str	r3, [sp, #20]
 8007466:	f00a 0301 	and.w	r3, sl, #1
 800746a:	46b8      	mov	r8, r7
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	4607      	mov	r7, r0
 8007470:	4631      	mov	r1, r6
 8007472:	ee18 0a10 	vmov	r0, s16
 8007476:	f7ff fa77 	bl	8006968 <quorem>
 800747a:	4641      	mov	r1, r8
 800747c:	9002      	str	r0, [sp, #8]
 800747e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007482:	ee18 0a10 	vmov	r0, s16
 8007486:	f7fe fd51 	bl	8005f2c <__mcmp>
 800748a:	463a      	mov	r2, r7
 800748c:	9003      	str	r0, [sp, #12]
 800748e:	4631      	mov	r1, r6
 8007490:	4620      	mov	r0, r4
 8007492:	f7fe fd67 	bl	8005f64 <__mdiff>
 8007496:	68c2      	ldr	r2, [r0, #12]
 8007498:	f109 3bff 	add.w	fp, r9, #4294967295
 800749c:	4605      	mov	r5, r0
 800749e:	bb02      	cbnz	r2, 80074e2 <_dtoa_r+0xa62>
 80074a0:	4601      	mov	r1, r0
 80074a2:	ee18 0a10 	vmov	r0, s16
 80074a6:	f7fe fd41 	bl	8005f2c <__mcmp>
 80074aa:	4602      	mov	r2, r0
 80074ac:	4629      	mov	r1, r5
 80074ae:	4620      	mov	r0, r4
 80074b0:	9207      	str	r2, [sp, #28]
 80074b2:	f7fe faf9 	bl	8005aa8 <_Bfree>
 80074b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80074ba:	ea43 0102 	orr.w	r1, r3, r2
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	430b      	orrs	r3, r1
 80074c2:	464d      	mov	r5, r9
 80074c4:	d10f      	bne.n	80074e6 <_dtoa_r+0xa66>
 80074c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074ca:	d02a      	beq.n	8007522 <_dtoa_r+0xaa2>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd02      	ble.n	80074d8 <_dtoa_r+0xa58>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80074d8:	f88b a000 	strb.w	sl, [fp]
 80074dc:	e775      	b.n	80073ca <_dtoa_r+0x94a>
 80074de:	4638      	mov	r0, r7
 80074e0:	e7ba      	b.n	8007458 <_dtoa_r+0x9d8>
 80074e2:	2201      	movs	r2, #1
 80074e4:	e7e2      	b.n	80074ac <_dtoa_r+0xa2c>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	db04      	blt.n	80074f6 <_dtoa_r+0xa76>
 80074ec:	9906      	ldr	r1, [sp, #24]
 80074ee:	430b      	orrs	r3, r1
 80074f0:	9904      	ldr	r1, [sp, #16]
 80074f2:	430b      	orrs	r3, r1
 80074f4:	d122      	bne.n	800753c <_dtoa_r+0xabc>
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	ddee      	ble.n	80074d8 <_dtoa_r+0xa58>
 80074fa:	ee18 1a10 	vmov	r1, s16
 80074fe:	2201      	movs	r2, #1
 8007500:	4620      	mov	r0, r4
 8007502:	f7fe fca3 	bl	8005e4c <__lshift>
 8007506:	4631      	mov	r1, r6
 8007508:	ee08 0a10 	vmov	s16, r0
 800750c:	f7fe fd0e 	bl	8005f2c <__mcmp>
 8007510:	2800      	cmp	r0, #0
 8007512:	dc03      	bgt.n	800751c <_dtoa_r+0xa9c>
 8007514:	d1e0      	bne.n	80074d8 <_dtoa_r+0xa58>
 8007516:	f01a 0f01 	tst.w	sl, #1
 800751a:	d0dd      	beq.n	80074d8 <_dtoa_r+0xa58>
 800751c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007520:	d1d7      	bne.n	80074d2 <_dtoa_r+0xa52>
 8007522:	2339      	movs	r3, #57	; 0x39
 8007524:	f88b 3000 	strb.w	r3, [fp]
 8007528:	462b      	mov	r3, r5
 800752a:	461d      	mov	r5, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007532:	2a39      	cmp	r2, #57	; 0x39
 8007534:	d071      	beq.n	800761a <_dtoa_r+0xb9a>
 8007536:	3201      	adds	r2, #1
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	e746      	b.n	80073ca <_dtoa_r+0x94a>
 800753c:	2a00      	cmp	r2, #0
 800753e:	dd07      	ble.n	8007550 <_dtoa_r+0xad0>
 8007540:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007544:	d0ed      	beq.n	8007522 <_dtoa_r+0xaa2>
 8007546:	f10a 0301 	add.w	r3, sl, #1
 800754a:	f88b 3000 	strb.w	r3, [fp]
 800754e:	e73c      	b.n	80073ca <_dtoa_r+0x94a>
 8007550:	9b05      	ldr	r3, [sp, #20]
 8007552:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007556:	4599      	cmp	r9, r3
 8007558:	d047      	beq.n	80075ea <_dtoa_r+0xb6a>
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2300      	movs	r3, #0
 8007560:	220a      	movs	r2, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f7fe fac2 	bl	8005aec <__multadd>
 8007568:	45b8      	cmp	r8, r7
 800756a:	ee08 0a10 	vmov	s16, r0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	f04f 020a 	mov.w	r2, #10
 8007576:	4641      	mov	r1, r8
 8007578:	4620      	mov	r0, r4
 800757a:	d106      	bne.n	800758a <_dtoa_r+0xb0a>
 800757c:	f7fe fab6 	bl	8005aec <__multadd>
 8007580:	4680      	mov	r8, r0
 8007582:	4607      	mov	r7, r0
 8007584:	f109 0901 	add.w	r9, r9, #1
 8007588:	e772      	b.n	8007470 <_dtoa_r+0x9f0>
 800758a:	f7fe faaf 	bl	8005aec <__multadd>
 800758e:	4639      	mov	r1, r7
 8007590:	4680      	mov	r8, r0
 8007592:	2300      	movs	r3, #0
 8007594:	220a      	movs	r2, #10
 8007596:	4620      	mov	r0, r4
 8007598:	f7fe faa8 	bl	8005aec <__multadd>
 800759c:	4607      	mov	r7, r0
 800759e:	e7f1      	b.n	8007584 <_dtoa_r+0xb04>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	9302      	str	r3, [sp, #8]
 80075a4:	9d01      	ldr	r5, [sp, #4]
 80075a6:	ee18 0a10 	vmov	r0, s16
 80075aa:	4631      	mov	r1, r6
 80075ac:	f7ff f9dc 	bl	8006968 <quorem>
 80075b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	f805 ab01 	strb.w	sl, [r5], #1
 80075ba:	1aea      	subs	r2, r5, r3
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	4293      	cmp	r3, r2
 80075c0:	dd09      	ble.n	80075d6 <_dtoa_r+0xb56>
 80075c2:	ee18 1a10 	vmov	r1, s16
 80075c6:	2300      	movs	r3, #0
 80075c8:	220a      	movs	r2, #10
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7fe fa8e 	bl	8005aec <__multadd>
 80075d0:	ee08 0a10 	vmov	s16, r0
 80075d4:	e7e7      	b.n	80075a6 <_dtoa_r+0xb26>
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfc8      	it	gt
 80075dc:	461d      	movgt	r5, r3
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	bfd8      	it	le
 80075e2:	2501      	movle	r5, #1
 80075e4:	441d      	add	r5, r3
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	ee18 1a10 	vmov	r1, s16
 80075ee:	2201      	movs	r2, #1
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7fe fc2b 	bl	8005e4c <__lshift>
 80075f6:	4631      	mov	r1, r6
 80075f8:	ee08 0a10 	vmov	s16, r0
 80075fc:	f7fe fc96 	bl	8005f2c <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	dc91      	bgt.n	8007528 <_dtoa_r+0xaa8>
 8007604:	d102      	bne.n	800760c <_dtoa_r+0xb8c>
 8007606:	f01a 0f01 	tst.w	sl, #1
 800760a:	d18d      	bne.n	8007528 <_dtoa_r+0xaa8>
 800760c:	462b      	mov	r3, r5
 800760e:	461d      	mov	r5, r3
 8007610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007614:	2a30      	cmp	r2, #48	; 0x30
 8007616:	d0fa      	beq.n	800760e <_dtoa_r+0xb8e>
 8007618:	e6d7      	b.n	80073ca <_dtoa_r+0x94a>
 800761a:	9a01      	ldr	r2, [sp, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d184      	bne.n	800752a <_dtoa_r+0xaaa>
 8007620:	9b00      	ldr	r3, [sp, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2331      	movs	r3, #49	; 0x31
 8007628:	7013      	strb	r3, [r2, #0]
 800762a:	e6ce      	b.n	80073ca <_dtoa_r+0x94a>
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <_dtoa_r+0xbd4>)
 800762e:	f7ff ba95 	b.w	8006b5c <_dtoa_r+0xdc>
 8007632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f aa6e 	bne.w	8006b16 <_dtoa_r+0x96>
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <_dtoa_r+0xbd8>)
 800763c:	f7ff ba8e 	b.w	8006b5c <_dtoa_r+0xdc>
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	dcae      	bgt.n	80075a4 <_dtoa_r+0xb24>
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	2b02      	cmp	r3, #2
 800764a:	f73f aea8 	bgt.w	800739e <_dtoa_r+0x91e>
 800764e:	e7a9      	b.n	80075a4 <_dtoa_r+0xb24>
 8007650:	080082d7 	.word	0x080082d7
 8007654:	08008460 	.word	0x08008460
 8007658:	08008453 	.word	0x08008453

0800765c <fiprintf>:
 800765c:	b40e      	push	{r1, r2, r3}
 800765e:	b503      	push	{r0, r1, lr}
 8007660:	4601      	mov	r1, r0
 8007662:	ab03      	add	r3, sp, #12
 8007664:	4805      	ldr	r0, [pc, #20]	; (800767c <fiprintf+0x20>)
 8007666:	f853 2b04 	ldr.w	r2, [r3], #4
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	f000 f8c1 	bl	80077f4 <_vfiprintf_r>
 8007672:	b002      	add	sp, #8
 8007674:	f85d eb04 	ldr.w	lr, [sp], #4
 8007678:	b003      	add	sp, #12
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c

08007680 <malloc>:
 8007680:	4b02      	ldr	r3, [pc, #8]	; (800768c <malloc+0xc>)
 8007682:	4601      	mov	r1, r0
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f7fe bda7 	b.w	80061d8 <_malloc_r>
 800768a:	bf00      	nop
 800768c:	2000000c 	.word	0x2000000c

08007690 <memcpy>:
 8007690:	440a      	add	r2, r1
 8007692:	4291      	cmp	r1, r2
 8007694:	f100 33ff 	add.w	r3, r0, #4294967295
 8007698:	d100      	bne.n	800769c <memcpy+0xc>
 800769a:	4770      	bx	lr
 800769c:	b510      	push	{r4, lr}
 800769e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a6:	4291      	cmp	r1, r2
 80076a8:	d1f9      	bne.n	800769e <memcpy+0xe>
 80076aa:	bd10      	pop	{r4, pc}

080076ac <memmove>:
 80076ac:	4288      	cmp	r0, r1
 80076ae:	b510      	push	{r4, lr}
 80076b0:	eb01 0402 	add.w	r4, r1, r2
 80076b4:	d902      	bls.n	80076bc <memmove+0x10>
 80076b6:	4284      	cmp	r4, r0
 80076b8:	4623      	mov	r3, r4
 80076ba:	d807      	bhi.n	80076cc <memmove+0x20>
 80076bc:	1e43      	subs	r3, r0, #1
 80076be:	42a1      	cmp	r1, r4
 80076c0:	d008      	beq.n	80076d4 <memmove+0x28>
 80076c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ca:	e7f8      	b.n	80076be <memmove+0x12>
 80076cc:	4402      	add	r2, r0
 80076ce:	4601      	mov	r1, r0
 80076d0:	428a      	cmp	r2, r1
 80076d2:	d100      	bne.n	80076d6 <memmove+0x2a>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076de:	e7f7      	b.n	80076d0 <memmove+0x24>

080076e0 <__malloc_lock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__malloc_lock+0x8>)
 80076e2:	f000 bc37 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	200002b4 	.word	0x200002b4

080076ec <__malloc_unlock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__malloc_unlock+0x8>)
 80076ee:	f000 bc32 	b.w	8007f56 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	200002b4 	.word	0x200002b4

080076f8 <_free_r>:
 80076f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d044      	beq.n	8007788 <_free_r+0x90>
 80076fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007702:	9001      	str	r0, [sp, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f1a1 0404 	sub.w	r4, r1, #4
 800770a:	bfb8      	it	lt
 800770c:	18e4      	addlt	r4, r4, r3
 800770e:	f7ff ffe7 	bl	80076e0 <__malloc_lock>
 8007712:	4a1e      	ldr	r2, [pc, #120]	; (800778c <_free_r+0x94>)
 8007714:	9801      	ldr	r0, [sp, #4]
 8007716:	6813      	ldr	r3, [r2, #0]
 8007718:	b933      	cbnz	r3, 8007728 <_free_r+0x30>
 800771a:	6063      	str	r3, [r4, #4]
 800771c:	6014      	str	r4, [r2, #0]
 800771e:	b003      	add	sp, #12
 8007720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007724:	f7ff bfe2 	b.w	80076ec <__malloc_unlock>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d908      	bls.n	800773e <_free_r+0x46>
 800772c:	6825      	ldr	r5, [r4, #0]
 800772e:	1961      	adds	r1, r4, r5
 8007730:	428b      	cmp	r3, r1
 8007732:	bf01      	itttt	eq
 8007734:	6819      	ldreq	r1, [r3, #0]
 8007736:	685b      	ldreq	r3, [r3, #4]
 8007738:	1949      	addeq	r1, r1, r5
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	e7ed      	b.n	800771a <_free_r+0x22>
 800773e:	461a      	mov	r2, r3
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	b10b      	cbz	r3, 8007748 <_free_r+0x50>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d9fa      	bls.n	800773e <_free_r+0x46>
 8007748:	6811      	ldr	r1, [r2, #0]
 800774a:	1855      	adds	r5, r2, r1
 800774c:	42a5      	cmp	r5, r4
 800774e:	d10b      	bne.n	8007768 <_free_r+0x70>
 8007750:	6824      	ldr	r4, [r4, #0]
 8007752:	4421      	add	r1, r4
 8007754:	1854      	adds	r4, r2, r1
 8007756:	42a3      	cmp	r3, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	d1e0      	bne.n	800771e <_free_r+0x26>
 800775c:	681c      	ldr	r4, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	6053      	str	r3, [r2, #4]
 8007762:	4421      	add	r1, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	e7da      	b.n	800771e <_free_r+0x26>
 8007768:	d902      	bls.n	8007770 <_free_r+0x78>
 800776a:	230c      	movs	r3, #12
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	e7d6      	b.n	800771e <_free_r+0x26>
 8007770:	6825      	ldr	r5, [r4, #0]
 8007772:	1961      	adds	r1, r4, r5
 8007774:	428b      	cmp	r3, r1
 8007776:	bf04      	itt	eq
 8007778:	6819      	ldreq	r1, [r3, #0]
 800777a:	685b      	ldreq	r3, [r3, #4]
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	bf04      	itt	eq
 8007780:	1949      	addeq	r1, r1, r5
 8007782:	6021      	streq	r1, [r4, #0]
 8007784:	6054      	str	r4, [r2, #4]
 8007786:	e7ca      	b.n	800771e <_free_r+0x26>
 8007788:	b003      	add	sp, #12
 800778a:	bd30      	pop	{r4, r5, pc}
 800778c:	200002a8 	.word	0x200002a8

08007790 <_malloc_usable_size_r>:
 8007790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007794:	1f18      	subs	r0, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfbc      	itt	lt
 800779a:	580b      	ldrlt	r3, [r1, r0]
 800779c:	18c0      	addlt	r0, r0, r3
 800779e:	4770      	bx	lr

080077a0 <__sfputc_r>:
 80077a0:	6893      	ldr	r3, [r2, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	b410      	push	{r4}
 80077a8:	6093      	str	r3, [r2, #8]
 80077aa:	da08      	bge.n	80077be <__sfputc_r+0x1e>
 80077ac:	6994      	ldr	r4, [r2, #24]
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	db01      	blt.n	80077b6 <__sfputc_r+0x16>
 80077b2:	290a      	cmp	r1, #10
 80077b4:	d103      	bne.n	80077be <__sfputc_r+0x1e>
 80077b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ba:	f000 b94b 	b.w	8007a54 <__swbuf_r>
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	1c58      	adds	r0, r3, #1
 80077c2:	6010      	str	r0, [r2, #0]
 80077c4:	7019      	strb	r1, [r3, #0]
 80077c6:	4608      	mov	r0, r1
 80077c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <__sfputs_r>:
 80077ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	18d5      	adds	r5, r2, r3
 80077d8:	42ac      	cmp	r4, r5
 80077da:	d101      	bne.n	80077e0 <__sfputs_r+0x12>
 80077dc:	2000      	movs	r0, #0
 80077de:	e007      	b.n	80077f0 <__sfputs_r+0x22>
 80077e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e4:	463a      	mov	r2, r7
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ffda 	bl	80077a0 <__sfputc_r>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d1f3      	bne.n	80077d8 <__sfputs_r+0xa>
 80077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077f4 <_vfiprintf_r>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	460d      	mov	r5, r1
 80077fa:	b09d      	sub	sp, #116	; 0x74
 80077fc:	4614      	mov	r4, r2
 80077fe:	4698      	mov	r8, r3
 8007800:	4606      	mov	r6, r0
 8007802:	b118      	cbz	r0, 800780c <_vfiprintf_r+0x18>
 8007804:	6983      	ldr	r3, [r0, #24]
 8007806:	b90b      	cbnz	r3, 800780c <_vfiprintf_r+0x18>
 8007808:	f000 fb06 	bl	8007e18 <__sinit>
 800780c:	4b89      	ldr	r3, [pc, #548]	; (8007a34 <_vfiprintf_r+0x240>)
 800780e:	429d      	cmp	r5, r3
 8007810:	d11b      	bne.n	800784a <_vfiprintf_r+0x56>
 8007812:	6875      	ldr	r5, [r6, #4]
 8007814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007816:	07d9      	lsls	r1, r3, #31
 8007818:	d405      	bmi.n	8007826 <_vfiprintf_r+0x32>
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	059a      	lsls	r2, r3, #22
 800781e:	d402      	bmi.n	8007826 <_vfiprintf_r+0x32>
 8007820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007822:	f000 fb97 	bl	8007f54 <__retarget_lock_acquire_recursive>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	071b      	lsls	r3, r3, #28
 800782a:	d501      	bpl.n	8007830 <_vfiprintf_r+0x3c>
 800782c:	692b      	ldr	r3, [r5, #16]
 800782e:	b9eb      	cbnz	r3, 800786c <_vfiprintf_r+0x78>
 8007830:	4629      	mov	r1, r5
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f960 	bl	8007af8 <__swsetup_r>
 8007838:	b1c0      	cbz	r0, 800786c <_vfiprintf_r+0x78>
 800783a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800783c:	07dc      	lsls	r4, r3, #31
 800783e:	d50e      	bpl.n	800785e <_vfiprintf_r+0x6a>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b01d      	add	sp, #116	; 0x74
 8007846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	4b7b      	ldr	r3, [pc, #492]	; (8007a38 <_vfiprintf_r+0x244>)
 800784c:	429d      	cmp	r5, r3
 800784e:	d101      	bne.n	8007854 <_vfiprintf_r+0x60>
 8007850:	68b5      	ldr	r5, [r6, #8]
 8007852:	e7df      	b.n	8007814 <_vfiprintf_r+0x20>
 8007854:	4b79      	ldr	r3, [pc, #484]	; (8007a3c <_vfiprintf_r+0x248>)
 8007856:	429d      	cmp	r5, r3
 8007858:	bf08      	it	eq
 800785a:	68f5      	ldreq	r5, [r6, #12]
 800785c:	e7da      	b.n	8007814 <_vfiprintf_r+0x20>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	0598      	lsls	r0, r3, #22
 8007862:	d4ed      	bmi.n	8007840 <_vfiprintf_r+0x4c>
 8007864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007866:	f000 fb76 	bl	8007f56 <__retarget_lock_release_recursive>
 800786a:	e7e9      	b.n	8007840 <_vfiprintf_r+0x4c>
 800786c:	2300      	movs	r3, #0
 800786e:	9309      	str	r3, [sp, #36]	; 0x24
 8007870:	2320      	movs	r3, #32
 8007872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007876:	f8cd 800c 	str.w	r8, [sp, #12]
 800787a:	2330      	movs	r3, #48	; 0x30
 800787c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a40 <_vfiprintf_r+0x24c>
 8007880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007884:	f04f 0901 	mov.w	r9, #1
 8007888:	4623      	mov	r3, r4
 800788a:	469a      	mov	sl, r3
 800788c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007890:	b10a      	cbz	r2, 8007896 <_vfiprintf_r+0xa2>
 8007892:	2a25      	cmp	r2, #37	; 0x25
 8007894:	d1f9      	bne.n	800788a <_vfiprintf_r+0x96>
 8007896:	ebba 0b04 	subs.w	fp, sl, r4
 800789a:	d00b      	beq.n	80078b4 <_vfiprintf_r+0xc0>
 800789c:	465b      	mov	r3, fp
 800789e:	4622      	mov	r2, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ff93 	bl	80077ce <__sfputs_r>
 80078a8:	3001      	adds	r0, #1
 80078aa:	f000 80aa 	beq.w	8007a02 <_vfiprintf_r+0x20e>
 80078ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b0:	445a      	add	r2, fp
 80078b2:	9209      	str	r2, [sp, #36]	; 0x24
 80078b4:	f89a 3000 	ldrb.w	r3, [sl]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80a2 	beq.w	8007a02 <_vfiprintf_r+0x20e>
 80078be:	2300      	movs	r3, #0
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c8:	f10a 0a01 	add.w	sl, sl, #1
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078d4:	931a      	str	r3, [sp, #104]	; 0x68
 80078d6:	4654      	mov	r4, sl
 80078d8:	2205      	movs	r2, #5
 80078da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078de:	4858      	ldr	r0, [pc, #352]	; (8007a40 <_vfiprintf_r+0x24c>)
 80078e0:	f7f8 fc7e 	bl	80001e0 <memchr>
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	b9d8      	cbnz	r0, 8007920 <_vfiprintf_r+0x12c>
 80078e8:	06d1      	lsls	r1, r2, #27
 80078ea:	bf44      	itt	mi
 80078ec:	2320      	movmi	r3, #32
 80078ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f2:	0713      	lsls	r3, r2, #28
 80078f4:	bf44      	itt	mi
 80078f6:	232b      	movmi	r3, #43	; 0x2b
 80078f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007900:	2b2a      	cmp	r3, #42	; 0x2a
 8007902:	d015      	beq.n	8007930 <_vfiprintf_r+0x13c>
 8007904:	9a07      	ldr	r2, [sp, #28]
 8007906:	4654      	mov	r4, sl
 8007908:	2000      	movs	r0, #0
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4621      	mov	r1, r4
 8007910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007914:	3b30      	subs	r3, #48	; 0x30
 8007916:	2b09      	cmp	r3, #9
 8007918:	d94e      	bls.n	80079b8 <_vfiprintf_r+0x1c4>
 800791a:	b1b0      	cbz	r0, 800794a <_vfiprintf_r+0x156>
 800791c:	9207      	str	r2, [sp, #28]
 800791e:	e014      	b.n	800794a <_vfiprintf_r+0x156>
 8007920:	eba0 0308 	sub.w	r3, r0, r8
 8007924:	fa09 f303 	lsl.w	r3, r9, r3
 8007928:	4313      	orrs	r3, r2
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	46a2      	mov	sl, r4
 800792e:	e7d2      	b.n	80078d6 <_vfiprintf_r+0xe2>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	1d19      	adds	r1, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	9103      	str	r1, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfbb      	ittet	lt
 800793c:	425b      	neglt	r3, r3
 800793e:	f042 0202 	orrlt.w	r2, r2, #2
 8007942:	9307      	strge	r3, [sp, #28]
 8007944:	9307      	strlt	r3, [sp, #28]
 8007946:	bfb8      	it	lt
 8007948:	9204      	strlt	r2, [sp, #16]
 800794a:	7823      	ldrb	r3, [r4, #0]
 800794c:	2b2e      	cmp	r3, #46	; 0x2e
 800794e:	d10c      	bne.n	800796a <_vfiprintf_r+0x176>
 8007950:	7863      	ldrb	r3, [r4, #1]
 8007952:	2b2a      	cmp	r3, #42	; 0x2a
 8007954:	d135      	bne.n	80079c2 <_vfiprintf_r+0x1ce>
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	1d1a      	adds	r2, r3, #4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	9203      	str	r2, [sp, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	bfb8      	it	lt
 8007962:	f04f 33ff 	movlt.w	r3, #4294967295
 8007966:	3402      	adds	r4, #2
 8007968:	9305      	str	r3, [sp, #20]
 800796a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a50 <_vfiprintf_r+0x25c>
 800796e:	7821      	ldrb	r1, [r4, #0]
 8007970:	2203      	movs	r2, #3
 8007972:	4650      	mov	r0, sl
 8007974:	f7f8 fc34 	bl	80001e0 <memchr>
 8007978:	b140      	cbz	r0, 800798c <_vfiprintf_r+0x198>
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	eba0 000a 	sub.w	r0, r0, sl
 8007980:	fa03 f000 	lsl.w	r0, r3, r0
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	4303      	orrs	r3, r0
 8007988:	3401      	adds	r4, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007990:	482c      	ldr	r0, [pc, #176]	; (8007a44 <_vfiprintf_r+0x250>)
 8007992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007996:	2206      	movs	r2, #6
 8007998:	f7f8 fc22 	bl	80001e0 <memchr>
 800799c:	2800      	cmp	r0, #0
 800799e:	d03f      	beq.n	8007a20 <_vfiprintf_r+0x22c>
 80079a0:	4b29      	ldr	r3, [pc, #164]	; (8007a48 <_vfiprintf_r+0x254>)
 80079a2:	bb1b      	cbnz	r3, 80079ec <_vfiprintf_r+0x1f8>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	3307      	adds	r3, #7
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	3308      	adds	r3, #8
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b2:	443b      	add	r3, r7
 80079b4:	9309      	str	r3, [sp, #36]	; 0x24
 80079b6:	e767      	b.n	8007888 <_vfiprintf_r+0x94>
 80079b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079bc:	460c      	mov	r4, r1
 80079be:	2001      	movs	r0, #1
 80079c0:	e7a5      	b.n	800790e <_vfiprintf_r+0x11a>
 80079c2:	2300      	movs	r3, #0
 80079c4:	3401      	adds	r4, #1
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	4619      	mov	r1, r3
 80079ca:	f04f 0c0a 	mov.w	ip, #10
 80079ce:	4620      	mov	r0, r4
 80079d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d4:	3a30      	subs	r2, #48	; 0x30
 80079d6:	2a09      	cmp	r2, #9
 80079d8:	d903      	bls.n	80079e2 <_vfiprintf_r+0x1ee>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0c5      	beq.n	800796a <_vfiprintf_r+0x176>
 80079de:	9105      	str	r1, [sp, #20]
 80079e0:	e7c3      	b.n	800796a <_vfiprintf_r+0x176>
 80079e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e6:	4604      	mov	r4, r0
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7f0      	b.n	80079ce <_vfiprintf_r+0x1da>
 80079ec:	ab03      	add	r3, sp, #12
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	462a      	mov	r2, r5
 80079f2:	4b16      	ldr	r3, [pc, #88]	; (8007a4c <_vfiprintf_r+0x258>)
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	4630      	mov	r0, r6
 80079f8:	f3af 8000 	nop.w
 80079fc:	4607      	mov	r7, r0
 80079fe:	1c78      	adds	r0, r7, #1
 8007a00:	d1d6      	bne.n	80079b0 <_vfiprintf_r+0x1bc>
 8007a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a04:	07d9      	lsls	r1, r3, #31
 8007a06:	d405      	bmi.n	8007a14 <_vfiprintf_r+0x220>
 8007a08:	89ab      	ldrh	r3, [r5, #12]
 8007a0a:	059a      	lsls	r2, r3, #22
 8007a0c:	d402      	bmi.n	8007a14 <_vfiprintf_r+0x220>
 8007a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a10:	f000 faa1 	bl	8007f56 <__retarget_lock_release_recursive>
 8007a14:	89ab      	ldrh	r3, [r5, #12]
 8007a16:	065b      	lsls	r3, r3, #25
 8007a18:	f53f af12 	bmi.w	8007840 <_vfiprintf_r+0x4c>
 8007a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a1e:	e711      	b.n	8007844 <_vfiprintf_r+0x50>
 8007a20:	ab03      	add	r3, sp, #12
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	462a      	mov	r2, r5
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <_vfiprintf_r+0x258>)
 8007a28:	a904      	add	r1, sp, #16
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f7fe fe40 	bl	80066b0 <_printf_i>
 8007a30:	e7e4      	b.n	80079fc <_vfiprintf_r+0x208>
 8007a32:	bf00      	nop
 8007a34:	080084e0 	.word	0x080084e0
 8007a38:	08008500 	.word	0x08008500
 8007a3c:	080084c0 	.word	0x080084c0
 8007a40:	080083e4 	.word	0x080083e4
 8007a44:	080083ee 	.word	0x080083ee
 8007a48:	00000000 	.word	0x00000000
 8007a4c:	080077cf 	.word	0x080077cf
 8007a50:	080083ea 	.word	0x080083ea

08007a54 <__swbuf_r>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	460e      	mov	r6, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	b118      	cbz	r0, 8007a66 <__swbuf_r+0x12>
 8007a5e:	6983      	ldr	r3, [r0, #24]
 8007a60:	b90b      	cbnz	r3, 8007a66 <__swbuf_r+0x12>
 8007a62:	f000 f9d9 	bl	8007e18 <__sinit>
 8007a66:	4b21      	ldr	r3, [pc, #132]	; (8007aec <__swbuf_r+0x98>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d12b      	bne.n	8007ac4 <__swbuf_r+0x70>
 8007a6c:	686c      	ldr	r4, [r5, #4]
 8007a6e:	69a3      	ldr	r3, [r4, #24]
 8007a70:	60a3      	str	r3, [r4, #8]
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	071a      	lsls	r2, r3, #28
 8007a76:	d52f      	bpl.n	8007ad8 <__swbuf_r+0x84>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	b36b      	cbz	r3, 8007ad8 <__swbuf_r+0x84>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	1ac0      	subs	r0, r0, r3
 8007a82:	6963      	ldr	r3, [r4, #20]
 8007a84:	b2f6      	uxtb	r6, r6
 8007a86:	4283      	cmp	r3, r0
 8007a88:	4637      	mov	r7, r6
 8007a8a:	dc04      	bgt.n	8007a96 <__swbuf_r+0x42>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 f92e 	bl	8007cf0 <_fflush_r>
 8007a94:	bb30      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	60a3      	str	r3, [r4, #8]
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	701e      	strb	r6, [r3, #0]
 8007aa4:	6963      	ldr	r3, [r4, #20]
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d004      	beq.n	8007ab6 <__swbuf_r+0x62>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d506      	bpl.n	8007ac0 <__swbuf_r+0x6c>
 8007ab2:	2e0a      	cmp	r6, #10
 8007ab4:	d104      	bne.n	8007ac0 <__swbuf_r+0x6c>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f919 	bl	8007cf0 <_fflush_r>
 8007abe:	b988      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <__swbuf_r+0x9c>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	d101      	bne.n	8007ace <__swbuf_r+0x7a>
 8007aca:	68ac      	ldr	r4, [r5, #8]
 8007acc:	e7cf      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <__swbuf_r+0xa0>)
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	bf08      	it	eq
 8007ad4:	68ec      	ldreq	r4, [r5, #12]
 8007ad6:	e7ca      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f80c 	bl	8007af8 <__swsetup_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0cb      	beq.n	8007a7c <__swbuf_r+0x28>
 8007ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae8:	e7ea      	b.n	8007ac0 <__swbuf_r+0x6c>
 8007aea:	bf00      	nop
 8007aec:	080084e0 	.word	0x080084e0
 8007af0:	08008500 	.word	0x08008500
 8007af4:	080084c0 	.word	0x080084c0

08007af8 <__swsetup_r>:
 8007af8:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <__swsetup_r+0xcc>)
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	681d      	ldr	r5, [r3, #0]
 8007afe:	4606      	mov	r6, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	b125      	cbz	r5, 8007b0e <__swsetup_r+0x16>
 8007b04:	69ab      	ldr	r3, [r5, #24]
 8007b06:	b913      	cbnz	r3, 8007b0e <__swsetup_r+0x16>
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f985 	bl	8007e18 <__sinit>
 8007b0e:	4b2e      	ldr	r3, [pc, #184]	; (8007bc8 <__swsetup_r+0xd0>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	d10f      	bne.n	8007b34 <__swsetup_r+0x3c>
 8007b14:	686c      	ldr	r4, [r5, #4]
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b1c:	0719      	lsls	r1, r3, #28
 8007b1e:	d42c      	bmi.n	8007b7a <__swsetup_r+0x82>
 8007b20:	06dd      	lsls	r5, r3, #27
 8007b22:	d411      	bmi.n	8007b48 <__swsetup_r+0x50>
 8007b24:	2309      	movs	r3, #9
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	e03e      	b.n	8007bb2 <__swsetup_r+0xba>
 8007b34:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <__swsetup_r+0xd4>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d101      	bne.n	8007b3e <__swsetup_r+0x46>
 8007b3a:	68ac      	ldr	r4, [r5, #8]
 8007b3c:	e7eb      	b.n	8007b16 <__swsetup_r+0x1e>
 8007b3e:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <__swsetup_r+0xd8>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	bf08      	it	eq
 8007b44:	68ec      	ldreq	r4, [r5, #12]
 8007b46:	e7e6      	b.n	8007b16 <__swsetup_r+0x1e>
 8007b48:	0758      	lsls	r0, r3, #29
 8007b4a:	d512      	bpl.n	8007b72 <__swsetup_r+0x7a>
 8007b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b4e:	b141      	cbz	r1, 8007b62 <__swsetup_r+0x6a>
 8007b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d002      	beq.n	8007b5e <__swsetup_r+0x66>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7ff fdcd 	bl	80076f8 <_free_r>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6363      	str	r3, [r4, #52]	; 0x34
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <__swsetup_r+0x9a>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b88:	d003      	beq.n	8007b92 <__swsetup_r+0x9a>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 fa09 	bl	8007fa4 <__smakebuf_r>
 8007b92:	89a0      	ldrh	r0, [r4, #12]
 8007b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b98:	f010 0301 	ands.w	r3, r0, #1
 8007b9c:	d00a      	beq.n	8007bb4 <__swsetup_r+0xbc>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	425b      	negs	r3, r3
 8007ba6:	61a3      	str	r3, [r4, #24]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	b943      	cbnz	r3, 8007bbe <__swsetup_r+0xc6>
 8007bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bb0:	d1ba      	bne.n	8007b28 <__swsetup_r+0x30>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	0781      	lsls	r1, r0, #30
 8007bb6:	bf58      	it	pl
 8007bb8:	6963      	ldrpl	r3, [r4, #20]
 8007bba:	60a3      	str	r3, [r4, #8]
 8007bbc:	e7f4      	b.n	8007ba8 <__swsetup_r+0xb0>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e7f7      	b.n	8007bb2 <__swsetup_r+0xba>
 8007bc2:	bf00      	nop
 8007bc4:	2000000c 	.word	0x2000000c
 8007bc8:	080084e0 	.word	0x080084e0
 8007bcc:	08008500 	.word	0x08008500
 8007bd0:	080084c0 	.word	0x080084c0

08007bd4 <abort>:
 8007bd4:	b508      	push	{r3, lr}
 8007bd6:	2006      	movs	r0, #6
 8007bd8:	f000 fa4c 	bl	8008074 <raise>
 8007bdc:	2001      	movs	r0, #1
 8007bde:	f7f9 ff63 	bl	8001aa8 <_exit>
	...

08007be4 <__sflush_r>:
 8007be4:	898a      	ldrh	r2, [r1, #12]
 8007be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	0710      	lsls	r0, r2, #28
 8007bee:	460c      	mov	r4, r1
 8007bf0:	d458      	bmi.n	8007ca4 <__sflush_r+0xc0>
 8007bf2:	684b      	ldr	r3, [r1, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc05      	bgt.n	8007c04 <__sflush_r+0x20>
 8007bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dc02      	bgt.n	8007c04 <__sflush_r+0x20>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	d0f9      	beq.n	8007bfe <__sflush_r+0x1a>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c10:	682f      	ldr	r7, [r5, #0]
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	d032      	beq.n	8007c7c <__sflush_r+0x98>
 8007c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	075a      	lsls	r2, r3, #29
 8007c1c:	d505      	bpl.n	8007c2a <__sflush_r+0x46>
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	1ac0      	subs	r0, r0, r3
 8007c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c24:	b10b      	cbz	r3, 8007c2a <__sflush_r+0x46>
 8007c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c28:	1ac0      	subs	r0, r0, r3
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c30:	6a21      	ldr	r1, [r4, #32]
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b0      	blx	r6
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	d106      	bne.n	8007c4a <__sflush_r+0x66>
 8007c3c:	6829      	ldr	r1, [r5, #0]
 8007c3e:	291d      	cmp	r1, #29
 8007c40:	d82c      	bhi.n	8007c9c <__sflush_r+0xb8>
 8007c42:	4a2a      	ldr	r2, [pc, #168]	; (8007cec <__sflush_r+0x108>)
 8007c44:	40ca      	lsrs	r2, r1
 8007c46:	07d6      	lsls	r6, r2, #31
 8007c48:	d528      	bpl.n	8007c9c <__sflush_r+0xb8>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	6062      	str	r2, [r4, #4]
 8007c4e:	04d9      	lsls	r1, r3, #19
 8007c50:	6922      	ldr	r2, [r4, #16]
 8007c52:	6022      	str	r2, [r4, #0]
 8007c54:	d504      	bpl.n	8007c60 <__sflush_r+0x7c>
 8007c56:	1c42      	adds	r2, r0, #1
 8007c58:	d101      	bne.n	8007c5e <__sflush_r+0x7a>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b903      	cbnz	r3, 8007c60 <__sflush_r+0x7c>
 8007c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d0ca      	beq.n	8007bfe <__sflush_r+0x1a>
 8007c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <__sflush_r+0x92>
 8007c70:	4628      	mov	r0, r5
 8007c72:	f7ff fd41 	bl	80076f8 <_free_r>
 8007c76:	2000      	movs	r0, #0
 8007c78:	6360      	str	r0, [r4, #52]	; 0x34
 8007c7a:	e7c1      	b.n	8007c00 <__sflush_r+0x1c>
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b0      	blx	r6
 8007c84:	1c41      	adds	r1, r0, #1
 8007c86:	d1c7      	bne.n	8007c18 <__sflush_r+0x34>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0c4      	beq.n	8007c18 <__sflush_r+0x34>
 8007c8e:	2b1d      	cmp	r3, #29
 8007c90:	d001      	beq.n	8007c96 <__sflush_r+0xb2>
 8007c92:	2b16      	cmp	r3, #22
 8007c94:	d101      	bne.n	8007c9a <__sflush_r+0xb6>
 8007c96:	602f      	str	r7, [r5, #0]
 8007c98:	e7b1      	b.n	8007bfe <__sflush_r+0x1a>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	e7ad      	b.n	8007c00 <__sflush_r+0x1c>
 8007ca4:	690f      	ldr	r7, [r1, #16]
 8007ca6:	2f00      	cmp	r7, #0
 8007ca8:	d0a9      	beq.n	8007bfe <__sflush_r+0x1a>
 8007caa:	0793      	lsls	r3, r2, #30
 8007cac:	680e      	ldr	r6, [r1, #0]
 8007cae:	bf08      	it	eq
 8007cb0:	694b      	ldreq	r3, [r1, #20]
 8007cb2:	600f      	str	r7, [r1, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	eba6 0807 	sub.w	r8, r6, r7
 8007cbc:	608b      	str	r3, [r1, #8]
 8007cbe:	f1b8 0f00 	cmp.w	r8, #0
 8007cc2:	dd9c      	ble.n	8007bfe <__sflush_r+0x1a>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cc8:	4643      	mov	r3, r8
 8007cca:	463a      	mov	r2, r7
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b0      	blx	r6
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	dc06      	bgt.n	8007ce2 <__sflush_r+0xfe>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	e78e      	b.n	8007c00 <__sflush_r+0x1c>
 8007ce2:	4407      	add	r7, r0
 8007ce4:	eba8 0800 	sub.w	r8, r8, r0
 8007ce8:	e7e9      	b.n	8007cbe <__sflush_r+0xda>
 8007cea:	bf00      	nop
 8007cec:	20400001 	.word	0x20400001

08007cf0 <_fflush_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b913      	cbnz	r3, 8007d00 <_fflush_r+0x10>
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	b118      	cbz	r0, 8007d0a <_fflush_r+0x1a>
 8007d02:	6983      	ldr	r3, [r0, #24]
 8007d04:	b90b      	cbnz	r3, 8007d0a <_fflush_r+0x1a>
 8007d06:	f000 f887 	bl	8007e18 <__sinit>
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <_fflush_r+0x6c>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d11b      	bne.n	8007d48 <_fflush_r+0x58>
 8007d10:	686c      	ldr	r4, [r5, #4]
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ef      	beq.n	8007cfa <_fflush_r+0xa>
 8007d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d1c:	07d0      	lsls	r0, r2, #31
 8007d1e:	d404      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d20:	0599      	lsls	r1, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d26:	f000 f915 	bl	8007f54 <__retarget_lock_acquire_recursive>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f7ff ff59 	bl	8007be4 <__sflush_r>
 8007d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d34:	07da      	lsls	r2, r3, #31
 8007d36:	4605      	mov	r5, r0
 8007d38:	d4e0      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	d4dd      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d42:	f000 f908 	bl	8007f56 <__retarget_lock_release_recursive>
 8007d46:	e7d9      	b.n	8007cfc <_fflush_r+0xc>
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <_fflush_r+0x70>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d101      	bne.n	8007d52 <_fflush_r+0x62>
 8007d4e:	68ac      	ldr	r4, [r5, #8]
 8007d50:	e7df      	b.n	8007d12 <_fflush_r+0x22>
 8007d52:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <_fflush_r+0x74>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	bf08      	it	eq
 8007d58:	68ec      	ldreq	r4, [r5, #12]
 8007d5a:	e7da      	b.n	8007d12 <_fflush_r+0x22>
 8007d5c:	080084e0 	.word	0x080084e0
 8007d60:	08008500 	.word	0x08008500
 8007d64:	080084c0 	.word	0x080084c0

08007d68 <std>:
 8007d68:	2300      	movs	r3, #0
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d76:	6083      	str	r3, [r0, #8]
 8007d78:	8181      	strh	r1, [r0, #12]
 8007d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d7c:	81c2      	strh	r2, [r0, #14]
 8007d7e:	6183      	str	r3, [r0, #24]
 8007d80:	4619      	mov	r1, r3
 8007d82:	2208      	movs	r2, #8
 8007d84:	305c      	adds	r0, #92	; 0x5c
 8007d86:	f7fd fced 	bl	8005764 <memset>
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <std+0x38>)
 8007d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x3c>)
 8007d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x40>)
 8007d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x44>)
 8007d98:	6224      	str	r4, [r4, #32]
 8007d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	080080ad 	.word	0x080080ad
 8007da4:	080080cf 	.word	0x080080cf
 8007da8:	08008107 	.word	0x08008107
 8007dac:	0800812b 	.word	0x0800812b

08007db0 <_cleanup_r>:
 8007db0:	4901      	ldr	r1, [pc, #4]	; (8007db8 <_cleanup_r+0x8>)
 8007db2:	f000 b8af 	b.w	8007f14 <_fwalk_reent>
 8007db6:	bf00      	nop
 8007db8:	08007cf1 	.word	0x08007cf1

08007dbc <__sfmoreglue>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	2268      	movs	r2, #104	; 0x68
 8007dc0:	1e4d      	subs	r5, r1, #1
 8007dc2:	4355      	muls	r5, r2
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dca:	f7fe fa05 	bl	80061d8 <_malloc_r>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b140      	cbz	r0, 8007de4 <__sfmoreglue+0x28>
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007dd8:	300c      	adds	r0, #12
 8007dda:	60a0      	str	r0, [r4, #8]
 8007ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de0:	f7fd fcc0 	bl	8005764 <memset>
 8007de4:	4620      	mov	r0, r4
 8007de6:	bd70      	pop	{r4, r5, r6, pc}

08007de8 <__sfp_lock_acquire>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__sfp_lock_acquire+0x8>)
 8007dea:	f000 b8b3 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	200002b5 	.word	0x200002b5

08007df4 <__sfp_lock_release>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__sfp_lock_release+0x8>)
 8007df6:	f000 b8ae 	b.w	8007f56 <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	200002b5 	.word	0x200002b5

08007e00 <__sinit_lock_acquire>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__sinit_lock_acquire+0x8>)
 8007e02:	f000 b8a7 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	200002b6 	.word	0x200002b6

08007e0c <__sinit_lock_release>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__sinit_lock_release+0x8>)
 8007e0e:	f000 b8a2 	b.w	8007f56 <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	200002b6 	.word	0x200002b6

08007e18 <__sinit>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f7ff fff0 	bl	8007e00 <__sinit_lock_acquire>
 8007e20:	69a3      	ldr	r3, [r4, #24]
 8007e22:	b11b      	cbz	r3, 8007e2c <__sinit+0x14>
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f7ff bff0 	b.w	8007e0c <__sinit_lock_release>
 8007e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e30:	6523      	str	r3, [r4, #80]	; 0x50
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <__sinit+0x68>)
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <__sinit+0x6c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	bf04      	itt	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	61a3      	streq	r3, [r4, #24]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f820 	bl	8007e88 <__sfp>
 8007e48:	6060      	str	r0, [r4, #4]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f81c 	bl	8007e88 <__sfp>
 8007e50:	60a0      	str	r0, [r4, #8]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f818 	bl	8007e88 <__sfp>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60e0      	str	r0, [r4, #12]
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	6860      	ldr	r0, [r4, #4]
 8007e60:	f7ff ff82 	bl	8007d68 <std>
 8007e64:	68a0      	ldr	r0, [r4, #8]
 8007e66:	2201      	movs	r2, #1
 8007e68:	2109      	movs	r1, #9
 8007e6a:	f7ff ff7d 	bl	8007d68 <std>
 8007e6e:	68e0      	ldr	r0, [r4, #12]
 8007e70:	2202      	movs	r2, #2
 8007e72:	2112      	movs	r1, #18
 8007e74:	f7ff ff78 	bl	8007d68 <std>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	61a3      	str	r3, [r4, #24]
 8007e7c:	e7d2      	b.n	8007e24 <__sinit+0xc>
 8007e7e:	bf00      	nop
 8007e80:	08008260 	.word	0x08008260
 8007e84:	08007db1 	.word	0x08007db1

08007e88 <__sfp>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	f7ff ffac 	bl	8007de8 <__sfp_lock_acquire>
 8007e90:	4b1e      	ldr	r3, [pc, #120]	; (8007f0c <__sfp+0x84>)
 8007e92:	681e      	ldr	r6, [r3, #0]
 8007e94:	69b3      	ldr	r3, [r6, #24]
 8007e96:	b913      	cbnz	r3, 8007e9e <__sfp+0x16>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff ffbd 	bl	8007e18 <__sinit>
 8007e9e:	3648      	adds	r6, #72	; 0x48
 8007ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	d503      	bpl.n	8007eb0 <__sfp+0x28>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	b30b      	cbz	r3, 8007ef0 <__sfp+0x68>
 8007eac:	6836      	ldr	r6, [r6, #0]
 8007eae:	e7f7      	b.n	8007ea0 <__sfp+0x18>
 8007eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb4:	b9d5      	cbnz	r5, 8007eec <__sfp+0x64>
 8007eb6:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <__sfp+0x88>)
 8007eb8:	60e3      	str	r3, [r4, #12]
 8007eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec0:	f000 f847 	bl	8007f52 <__retarget_lock_init_recursive>
 8007ec4:	f7ff ff96 	bl	8007df4 <__sfp_lock_release>
 8007ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed0:	6025      	str	r5, [r4, #0]
 8007ed2:	61a5      	str	r5, [r4, #24]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007edc:	f7fd fc42 	bl	8005764 <memset>
 8007ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eec:	3468      	adds	r4, #104	; 0x68
 8007eee:	e7d9      	b.n	8007ea4 <__sfp+0x1c>
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ff62 	bl	8007dbc <__sfmoreglue>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	6030      	str	r0, [r6, #0]
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1d5      	bne.n	8007eac <__sfp+0x24>
 8007f00:	f7ff ff78 	bl	8007df4 <__sfp_lock_release>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	e7ee      	b.n	8007ee8 <__sfp+0x60>
 8007f0a:	bf00      	nop
 8007f0c:	08008260 	.word	0x08008260
 8007f10:	ffff0001 	.word	0xffff0001

08007f14 <_fwalk_reent>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	4606      	mov	r6, r0
 8007f1a:	4688      	mov	r8, r1
 8007f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f20:	2700      	movs	r7, #0
 8007f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f26:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2a:	d505      	bpl.n	8007f38 <_fwalk_reent+0x24>
 8007f2c:	6824      	ldr	r4, [r4, #0]
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d1f7      	bne.n	8007f22 <_fwalk_reent+0xe>
 8007f32:	4638      	mov	r0, r7
 8007f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f38:	89ab      	ldrh	r3, [r5, #12]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d907      	bls.n	8007f4e <_fwalk_reent+0x3a>
 8007f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f42:	3301      	adds	r3, #1
 8007f44:	d003      	beq.n	8007f4e <_fwalk_reent+0x3a>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	47c0      	blx	r8
 8007f4c:	4307      	orrs	r7, r0
 8007f4e:	3568      	adds	r5, #104	; 0x68
 8007f50:	e7e9      	b.n	8007f26 <_fwalk_reent+0x12>

08007f52 <__retarget_lock_init_recursive>:
 8007f52:	4770      	bx	lr

08007f54 <__retarget_lock_acquire_recursive>:
 8007f54:	4770      	bx	lr

08007f56 <__retarget_lock_release_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__swhatbuf_r>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	460e      	mov	r6, r1
 8007f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f60:	2900      	cmp	r1, #0
 8007f62:	b096      	sub	sp, #88	; 0x58
 8007f64:	4614      	mov	r4, r2
 8007f66:	461d      	mov	r5, r3
 8007f68:	da08      	bge.n	8007f7c <__swhatbuf_r+0x24>
 8007f6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	061a      	lsls	r2, r3, #24
 8007f74:	d410      	bmi.n	8007f98 <__swhatbuf_r+0x40>
 8007f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7a:	e00e      	b.n	8007f9a <__swhatbuf_r+0x42>
 8007f7c:	466a      	mov	r2, sp
 8007f7e:	f000 f8fb 	bl	8008178 <_fstat_r>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	dbf1      	blt.n	8007f6a <__swhatbuf_r+0x12>
 8007f86:	9a01      	ldr	r2, [sp, #4]
 8007f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f90:	425a      	negs	r2, r3
 8007f92:	415a      	adcs	r2, r3
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	e7ee      	b.n	8007f76 <__swhatbuf_r+0x1e>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	b016      	add	sp, #88	; 0x58
 8007fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fa4 <__smakebuf_r>:
 8007fa4:	898b      	ldrh	r3, [r1, #12]
 8007fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa8:	079d      	lsls	r5, r3, #30
 8007faa:	4606      	mov	r6, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	d507      	bpl.n	8007fc0 <__smakebuf_r+0x1c>
 8007fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	6123      	str	r3, [r4, #16]
 8007fb8:	2301      	movs	r3, #1
 8007fba:	6163      	str	r3, [r4, #20]
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	ab01      	add	r3, sp, #4
 8007fc2:	466a      	mov	r2, sp
 8007fc4:	f7ff ffc8 	bl	8007f58 <__swhatbuf_r>
 8007fc8:	9900      	ldr	r1, [sp, #0]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7fe f903 	bl	80061d8 <_malloc_r>
 8007fd2:	b948      	cbnz	r0, 8007fe8 <__smakebuf_r+0x44>
 8007fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d4ef      	bmi.n	8007fbc <__smakebuf_r+0x18>
 8007fdc:	f023 0303 	bic.w	r3, r3, #3
 8007fe0:	f043 0302 	orr.w	r3, r3, #2
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	e7e3      	b.n	8007fb0 <__smakebuf_r+0xc>
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <__smakebuf_r+0x7c>)
 8007fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	6163      	str	r3, [r4, #20]
 8007ffa:	9b01      	ldr	r3, [sp, #4]
 8007ffc:	6120      	str	r0, [r4, #16]
 8007ffe:	b15b      	cbz	r3, 8008018 <__smakebuf_r+0x74>
 8008000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008004:	4630      	mov	r0, r6
 8008006:	f000 f8c9 	bl	800819c <_isatty_r>
 800800a:	b128      	cbz	r0, 8008018 <__smakebuf_r+0x74>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	89a0      	ldrh	r0, [r4, #12]
 800801a:	4305      	orrs	r5, r0
 800801c:	81a5      	strh	r5, [r4, #12]
 800801e:	e7cd      	b.n	8007fbc <__smakebuf_r+0x18>
 8008020:	08007db1 	.word	0x08007db1

08008024 <_raise_r>:
 8008024:	291f      	cmp	r1, #31
 8008026:	b538      	push	{r3, r4, r5, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	460d      	mov	r5, r1
 800802c:	d904      	bls.n	8008038 <_raise_r+0x14>
 800802e:	2316      	movs	r3, #22
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800803a:	b112      	cbz	r2, 8008042 <_raise_r+0x1e>
 800803c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008040:	b94b      	cbnz	r3, 8008056 <_raise_r+0x32>
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f830 	bl	80080a8 <_getpid_r>
 8008048:	462a      	mov	r2, r5
 800804a:	4601      	mov	r1, r0
 800804c:	4620      	mov	r0, r4
 800804e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008052:	f000 b817 	b.w	8008084 <_kill_r>
 8008056:	2b01      	cmp	r3, #1
 8008058:	d00a      	beq.n	8008070 <_raise_r+0x4c>
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	d103      	bne.n	8008066 <_raise_r+0x42>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	2001      	movs	r0, #1
 8008064:	e7e7      	b.n	8008036 <_raise_r+0x12>
 8008066:	2400      	movs	r4, #0
 8008068:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800806c:	4628      	mov	r0, r5
 800806e:	4798      	blx	r3
 8008070:	2000      	movs	r0, #0
 8008072:	e7e0      	b.n	8008036 <_raise_r+0x12>

08008074 <raise>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <raise+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bfd3 	b.w	8008024 <_raise_r>
 800807e:	bf00      	nop
 8008080:	2000000c 	.word	0x2000000c

08008084 <_kill_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	; (80080a4 <_kill_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7f9 fcf9 	bl	8001a88 <_kill>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_kill_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_kill_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	200002b0 	.word	0x200002b0

080080a8 <_getpid_r>:
 80080a8:	f7f9 bce6 	b.w	8001a78 <_getpid>

080080ac <__sread>:
 80080ac:	b510      	push	{r4, lr}
 80080ae:	460c      	mov	r4, r1
 80080b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b4:	f000 f894 	bl	80081e0 <_read_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	bfab      	itete	ge
 80080bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080be:	89a3      	ldrhlt	r3, [r4, #12]
 80080c0:	181b      	addge	r3, r3, r0
 80080c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080c6:	bfac      	ite	ge
 80080c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ca:	81a3      	strhlt	r3, [r4, #12]
 80080cc:	bd10      	pop	{r4, pc}

080080ce <__swrite>:
 80080ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d2:	461f      	mov	r7, r3
 80080d4:	898b      	ldrh	r3, [r1, #12]
 80080d6:	05db      	lsls	r3, r3, #23
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	4616      	mov	r6, r2
 80080de:	d505      	bpl.n	80080ec <__swrite+0x1e>
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	2302      	movs	r3, #2
 80080e6:	2200      	movs	r2, #0
 80080e8:	f000 f868 	bl	80081bc <_lseek_r>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	4632      	mov	r2, r6
 80080fa:	463b      	mov	r3, r7
 80080fc:	4628      	mov	r0, r5
 80080fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008102:	f000 b817 	b.w	8008134 <_write_r>

08008106 <__sseek>:
 8008106:	b510      	push	{r4, lr}
 8008108:	460c      	mov	r4, r1
 800810a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810e:	f000 f855 	bl	80081bc <_lseek_r>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	bf15      	itete	ne
 8008118:	6560      	strne	r0, [r4, #84]	; 0x54
 800811a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800811e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008122:	81a3      	strheq	r3, [r4, #12]
 8008124:	bf18      	it	ne
 8008126:	81a3      	strhne	r3, [r4, #12]
 8008128:	bd10      	pop	{r4, pc}

0800812a <__sclose>:
 800812a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812e:	f000 b813 	b.w	8008158 <_close_r>
	...

08008134 <_write_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	; (8008154 <_write_r+0x20>)
 8008138:	4604      	mov	r4, r0
 800813a:	4608      	mov	r0, r1
 800813c:	4611      	mov	r1, r2
 800813e:	2200      	movs	r2, #0
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	f7f9 fcd7 	bl	8001af6 <_write>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_write_r+0x1e>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_write_r+0x1e>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	200002b0 	.word	0x200002b0

08008158 <_close_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_close_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f9 fce3 	bl	8001b2e <_close>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_close_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_close_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	200002b0 	.word	0x200002b0

08008178 <_fstat_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	; (8008198 <_fstat_r+0x20>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	4611      	mov	r1, r2
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	f7f9 fcde 	bl	8001b46 <_fstat>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d102      	bne.n	8008194 <_fstat_r+0x1c>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	b103      	cbz	r3, 8008194 <_fstat_r+0x1c>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd38      	pop	{r3, r4, r5, pc}
 8008196:	bf00      	nop
 8008198:	200002b0 	.word	0x200002b0

0800819c <_isatty_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_isatty_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f9 fcdd 	bl	8001b66 <_isatty>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_isatty_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_isatty_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200002b0 	.word	0x200002b0

080081bc <_lseek_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	; (80081dc <_lseek_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f9 fcd6 	bl	8001b7c <_lseek>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_lseek_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_lseek_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	200002b0 	.word	0x200002b0

080081e0 <_read_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_read_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f9 fc64 	bl	8001abc <_read>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_read_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_read_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	200002b0 	.word	0x200002b0

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
