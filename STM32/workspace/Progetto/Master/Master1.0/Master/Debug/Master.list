
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800a0c0  0800a0c0  0001a0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a700  0800a700  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a700  0800a700  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a708  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000308  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f8  200004f8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011959  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002658  00000000  00000000  00031b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  000341d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db0  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f878  00000000  00000000  00035e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c41  00000000  00000000  000556b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b98ca  00000000  00000000  000682f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121bc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000536c  00000000  00000000  00121c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0a8 	.word	0x0800a0a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a0a8 	.word	0x0800a0a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff39 	bl	8000adc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff6f 	bl	8000b7c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff60 	bl	8000b7c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <CutString>:
 *  Created on: Jun 22, 2023
 *      Author: Utente
 */
# include "ManageStr.h"
Stringa_TypeDef str;
Stringa_TypeDef CutString(char* buffer){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
	// Troviamo l'indice del carattere '+' nel buffer
	   int plus_index = strchr(buffer, '+') - buffer;
 8000cd0:	212b      	movs	r1, #43	; 0x2b
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f005 f938 	bl	8005f48 <strchr>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c

	   // Estraiamo la stringa contenente il valore della temperatura
	   char temp_str[MAX_BUFFER_LENGTH];
	   strncpy(temp_str, buffer, plus_index);
 8000ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f005 f93a 	bl	8005f62 <strncpy>
	   temp_str[plus_index] = '\0';
 8000cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]

	   // Estraiamo la stringa contenente il valore dell'umidità
	   char hmdy_str[MAX_BUFFER_LENGTH];
	   strncpy(hmdy_str, buffer + plus_index + 1, MAX_BUFFER_LENGTH - plus_index - 1);
 8000cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	18d1      	adds	r1, r2, r3
 8000d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d04:	f1c3 0313 	rsb	r3, r3, #19
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f005 f927 	bl	8005f62 <strncpy>
	   hmdy_str[MAX_BUFFER_LENGTH - plus_index - 1] = '\0';
 8000d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d16:	f1c3 0313 	rsb	r3, r3, #19
 8000d1a:	3350      	adds	r3, #80	; 0x50
 8000d1c:	443b      	add	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f803 2c3c 	strb.w	r2, [r3, #-60]

	   // Convertiamo le stringhe in valori di tipo float
	   float temp = atof(temp_str);
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 f885 	bl	8005e38 <atof>
 8000d2e:	ec53 2b10 	vmov	r2, r3, d0
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff ff41 	bl	8000bbc <__aeabi_d2f>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
	   float hmdy = atof(hmdy_str);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 f878 	bl	8005e38 <atof>
 8000d48:	ec53 2b10 	vmov	r2, r3, d0
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff ff34 	bl	8000bbc <__aeabi_d2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
	   str.Temp=temp;
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <CutString+0xc4>)
 8000d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d5c:	6013      	str	r3, [r2, #0]
	   str.Hmdy=hmdy;
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <CutString+0xc4>)
 8000d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d62:	6053      	str	r3, [r2, #4]


return str;
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <CutString+0xc4>)
 8000d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d76:	ee07 2a10 	vmov	s14, r2
 8000d7a:	ee07 3a90 	vmov	s15, r3

}
 8000d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d82:	eef0 0a67 	vmov.f32	s1, s15
 8000d86:	3750      	adds	r7, #80	; 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000020c 	.word	0x2000020c

08000d90 <triangular_membership>:
 */

#include "fuzzy.h"

// Funzione di appartenenza triangolare
float triangular_membership(float x, FuzzyTerm term) {
 8000d90:	b490      	push	{r4, r7}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a05 	vstr	s0, [r7, #20]
 8000d9a:	1d3c      	adds	r4, r7, #4
 8000d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (x <= term.a || x >= term.c) {
 8000da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	d908      	bls.n	8000dc4 <triangular_membership+0x34>
 8000db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc2:	db02      	blt.n	8000dca <triangular_membership+0x3a>
    return 0;
 8000dc4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000e34 <triangular_membership+0xa4>
 8000dc8:	e02e      	b.n	8000e28 <triangular_membership+0x98>
  } else if (x > term.a && x <= term.b) {
 8000dca:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dce:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd17      	ble.n	8000e0c <triangular_membership+0x7c>
 8000ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	d80e      	bhi.n	8000e0c <triangular_membership+0x7c>
    return (x - term.a) / (term.b - term.a);
 8000dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000df6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e0a:	e00d      	b.n	8000e28 <triangular_membership+0x98>
  } else {
    return (term.c - x) / (term.c - term.b);
 8000e0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e10:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e14:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
  }
}
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc90      	pop	{r4, r7}
 8000e32:	4770      	bx	lr
 8000e34:	00000000 	.word	0x00000000

08000e38 <fuzzy_inference>:

// Funzione di inferenza fuzzy
float fuzzy_inference(float input1, float input2, FuzzyVariable var1, FuzzyVariable var2, FuzzyVariable outputVar, FuzzyRule rules[], int nRules) {
 8000e38:	b084      	sub	sp, #16
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	ed2d 8b02 	vpush	{d8}
 8000e40:	b088      	sub	sp, #32
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e48:	edc7 0a00 	vstr	s1, [r7]
 8000e4c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8000e50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float output = 0;
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  float total_weight = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < nRules; i++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e083      	b.n	8000f6e <fuzzy_inference+0x136>
    float rule_strength = fminf(triangular_membership(input1, var1.terms[rules[i].input1]),
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	461a      	mov	r2, r3
 8000e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	3330      	adds	r3, #48	; 0x30
 8000e7e:	443b      	add	r3, r7
 8000e80:	3304      	adds	r3, #4
 8000e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e84:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e88:	f7ff ff82 	bl	8000d90 <triangular_membership>
 8000e8c:	eeb0 8a40 	vmov.f32	s16, s0
                                triangular_membership(input2, var2.terms[rules[i].input2]));
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ea0:	4413      	add	r3, r2
 8000ea2:	685b      	ldr	r3, [r3, #4]
    float rule_strength = fminf(triangular_membership(input1, var1.terms[rules[i].input1]),
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	3330      	adds	r3, #48	; 0x30
 8000ea8:	443b      	add	r3, r7
 8000eaa:	3334      	adds	r3, #52	; 0x34
 8000eac:	3304      	adds	r3, #4
 8000eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb0:	ed97 0a00 	vldr	s0, [r7]
 8000eb4:	f7ff ff6c 	bl	8000d90 <triangular_membership>
 8000eb8:	eef0 7a40 	vmov.f32	s15, s0
 8000ebc:	eef0 0a67 	vmov.f32	s1, s15
 8000ec0:	eeb0 0a48 	vmov.f32	s0, s16
 8000ec4:	f009 f894 	bl	8009ff0 <fminf>
 8000ec8:	ed87 0a04 	vstr	s0, [r7, #16]

    float centroid = (outputVar.terms[rules[i].output].a + outputVar.terms[rules[i].output].b + outputVar.terms[rules[i].output].c) / 3;
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000edc:	4413      	add	r3, r2
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	3330      	adds	r3, #48	; 0x30
 8000ee4:	443b      	add	r3, r7
 8000ee6:	3370      	adds	r3, #112	; 0x70
 8000ee8:	ed93 7a00 	vldr	s14, [r3]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000efc:	4413      	add	r3, r2
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	3330      	adds	r3, #48	; 0x30
 8000f04:	443b      	add	r3, r7
 8000f06:	3374      	adds	r3, #116	; 0x74
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f20:	4413      	add	r3, r2
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	3330      	adds	r3, #48	; 0x30
 8000f28:	443b      	add	r3, r7
 8000f2a:	3378      	adds	r3, #120	; 0x78
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f34:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]

    output += rule_strength * centroid;
 8000f40:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	edc7 7a07 	vstr	s15, [r7, #28]
    total_weight += rule_strength;
 8000f58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f64:	edc7 7a06 	vstr	s15, [r7, #24]
  for (int i = 0; i < nRules; i++) {
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f6ff af76 	blt.w	8000e66 <fuzzy_inference+0x2e>
  }

  return total_weight != 0 ? output / total_weight : 0;
 8000f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	d006      	beq.n	8000f96 <fuzzy_inference+0x15e>
 8000f88:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f94:	e001      	b.n	8000f9a <fuzzy_inference+0x162>
 8000f96:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000fb4 <fuzzy_inference+0x17c>
 8000f9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	ecbd 8b02 	vpop	{d8}
 8000faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fae:	b004      	add	sp, #16
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <regulate_servomotor>:

// Funzione di regolazione del servomotore
int regulate_servomotor(float temperature, float humidity) {
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b0ed      	sub	sp, #436	; 0x1b4
 8000fbc:	af26      	add	r7, sp, #152	; 0x98
 8000fbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000fc6:	ed83 0a00 	vstr	s0, [r3]
 8000fca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000fd2:	edc3 0a00 	vstr	s1, [r3]
  // Definizione delle variabili fuzzy
  FuzzyVariable temperatureVar = {.name = "temperature",
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <regulate_servomotor+0x110>)
 8000fd8:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000fdc:	461d      	mov	r5, r3
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	6023      	str	r3, [r4, #0]
                                  .terms = {{"low", -20, 0, 20},
                                            {"medium", 10, 25, 40},
                                            {"high", 30, 50, 70}}};

  FuzzyVariable humidityVar = {.name = "humidity",
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <regulate_servomotor+0x114>)
 8000ff0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	6023      	str	r3, [r4, #0]
                               .terms = {{"low", 0, 30, 60},
                                         {"medium", 40, 60, 80},
                                         {"high", 70, 90, 100}}};

  FuzzyVariable servomotorVar = {.name = "servomotor",
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <regulate_servomotor+0x118>)
 8001008:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800100c:	461d      	mov	r5, r3
 800100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	6023      	str	r3, [r4, #0]
                                 .terms = {{"low", 0, 45, 90},
                                           {"medium", 45, 90, 135},
                                           {"high", 90, 135, 180}}};

  // Definizione delle regole fuzzy
  FuzzyRule rules[] = {{LOW, LOW, LOW},
 800101e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001022:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001026:	4a2b      	ldr	r2, [pc, #172]	; (80010d4 <regulate_servomotor+0x11c>)
 8001028:	4618      	mov	r0, r3
 800102a:	4611      	mov	r1, r2
 800102c:	236c      	movs	r3, #108	; 0x6c
 800102e:	461a      	mov	r2, r3
 8001030:	f004 ff54 	bl	8005edc <memcpy>
                       {MEDIUM, HIGH, HIGH},
                       {HIGH, LOW, MEDIUM},
                       {HIGH, MEDIUM, HIGH},
                       {HIGH, HIGH, HIGH}};

  int nRules = sizeof(rules) / sizeof(FuzzyRule);
 8001034:	2309      	movs	r3, #9
 8001036:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  // Calcolo dell'inferenza fuzzy e regolazione del servomotor
  float servomotor_angle = fuzzy_inference(temperature, humidity, temperatureVar, humidityVar, servomotorVar, rules, nRules);
 800103a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800103e:	f5a3 7c8c 	sub.w	ip, r3, #280	; 0x118
 8001042:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001046:	f5a3 768a 	sub.w	r6, r3, #276	; 0x114
 800104a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800104e:	9324      	str	r3, [sp, #144]	; 0x90
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	9323      	str	r3, [sp, #140]	; 0x8c
 8001056:	ad16      	add	r5, sp, #88	; 0x58
 8001058:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	ad09      	add	r5, sp, #36	; 0x24
 800106e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	466d      	mov	r5, sp
 8001084:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8001088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	602b      	str	r3, [r5, #0]
 8001094:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109a:	eddc 0a00 	vldr	s1, [ip]
 800109e:	ed96 0a00 	vldr	s0, [r6]
 80010a2:	f7ff fec9 	bl	8000e38 <fuzzy_inference>
 80010a6:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110

  return (int)roundf(servomotor_angle);
 80010aa:	ed97 0a44 	vldr	s0, [r7, #272]	; 0x110
 80010ae:	f008 ffd7 	bl	800a060 <roundf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ba:	ee17 3a90 	vmov	r3, s15
}
 80010be:	4618      	mov	r0, r3
 80010c0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c8:	0800a0f8 	.word	0x0800a0f8
 80010cc:	0800a12c 	.word	0x0800a12c
 80010d0:	0800a160 	.word	0x0800a160
 80010d4:	0800a194 	.word	0x0800a194

080010d8 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001108:	f7ff fd06 	bl	8000b18 <__aeabi_dcmpgt>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800111e:	e011      	b.n	8001144 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800112c:	f7ff fcd6 	bl	8000adc <__aeabi_dcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <PID_Init+0x60>
}
 8001136:	e005      	b.n	8001144 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0000      	movs	r0, r0
	...

08001150 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6278      	str	r0, [r7, #36]	; 0x24
 8001158:	6239      	str	r1, [r7, #32]
 800115a:	61fa      	str	r2, [r7, #28]
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001162:	ed87 1b02 	vstr	d1, [r7, #8]
 8001166:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	6a3a      	ldr	r2, [r7, #32]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	2200      	movs	r2, #0
 8001180:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001182:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80011d8 <PID+0x88>
 8001186:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80011e0 <PID+0x90>
 800118a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800118c:	f000 f934 	bl	80013f8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2264      	movs	r2, #100	; 0x64
 8001194:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001196:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800119a:	4619      	mov	r1, r3
 800119c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119e:	f000 fa41 	bl	8001624 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80011a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011a6:	4619      	mov	r1, r3
 80011a8:	ed97 2b00 	vldr	d2, [r7]
 80011ac:	ed97 1b02 	vldr	d1, [r7, #8]
 80011b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80011b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011b6:	f000 f98d 	bl	80014d4 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80011ba:	f001 f9af 	bl	800251c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	1ad2      	subs	r2, r2, r3
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	605a      	str	r2, [r3, #4]
	
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	406fe000 	.word	0x406fe000
	...

080011e8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	785b      	ldrb	r3, [r3, #1]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <PID_Compute+0x14>
	{
		return _FALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e0db      	b.n	80013b4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80011fc:	f001 f98e 	bl	800251c <HAL_GetTick>
 8001200:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	6a3a      	ldr	r2, [r7, #32]
 8001212:	429a      	cmp	r2, r3
 8001214:	f0c0 80cd 	bcc.w	80013b2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001230:	f7ff f82a 	bl	8000288 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001246:	f7ff f81f 	bl	8000288 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800125e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001262:	f7ff f9c9 	bl	80005f8 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f80d 	bl	800028c <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d114      	bne.n	80012ae <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001294:	f7ff f9b0 	bl	80005f8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7fe fff2 	bl	8000288 <__aeabi_dsub>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012ba:	f7ff fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80012d0:	e010      	b.n	80012f4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012de:	f7ff fbfd 	bl	8000adc <__aeabi_dcmplt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001302:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001306:	f7ff f977 	bl	80005f8 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001312:	e005      	b.n	8001320 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800132c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffa4 	bl	8000288 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001348:	f7fe ffa0 	bl	800028c <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800135a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800135e:	f7ff fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800136e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001372:	e00e      	b.n	8001392 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800137a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800137e:	f7ff fbad 	bl	8000adc <__aeabi_dcmplt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800138e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800139a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80013b2:	2300      	movs	r3, #0
	}
	
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3730      	adds	r7, #48	; 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}

080013bc <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <PID_SetMode+0x2e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe77 	bl	80010d8 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	705a      	strb	r2, [r3, #1]
	
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6178      	str	r0, [r7, #20]
 8001400:	ed87 0b02 	vstr	d0, [r7, #8]
 8001404:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800140c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001410:	f7ff fb78 	bl	8000b04 <__aeabi_dcmpge>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d158      	bne.n	80014cc <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 800141a:	6979      	ldr	r1, [r7, #20]
 800141c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001420:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001424:	6979      	ldr	r1, [r7, #20]
 8001426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800142a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d04b      	beq.n	80014ce <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001444:	f7ff fb68 	bl	8000b18 <__aeabi_dcmpgt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001458:	e9c1 2300 	strd	r2, r3, [r1]
 800145c:	e012      	b.n	8001484 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800146c:	f7ff fb36 	bl	8000adc <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001480:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001490:	f7ff fb42 	bl	8000b18 <__aeabi_dcmpgt>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80014a0:	6979      	ldr	r1, [r7, #20]
 80014a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014a6:	e012      	b.n	80014ce <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014b4:	f7ff fb12 	bl	8000adc <__aeabi_dcmplt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014c4:	6979      	ldr	r1, [r7, #20]
 80014c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014ca:	e000      	b.n	80014ce <PID_SetOutputLimits+0xd6>
		return;
 80014cc:	bf00      	nop
		}
		else { }
		
	}
	
}
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	61f8      	str	r0, [r7, #28]
 80014dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80014e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80014e4:	ed87 2b00 	vstr	d2, [r7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f8:	f7ff faf0 	bl	8000adc <__aeabi_dcmplt>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8089 	bne.w	8001616 <PID_SetTunings2+0x142>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d17d      	bne.n	8001616 <PID_SetTunings2+0x142>
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001526:	f7ff fad9 	bl	8000adc <__aeabi_dcmplt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d172      	bne.n	8001616 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	7efa      	ldrb	r2, [r7, #27]
 8001534:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001536:	7efb      	ldrb	r3, [r7, #27]
 8001538:	2b01      	cmp	r3, #1
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001548:	69f9      	ldr	r1, [r7, #28]
 800154a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800154e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001552:	69f9      	ldr	r1, [r7, #28]
 8001554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001558:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800155c:	69f9      	ldr	r1, [r7, #28]
 800155e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001562:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffca 	bl	8000504 <__aeabi_ui2d>
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <PID_SetTunings2+0x14c>)
 8001576:	f7ff f969 	bl	800084c <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001582:	69f9      	ldr	r1, [r7, #28]
 8001584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001588:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800158c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7ff f830 	bl	80005f8 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	69f9      	ldr	r1, [r7, #28]
 800159e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80015a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015aa:	f7ff f94f 	bl	800084c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	78db      	ldrb	r3, [r3, #3]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d12b      	bne.n	8001618 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	f7fe fe5b 	bl	8000288 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	69f9      	ldr	r1, [r7, #28]
 80015d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015e2:	f04f 0000 	mov.w	r0, #0
 80015e6:	f04f 0100 	mov.w	r1, #0
 80015ea:	f7fe fe4d 	bl	8000288 <__aeabi_dsub>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	69f9      	ldr	r1, [r7, #28]
 80015f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015fe:	f04f 0000 	mov.w	r0, #0
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	f7fe fe3f 	bl	8000288 <__aeabi_dsub>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	69f9      	ldr	r1, [r7, #28]
 8001610:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001614:	e000      	b.n	8001618 <PID_SetTunings2+0x144>
		return;
 8001616:	bf00      	nop
		
	}
	
}
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	408f4000 	.word	0x408f4000

08001624 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d02e      	beq.n	8001696 <PID_SetControllerDirection+0x72>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	429a      	cmp	r2, r3
 8001640:	d029      	beq.n	8001696 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	f7fe fe1a 	bl	8000288 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001664:	f04f 0000 	mov.w	r0, #0
 8001668:	f04f 0100 	mov.w	r1, #0
 800166c:	f7fe fe0c 	bl	8000288 <__aeabi_dsub>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	f7fe fdfe 	bl	8000288 <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	70da      	strb	r2, [r3, #3]
	
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dd2e      	ble.n	8001712 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7fe ff35 	bl	8000524 <__aeabi_i2d>
 80016ba:	4604      	mov	r4, r0
 80016bc:	460d      	mov	r5, r1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff1e 	bl	8000504 <__aeabi_ui2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f8bc 	bl	800084c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80016e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e6:	f7fe ff87 	bl	80005f8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016fe:	f7ff f8a5 	bl	800084c <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800171c <HAL_GPIO_EXTI_Callback>:
bool StartSystem=false;
int ModFunz=0;
char StartRx='1';
int modo=0;StatoC=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]

                       if(StatoC==0){
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d12c      	bne.n	8001788 <HAL_GPIO_EXTI_Callback+0x6c>
                    	   HAL_UART_Transmit(&huart1, &StartRx, strlen(StartRx), HAL_MAX_DELAY);
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd4c 	bl	80001d0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	492b      	ldr	r1, [pc, #172]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001742:	482c      	ldr	r0, [pc, #176]	; (80017f4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001744:	f003 f914 	bl	8004970 <HAL_UART_Transmit>
                    	   HAL_UART_Transmit(&huart2, &StartRx, strlen(StartRx), HAL_MAX_DELAY);
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd3f 	bl	80001d0 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800175c:	4826      	ldr	r0, [pc, #152]	; (80017f8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800175e:	f003 f907 	bl	8004970 <HAL_UART_Transmit>
                    	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 800176a:	f001 fa09 	bl	8002b80 <HAL_GPIO_WritePin>
                    	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001774:	4821      	ldr	r0, [pc, #132]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001776:	f001 fa03 	bl	8002b80 <HAL_GPIO_WritePin>
                    	     StatoC=1;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
                    	     modo=0;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
                    	   	  	 		  }



                    	   	  	  }
		}
 8001786:	e02d      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0xc8>
                    	   	  	 		  while((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0);
 8001788:	bf00      	nop
 800178a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d0f8      	beq.n	800178a <HAL_GPIO_EXTI_Callback+0x6e>
                    	   	  	 		  if(modo==1){
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_GPIO_EXTI_Callback+0xe4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10f      	bne.n	80017c0 <HAL_GPIO_EXTI_Callback+0xa4>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017a6:	4815      	ldr	r0, [pc, #84]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80017a8:	f001 f9ea 	bl	8002b80 <HAL_GPIO_WritePin>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80017b4:	f001 f9e4 	bl	8002b80 <HAL_GPIO_WritePin>
                    	   	  	 			  modo=0;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
		}
 80017be:	e011      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0xc8>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80017c8:	f001 f9da 	bl	8002b80 <HAL_GPIO_WritePin>
                    	   	  	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <HAL_GPIO_EXTI_Callback+0xe0>)
 80017d4:	f001 f9d4 	bl	8002b80 <HAL_GPIO_WritePin>
                    	   	  	 			  modo=1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
                    	   	  	 			  PidOn=false;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200004bc 	.word	0x200004bc
 80017f0:	20000000 	.word	0x20000000
 80017f4:	200003a8 	.word	0x200003a8
 80017f8:	20000430 	.word	0x20000430
 80017fc:	48001000 	.word	0x48001000
 8001800:	200004b8 	.word	0x200004b8
 8001804:	200002d1 	.word	0x200002d1

08001808 <HAL_UART_RxCpltCallback>:

float temp0=0,temp1=0,hmdy0=0,hmdy1=0;
double TempSetpoint=25;
Stringa_TypeDef valS0,valS1;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_UART_RxCpltCallback+0x128>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d12e      	bne.n	800187a <HAL_UART_RxCpltCallback+0x72>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 800181c:	2201      	movs	r2, #1
 800181e:	4945      	ldr	r1, [pc, #276]	; (8001934 <HAL_UART_RxCpltCallback+0x12c>)
 8001820:	4843      	ldr	r0, [pc, #268]	; (8001930 <HAL_UART_RxCpltCallback+0x128>)
 8001822:	f003 f92f 	bl	8004a84 <HAL_UART_Receive_IT>

    if (RX_BUFFER[0] == stop) {
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_UART_RxCpltCallback+0x12c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b73      	cmp	r3, #115	; 0x73
 800182c:	d11a      	bne.n	8001864 <HAL_UART_RxCpltCallback+0x5c>
               rx_complete = true;
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_UART_RxCpltCallback+0x130>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
    			valS0=CutString(&rx_buffer);
 8001834:	4841      	ldr	r0, [pc, #260]	; (800193c <HAL_UART_RxCpltCallback+0x134>)
 8001836:	f7ff fa47 	bl	8000cc8 <CutString>
 800183a:	eeb0 7a40 	vmov.f32	s14, s0
 800183e:	eef0 7a60 	vmov.f32	s15, s1
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_UART_RxCpltCallback+0x138>)
 8001844:	ed83 7a00 	vstr	s14, [r3]
 8001848:	edc3 7a01 	vstr	s15, [r3, #4]
    	    	 temp0=valS0.Temp;
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_UART_RxCpltCallback+0x138>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <HAL_UART_RxCpltCallback+0x13c>)
 8001852:	6013      	str	r3, [r2, #0]
    	    	 hmdy0=valS0.Hmdy;
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <HAL_UART_RxCpltCallback+0x138>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <HAL_UART_RxCpltCallback+0x140>)
 800185a:	6013      	str	r3, [r2, #0]
    	    	rx_index = 0;
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_UART_RxCpltCallback+0x144>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e00a      	b.n	800187a <HAL_UART_RxCpltCallback+0x72>
           } else {
               rx_buffer[rx_index] = RX_BUFFER[0];
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_UART_RxCpltCallback+0x144>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_UART_RxCpltCallback+0x12c>)
 800186a:	7811      	ldrb	r1, [r2, #0]
 800186c:	4a33      	ldr	r2, [pc, #204]	; (800193c <HAL_UART_RxCpltCallback+0x134>)
 800186e:	54d1      	strb	r1, [r2, r3]
               rx_index++;
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_UART_RxCpltCallback+0x144>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a35      	ldr	r2, [pc, #212]	; (800194c <HAL_UART_RxCpltCallback+0x144>)
 8001878:	6013      	str	r3, [r2, #0]
           }

    }
    if(huart->Instance == huart2.Instance)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_UART_RxCpltCallback+0x148>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d12e      	bne.n	80018e4 <HAL_UART_RxCpltCallback+0xdc>
       {
       HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 8001886:	2201      	movs	r2, #1
 8001888:	4932      	ldr	r1, [pc, #200]	; (8001954 <HAL_UART_RxCpltCallback+0x14c>)
 800188a:	4831      	ldr	r0, [pc, #196]	; (8001950 <HAL_UART_RxCpltCallback+0x148>)
 800188c:	f003 f8fa 	bl	8004a84 <HAL_UART_Receive_IT>
       if (RX_BUFFER1[0] == stop) {
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_UART_RxCpltCallback+0x14c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b73      	cmp	r3, #115	; 0x73
 8001896:	d11a      	bne.n	80018ce <HAL_UART_RxCpltCallback+0xc6>
                   rx_complete1 = true;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_UART_RxCpltCallback+0x150>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
    	   	   	   valS1=CutString(&rx_buffer1);
 800189e:	482f      	ldr	r0, [pc, #188]	; (800195c <HAL_UART_RxCpltCallback+0x154>)
 80018a0:	f7ff fa12 	bl	8000cc8 <CutString>
 80018a4:	eeb0 7a40 	vmov.f32	s14, s0
 80018a8:	eef0 7a60 	vmov.f32	s15, s1
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <HAL_UART_RxCpltCallback+0x158>)
 80018ae:	ed83 7a00 	vstr	s14, [r3]
 80018b2:	edc3 7a01 	vstr	s15, [r3, #4]
    	       	    temp1=valS1.Temp;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_UART_RxCpltCallback+0x158>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_UART_RxCpltCallback+0x15c>)
 80018bc:	6013      	str	r3, [r2, #0]
    	       	    hmdy1=valS1.Hmdy;
 80018be:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_UART_RxCpltCallback+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <HAL_UART_RxCpltCallback+0x160>)
 80018c4:	6013      	str	r3, [r2, #0]
    	       	   rx_index1 = 0;
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e00a      	b.n	80018e4 <HAL_UART_RxCpltCallback+0xdc>
                } else {
                    rx_buffer1[rx_index1] = RX_BUFFER1[0];
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_UART_RxCpltCallback+0x14c>)
 80018d4:	7811      	ldrb	r1, [r2, #0]
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_UART_RxCpltCallback+0x154>)
 80018d8:	54d1      	strb	r1, [r2, r3]
                    rx_index1++;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 80018e2:	6013      	str	r3, [r2, #0]
                }
       }

    if(huart->Instance == huart4.Instance)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_UART_RxCpltCallback+0x168>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d11a      	bne.n	8001926 <HAL_UART_RxCpltCallback+0x11e>
          {
          HAL_UART_Receive_IT(&huart4, RX_BUFFER2, BUFFER_LEN);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4920      	ldr	r1, [pc, #128]	; (8001974 <HAL_UART_RxCpltCallback+0x16c>)
 80018f4:	481e      	ldr	r0, [pc, #120]	; (8001970 <HAL_UART_RxCpltCallback+0x168>)
 80018f6:	f003 f8c5 	bl	8004a84 <HAL_UART_Receive_IT>
          if (RX_BUFFER2[0] == spazio) {
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_UART_RxCpltCallback+0x16c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d106      	bne.n	8001910 <HAL_UART_RxCpltCallback+0x108>
                      rx_complete2 = true;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_UART_RxCpltCallback+0x170>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
                      //TempSetpoint=AdaptSetPoint(&rx_buffer2);
                      rx_index1 = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
                       rx_index2++;
                   }
          }


}
 800190e:	e00a      	b.n	8001926 <HAL_UART_RxCpltCallback+0x11e>
                       rx_buffer2[rx_index1] = RX_BUFFER2[0];
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_UART_RxCpltCallback+0x164>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_RxCpltCallback+0x16c>)
 8001916:	7811      	ldrb	r1, [r2, #0]
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <HAL_UART_RxCpltCallback+0x174>)
 800191a:	54d1      	strb	r1, [r2, r3]
                       rx_index2++;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_UART_RxCpltCallback+0x178>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_UART_RxCpltCallback+0x178>)
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003a8 	.word	0x200003a8
 8001934:	20000214 	.word	0x20000214
 8001938:	20000258 	.word	0x20000258
 800193c:	20000220 	.word	0x20000220
 8001940:	200004d0 	.word	0x200004d0
 8001944:	200004c0 	.word	0x200004c0
 8001948:	200004c8 	.word	0x200004c8
 800194c:	20000254 	.word	0x20000254
 8001950:	20000430 	.word	0x20000430
 8001954:	20000218 	.word	0x20000218
 8001958:	20000294 	.word	0x20000294
 800195c:	2000025c 	.word	0x2000025c
 8001960:	200004d8 	.word	0x200004d8
 8001964:	200004c4 	.word	0x200004c4
 8001968:	200004cc 	.word	0x200004cc
 800196c:	20000290 	.word	0x20000290
 8001970:	20000320 	.word	0x20000320
 8001974:	2000021c 	.word	0x2000021c
 8001978:	200002d0 	.word	0x200002d0
 800197c:	20000298 	.word	0x20000298
 8001980:	200002cc 	.word	0x200002cc
 8001984:	00000000 	.word	0x00000000

08001988 <main>:




int main(void)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b0c0      	sub	sp, #256	; 0x100
 800198c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198e:	f000 fd6b 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001992:	f000 f993 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001996:	f000 fa9b 	bl	8001ed0 <MX_GPIO_Init>
  MX_TIM16_Init();
 800199a:	f000 f9e3 	bl	8001d64 <MX_TIM16_Init>
  MX_UART4_Init();
 800199e:	f000 fa07 	bl	8001db0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80019a2:	f000 fa35 	bl	8001e10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019a6:	f000 fa63 	bl	8001e70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, RX_BUFFER2, BUFFER_LEN);
 80019aa:	2201      	movs	r2, #1
 80019ac:	49ae      	ldr	r1, [pc, #696]	; (8001c68 <main+0x2e0>)
 80019ae:	48af      	ldr	r0, [pc, #700]	; (8001c6c <main+0x2e4>)
 80019b0:	f003 f868 	bl	8004a84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 80019b4:	2201      	movs	r2, #1
 80019b6:	49ae      	ldr	r1, [pc, #696]	; (8001c70 <main+0x2e8>)
 80019b8:	48ae      	ldr	r0, [pc, #696]	; (8001c74 <main+0x2ec>)
 80019ba:	f003 f863 	bl	8004a84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 80019be:	2201      	movs	r2, #1
 80019c0:	49ad      	ldr	r1, [pc, #692]	; (8001c78 <main+0x2f0>)
 80019c2:	48ae      	ldr	r0, [pc, #696]	; (8001c7c <main+0x2f4>)
 80019c4:	f003 f85e 	bl	8004a84 <HAL_UART_Receive_IT>

  char bufferT[50],bufferH[50];
  float Temp;
  float Hmdy;
  PID_TypeDef TPID;
  double PIDOut=0;
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9c7 2302 	strd	r2, r3, [r7, #8]

  int servomotor_angle=0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


  while (1)
  {
    /* USER CODE END WHILE */
	  if(rx_complete == true &&  rx_complete1 == true){
 80019da:	4ba9      	ldr	r3, [pc, #676]	; (8001c80 <main+0x2f8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8092 	beq.w	8001b08 <main+0x180>
 80019e4:	4ba7      	ldr	r3, [pc, #668]	; (8001c84 <main+0x2fc>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 808d 	beq.w	8001b08 <main+0x180>
		  	  	 Temp=(temp0+temp1)/2;
 80019ee:	4ba6      	ldr	r3, [pc, #664]	; (8001c88 <main+0x300>)
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	4ba5      	ldr	r3, [pc, #660]	; (8001c8c <main+0x304>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
	      	     Hmdy=(hmdy0+hmdy1)/2;
 8001a0a:	4ba1      	ldr	r3, [pc, #644]	; (8001c90 <main+0x308>)
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	4ba0      	ldr	r3, [pc, #640]	; (8001c94 <main+0x30c>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
	      	     if(StatoC>0 && modo==0){
 8001a26:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <main+0x310>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dd36      	ble.n	8001a9c <main+0x114>
 8001a2e:	4b9b      	ldr	r3, [pc, #620]	; (8001c9c <main+0x314>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d132      	bne.n	8001a9c <main+0x114>
	      	    	  	  double Tem=(double)Temp;
 8001a36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	e9c7 2300 	strd	r2, r3, [r7]
	      	    	 	  PID(&TPID, &Tem, &PIDOut, &TempSetpoint, PID_KP, PID_KD, PID_KI, _PID_P_ON_E, _PID_CD_DIRECT);
 8001a46:	f107 0208 	add.w	r2, r7, #8
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	f107 0010 	add.w	r0, r7, #16
 8001a50:	2300      	movs	r3, #0
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	ed9f 2b79 	vldr	d2, [pc, #484]	; 8001c40 <main+0x2b8>
 8001a5c:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8001c48 <main+0x2c0>
 8001a60:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8001c50 <main+0x2c8>
 8001a64:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <main+0x318>)
 8001a66:	f7ff fb73 	bl	8001150 <PID>
	      	    	  	  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fca3 	bl	80013bc <PID_SetMode>
	      	    	  	  PID_SetSampleTime(&TPID, SAMPLE_TIME);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe11 	bl	80016a4 <PID_SetSampleTime>
	      	    	  	  PID_SetOutputLimits(&TPID, PID_LIM_MIN, PID_LIM_MAX);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001c58 <main+0x2d0>
 8001a8a:	ed9f 0b75 	vldr	d0, [pc, #468]	; 8001c60 <main+0x2d8>
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fcb2 	bl	80013f8 <PID_SetOutputLimits>
	      	    	  	  PidOn=true;
 8001a94:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <main+0x31c>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
	      	     if(StatoC>0 && modo==0){
 8001a9a:	e02f      	b.n	8001afc <main+0x174>

	      	     }else  if(StatoC>0 && modo==1){
 8001a9c:	4b7e      	ldr	r3, [pc, #504]	; (8001c98 <main+0x310>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd2b      	ble.n	8001afc <main+0x174>
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <main+0x314>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d127      	bne.n	8001afc <main+0x174>
	      	    	//fuzzy
	      	    			  				servomotor_angle = regulate_servomotor(Temp, Hmdy);
 8001aac:	edd7 0a3b 	vldr	s1, [r7, #236]	; 0xec
 8001ab0:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001ab4:	f7ff fa80 	bl	8000fb8 <regulate_servomotor>
 8001ab8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	      	    			  			//fuzzy
	      	    			  					  				int servomotor_angle = regulate_servomotor(Temp, Hmdy);
 8001abc:	edd7 0a3b 	vldr	s1, [r7, #236]	; 0xec
 8001ac0:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 8001ac4:	f7ff fa78 	bl	8000fb8 <regulate_servomotor>
 8001ac8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	      	    			  					  				sprintf(bufferH, "servomotor_angle: %d\r\n",(int16_t)servomotor_angle); // @suppress("Float formatting support")
 8001acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ad8:	4973      	ldr	r1, [pc, #460]	; (8001ca8 <main+0x320>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 fa14 	bl	8005f08 <siprintf>
	      	    			  					  				HAL_UART_Transmit(&huart4, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001ae0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fb73 	bl	80001d0 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	485d      	ldr	r0, [pc, #372]	; (8001c6c <main+0x2e4>)
 8001af8:	f002 ff3a 	bl	8004970 <HAL_UART_Transmit>

	      	     }

	      	     rx_complete =false;
 8001afc:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <main+0x2f8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	 	      	 rx_complete1 =false;
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <main+0x2fc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]


	  }

if(PidOn==true){
 8001b08:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <main+0x31c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f43f af64 	beq.w	80019da <main+0x52>
	PID_Compute(&TPID);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fb66 	bl	80011e8 <PID_Compute>

	sprintf(bufferT, "TEMP:");
 8001b1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b20:	4962      	ldr	r1, [pc, #392]	; (8001cac <main+0x324>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f9f0 	bl	8005f08 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001b28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb4f 	bl	80001d0 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	484b      	ldr	r0, [pc, #300]	; (8001c6c <main+0x2e4>)
 8001b40:	f002 ff16 	bl	8004970 <HAL_UART_Transmit>
		gcvt(Temp, sizeof(Temp), bufferT);
 8001b44:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b54:	4619      	mov	r1, r3
 8001b56:	2004      	movs	r0, #4
 8001b58:	ec45 4b10 	vmov	d0, r4, r5
 8001b5c:	f004 f970 	bl	8005e40 <gcvt>
		HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001b60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fb33 	bl	80001d0 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	483d      	ldr	r0, [pc, #244]	; (8001c6c <main+0x2e4>)
 8001b78:	f002 fefa 	bl	8004970 <HAL_UART_Transmit>
		sprintf(bufferT, "\n");
 8001b7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b80:	494b      	ldr	r1, [pc, #300]	; (8001cb0 <main+0x328>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f9c0 	bl	8005f08 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001b88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fb1f 	bl	80001d0 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	4833      	ldr	r0, [pc, #204]	; (8001c6c <main+0x2e4>)
 8001ba0:	f002 fee6 	bl	8004970 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba8:	f000 fcc4 	bl	8002534 <HAL_Delay>




	sprintf(bufferT, "PID_VALUE:");
 8001bac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb0:	4940      	ldr	r1, [pc, #256]	; (8001cb4 <main+0x32c>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 f9a8 	bl	8005f08 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001bb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fb07 	bl	80001d0 <strlen>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	4827      	ldr	r0, [pc, #156]	; (8001c6c <main+0x2e4>)
 8001bd0:	f002 fece 	bl	8004970 <HAL_UART_Transmit>
	gcvt(PIDOut, sizeof(PIDOut), bufferT);
 8001bd4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2008      	movs	r0, #8
 8001be0:	eeb0 0a47 	vmov.f32	s0, s14
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	f004 f92a 	bl	8005e40 <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001bec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe faed 	bl	80001d0 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	481a      	ldr	r0, [pc, #104]	; (8001c6c <main+0x2e4>)
 8001c04:	f002 feb4 	bl	8004970 <HAL_UART_Transmit>
	sprintf(bufferT, "\t");
 8001c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c0c:	492a      	ldr	r1, [pc, #168]	; (8001cb8 <main+0x330>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 f97a 	bl	8005f08 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001c14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fad9 	bl	80001d0 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	4810      	ldr	r0, [pc, #64]	; (8001c6c <main+0x2e4>)
 8001c2c:	f002 fea0 	bl	8004970 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c34:	f000 fc7e 	bl	8002534 <HAL_Delay>
	PidOn=false;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <main+0x31c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
	  if(rx_complete == true &&  rx_complete1 == true){
 8001c3e:	e6cc      	b.n	80019da <main+0x52>
 8001c40:	00000000 	.word	0x00000000
 8001c44:	3fe00000 	.word	0x3fe00000
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	3fd00000 	.word	0x3fd00000
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40000000 	.word	0x40000000
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40590000 	.word	0x40590000
 8001c60:	00000000 	.word	0x00000000
 8001c64:	c0590000 	.word	0xc0590000
 8001c68:	2000021c 	.word	0x2000021c
 8001c6c:	20000320 	.word	0x20000320
 8001c70:	20000218 	.word	0x20000218
 8001c74:	20000430 	.word	0x20000430
 8001c78:	20000214 	.word	0x20000214
 8001c7c:	200003a8 	.word	0x200003a8
 8001c80:	20000258 	.word	0x20000258
 8001c84:	20000294 	.word	0x20000294
 8001c88:	200004c0 	.word	0x200004c0
 8001c8c:	200004c4 	.word	0x200004c4
 8001c90:	200004c8 	.word	0x200004c8
 8001c94:	200004cc 	.word	0x200004cc
 8001c98:	200004bc 	.word	0x200004bc
 8001c9c:	200004b8 	.word	0x200004b8
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200002d1 	.word	0x200002d1
 8001ca8:	0800a200 	.word	0x0800a200
 8001cac:	0800a218 	.word	0x0800a218
 8001cb0:	0800a220 	.word	0x0800a220
 8001cb4:	0800a224 	.word	0x0800a224
 8001cb8:	0800a230 	.word	0x0800a230

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09e      	sub	sp, #120	; 0x78
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cc6:	2228      	movs	r2, #40	; 0x28
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 f914 	bl	8005ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	223c      	movs	r2, #60	; 0x3c
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 f906 	bl	8005ef8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cec:	2302      	movs	r3, #2
 8001cee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 ff6d 	bl	8002be0 <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001d0c:	f000 f942 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d10:	230f      	movs	r3, #15
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d14:	2300      	movs	r3, #0
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 ff96 	bl	8003c5c <HAL_RCC_ClockConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d36:	f000 f92d 	bl	8001f94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001d3a:	230b      	movs	r3, #11
 8001d3c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f9bb 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001d58:	f000 f91c 	bl	8001f94 <Error_Handler>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3778      	adds	r7, #120	; 0x78
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50000;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d70:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d7e:	2264      	movs	r2, #100	; 0x64
 8001d80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d96:	f002 fb47 	bl	8004428 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001da0:	f000 f8f8 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200002d4 	.word	0x200002d4
 8001dac:	40014400 	.word	0x40014400

08001db0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_UART4_Init+0x58>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_UART4_Init+0x5c>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_UART4_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_UART4_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_UART4_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_UART4_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_UART4_Init+0x58>)
 8001df4:	f002 fd6e 	bl	80048d4 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001dfe:	f000 f8c9 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000320 	.word	0x20000320
 8001e0c:	40004c00 	.word	0x40004c00

08001e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <MX_USART1_UART_Init+0x5c>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_USART1_UART_Init+0x58>)
 8001e54:	f002 fd3e 	bl	80048d4 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e5e:	f000 f899 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200003a8 	.word	0x200003a8
 8001e6c:	40013800 	.word	0x40013800

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <MX_USART2_UART_Init+0x5c>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f002 fd0e 	bl	80048d4 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ebe:	f000 f869 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000430 	.word	0x20000430
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6153      	str	r3, [r2, #20]
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f20:	6153      	str	r3, [r2, #20]
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_GPIO_Init+0xbc>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001f34:	4816      	ldr	r0, [pc, #88]	; (8001f90 <MX_GPIO_Init+0xc0>)
 8001f36:	f000 fe23 	bl	8002b80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f000 fc9b 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001f56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f5a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4808      	ldr	r0, [pc, #32]	; (8001f90 <MX_GPIO_Init+0xc0>)
 8001f70:	f000 fc8c 	bl	800288c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2006      	movs	r0, #6
 8001f7a:	f000 fbda 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f7e:	2006      	movs	r0, #6
 8001f80:	f000 fbf3 	bl	800276a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48001000 	.word	0x48001000

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6193      	str	r3, [r2, #24]
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_MspInit+0x44>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_TIM_Base_MspInit+0x44>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d113      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_TIM_Base_MspInit+0x48>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_TIM_Base_MspInit+0x48>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	6193      	str	r3, [r2, #24]
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_TIM_Base_MspInit+0x48>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2104      	movs	r1, #4
 8002016:	2019      	movs	r0, #25
 8002018:	f000 fb8b 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800201c:	2019      	movs	r0, #25
 800201e:	f000 fba4 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40014400 	.word	0x40014400
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08e      	sub	sp, #56	; 0x38
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_UART_MspInit+0x168>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d131      	bne.n	80020ba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002056:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 800205c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002078:	6153      	str	r3, [r2, #20]
 800207a:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002086:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002098:	2305      	movs	r3, #5
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	4840      	ldr	r0, [pc, #256]	; (80021a4 <HAL_UART_MspInit+0x170>)
 80020a4:	f000 fbf2 	bl	800288c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	2034      	movs	r0, #52	; 0x34
 80020ae:	f000 fb40 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020b2:	2034      	movs	r0, #52	; 0x34
 80020b4:	f000 fb59 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020b8:	e06b      	b.n	8002192 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a3a      	ldr	r2, [pc, #232]	; (80021a8 <HAL_UART_MspInit+0x174>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d130      	bne.n	8002126 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020f4:	2330      	movs	r3, #48	; 0x30
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002104:	2307      	movs	r3, #7
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4825      	ldr	r0, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x170>)
 8002110:	f000 fbbc 	bl	800288c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2103      	movs	r1, #3
 8002118:	2025      	movs	r0, #37	; 0x25
 800211a:	f000 fb0a 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211e:	2025      	movs	r0, #37	; 0x25
 8002120:	f000 fb23 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8002124:	e035      	b.n	8002192 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_UART_MspInit+0x178>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d130      	bne.n	8002192 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213a:	61d3      	str	r3, [r2, #28]
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	6153      	str	r3, [r2, #20]
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_UART_MspInit+0x16c>)
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002160:	230c      	movs	r3, #12
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002170:	2307      	movs	r3, #7
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f000 fb85 	bl	800288c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2102      	movs	r1, #2
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f000 fad3 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800218c:	2026      	movs	r0, #38	; 0x26
 800218e:	f000 faec 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3738      	adds	r7, #56	; 0x38
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40004c00 	.word	0x40004c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000800 	.word	0x48000800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40004400 	.word	0x40004400

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f97a 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002208:	2001      	movs	r0, #1
 800220a:	f000 fcd1 	bl	8002bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800221a:	f002 f95c 	bl	80044d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002d4 	.word	0x200002d4

08002228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART1_IRQHandler+0x10>)
 800222e:	f002 fc6d 	bl	8004b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200003a8 	.word	0x200003a8

0800223c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <USART2_IRQHandler+0x10>)
 8002242:	f002 fc63 	bl	8004b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000430 	.word	0x20000430

08002250 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <UART4_IRQHandler+0x10>)
 8002256:	f002 fc59 	bl	8004b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000320 	.word	0x20000320

08002264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_kill>:

int _kill(int pid, int sig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227e:	f003 fe03 	bl	8005e88 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2216      	movs	r2, #22
 8002286:	601a      	str	r2, [r3, #0]
  return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_exit>:

void _exit (int status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a6:	e7fe      	b.n	80022a6 <_exit+0x12>

080022a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00a      	b.n	80022d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ba:	f3af 8000 	nop.w
 80022be:	4601      	mov	r1, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	60ba      	str	r2, [r7, #8]
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf0      	blt.n	80022ba <_read+0x12>
  }

  return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e009      	b.n	8002308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf1      	blt.n	80022f4 <_write+0x12>
  }
  return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_close>:

int _close(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002342:	605a      	str	r2, [r3, #4]
  return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_isatty>:

int _isatty(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f003 fd68 	bl	8005e88 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000a000 	.word	0x2000a000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	200004e0 	.word	0x200004e0
 80023ec:	200004f8 	.word	0x200004f8

080023f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff ffea 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f003 fd27 	bl	8005e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7ff fa9f 	bl	8001988 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800244c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002458:	0800a708 	.word	0x0800a708
  ldr r2, =_sbss
 800245c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002460:	200004f8 	.word	0x200004f8

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>
	...

08002468 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x28>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x28>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f94f 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	200f      	movs	r0, #15
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fd8c 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f967 	bl	8002786 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f000 f92f 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000010 	.word	0x20000010
 80024ec:	20000018 	.word	0x20000018
 80024f0:	20000014 	.word	0x20000014

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000018 	.word	0x20000018
 8002518:	200004e4 	.word	0x200004e4

0800251c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200004e4 	.word	0x200004e4

08002534 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff ffee 	bl	800251c <HAL_GetTick>
 8002540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d005      	beq.n	800255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_Delay+0x44>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800255a:	bf00      	nop
 800255c:	f7ff ffde 	bl	800251c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d8f7      	bhi.n	800255c <HAL_Delay+0x28>
  {
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000018 	.word	0x20000018

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff3e 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff8e 	bl	8002670 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff31 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2204      	movs	r2, #4
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e020      	b.n	8002804 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 020e 	bic.w	r2, r2, #14
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002822:	2b02      	cmp	r3, #2
 8002824:	d005      	beq.n	8002832 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2204      	movs	r2, #4
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e027      	b.n	8002882 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020e 	bic.w	r2, r2, #14
 8002840:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
    } 
  }
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289a:	e154      	b.n	8002b46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8146 	beq.w	8002b40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x40>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d017      	beq.n	800296a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d123      	bne.n	80029be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a0 	beq.w	8002b40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a00:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_GPIO_Init+0x2d8>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_GPIO_Init+0x2d8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_GPIO_Init+0x2d8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a18:	4a53      	ldr	r2, [pc, #332]	; (8002b68 <HAL_GPIO_Init+0x2dc>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a42:	d019      	beq.n	8002a78 <HAL_GPIO_Init+0x1ec>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x2e0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_GPIO_Init+0x1e8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00d      	beq.n	8002a70 <HAL_GPIO_Init+0x1e4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <HAL_GPIO_Init+0x1e0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_GPIO_Init+0x1dc>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e008      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a68:	2305      	movs	r3, #5
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a8a:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_GPIO_Init+0x2dc>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a98:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002abc:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f aea3 	bne.w	800289c <HAL_GPIO_Init+0x10>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000c00 	.word	0x48000c00
 8002b78:	48001000 	.word	0x48001000
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fda4 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f001 b823 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 817d 	beq.w	8002f16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c1c:	4bbc      	ldr	r3, [pc, #752]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d00c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c28:	4bb9      	ldr	r3, [pc, #740]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d15c      	bne.n	8002cee <HAL_RCC_OscConfig+0x10e>
 8002c34:	4bb6      	ldr	r3, [pc, #728]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d155      	bne.n	8002cee <HAL_RCC_OscConfig+0x10e>
 8002c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_OscConfig+0x94>
 8002c6e:	4ba8      	ldr	r3, [pc, #672]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	e015      	b.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c9c:	4b9c      	ldr	r3, [pc, #624]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ca8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cac:	fa92 f2a2 	rbit	r2, r2
 8002cb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f042 0220 	orr.w	r2, r2, #32
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f002 021f 	and.w	r2, r2, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 811f 	beq.w	8002f14 <HAL_RCC_OscConfig+0x334>
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8116 	bne.w	8002f14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f000 bfaf 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12e>
 8002d00:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a82      	ldr	r2, [pc, #520]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_OscConfig+0x19c>
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x158>
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7b      	ldr	r2, [pc, #492]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a78      	ldr	r2, [pc, #480]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e021      	b.n	8002d7c <HAL_RCC_OscConfig+0x19c>
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x184>
 8002d4a:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a70      	ldr	r2, [pc, #448]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6e      	ldr	r3, [pc, #440]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6d      	ldr	r2, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0x19c>
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a69      	ldr	r2, [pc, #420]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a66      	ldr	r2, [pc, #408]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f023 020f 	bic.w	r2, r3, #15
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	495f      	ldr	r1, [pc, #380]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d059      	beq.n	8002e5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7ff fbb9 	bl	800251c <HAL_GetTick>
 8002daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff fbb4 	bl	800251c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	f000 bf43 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 8002dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0x218>
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e015      	b.n	8002e24 <HAL_RCC_OscConfig+0x244>
 8002df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f002 021f 	and.w	r2, r2, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ab      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1d0>
 8002e58:	e05d      	b.n	8002f16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7ff fb5f 	bl	800251c <HAL_GetTick>
 8002e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7ff fb5a 	bl	800251c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d902      	bls.n	8002e7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	f000 bee9 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 8002e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_RCC_OscConfig+0x2cc>
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2f8>
 8002eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ec8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_RCC_OscConfig+0x330>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002edc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ee0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ee4:	fa92 f2a2 	rbit	r2, r2
 8002ee8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002eec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ef0:	fab2 f282 	clz	r2, r2
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f002 021f 	and.w	r2, r2, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f202 	lsl.w	r2, r1, r2
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ab      	bne.n	8002e64 <HAL_RCC_OscConfig+0x284>
 8002f0c:	e003      	b.n	8002f16 <HAL_RCC_OscConfig+0x336>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 817d 	beq.w	8003226 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f2c:	4ba6      	ldr	r3, [pc, #664]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f38:	4ba3      	ldr	r3, [pc, #652]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d172      	bne.n	800302a <HAL_RCC_OscConfig+0x44a>
 8002f44:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d16c      	bne.n	800302a <HAL_RCC_OscConfig+0x44a>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3a0>
 8002f7a:	4b93      	ldr	r3, [pc, #588]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c8>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f92:	2302      	movs	r3, #2
 8002f94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fa4:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fb2:	fa92 f2a2 	rbit	r2, r2
 8002fb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f042 0220 	orr.w	r2, r2, #32
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x410>
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f000 be2e 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b75      	ldr	r3, [pc, #468]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	21f8      	movs	r1, #248	; 0xf8
 8003006:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800300e:	fa91 f1a1 	rbit	r1, r1
 8003012:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003016:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800301a:	fab1 f181 	clz	r1, r1
 800301e:	b2c9      	uxtb	r1, r1
 8003020:	408b      	lsls	r3, r1
 8003022:	4969      	ldr	r1, [pc, #420]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003028:	e0fd      	b.n	8003226 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8088 	beq.w	800314c <HAL_RCC_OscConfig+0x56c>
 800303c:	2301      	movs	r3, #1
 800303e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800304e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800305c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	2301      	movs	r3, #1
 8003066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7ff fa58 	bl	800251c <HAL_GetTick>
 800306c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003072:	f7ff fa53 	bl	800251c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	f000 bde2 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800309a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4d8>
 80030b2:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e013      	b.n	80030e0 <HAL_RCC_OscConfig+0x500>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030dc:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2202      	movs	r2, #2
 80030e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80030e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f042 0220 	orr.w	r2, r2, #32
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0af      	beq.n	8003072 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	21f8      	movs	r1, #248	; 0xf8
 8003128:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003130:	fa91 f1a1 	rbit	r1, r1
 8003134:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003138:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800313c:	fab1 f181 	clz	r1, r1
 8003140:	b2c9      	uxtb	r1, r1
 8003142:	408b      	lsls	r3, r1
 8003144:	4920      	ldr	r1, [pc, #128]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
 800314a:	e06c      	b.n	8003226 <HAL_RCC_OscConfig+0x646>
 800314c:	2301      	movs	r3, #1
 800314e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800315e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800316c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	461a      	mov	r2, r3
 8003174:	2300      	movs	r3, #0
 8003176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff f9d0 	bl	800251c <HAL_GetTick>
 800317c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003182:	f7ff f9cb 	bl	800251c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	f000 bd5a 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 8003198:	2302      	movs	r3, #2
 800319a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d104      	bne.n	80031cc <HAL_RCC_OscConfig+0x5ec>
 80031c2:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <HAL_RCC_OscConfig+0x5e8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e015      	b.n	80031f4 <HAL_RCC_OscConfig+0x614>
 80031c8:	40021000 	.word	0x40021000
 80031cc:	2302      	movs	r3, #2
 80031ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031de:	2302      	movs	r3, #2
 80031e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031f0:	4bc8      	ldr	r3, [pc, #800]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2202      	movs	r2, #2
 80031f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031fe:	fa92 f2a2 	rbit	r2, r2
 8003202:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003206:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800320a:	fab2 f282 	clz	r2, r2
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f042 0220 	orr.w	r2, r2, #32
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f002 021f 	and.w	r2, r2, #31
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ad      	bne.n	8003182 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8110 	beq.w	800345c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d079      	beq.n	8003340 <HAL_RCC_OscConfig+0x760>
 800324c:	2301      	movs	r3, #1
 800324e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4bab      	ldr	r3, [pc, #684]	; (8003518 <HAL_RCC_OscConfig+0x938>)
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	461a      	mov	r2, r3
 8003272:	2301      	movs	r3, #1
 8003274:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7ff f951 	bl	800251c <HAL_GetTick>
 800327a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7ff f94c 	bl	800251c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	f000 bcdb 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 8003296:	2302      	movs	r3, #2
 8003298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032b0:	2202      	movs	r2, #2
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032d4:	2202      	movs	r2, #2
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 80032f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80032fc:	2102      	movs	r1, #2
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f1a3 	rbit	r1, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003316:	6019      	str	r1, [r3, #0]
  return result;
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0a0      	beq.n	8003280 <HAL_RCC_OscConfig+0x6a0>
 800333e:	e08d      	b.n	800345c <HAL_RCC_OscConfig+0x87c>
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003362:	601a      	str	r2, [r3, #0]
  return result;
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800336c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x938>)
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	461a      	mov	r2, r3
 800337e:	2300      	movs	r3, #0
 8003380:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7ff f8cb 	bl	800251c <HAL_GetTick>
 8003386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff f8c6 	bl	800251c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d902      	bls.n	80033a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	f000 bc55 	b.w	8003c4c <HAL_RCC_OscConfig+0x106c>
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800340c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340e:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 8003410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800341a:	2102      	movs	r1, #2
 800341c:	6019      	str	r1, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f1a3 	rbit	r1, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003434:	6019      	str	r1, [r3, #0]
  return result;
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d197      	bne.n	800338c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 81a1 	beq.w	80037b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	61d3      	str	r3, [r2, #28]
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_OscConfig+0x93c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCC_OscConfig+0x93c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x93c>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7ff f827 	bl	800251c <HAL_GetTick>
 80034ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	e009      	b.n	80034e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7ff f822 	bl	800251c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b64      	cmp	r3, #100	; 0x64
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e3b1      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x93c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <HAL_RCC_OscConfig+0x940>
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4a02      	ldr	r2, [pc, #8]	; (8003514 <HAL_RCC_OscConfig+0x934>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	e03c      	b.n	800358c <HAL_RCC_OscConfig+0x9ac>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	10908120 	.word	0x10908120
 800351c:	40007000 	.word	0x40007000
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x96a>
 8003530:	4bc1      	ldr	r3, [pc, #772]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4ac0      	ldr	r2, [pc, #768]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	4bbe      	ldr	r3, [pc, #760]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4abd      	ldr	r2, [pc, #756]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	e020      	b.n	800358c <HAL_RCC_OscConfig+0x9ac>
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b05      	cmp	r3, #5
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x994>
 800355a:	4bb7      	ldr	r3, [pc, #732]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4ab6      	ldr	r2, [pc, #728]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	4bb4      	ldr	r3, [pc, #720]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4ab3      	ldr	r2, [pc, #716]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0x9ac>
 8003574:	4bb0      	ldr	r3, [pc, #704]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4aaf      	ldr	r2, [pc, #700]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	4bad      	ldr	r3, [pc, #692]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4aac      	ldr	r2, [pc, #688]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003586:	f023 0304 	bic.w	r3, r3, #4
 800358a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8081 	beq.w	80036a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe ffbd 	bl	800251c <HAL_GetTick>
 80035a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe ffb8 	bl	800251c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e345      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035ec:	2202      	movs	r2, #2
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003602:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003606:	601a      	str	r2, [r3, #0]
  return result;
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003610:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d102      	bne.n	800362c <HAL_RCC_OscConfig+0xa4c>
 8003626:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	e013      	b.n	8003654 <HAL_RCC_OscConfig+0xa74>
 800362c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003630:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4b79      	ldr	r3, [pc, #484]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003658:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800365c:	2102      	movs	r1, #2
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003664:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	fa92 f1a2 	rbit	r1, r2
 800366e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003672:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003676:	6011      	str	r1, [r2, #0]
  return result;
 8003678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f002 021f 	and.w	r2, r2, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d084      	beq.n	80035a8 <HAL_RCC_OscConfig+0x9c8>
 800369e:	e07f      	b.n	80037a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe ff3c 	bl	800251c <HAL_GetTick>
 80036a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe ff37 	bl	800251c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e2c4      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036ca:	2202      	movs	r2, #2
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036ee:	2202      	movs	r2, #2
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003708:	601a      	str	r2, [r3, #0]
  return result;
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003712:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d102      	bne.n	800372e <HAL_RCC_OscConfig+0xb4e>
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	e013      	b.n	8003756 <HAL_RCC_OscConfig+0xb76>
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003736:	2202      	movs	r2, #2
 8003738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	fa93 f2a3 	rbit	r2, r3
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800375e:	2102      	movs	r1, #2
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003766:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	fa92 f1a2 	rbit	r1, r2
 8003770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003774:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003778:	6011      	str	r1, [r2, #0]
  return result;
 800377a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f002 021f 	and.w	r2, r2, #31
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f202 	lsl.w	r2, r1, r2
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d184      	bne.n	80036aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 80037ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8242 	beq.w	8003c4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_RCC_OscConfig+0xc58>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	f000 8213 	beq.w	8003bfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f040 8162 	bne.w	8003aaa <HAL_RCC_OscConfig+0xeca>
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80037ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003814:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe fe76 	bl	800251c <HAL_GetTick>
 8003830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	e00c      	b.n	8003850 <HAL_RCC_OscConfig+0xc70>
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fe6e 	bl	800251c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1fd      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003874:	601a      	str	r2, [r3, #0]
  return result;
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800387e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_RCC_OscConfig+0xcba>
 8003894:	4bb0      	ldr	r3, [pc, #704]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e027      	b.n	80038ea <HAL_RCC_OscConfig+0xd0a>
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	fa93 f2a3 	rbit	r2, r3
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80038f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f6:	6011      	str	r1, [r2, #0]
 80038f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	fa92 f1a2 	rbit	r1, r2
 8003906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800390e:	6011      	str	r1, [r2, #0]
  return result;
 8003910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003914:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	fab2 f282 	clz	r2, r2
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	f042 0220 	orr.w	r2, r2, #32
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f002 021f 	and.w	r2, r2, #31
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d182      	bne.n	800383c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	430b      	orrs	r3, r1
 8003958:	497f      	ldr	r1, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800396a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003982:	601a      	str	r2, [r3, #0]
  return result;
 8003984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003988:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800398c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	461a      	mov	r2, r3
 80039a0:	2301      	movs	r3, #1
 80039a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fdba 	bl	800251c <HAL_GetTick>
 80039a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ac:	e009      	b.n	80039c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fe fdb5 	bl	800251c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e144      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039e6:	601a      	str	r2, [r3, #0]
  return result;
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d102      	bne.n	8003a0c <HAL_RCC_OscConfig+0xe2c>
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e027      	b.n	8003a5c <HAL_RCC_OscConfig+0xe7c>
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f2a3 	rbit	r2, r3
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fa92 f1a2 	rbit	r1, r2
 8003a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a80:	6011      	str	r1, [r2, #0]
  return result;
 8003a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f042 0220 	orr.w	r2, r2, #32
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	f002 021f 	and.w	r2, r2, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d082      	beq.n	80039ae <HAL_RCC_OscConfig+0xdce>
 8003aa8:	e0cf      	b.n	8003c4a <HAL_RCC_OscConfig+0x106a>
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	fa93 f2a3 	rbit	r2, r3
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ace:	601a      	str	r2, [r3, #0]
  return result;
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ad8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe fd14 	bl	800251c <HAL_GetTick>
 8003af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fd0f 	bl	800251c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e09e      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b32:	601a      	str	r2, [r3, #0]
  return result;
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d104      	bne.n	8003b5c <HAL_RCC_OscConfig+0xf7c>
 8003b52:	4b01      	ldr	r3, [pc, #4]	; (8003b58 <HAL_RCC_OscConfig+0xf78>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	e029      	b.n	8003bac <HAL_RCC_OscConfig+0xfcc>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x1078>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	fa92 f1a2 	rbit	r1, r2
 8003bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bd0:	6011      	str	r1, [r2, #0]
  return result;
 8003bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	fab2 f282 	clz	r2, r2
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f002 021f 	and.w	r2, r2, #31
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d180      	bne.n	8003afa <HAL_RCC_OscConfig+0xf1a>
 8003bf8:	e027      	b.n	8003c4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01e      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_OscConfig+0x1078>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d10b      	bne.n	8003c46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b09e      	sub	sp, #120	; 0x78
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e162      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b90      	ldr	r3, [pc, #576]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d910      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b8d      	ldr	r3, [pc, #564]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	498b      	ldr	r1, [pc, #556]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b89      	ldr	r3, [pc, #548]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e14a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	497f      	ldr	r1, [pc, #508]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80dc 	beq.w	8003e88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d13c      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xf6>
 8003cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xa6>
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	e00f      	b.n	8003d22 <HAL_RCC_ClockConfig+0xc6>
 8003d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d14:	663b      	str	r3, [r7, #96]	; 0x60
 8003d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1e:	4b67      	ldr	r3, [pc, #412]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d17b      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0f3      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d13c      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x178>
 8003d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x128>
 8003d7e:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	e00f      	b.n	8003da4 <HAL_RCC_ClockConfig+0x148>
 8003d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
 8003d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dac:	fa92 f2a2 	rbit	r2, r2
 8003db0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db4:	fab2 f282 	clz	r2, r2
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f042 0220 	orr.w	r2, r2, #32
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f002 021f 	and.w	r2, r2, #31
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d13a      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b2      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x1a0>
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	e00d      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1bc>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2202      	movs	r2, #2
 8003e1a:	61ba      	str	r2, [r7, #24]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	fa92 f2a2 	rbit	r2, r2
 8003e22:	617a      	str	r2, [r7, #20]
  return result;
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	fab2 f282 	clz	r2, r2
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	f042 0220 	orr.w	r2, r2, #32
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f002 021f 	and.w	r2, r2, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e079      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	491a      	ldr	r1, [pc, #104]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fe fb60 	bl	800251c <HAL_GetTick>
 8003e5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fe fb5c 	bl	800251c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e061      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_ClockConfig+0x260>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d214      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4906      	ldr	r1, [pc, #24]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e040      	b.n	8003f3a <HAL_RCC_ClockConfig+0x2de>
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_ClockConfig+0x2e8>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	491a      	ldr	r1, [pc, #104]	; (8003f44 <HAL_RCC_ClockConfig+0x2e8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <HAL_RCC_ClockConfig+0x2e8>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4912      	ldr	r1, [pc, #72]	; (8003f44 <HAL_RCC_ClockConfig+0x2e8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003efe:	f000 f829 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f02:	4601      	mov	r1, r0
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_ClockConfig+0x2e8>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0c:	22f0      	movs	r2, #240	; 0xf0
 8003f0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	60fa      	str	r2, [r7, #12]
  return result;
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	40d3      	lsrs	r3, r2
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x2ec>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	fa21 f303 	lsr.w	r3, r1, r3
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <HAL_RCC_ClockConfig+0x2f0>)
 8003f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCC_ClockConfig+0x2f4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe faae 	bl	8002494 <HAL_InitTick>
  
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3778      	adds	r7, #120	; 0x78
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800a234 	.word	0x0800a234
 8003f4c:	20000010 	.word	0x20000010
 8003f50:	20000014 	.word	0x20000014

08003f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b08b      	sub	sp, #44	; 0x2c
 8003f58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x30>
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x36>
 8003f82:	e03c      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f86:	623b      	str	r3, [r7, #32]
      break;
 8003f88:	e03c      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	fa92 f2a2 	rbit	r2, r2
 8003f9c:	607a      	str	r2, [r7, #4]
  return result;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	fab2 f282 	clz	r2, r2
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	40d3      	lsrs	r3, r2
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003faa:	5cd3      	ldrb	r3, [r2, r3]
 8003fac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	fa92 f2a2 	rbit	r2, r2
 8003fc0:	60fa      	str	r2, [r7, #12]
  return result;
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	fab2 f282 	clz	r2, r2
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	40d3      	lsrs	r3, r2
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
 8003fec:	e004      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	623b      	str	r3, [r7, #32]
      break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004000:	623b      	str	r3, [r7, #32]
      break;
 8004002:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004004:	6a3b      	ldr	r3, [r7, #32]
}
 8004006:	4618      	mov	r0, r3
 8004008:	372c      	adds	r7, #44	; 0x2c
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	007a1200 	.word	0x007a1200
 800401c:	0800a24c 	.word	0x0800a24c
 8004020:	0800a25c 	.word	0x0800a25c
 8004024:	003d0900 	.word	0x003d0900

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000010 	.word	0x20000010

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004046:	f7ff ffef 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 800404a:	4601      	mov	r1, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004054:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fa92 f2a2 	rbit	r2, r2
 8004060:	603a      	str	r2, [r7, #0]
  return result;
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	fab2 f282 	clz	r2, r2
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	40d3      	lsrs	r3, r2
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x40>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	0800a244 	.word	0x0800a244

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800408a:	f7ff ffcd 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 800408e:	4601      	mov	r1, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004098:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800409c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	fa92 f2a2 	rbit	r2, r2
 80040a4:	603a      	str	r2, [r7, #0]
  return result;
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	fab2 f282 	clz	r2, r2
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	40d3      	lsrs	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	0800a244 	.word	0x0800a244

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b092      	sub	sp, #72	; 0x48
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80d4 	beq.w	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ec:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10e      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4a4a      	ldr	r2, [pc, #296]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	61d3      	str	r3, [r2, #28]
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a41      	ldr	r2, [pc, #260]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fe f9f5 	bl	800251c <HAL_GetTick>
 8004132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe f9f1 	bl	800251c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e169      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8084 	beq.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004170:	429a      	cmp	r2, r3
 8004172:	d07c      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800417e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	461a      	mov	r2, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04b      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fe f9a1 	bl	800251c <HAL_GetTick>
 80041da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe f99d 	bl	800251c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e113      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041f4:	2302      	movs	r3, #2
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	2302      	movs	r3, #2
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	61fb      	str	r3, [r7, #28]
  return result;
 800420c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d108      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004222:	4b01      	ldr	r3, [pc, #4]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	e00d      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004228:	40021000 	.word	0x40021000
 800422c:	40007000 	.word	0x40007000
 8004230:	10908100 	.word	0x10908100
 8004234:	2302      	movs	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	4b78      	ldr	r3, [pc, #480]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2202      	movs	r2, #2
 8004246:	613a      	str	r2, [r7, #16]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	fa92 f2a2 	rbit	r2, r2
 800424e:	60fa      	str	r2, [r7, #12]
  return result;
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fab2 f282 	clz	r2, r2
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f002 021f 	and.w	r2, r2, #31
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0b7      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	496a      	ldr	r1, [pc, #424]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004288:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a0:	4b60      	ldr	r3, [pc, #384]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f023 0203 	bic.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	495d      	ldr	r1, [pc, #372]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042be:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	4956      	ldr	r1, [pc, #344]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042dc:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	494e      	ldr	r1, [pc, #312]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f023 0210 	bic.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4947      	ldr	r1, [pc, #284]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	493f      	ldr	r1, [pc, #252]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f023 0220 	bic.w	r2, r3, #32
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4938      	ldr	r1, [pc, #224]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	4930      	ldr	r1, [pc, #192]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004372:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	4929      	ldr	r1, [pc, #164]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004390:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4921      	ldr	r1, [pc, #132]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	491a      	ldr	r1, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	4912      	ldr	r1, [pc, #72]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	490b      	ldr	r1, [pc, #44]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3748      	adds	r7, #72	; 0x48
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e049      	b.n	80044ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fdca 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 f986 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d122      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d11b      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0202 	mvn.w	r2, #2
 8004502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f90f 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 800451e:	e005      	b.n	800452c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f901 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f912 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d122      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d11b      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0204 	mvn.w	r2, #4
 8004556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8e5 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 8004572:	e005      	b.n	8004580 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8d7 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8e8 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d122      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11b      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0208 	mvn.w	r2, #8
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8bb 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 80045c6:	e005      	b.n	80045d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8ad 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8be 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d122      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d11b      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0210 	mvn.w	r2, #16
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2208      	movs	r2, #8
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f891 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f883 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f894 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0201 	mvn.w	r2, #1
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f85d 	bl	8004714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f913 	bl	80048ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f906 	bl	80048c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f842 	bl	8004764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0220 	mvn.w	r2, #32
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8c6 	bl	8004898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3c      	ldr	r2, [pc, #240]	; (800487c <TIM_Base_SetConfig+0x104>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00f      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d00b      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a39      	ldr	r2, [pc, #228]	; (8004880 <TIM_Base_SetConfig+0x108>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a38      	ldr	r2, [pc, #224]	; (8004884 <TIM_Base_SetConfig+0x10c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <TIM_Base_SetConfig+0x110>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2d      	ldr	r2, [pc, #180]	; (800487c <TIM_Base_SetConfig+0x104>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01b      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d017      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <TIM_Base_SetConfig+0x108>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a29      	ldr	r2, [pc, #164]	; (8004884 <TIM_Base_SetConfig+0x10c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00f      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a28      	ldr	r2, [pc, #160]	; (8004888 <TIM_Base_SetConfig+0x110>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <TIM_Base_SetConfig+0x114>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_Base_SetConfig+0x118>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_Base_SetConfig+0x11c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <TIM_Base_SetConfig+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <TIM_Base_SetConfig+0xe8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <TIM_Base_SetConfig+0x110>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0xe8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <TIM_Base_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0xe8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <TIM_Base_SetConfig+0x118>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0xe8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <TIM_Base_SetConfig+0x11c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40013400 	.word	0x40013400
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e040      	b.n	8004968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fb9c 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fc00 	bl	8005118 <UART_SetConfig>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e022      	b.n	8004968 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fdc8 	bl	80054c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fe4f 	bl	8005604 <UART_CheckIdleState>
 8004966:	4603      	mov	r3, r0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004984:	2b20      	cmp	r3, #32
 8004986:	d178      	bne.n	8004a7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_UART_Transmit+0x24>
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e071      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	; 0x21
 80049a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a6:	f7fd fdb9 	bl	800251c <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d108      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e003      	b.n	80049e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049e0:	e030      	b.n	8004a44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 feb1 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e03c      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a14:	b292      	uxth	r2, r2
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e008      	b.n	8004a32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1c8      	bne.n	80049e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2140      	movs	r1, #64	; 0x40
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fe7a 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e005      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d132      	bne.n	8004b02 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Receive_IT+0x24>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e02b      	b.n	8004b04 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d018      	beq.n	8004af2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	69f9      	ldr	r1, [r7, #28]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e6      	bne.n	8004ac0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fe93 	bl	8005824 <UART_Start_Receive_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	e000      	b.n	8004b04 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b0ba      	sub	sp, #232	; 0xe8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d115      	bne.n	8004b74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00f      	beq.n	8004b74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 82ab 	beq.w	80050c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
      }
      return;
 8004b72:	e2a5      	b.n	80050c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8117 	beq.w	8004dac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b8e:	4b85      	ldr	r3, [pc, #532]	; (8004da4 <HAL_UART_IRQHandler+0x298>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 810a 	beq.w	8004dac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d011      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xbc>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	f043 0201 	orr.w	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xec>
 8004bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2202      	movs	r2, #2
 8004be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bee:	f043 0204 	orr.w	r2, r3, #4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0x11c>
 8004c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2204      	movs	r2, #4
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1e:	f043 0202 	orr.w	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5a:	f043 0208 	orr.w	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <HAL_UART_IRQHandler+0x18a>
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00c      	beq.n	8004c96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8211 	beq.w	80050c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04f      	beq.n	8004d8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fe4c 	bl	800598c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d141      	bne.n	8004d86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1d9      	bne.n	8004d02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <HAL_UART_IRQHandler+0x29c>)
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd fd54 	bl	8002810 <HAL_DMA_Abort_IT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e00f      	b.n	8004d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9b4 	bl	80050ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e00b      	b.n	8004d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9b0 	bl	80050ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e007      	b.n	8004d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f9ac 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d9c:	e192      	b.n	80050c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	bf00      	nop
    return;
 8004da0:	e190      	b.n	80050c4 <HAL_UART_IRQHandler+0x5b8>
 8004da2:	bf00      	nop
 8004da4:	04000120 	.word	0x04000120
 8004da8:	08005a55 	.word	0x08005a55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f040 814b 	bne.w	800504c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8144 	beq.w	800504c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 813d 	beq.w	800504c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	f040 80b5 	bne.w	8004f54 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004df6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8164 	beq.w	80050c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	f080 815c 	bcs.w	80050c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	f000 8086 	beq.w	8004f32 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1da      	bne.n	8004e26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e1      	bne.n	8004e70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ed0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ed6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e3      	bne.n	8004eac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f02:	f023 0310 	bic.w	r3, r3, #16
 8004f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e4      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fd fc36 	bl	800279e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8d7 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f52:	e0b9      	b.n	80050c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80ab 	beq.w	80050cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a6 	beq.w	80050cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e4      	bne.n	8004f80 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fda:	633a      	str	r2, [r7, #48]	; 0x30
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e3      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0310 	bic.w	r3, r3, #16
 8005016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	69b9      	ldr	r1, [r7, #24]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	617b      	str	r3, [r7, #20]
   return(result);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e4      	bne.n	8005002 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800503e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f85b 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800504a:	e03f      	b.n	80050cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <HAL_UART_IRQHandler+0x56a>
 8005058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800505c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800506c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fed8 	bl	8005e24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005074:	e02d      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01c      	beq.n	80050d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
    }
    return;
 800509e:	e017      	b.n	80050d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fce1 	bl	8005a80 <UART_EndTransmit_IT>
    return;
 80050be:	e008      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80050c0:	bf00      	nop
 80050c2:	e006      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80050d0:	bf00      	nop
  }

}
 80050d2:	37e8      	adds	r7, #232	; 0xe8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005146:	f023 030c 	bic.w	r3, r3, #12
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6979      	ldr	r1, [r7, #20]
 8005150:	430b      	orrs	r3, r1
 8005152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4aa7      	ldr	r2, [pc, #668]	; (8005430 <UART_SetConfig+0x318>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d120      	bne.n	80051da <UART_SetConfig+0xc2>
 8005198:	4ba6      	ldr	r3, [pc, #664]	; (8005434 <UART_SetConfig+0x31c>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d817      	bhi.n	80051d4 <UART_SetConfig+0xbc>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x94>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051cf 	.word	0x080051cf
 80051b8:	080051c3 	.word	0x080051c3
 80051bc:	2301      	movs	r3, #1
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e0b5      	b.n	800532e <UART_SetConfig+0x216>
 80051c2:	2302      	movs	r3, #2
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e0b2      	b.n	800532e <UART_SetConfig+0x216>
 80051c8:	2304      	movs	r3, #4
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e0af      	b.n	800532e <UART_SetConfig+0x216>
 80051ce:	2308      	movs	r3, #8
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e0ac      	b.n	800532e <UART_SetConfig+0x216>
 80051d4:	2310      	movs	r3, #16
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e0a9      	b.n	800532e <UART_SetConfig+0x216>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a96      	ldr	r2, [pc, #600]	; (8005438 <UART_SetConfig+0x320>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d124      	bne.n	800522e <UART_SetConfig+0x116>
 80051e4:	4b93      	ldr	r3, [pc, #588]	; (8005434 <UART_SetConfig+0x31c>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051f0:	d011      	beq.n	8005216 <UART_SetConfig+0xfe>
 80051f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051f6:	d817      	bhi.n	8005228 <UART_SetConfig+0x110>
 80051f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fc:	d011      	beq.n	8005222 <UART_SetConfig+0x10a>
 80051fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005202:	d811      	bhi.n	8005228 <UART_SetConfig+0x110>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <UART_SetConfig+0xf8>
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d006      	beq.n	800521c <UART_SetConfig+0x104>
 800520e:	e00b      	b.n	8005228 <UART_SetConfig+0x110>
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e08b      	b.n	800532e <UART_SetConfig+0x216>
 8005216:	2302      	movs	r3, #2
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e088      	b.n	800532e <UART_SetConfig+0x216>
 800521c:	2304      	movs	r3, #4
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e085      	b.n	800532e <UART_SetConfig+0x216>
 8005222:	2308      	movs	r3, #8
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e082      	b.n	800532e <UART_SetConfig+0x216>
 8005228:	2310      	movs	r3, #16
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e07f      	b.n	800532e <UART_SetConfig+0x216>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a82      	ldr	r2, [pc, #520]	; (800543c <UART_SetConfig+0x324>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d124      	bne.n	8005282 <UART_SetConfig+0x16a>
 8005238:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <UART_SetConfig+0x31c>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005240:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005244:	d011      	beq.n	800526a <UART_SetConfig+0x152>
 8005246:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800524a:	d817      	bhi.n	800527c <UART_SetConfig+0x164>
 800524c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005250:	d011      	beq.n	8005276 <UART_SetConfig+0x15e>
 8005252:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005256:	d811      	bhi.n	800527c <UART_SetConfig+0x164>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <UART_SetConfig+0x14c>
 800525c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005260:	d006      	beq.n	8005270 <UART_SetConfig+0x158>
 8005262:	e00b      	b.n	800527c <UART_SetConfig+0x164>
 8005264:	2300      	movs	r3, #0
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e061      	b.n	800532e <UART_SetConfig+0x216>
 800526a:	2302      	movs	r3, #2
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e05e      	b.n	800532e <UART_SetConfig+0x216>
 8005270:	2304      	movs	r3, #4
 8005272:	77fb      	strb	r3, [r7, #31]
 8005274:	e05b      	b.n	800532e <UART_SetConfig+0x216>
 8005276:	2308      	movs	r3, #8
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e058      	b.n	800532e <UART_SetConfig+0x216>
 800527c:	2310      	movs	r3, #16
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e055      	b.n	800532e <UART_SetConfig+0x216>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <UART_SetConfig+0x328>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d124      	bne.n	80052d6 <UART_SetConfig+0x1be>
 800528c:	4b69      	ldr	r3, [pc, #420]	; (8005434 <UART_SetConfig+0x31c>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005298:	d011      	beq.n	80052be <UART_SetConfig+0x1a6>
 800529a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800529e:	d817      	bhi.n	80052d0 <UART_SetConfig+0x1b8>
 80052a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a4:	d011      	beq.n	80052ca <UART_SetConfig+0x1b2>
 80052a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052aa:	d811      	bhi.n	80052d0 <UART_SetConfig+0x1b8>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <UART_SetConfig+0x1a0>
 80052b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b4:	d006      	beq.n	80052c4 <UART_SetConfig+0x1ac>
 80052b6:	e00b      	b.n	80052d0 <UART_SetConfig+0x1b8>
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e037      	b.n	800532e <UART_SetConfig+0x216>
 80052be:	2302      	movs	r3, #2
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e034      	b.n	800532e <UART_SetConfig+0x216>
 80052c4:	2304      	movs	r3, #4
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e031      	b.n	800532e <UART_SetConfig+0x216>
 80052ca:	2308      	movs	r3, #8
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e02e      	b.n	800532e <UART_SetConfig+0x216>
 80052d0:	2310      	movs	r3, #16
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e02b      	b.n	800532e <UART_SetConfig+0x216>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5a      	ldr	r2, [pc, #360]	; (8005444 <UART_SetConfig+0x32c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d124      	bne.n	800532a <UART_SetConfig+0x212>
 80052e0:	4b54      	ldr	r3, [pc, #336]	; (8005434 <UART_SetConfig+0x31c>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80052e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052ec:	d011      	beq.n	8005312 <UART_SetConfig+0x1fa>
 80052ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052f2:	d817      	bhi.n	8005324 <UART_SetConfig+0x20c>
 80052f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f8:	d011      	beq.n	800531e <UART_SetConfig+0x206>
 80052fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052fe:	d811      	bhi.n	8005324 <UART_SetConfig+0x20c>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <UART_SetConfig+0x1f4>
 8005304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005308:	d006      	beq.n	8005318 <UART_SetConfig+0x200>
 800530a:	e00b      	b.n	8005324 <UART_SetConfig+0x20c>
 800530c:	2300      	movs	r3, #0
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0x216>
 8005312:	2302      	movs	r3, #2
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e00a      	b.n	800532e <UART_SetConfig+0x216>
 8005318:	2304      	movs	r3, #4
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e007      	b.n	800532e <UART_SetConfig+0x216>
 800531e:	2308      	movs	r3, #8
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e004      	b.n	800532e <UART_SetConfig+0x216>
 8005324:	2310      	movs	r3, #16
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e001      	b.n	800532e <UART_SetConfig+0x216>
 800532a:	2310      	movs	r3, #16
 800532c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005336:	d15b      	bne.n	80053f0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d827      	bhi.n	800538e <UART_SetConfig+0x276>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x22c>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fe fe6a 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 800536c:	61b8      	str	r0, [r7, #24]
        break;
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe fe88 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8005374:	61b8      	str	r0, [r7, #24]
        break;
 8005376:	e00f      	b.n	8005398 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <UART_SetConfig+0x330>)
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e00c      	b.n	8005398 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fe fde9 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8005382:	61b8      	str	r0, [r7, #24]
        break;
 8005384:	e008      	b.n	8005398 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	61bb      	str	r3, [r7, #24]
        break;
 800538c:	e004      	b.n	8005398 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	77bb      	strb	r3, [r7, #30]
        break;
 8005396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8082 	beq.w	80054a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	005a      	lsls	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d916      	bls.n	80053ea <UART_SetConfig+0x2d2>
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d212      	bcs.n	80053ea <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f023 030f 	bic.w	r3, r3, #15
 80053cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	b29a      	uxth	r2, r3
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	4313      	orrs	r3, r2
 80053de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	89fa      	ldrh	r2, [r7, #14]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e05c      	b.n	80054a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	77bb      	strb	r3, [r7, #30]
 80053ee:	e059      	b.n	80054a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d835      	bhi.n	8005462 <UART_SetConfig+0x34a>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x2e4>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	0800544d 	.word	0x0800544d
 8005408:	08005463 	.word	0x08005463
 800540c:	08005453 	.word	0x08005453
 8005410:	08005463 	.word	0x08005463
 8005414:	08005463 	.word	0x08005463
 8005418:	08005463 	.word	0x08005463
 800541c:	0800545b 	.word	0x0800545b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe fe0e 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8005424:	61b8      	str	r0, [r7, #24]
        break;
 8005426:	e021      	b.n	800546c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fe2c 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 800542c:	61b8      	str	r0, [r7, #24]
        break;
 800542e:	e01d      	b.n	800546c <UART_SetConfig+0x354>
 8005430:	40013800 	.word	0x40013800
 8005434:	40021000 	.word	0x40021000
 8005438:	40004400 	.word	0x40004400
 800543c:	40004800 	.word	0x40004800
 8005440:	40004c00 	.word	0x40004c00
 8005444:	40005000 	.word	0x40005000
 8005448:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <UART_SetConfig+0x3a4>)
 800544e:	61bb      	str	r3, [r7, #24]
        break;
 8005450:	e00c      	b.n	800546c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005452:	f7fe fd7f 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8005456:	61b8      	str	r0, [r7, #24]
        break;
 8005458:	e008      	b.n	800546c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545e:	61bb      	str	r3, [r7, #24]
        break;
 8005460:	e004      	b.n	800546c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	77bb      	strb	r3, [r7, #30]
        break;
 800546a:	bf00      	nop
    }

    if (pclk != 0U)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	085a      	lsrs	r2, r3, #1
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	441a      	add	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b0f      	cmp	r3, #15
 800548a:	d909      	bls.n	80054a0 <UART_SetConfig+0x388>
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d205      	bcs.n	80054a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e001      	b.n	80054a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	007a1200 	.word	0x007a1200

080054c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055be:	d10a      	bne.n	80055d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b098      	sub	sp, #96	; 0x60
 8005608:	af02      	add	r7, sp, #8
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005614:	f7fc ff82 	bl	800251c <HAL_GetTick>
 8005618:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b08      	cmp	r3, #8
 8005626:	d12e      	bne.n	8005686 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f88c 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d021      	beq.n	8005686 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e6      	bne.n	8005642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e062      	b.n	800574c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d149      	bne.n	8005728 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f856 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d03c      	beq.n	8005728 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	623b      	str	r3, [r7, #32]
   return(result);
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
 80056ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005700:	61fa      	str	r2, [r7, #28]
 8005702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	69b9      	ldr	r1, [r7, #24]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	617b      	str	r3, [r7, #20]
   return(result);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e011      	b.n	800574c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3758      	adds	r7, #88	; 0x58
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005764:	e049      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d045      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fc fed5 	bl	800251c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <UART_WaitOnFlagUntilTimeout+0x30>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e048      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d031      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d110      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2208      	movs	r2, #8
 80057aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f8ed 	bl	800598c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2208      	movs	r2, #8
 80057b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e029      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d111      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f8d3 	bl	800598c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d0a6      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005824:	b480      	push	{r7}
 8005826:	b097      	sub	sp, #92	; 0x5c
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	d10e      	bne.n	8005876 <UART_Start_Receive_IT+0x52>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <UART_Start_Receive_IT+0x48>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800586a:	e01a      	b.n	80058a2 <UART_Start_Receive_IT+0x7e>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005874:	e015      	b.n	80058a2 <UART_Start_Receive_IT+0x7e>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <UART_Start_Receive_IT+0x76>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <UART_Start_Receive_IT+0x6c>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800588e:	e008      	b.n	80058a2 <UART_Start_Receive_IT+0x7e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	227f      	movs	r2, #127	; 0x7f
 8005894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005898:	e003      	b.n	80058a2 <UART_Start_Receive_IT+0x7e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2222      	movs	r2, #34	; 0x22
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	657b      	str	r3, [r7, #84]	; 0x54
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80058d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ee:	d107      	bne.n	8005900 <UART_Start_Receive_IT+0xdc>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <UART_Start_Receive_IT+0x160>)
 80058fc:	669a      	str	r2, [r3, #104]	; 0x68
 80058fe:	e002      	b.n	8005906 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <UART_Start_Receive_IT+0x164>)
 8005904:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d019      	beq.n	8005942 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_Start_Receive_IT+0xea>
 8005940:	e018      	b.n	8005974 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	613b      	str	r3, [r7, #16]
   return(result);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f043 0320 	orr.w	r3, r3, #32
 8005956:	653b      	str	r3, [r7, #80]	; 0x50
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	61bb      	str	r3, [r7, #24]
   return(result);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	375c      	adds	r7, #92	; 0x5c
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	08005c7d 	.word	0x08005c7d
 8005988:	08005ad5 	.word	0x08005ad5

0800598c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b095      	sub	sp, #84	; 0x54
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	643b      	str	r3, [r7, #64]	; 0x40
 80059b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e6      	bne.n	8005994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d118      	bne.n	8005a34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6979      	ldr	r1, [r7, #20]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a48:	bf00      	nop
 8005a4a:	3754      	adds	r7, #84	; 0x54
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fb3a 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fb06 	bl	80050d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005acc:	bf00      	nop
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b09c      	sub	sp, #112	; 0x70
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aec:	2b22      	cmp	r3, #34	; 0x22
 8005aee:	f040 80b9 	bne.w	8005c64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005af8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005afc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b00:	b2d9      	uxtb	r1, r3
 8005b02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 809c 	bne.w	8005c74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	667b      	str	r3, [r7, #100]	; 0x64
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b8e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d018      	beq.n	8005bf6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
 8005be4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d12e      	bne.n	8005c5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	69b9      	ldr	r1, [r7, #24]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d103      	bne.n	8005c4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2210      	movs	r2, #16
 8005c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fa53 	bl	8005100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c5a:	e00b      	b.n	8005c74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fdd3 	bl	8001808 <HAL_UART_RxCpltCallback>
}
 8005c62:	e007      	b.n	8005c74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	619a      	str	r2, [r3, #24]
}
 8005c74:	bf00      	nop
 8005c76:	3770      	adds	r7, #112	; 0x70
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b09c      	sub	sp, #112	; 0x70
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c94:	2b22      	cmp	r3, #34	; 0x22
 8005c96:	f040 80b9 	bne.w	8005e0c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ca0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005caa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005cae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 809c 	bne.w	8005e1c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d02:	657b      	str	r3, [r7, #84]	; 0x54
 8005d04:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e6      	bne.n	8005ce4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d36:	643a      	str	r2, [r7, #64]	; 0x40
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d018      	beq.n	8005d9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d12e      	bne.n	8005e04 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d103      	bne.n	8005df4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2210      	movs	r2, #16
 8005df2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff f97f 	bl	8005100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e02:	e00b      	b.n	8005e1c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fb fcff 	bl	8001808 <HAL_UART_RxCpltCallback>
}
 8005e0a:	e007      	b.n	8005e1c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	619a      	str	r2, [r3, #24]
}
 8005e1c:	bf00      	nop
 8005e1e:	3770      	adds	r7, #112	; 0x70
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <atof>:
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f000 bec7 	b.w	8006bcc <strtod>
	...

08005e40 <gcvt>:
 8005e40:	b530      	push	{r4, r5, lr}
 8005e42:	2200      	movs	r2, #0
 8005e44:	b085      	sub	sp, #20
 8005e46:	460c      	mov	r4, r1
 8005e48:	4605      	mov	r5, r0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	ec51 0b10 	vmov	r0, r1, d0
 8005e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e54:	f7fa fe42 	bl	8000adc <__aeabi_dcmplt>
 8005e58:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	b118      	cbz	r0, 8005e68 <gcvt+0x28>
 8005e60:	232d      	movs	r3, #45	; 0x2d
 8005e62:	f802 3b01 	strb.w	r3, [r2], #1
 8005e66:	3d01      	subs	r5, #1
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4806      	ldr	r0, [pc, #24]	; (8005e84 <gcvt+0x44>)
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4629      	mov	r1, r5
 8005e70:	2367      	movs	r3, #103	; 0x67
 8005e72:	6800      	ldr	r0, [r0, #0]
 8005e74:	f000 ff30 	bl	8006cd8 <_gcvt>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	4620      	movne	r0, r4
 8005e7e:	2000      	moveq	r0, #0
 8005e80:	b005      	add	sp, #20
 8005e82:	bd30      	pop	{r4, r5, pc}
 8005e84:	2000001c 	.word	0x2000001c

08005e88 <__errno>:
 8005e88:	4b01      	ldr	r3, [pc, #4]	; (8005e90 <__errno+0x8>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	2000001c 	.word	0x2000001c

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	4d0d      	ldr	r5, [pc, #52]	; (8005ecc <__libc_init_array+0x38>)
 8005e98:	4c0d      	ldr	r4, [pc, #52]	; (8005ed0 <__libc_init_array+0x3c>)
 8005e9a:	1b64      	subs	r4, r4, r5
 8005e9c:	10a4      	asrs	r4, r4, #2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	42a6      	cmp	r6, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	4d0b      	ldr	r5, [pc, #44]	; (8005ed4 <__libc_init_array+0x40>)
 8005ea6:	4c0c      	ldr	r4, [pc, #48]	; (8005ed8 <__libc_init_array+0x44>)
 8005ea8:	f004 f8fe 	bl	800a0a8 <_init>
 8005eac:	1b64      	subs	r4, r4, r5
 8005eae:	10a4      	asrs	r4, r4, #2
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	42a6      	cmp	r6, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebc:	4798      	blx	r3
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec6:	4798      	blx	r3
 8005ec8:	3601      	adds	r6, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	0800a700 	.word	0x0800a700
 8005ed0:	0800a700 	.word	0x0800a700
 8005ed4:	0800a700 	.word	0x0800a700
 8005ed8:	0800a704 	.word	0x0800a704

08005edc <memcpy>:
 8005edc:	440a      	add	r2, r1
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee4:	d100      	bne.n	8005ee8 <memcpy+0xc>
 8005ee6:	4770      	bx	lr
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ef2:	4291      	cmp	r1, r2
 8005ef4:	d1f9      	bne.n	8005eea <memcpy+0xe>
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <memset>:
 8005ef8:	4402      	add	r2, r0
 8005efa:	4603      	mov	r3, r0
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <memset+0xa>
 8005f00:	4770      	bx	lr
 8005f02:	f803 1b01 	strb.w	r1, [r3], #1
 8005f06:	e7f9      	b.n	8005efc <memset+0x4>

08005f08 <siprintf>:
 8005f08:	b40e      	push	{r1, r2, r3}
 8005f0a:	b500      	push	{lr}
 8005f0c:	b09c      	sub	sp, #112	; 0x70
 8005f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f10:	9002      	str	r0, [sp, #8]
 8005f12:	9006      	str	r0, [sp, #24]
 8005f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <siprintf+0x38>)
 8005f1a:	9107      	str	r1, [sp, #28]
 8005f1c:	9104      	str	r1, [sp, #16]
 8005f1e:	4909      	ldr	r1, [pc, #36]	; (8005f44 <siprintf+0x3c>)
 8005f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f24:	9105      	str	r1, [sp, #20]
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	a902      	add	r1, sp, #8
 8005f2c:	f002 f92a 	bl	8008184 <_svfiprintf_r>
 8005f30:	9b02      	ldr	r3, [sp, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	b01c      	add	sp, #112	; 0x70
 8005f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f3c:	b003      	add	sp, #12
 8005f3e:	4770      	bx	lr
 8005f40:	2000001c 	.word	0x2000001c
 8005f44:	ffff0208 	.word	0xffff0208

08005f48 <strchr>:
 8005f48:	b2c9      	uxtb	r1, r1
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f50:	b11a      	cbz	r2, 8005f5a <strchr+0x12>
 8005f52:	428a      	cmp	r2, r1
 8005f54:	d1f9      	bne.n	8005f4a <strchr+0x2>
 8005f56:	4618      	mov	r0, r3
 8005f58:	4770      	bx	lr
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	bf18      	it	ne
 8005f5e:	2300      	movne	r3, #0
 8005f60:	e7f9      	b.n	8005f56 <strchr+0xe>

08005f62 <strncpy>:
 8005f62:	b510      	push	{r4, lr}
 8005f64:	3901      	subs	r1, #1
 8005f66:	4603      	mov	r3, r0
 8005f68:	b132      	cbz	r2, 8005f78 <strncpy+0x16>
 8005f6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f6e:	f803 4b01 	strb.w	r4, [r3], #1
 8005f72:	3a01      	subs	r2, #1
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	d1f7      	bne.n	8005f68 <strncpy+0x6>
 8005f78:	441a      	add	r2, r3
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <strncpy+0x20>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	f803 1b01 	strb.w	r1, [r3], #1
 8005f86:	e7f9      	b.n	8005f7c <strncpy+0x1a>

08005f88 <sulp>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	ec45 4b10 	vmov	d0, r4, r5
 8005f92:	4616      	mov	r6, r2
 8005f94:	f001 fe54 	bl	8007c40 <__ulp>
 8005f98:	ec51 0b10 	vmov	r0, r1, d0
 8005f9c:	b17e      	cbz	r6, 8005fbe <sulp+0x36>
 8005f9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dd09      	ble.n	8005fbe <sulp+0x36>
 8005faa:	051b      	lsls	r3, r3, #20
 8005fac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005fb0:	2400      	movs	r4, #0
 8005fb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	462b      	mov	r3, r5
 8005fba:	f7fa fb1d 	bl	80005f8 <__aeabi_dmul>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}

08005fc0 <_strtod_l>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	ed2d 8b02 	vpush	{d8}
 8005fc8:	b09d      	sub	sp, #116	; 0x74
 8005fca:	461f      	mov	r7, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9318      	str	r3, [sp, #96]	; 0x60
 8005fd0:	4ba2      	ldr	r3, [pc, #648]	; (800625c <_strtod_l+0x29c>)
 8005fd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	4688      	mov	r8, r1
 8005fde:	f7fa f8f7 	bl	80001d0 <strlen>
 8005fe2:	f04f 0a00 	mov.w	sl, #0
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	f04f 0b00 	mov.w	fp, #0
 8005fec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	2a2b      	cmp	r2, #43	; 0x2b
 8005ff6:	d04e      	beq.n	8006096 <_strtod_l+0xd6>
 8005ff8:	d83b      	bhi.n	8006072 <_strtod_l+0xb2>
 8005ffa:	2a0d      	cmp	r2, #13
 8005ffc:	d834      	bhi.n	8006068 <_strtod_l+0xa8>
 8005ffe:	2a08      	cmp	r2, #8
 8006000:	d834      	bhi.n	800606c <_strtod_l+0xac>
 8006002:	2a00      	cmp	r2, #0
 8006004:	d03e      	beq.n	8006084 <_strtod_l+0xc4>
 8006006:	2300      	movs	r3, #0
 8006008:	930a      	str	r3, [sp, #40]	; 0x28
 800600a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800600c:	7833      	ldrb	r3, [r6, #0]
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	f040 80b0 	bne.w	8006174 <_strtod_l+0x1b4>
 8006014:	7873      	ldrb	r3, [r6, #1]
 8006016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800601a:	2b58      	cmp	r3, #88	; 0x58
 800601c:	d168      	bne.n	80060f0 <_strtod_l+0x130>
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	ab18      	add	r3, sp, #96	; 0x60
 8006024:	9702      	str	r7, [sp, #8]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4a8d      	ldr	r2, [pc, #564]	; (8006260 <_strtod_l+0x2a0>)
 800602a:	ab19      	add	r3, sp, #100	; 0x64
 800602c:	a917      	add	r1, sp, #92	; 0x5c
 800602e:	4620      	mov	r0, r4
 8006030:	f000 ff7a 	bl	8006f28 <__gethex>
 8006034:	f010 0707 	ands.w	r7, r0, #7
 8006038:	4605      	mov	r5, r0
 800603a:	d005      	beq.n	8006048 <_strtod_l+0x88>
 800603c:	2f06      	cmp	r7, #6
 800603e:	d12c      	bne.n	800609a <_strtod_l+0xda>
 8006040:	3601      	adds	r6, #1
 8006042:	2300      	movs	r3, #0
 8006044:	9617      	str	r6, [sp, #92]	; 0x5c
 8006046:	930a      	str	r3, [sp, #40]	; 0x28
 8006048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 8590 	bne.w	8006b70 <_strtod_l+0xbb0>
 8006050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006052:	b1eb      	cbz	r3, 8006090 <_strtod_l+0xd0>
 8006054:	4652      	mov	r2, sl
 8006056:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800605a:	ec43 2b10 	vmov	d0, r2, r3
 800605e:	b01d      	add	sp, #116	; 0x74
 8006060:	ecbd 8b02 	vpop	{d8}
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	2a20      	cmp	r2, #32
 800606a:	d1cc      	bne.n	8006006 <_strtod_l+0x46>
 800606c:	3301      	adds	r3, #1
 800606e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006070:	e7be      	b.n	8005ff0 <_strtod_l+0x30>
 8006072:	2a2d      	cmp	r2, #45	; 0x2d
 8006074:	d1c7      	bne.n	8006006 <_strtod_l+0x46>
 8006076:	2201      	movs	r2, #1
 8006078:	920a      	str	r2, [sp, #40]	; 0x28
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	9217      	str	r2, [sp, #92]	; 0x5c
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1c2      	bne.n	800600a <_strtod_l+0x4a>
 8006084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006086:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 856e 	bne.w	8006b6c <_strtod_l+0xbac>
 8006090:	4652      	mov	r2, sl
 8006092:	465b      	mov	r3, fp
 8006094:	e7e1      	b.n	800605a <_strtod_l+0x9a>
 8006096:	2200      	movs	r2, #0
 8006098:	e7ee      	b.n	8006078 <_strtod_l+0xb8>
 800609a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800609c:	b13a      	cbz	r2, 80060ae <_strtod_l+0xee>
 800609e:	2135      	movs	r1, #53	; 0x35
 80060a0:	a81a      	add	r0, sp, #104	; 0x68
 80060a2:	f001 fef7 	bl	8007e94 <__copybits>
 80060a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060a8:	4620      	mov	r0, r4
 80060aa:	f001 fa97 	bl	80075dc <_Bfree>
 80060ae:	3f01      	subs	r7, #1
 80060b0:	2f04      	cmp	r7, #4
 80060b2:	d806      	bhi.n	80060c2 <_strtod_l+0x102>
 80060b4:	e8df f007 	tbb	[pc, r7]
 80060b8:	1714030a 	.word	0x1714030a
 80060bc:	0a          	.byte	0x0a
 80060bd:	00          	.byte	0x00
 80060be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80060c2:	0728      	lsls	r0, r5, #28
 80060c4:	d5c0      	bpl.n	8006048 <_strtod_l+0x88>
 80060c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80060ca:	e7bd      	b.n	8006048 <_strtod_l+0x88>
 80060cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80060d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80060de:	e7f0      	b.n	80060c2 <_strtod_l+0x102>
 80060e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006264 <_strtod_l+0x2a4>
 80060e4:	e7ed      	b.n	80060c2 <_strtod_l+0x102>
 80060e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80060ea:	f04f 3aff 	mov.w	sl, #4294967295
 80060ee:	e7e8      	b.n	80060c2 <_strtod_l+0x102>
 80060f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b30      	cmp	r3, #48	; 0x30
 80060fa:	d0f9      	beq.n	80060f0 <_strtod_l+0x130>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0a3      	beq.n	8006048 <_strtod_l+0x88>
 8006100:	2301      	movs	r3, #1
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	9304      	str	r3, [sp, #16]
 8006108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800610a:	9308      	str	r3, [sp, #32]
 800610c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006110:	464f      	mov	r7, r9
 8006112:	220a      	movs	r2, #10
 8006114:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006116:	7806      	ldrb	r6, [r0, #0]
 8006118:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800611c:	b2d9      	uxtb	r1, r3
 800611e:	2909      	cmp	r1, #9
 8006120:	d92a      	bls.n	8006178 <_strtod_l+0x1b8>
 8006122:	9905      	ldr	r1, [sp, #20]
 8006124:	462a      	mov	r2, r5
 8006126:	f002 fae3 	bl	80086f0 <strncmp>
 800612a:	b398      	cbz	r0, 8006194 <_strtod_l+0x1d4>
 800612c:	2000      	movs	r0, #0
 800612e:	4632      	mov	r2, r6
 8006130:	463d      	mov	r5, r7
 8006132:	9005      	str	r0, [sp, #20]
 8006134:	4603      	mov	r3, r0
 8006136:	2a65      	cmp	r2, #101	; 0x65
 8006138:	d001      	beq.n	800613e <_strtod_l+0x17e>
 800613a:	2a45      	cmp	r2, #69	; 0x45
 800613c:	d118      	bne.n	8006170 <_strtod_l+0x1b0>
 800613e:	b91d      	cbnz	r5, 8006148 <_strtod_l+0x188>
 8006140:	9a04      	ldr	r2, [sp, #16]
 8006142:	4302      	orrs	r2, r0
 8006144:	d09e      	beq.n	8006084 <_strtod_l+0xc4>
 8006146:	2500      	movs	r5, #0
 8006148:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800614c:	f108 0201 	add.w	r2, r8, #1
 8006150:	9217      	str	r2, [sp, #92]	; 0x5c
 8006152:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006156:	2a2b      	cmp	r2, #43	; 0x2b
 8006158:	d075      	beq.n	8006246 <_strtod_l+0x286>
 800615a:	2a2d      	cmp	r2, #45	; 0x2d
 800615c:	d07b      	beq.n	8006256 <_strtod_l+0x296>
 800615e:	f04f 0c00 	mov.w	ip, #0
 8006162:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006166:	2909      	cmp	r1, #9
 8006168:	f240 8082 	bls.w	8006270 <_strtod_l+0x2b0>
 800616c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006170:	2600      	movs	r6, #0
 8006172:	e09d      	b.n	80062b0 <_strtod_l+0x2f0>
 8006174:	2300      	movs	r3, #0
 8006176:	e7c4      	b.n	8006102 <_strtod_l+0x142>
 8006178:	2f08      	cmp	r7, #8
 800617a:	bfd8      	it	le
 800617c:	9907      	ldrle	r1, [sp, #28]
 800617e:	f100 0001 	add.w	r0, r0, #1
 8006182:	bfda      	itte	le
 8006184:	fb02 3301 	mlale	r3, r2, r1, r3
 8006188:	9307      	strle	r3, [sp, #28]
 800618a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800618e:	3701      	adds	r7, #1
 8006190:	9017      	str	r0, [sp, #92]	; 0x5c
 8006192:	e7bf      	b.n	8006114 <_strtod_l+0x154>
 8006194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006196:	195a      	adds	r2, r3, r5
 8006198:	9217      	str	r2, [sp, #92]	; 0x5c
 800619a:	5d5a      	ldrb	r2, [r3, r5]
 800619c:	2f00      	cmp	r7, #0
 800619e:	d037      	beq.n	8006210 <_strtod_l+0x250>
 80061a0:	9005      	str	r0, [sp, #20]
 80061a2:	463d      	mov	r5, r7
 80061a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d912      	bls.n	80061d2 <_strtod_l+0x212>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e7c2      	b.n	8006136 <_strtod_l+0x176>
 80061b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80061b6:	785a      	ldrb	r2, [r3, #1]
 80061b8:	3001      	adds	r0, #1
 80061ba:	2a30      	cmp	r2, #48	; 0x30
 80061bc:	d0f8      	beq.n	80061b0 <_strtod_l+0x1f0>
 80061be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	f200 84d9 	bhi.w	8006b7a <_strtod_l+0xbba>
 80061c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061ca:	9005      	str	r0, [sp, #20]
 80061cc:	2000      	movs	r0, #0
 80061ce:	9308      	str	r3, [sp, #32]
 80061d0:	4605      	mov	r5, r0
 80061d2:	3a30      	subs	r2, #48	; 0x30
 80061d4:	f100 0301 	add.w	r3, r0, #1
 80061d8:	d014      	beq.n	8006204 <_strtod_l+0x244>
 80061da:	9905      	ldr	r1, [sp, #20]
 80061dc:	4419      	add	r1, r3
 80061de:	9105      	str	r1, [sp, #20]
 80061e0:	462b      	mov	r3, r5
 80061e2:	eb00 0e05 	add.w	lr, r0, r5
 80061e6:	210a      	movs	r1, #10
 80061e8:	4573      	cmp	r3, lr
 80061ea:	d113      	bne.n	8006214 <_strtod_l+0x254>
 80061ec:	182b      	adds	r3, r5, r0
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	f105 0501 	add.w	r5, r5, #1
 80061f4:	4405      	add	r5, r0
 80061f6:	dc1c      	bgt.n	8006232 <_strtod_l+0x272>
 80061f8:	9907      	ldr	r1, [sp, #28]
 80061fa:	230a      	movs	r3, #10
 80061fc:	fb03 2301 	mla	r3, r3, r1, r2
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	2300      	movs	r3, #0
 8006204:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006206:	1c51      	adds	r1, r2, #1
 8006208:	9117      	str	r1, [sp, #92]	; 0x5c
 800620a:	7852      	ldrb	r2, [r2, #1]
 800620c:	4618      	mov	r0, r3
 800620e:	e7c9      	b.n	80061a4 <_strtod_l+0x1e4>
 8006210:	4638      	mov	r0, r7
 8006212:	e7d2      	b.n	80061ba <_strtod_l+0x1fa>
 8006214:	2b08      	cmp	r3, #8
 8006216:	dc04      	bgt.n	8006222 <_strtod_l+0x262>
 8006218:	9e07      	ldr	r6, [sp, #28]
 800621a:	434e      	muls	r6, r1
 800621c:	9607      	str	r6, [sp, #28]
 800621e:	3301      	adds	r3, #1
 8006220:	e7e2      	b.n	80061e8 <_strtod_l+0x228>
 8006222:	f103 0c01 	add.w	ip, r3, #1
 8006226:	f1bc 0f10 	cmp.w	ip, #16
 800622a:	bfd8      	it	le
 800622c:	fb01 f909 	mulle.w	r9, r1, r9
 8006230:	e7f5      	b.n	800621e <_strtod_l+0x25e>
 8006232:	2d10      	cmp	r5, #16
 8006234:	bfdc      	itt	le
 8006236:	230a      	movle	r3, #10
 8006238:	fb03 2909 	mlale	r9, r3, r9, r2
 800623c:	e7e1      	b.n	8006202 <_strtod_l+0x242>
 800623e:	2300      	movs	r3, #0
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	2301      	movs	r3, #1
 8006244:	e77c      	b.n	8006140 <_strtod_l+0x180>
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	f108 0202 	add.w	r2, r8, #2
 800624e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006250:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006254:	e785      	b.n	8006162 <_strtod_l+0x1a2>
 8006256:	f04f 0c01 	mov.w	ip, #1
 800625a:	e7f6      	b.n	800624a <_strtod_l+0x28a>
 800625c:	0800a340 	.word	0x0800a340
 8006260:	0800a278 	.word	0x0800a278
 8006264:	7ff00000 	.word	0x7ff00000
 8006268:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800626a:	1c51      	adds	r1, r2, #1
 800626c:	9117      	str	r1, [sp, #92]	; 0x5c
 800626e:	7852      	ldrb	r2, [r2, #1]
 8006270:	2a30      	cmp	r2, #48	; 0x30
 8006272:	d0f9      	beq.n	8006268 <_strtod_l+0x2a8>
 8006274:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006278:	2908      	cmp	r1, #8
 800627a:	f63f af79 	bhi.w	8006170 <_strtod_l+0x1b0>
 800627e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006282:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006284:	9206      	str	r2, [sp, #24]
 8006286:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006288:	1c51      	adds	r1, r2, #1
 800628a:	9117      	str	r1, [sp, #92]	; 0x5c
 800628c:	7852      	ldrb	r2, [r2, #1]
 800628e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006292:	2e09      	cmp	r6, #9
 8006294:	d937      	bls.n	8006306 <_strtod_l+0x346>
 8006296:	9e06      	ldr	r6, [sp, #24]
 8006298:	1b89      	subs	r1, r1, r6
 800629a:	2908      	cmp	r1, #8
 800629c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80062a0:	dc02      	bgt.n	80062a8 <_strtod_l+0x2e8>
 80062a2:	4576      	cmp	r6, lr
 80062a4:	bfa8      	it	ge
 80062a6:	4676      	movge	r6, lr
 80062a8:	f1bc 0f00 	cmp.w	ip, #0
 80062ac:	d000      	beq.n	80062b0 <_strtod_l+0x2f0>
 80062ae:	4276      	negs	r6, r6
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	d14d      	bne.n	8006350 <_strtod_l+0x390>
 80062b4:	9904      	ldr	r1, [sp, #16]
 80062b6:	4301      	orrs	r1, r0
 80062b8:	f47f aec6 	bne.w	8006048 <_strtod_l+0x88>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f aee1 	bne.w	8006084 <_strtod_l+0xc4>
 80062c2:	2a69      	cmp	r2, #105	; 0x69
 80062c4:	d027      	beq.n	8006316 <_strtod_l+0x356>
 80062c6:	dc24      	bgt.n	8006312 <_strtod_l+0x352>
 80062c8:	2a49      	cmp	r2, #73	; 0x49
 80062ca:	d024      	beq.n	8006316 <_strtod_l+0x356>
 80062cc:	2a4e      	cmp	r2, #78	; 0x4e
 80062ce:	f47f aed9 	bne.w	8006084 <_strtod_l+0xc4>
 80062d2:	499f      	ldr	r1, [pc, #636]	; (8006550 <_strtod_l+0x590>)
 80062d4:	a817      	add	r0, sp, #92	; 0x5c
 80062d6:	f001 f87f 	bl	80073d8 <__match>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f43f aed2 	beq.w	8006084 <_strtod_l+0xc4>
 80062e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b28      	cmp	r3, #40	; 0x28
 80062e6:	d12d      	bne.n	8006344 <_strtod_l+0x384>
 80062e8:	499a      	ldr	r1, [pc, #616]	; (8006554 <_strtod_l+0x594>)
 80062ea:	aa1a      	add	r2, sp, #104	; 0x68
 80062ec:	a817      	add	r0, sp, #92	; 0x5c
 80062ee:	f001 f887 	bl	8007400 <__hexnan>
 80062f2:	2805      	cmp	r0, #5
 80062f4:	d126      	bne.n	8006344 <_strtod_l+0x384>
 80062f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80062fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006300:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006304:	e6a0      	b.n	8006048 <_strtod_l+0x88>
 8006306:	210a      	movs	r1, #10
 8006308:	fb01 2e0e 	mla	lr, r1, lr, r2
 800630c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006310:	e7b9      	b.n	8006286 <_strtod_l+0x2c6>
 8006312:	2a6e      	cmp	r2, #110	; 0x6e
 8006314:	e7db      	b.n	80062ce <_strtod_l+0x30e>
 8006316:	4990      	ldr	r1, [pc, #576]	; (8006558 <_strtod_l+0x598>)
 8006318:	a817      	add	r0, sp, #92	; 0x5c
 800631a:	f001 f85d 	bl	80073d8 <__match>
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f aeb0 	beq.w	8006084 <_strtod_l+0xc4>
 8006324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006326:	498d      	ldr	r1, [pc, #564]	; (800655c <_strtod_l+0x59c>)
 8006328:	3b01      	subs	r3, #1
 800632a:	a817      	add	r0, sp, #92	; 0x5c
 800632c:	9317      	str	r3, [sp, #92]	; 0x5c
 800632e:	f001 f853 	bl	80073d8 <__match>
 8006332:	b910      	cbnz	r0, 800633a <_strtod_l+0x37a>
 8006334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006336:	3301      	adds	r3, #1
 8006338:	9317      	str	r3, [sp, #92]	; 0x5c
 800633a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800656c <_strtod_l+0x5ac>
 800633e:	f04f 0a00 	mov.w	sl, #0
 8006342:	e681      	b.n	8006048 <_strtod_l+0x88>
 8006344:	4886      	ldr	r0, [pc, #536]	; (8006560 <_strtod_l+0x5a0>)
 8006346:	f002 f9b3 	bl	80086b0 <nan>
 800634a:	ec5b ab10 	vmov	sl, fp, d0
 800634e:	e67b      	b.n	8006048 <_strtod_l+0x88>
 8006350:	9b05      	ldr	r3, [sp, #20]
 8006352:	9807      	ldr	r0, [sp, #28]
 8006354:	1af3      	subs	r3, r6, r3
 8006356:	2f00      	cmp	r7, #0
 8006358:	bf08      	it	eq
 800635a:	462f      	moveq	r7, r5
 800635c:	2d10      	cmp	r5, #16
 800635e:	9306      	str	r3, [sp, #24]
 8006360:	46a8      	mov	r8, r5
 8006362:	bfa8      	it	ge
 8006364:	f04f 0810 	movge.w	r8, #16
 8006368:	f7fa f8cc 	bl	8000504 <__aeabi_ui2d>
 800636c:	2d09      	cmp	r5, #9
 800636e:	4682      	mov	sl, r0
 8006370:	468b      	mov	fp, r1
 8006372:	dd13      	ble.n	800639c <_strtod_l+0x3dc>
 8006374:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <_strtod_l+0x5a4>)
 8006376:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800637a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800637e:	f7fa f93b 	bl	80005f8 <__aeabi_dmul>
 8006382:	4682      	mov	sl, r0
 8006384:	4648      	mov	r0, r9
 8006386:	468b      	mov	fp, r1
 8006388:	f7fa f8bc 	bl	8000504 <__aeabi_ui2d>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4650      	mov	r0, sl
 8006392:	4659      	mov	r1, fp
 8006394:	f7f9 ff7a 	bl	800028c <__adddf3>
 8006398:	4682      	mov	sl, r0
 800639a:	468b      	mov	fp, r1
 800639c:	2d0f      	cmp	r5, #15
 800639e:	dc38      	bgt.n	8006412 <_strtod_l+0x452>
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f43f ae50 	beq.w	8006048 <_strtod_l+0x88>
 80063a8:	dd24      	ble.n	80063f4 <_strtod_l+0x434>
 80063aa:	2b16      	cmp	r3, #22
 80063ac:	dc0b      	bgt.n	80063c6 <_strtod_l+0x406>
 80063ae:	496d      	ldr	r1, [pc, #436]	; (8006564 <_strtod_l+0x5a4>)
 80063b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b8:	4652      	mov	r2, sl
 80063ba:	465b      	mov	r3, fp
 80063bc:	f7fa f91c 	bl	80005f8 <__aeabi_dmul>
 80063c0:	4682      	mov	sl, r0
 80063c2:	468b      	mov	fp, r1
 80063c4:	e640      	b.n	8006048 <_strtod_l+0x88>
 80063c6:	9a06      	ldr	r2, [sp, #24]
 80063c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80063cc:	4293      	cmp	r3, r2
 80063ce:	db20      	blt.n	8006412 <_strtod_l+0x452>
 80063d0:	4c64      	ldr	r4, [pc, #400]	; (8006564 <_strtod_l+0x5a4>)
 80063d2:	f1c5 050f 	rsb	r5, r5, #15
 80063d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80063da:	4652      	mov	r2, sl
 80063dc:	465b      	mov	r3, fp
 80063de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e2:	f7fa f909 	bl	80005f8 <__aeabi_dmul>
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	1b5d      	subs	r5, r3, r5
 80063ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80063ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063f2:	e7e3      	b.n	80063bc <_strtod_l+0x3fc>
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	3316      	adds	r3, #22
 80063f8:	db0b      	blt.n	8006412 <_strtod_l+0x452>
 80063fa:	9b05      	ldr	r3, [sp, #20]
 80063fc:	1b9e      	subs	r6, r3, r6
 80063fe:	4b59      	ldr	r3, [pc, #356]	; (8006564 <_strtod_l+0x5a4>)
 8006400:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006404:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006408:	4650      	mov	r0, sl
 800640a:	4659      	mov	r1, fp
 800640c:	f7fa fa1e 	bl	800084c <__aeabi_ddiv>
 8006410:	e7d6      	b.n	80063c0 <_strtod_l+0x400>
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	eba5 0808 	sub.w	r8, r5, r8
 8006418:	4498      	add	r8, r3
 800641a:	f1b8 0f00 	cmp.w	r8, #0
 800641e:	dd74      	ble.n	800650a <_strtod_l+0x54a>
 8006420:	f018 030f 	ands.w	r3, r8, #15
 8006424:	d00a      	beq.n	800643c <_strtod_l+0x47c>
 8006426:	494f      	ldr	r1, [pc, #316]	; (8006564 <_strtod_l+0x5a4>)
 8006428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800642c:	4652      	mov	r2, sl
 800642e:	465b      	mov	r3, fp
 8006430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	4682      	mov	sl, r0
 800643a:	468b      	mov	fp, r1
 800643c:	f038 080f 	bics.w	r8, r8, #15
 8006440:	d04f      	beq.n	80064e2 <_strtod_l+0x522>
 8006442:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006446:	dd22      	ble.n	800648e <_strtod_l+0x4ce>
 8006448:	2500      	movs	r5, #0
 800644a:	462e      	mov	r6, r5
 800644c:	9507      	str	r5, [sp, #28]
 800644e:	9505      	str	r5, [sp, #20]
 8006450:	2322      	movs	r3, #34	; 0x22
 8006452:	f8df b118 	ldr.w	fp, [pc, #280]	; 800656c <_strtod_l+0x5ac>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	f04f 0a00 	mov.w	sl, #0
 800645c:	9b07      	ldr	r3, [sp, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f43f adf2 	beq.w	8006048 <_strtod_l+0x88>
 8006464:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006466:	4620      	mov	r0, r4
 8006468:	f001 f8b8 	bl	80075dc <_Bfree>
 800646c:	9905      	ldr	r1, [sp, #20]
 800646e:	4620      	mov	r0, r4
 8006470:	f001 f8b4 	bl	80075dc <_Bfree>
 8006474:	4631      	mov	r1, r6
 8006476:	4620      	mov	r0, r4
 8006478:	f001 f8b0 	bl	80075dc <_Bfree>
 800647c:	9907      	ldr	r1, [sp, #28]
 800647e:	4620      	mov	r0, r4
 8006480:	f001 f8ac 	bl	80075dc <_Bfree>
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f001 f8a8 	bl	80075dc <_Bfree>
 800648c:	e5dc      	b.n	8006048 <_strtod_l+0x88>
 800648e:	4b36      	ldr	r3, [pc, #216]	; (8006568 <_strtod_l+0x5a8>)
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	2300      	movs	r3, #0
 8006494:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006498:	4650      	mov	r0, sl
 800649a:	4659      	mov	r1, fp
 800649c:	4699      	mov	r9, r3
 800649e:	f1b8 0f01 	cmp.w	r8, #1
 80064a2:	dc21      	bgt.n	80064e8 <_strtod_l+0x528>
 80064a4:	b10b      	cbz	r3, 80064aa <_strtod_l+0x4ea>
 80064a6:	4682      	mov	sl, r0
 80064a8:	468b      	mov	fp, r1
 80064aa:	4b2f      	ldr	r3, [pc, #188]	; (8006568 <_strtod_l+0x5a8>)
 80064ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80064b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80064b4:	4652      	mov	r2, sl
 80064b6:	465b      	mov	r3, fp
 80064b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80064bc:	f7fa f89c 	bl	80005f8 <__aeabi_dmul>
 80064c0:	4b2a      	ldr	r3, [pc, #168]	; (800656c <_strtod_l+0x5ac>)
 80064c2:	460a      	mov	r2, r1
 80064c4:	400b      	ands	r3, r1
 80064c6:	492a      	ldr	r1, [pc, #168]	; (8006570 <_strtod_l+0x5b0>)
 80064c8:	428b      	cmp	r3, r1
 80064ca:	4682      	mov	sl, r0
 80064cc:	d8bc      	bhi.n	8006448 <_strtod_l+0x488>
 80064ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064d2:	428b      	cmp	r3, r1
 80064d4:	bf86      	itte	hi
 80064d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006574 <_strtod_l+0x5b4>
 80064da:	f04f 3aff 	movhi.w	sl, #4294967295
 80064de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80064e2:	2300      	movs	r3, #0
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	e084      	b.n	80065f2 <_strtod_l+0x632>
 80064e8:	f018 0f01 	tst.w	r8, #1
 80064ec:	d005      	beq.n	80064fa <_strtod_l+0x53a>
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fa f880 	bl	80005f8 <__aeabi_dmul>
 80064f8:	2301      	movs	r3, #1
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	3208      	adds	r2, #8
 80064fe:	f109 0901 	add.w	r9, r9, #1
 8006502:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006506:	9204      	str	r2, [sp, #16]
 8006508:	e7c9      	b.n	800649e <_strtod_l+0x4de>
 800650a:	d0ea      	beq.n	80064e2 <_strtod_l+0x522>
 800650c:	f1c8 0800 	rsb	r8, r8, #0
 8006510:	f018 020f 	ands.w	r2, r8, #15
 8006514:	d00a      	beq.n	800652c <_strtod_l+0x56c>
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <_strtod_l+0x5a4>)
 8006518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800651c:	4650      	mov	r0, sl
 800651e:	4659      	mov	r1, fp
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa f992 	bl	800084c <__aeabi_ddiv>
 8006528:	4682      	mov	sl, r0
 800652a:	468b      	mov	fp, r1
 800652c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006530:	d0d7      	beq.n	80064e2 <_strtod_l+0x522>
 8006532:	f1b8 0f1f 	cmp.w	r8, #31
 8006536:	dd1f      	ble.n	8006578 <_strtod_l+0x5b8>
 8006538:	2500      	movs	r5, #0
 800653a:	462e      	mov	r6, r5
 800653c:	9507      	str	r5, [sp, #28]
 800653e:	9505      	str	r5, [sp, #20]
 8006540:	2322      	movs	r3, #34	; 0x22
 8006542:	f04f 0a00 	mov.w	sl, #0
 8006546:	f04f 0b00 	mov.w	fp, #0
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	e786      	b.n	800645c <_strtod_l+0x49c>
 800654e:	bf00      	nop
 8006550:	0800a273 	.word	0x0800a273
 8006554:	0800a28c 	.word	0x0800a28c
 8006558:	0800a270 	.word	0x0800a270
 800655c:	0800a637 	.word	0x0800a637
 8006560:	0800a532 	.word	0x0800a532
 8006564:	0800a3f0 	.word	0x0800a3f0
 8006568:	0800a3c8 	.word	0x0800a3c8
 800656c:	7ff00000 	.word	0x7ff00000
 8006570:	7ca00000 	.word	0x7ca00000
 8006574:	7fefffff 	.word	0x7fefffff
 8006578:	f018 0310 	ands.w	r3, r8, #16
 800657c:	bf18      	it	ne
 800657e:	236a      	movne	r3, #106	; 0x6a
 8006580:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006930 <_strtod_l+0x970>
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	4650      	mov	r0, sl
 8006588:	4659      	mov	r1, fp
 800658a:	2300      	movs	r3, #0
 800658c:	f018 0f01 	tst.w	r8, #1
 8006590:	d004      	beq.n	800659c <_strtod_l+0x5dc>
 8006592:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006596:	f7fa f82f 	bl	80005f8 <__aeabi_dmul>
 800659a:	2301      	movs	r3, #1
 800659c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80065a0:	f109 0908 	add.w	r9, r9, #8
 80065a4:	d1f2      	bne.n	800658c <_strtod_l+0x5cc>
 80065a6:	b10b      	cbz	r3, 80065ac <_strtod_l+0x5ec>
 80065a8:	4682      	mov	sl, r0
 80065aa:	468b      	mov	fp, r1
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	b1c3      	cbz	r3, 80065e2 <_strtod_l+0x622>
 80065b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80065b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	4659      	mov	r1, fp
 80065bc:	dd11      	ble.n	80065e2 <_strtod_l+0x622>
 80065be:	2b1f      	cmp	r3, #31
 80065c0:	f340 8124 	ble.w	800680c <_strtod_l+0x84c>
 80065c4:	2b34      	cmp	r3, #52	; 0x34
 80065c6:	bfde      	ittt	le
 80065c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80065cc:	f04f 33ff 	movle.w	r3, #4294967295
 80065d0:	fa03 f202 	lslle.w	r2, r3, r2
 80065d4:	f04f 0a00 	mov.w	sl, #0
 80065d8:	bfcc      	ite	gt
 80065da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80065de:	ea02 0b01 	andle.w	fp, r2, r1
 80065e2:	2200      	movs	r2, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	4650      	mov	r0, sl
 80065e8:	4659      	mov	r1, fp
 80065ea:	f7fa fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d1a2      	bne.n	8006538 <_strtod_l+0x578>
 80065f2:	9b07      	ldr	r3, [sp, #28]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	9908      	ldr	r1, [sp, #32]
 80065f8:	462b      	mov	r3, r5
 80065fa:	463a      	mov	r2, r7
 80065fc:	4620      	mov	r0, r4
 80065fe:	f001 f855 	bl	80076ac <__s2b>
 8006602:	9007      	str	r0, [sp, #28]
 8006604:	2800      	cmp	r0, #0
 8006606:	f43f af1f 	beq.w	8006448 <_strtod_l+0x488>
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	1b9e      	subs	r6, r3, r6
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfb4      	ite	lt
 8006614:	4633      	movlt	r3, r6
 8006616:	2300      	movge	r3, #0
 8006618:	930c      	str	r3, [sp, #48]	; 0x30
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	2500      	movs	r5, #0
 800661e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006622:	9312      	str	r3, [sp, #72]	; 0x48
 8006624:	462e      	mov	r6, r5
 8006626:	9b07      	ldr	r3, [sp, #28]
 8006628:	4620      	mov	r0, r4
 800662a:	6859      	ldr	r1, [r3, #4]
 800662c:	f000 ff96 	bl	800755c <_Balloc>
 8006630:	9005      	str	r0, [sp, #20]
 8006632:	2800      	cmp	r0, #0
 8006634:	f43f af0c 	beq.w	8006450 <_strtod_l+0x490>
 8006638:	9b07      	ldr	r3, [sp, #28]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	3202      	adds	r2, #2
 800663e:	f103 010c 	add.w	r1, r3, #12
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	300c      	adds	r0, #12
 8006646:	f7ff fc49 	bl	8005edc <memcpy>
 800664a:	ec4b ab10 	vmov	d0, sl, fp
 800664e:	aa1a      	add	r2, sp, #104	; 0x68
 8006650:	a919      	add	r1, sp, #100	; 0x64
 8006652:	4620      	mov	r0, r4
 8006654:	f001 fb70 	bl	8007d38 <__d2b>
 8006658:	ec4b ab18 	vmov	d8, sl, fp
 800665c:	9018      	str	r0, [sp, #96]	; 0x60
 800665e:	2800      	cmp	r0, #0
 8006660:	f43f aef6 	beq.w	8006450 <_strtod_l+0x490>
 8006664:	2101      	movs	r1, #1
 8006666:	4620      	mov	r0, r4
 8006668:	f001 f8ba 	bl	80077e0 <__i2b>
 800666c:	4606      	mov	r6, r0
 800666e:	2800      	cmp	r0, #0
 8006670:	f43f aeee 	beq.w	8006450 <_strtod_l+0x490>
 8006674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	bfab      	itete	ge
 800667c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800667e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006680:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006682:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006686:	bfac      	ite	ge
 8006688:	eb03 0902 	addge.w	r9, r3, r2
 800668c:	1ad7      	sublt	r7, r2, r3
 800668e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006690:	eba3 0801 	sub.w	r8, r3, r1
 8006694:	4490      	add	r8, r2
 8006696:	4ba1      	ldr	r3, [pc, #644]	; (800691c <_strtod_l+0x95c>)
 8006698:	f108 38ff 	add.w	r8, r8, #4294967295
 800669c:	4598      	cmp	r8, r3
 800669e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80066a2:	f280 80c7 	bge.w	8006834 <_strtod_l+0x874>
 80066a6:	eba3 0308 	sub.w	r3, r3, r8
 80066aa:	2b1f      	cmp	r3, #31
 80066ac:	eba2 0203 	sub.w	r2, r2, r3
 80066b0:	f04f 0101 	mov.w	r1, #1
 80066b4:	f300 80b1 	bgt.w	800681a <_strtod_l+0x85a>
 80066b8:	fa01 f303 	lsl.w	r3, r1, r3
 80066bc:	930d      	str	r3, [sp, #52]	; 0x34
 80066be:	2300      	movs	r3, #0
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	eb09 0802 	add.w	r8, r9, r2
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	45c1      	cmp	r9, r8
 80066ca:	4417      	add	r7, r2
 80066cc:	441f      	add	r7, r3
 80066ce:	464b      	mov	r3, r9
 80066d0:	bfa8      	it	ge
 80066d2:	4643      	movge	r3, r8
 80066d4:	42bb      	cmp	r3, r7
 80066d6:	bfa8      	it	ge
 80066d8:	463b      	movge	r3, r7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfc2      	ittt	gt
 80066de:	eba8 0803 	subgt.w	r8, r8, r3
 80066e2:	1aff      	subgt	r7, r7, r3
 80066e4:	eba9 0903 	subgt.w	r9, r9, r3
 80066e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dd17      	ble.n	800671e <_strtod_l+0x75e>
 80066ee:	4631      	mov	r1, r6
 80066f0:	461a      	mov	r2, r3
 80066f2:	4620      	mov	r0, r4
 80066f4:	f001 f934 	bl	8007960 <__pow5mult>
 80066f8:	4606      	mov	r6, r0
 80066fa:	2800      	cmp	r0, #0
 80066fc:	f43f aea8 	beq.w	8006450 <_strtod_l+0x490>
 8006700:	4601      	mov	r1, r0
 8006702:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006704:	4620      	mov	r0, r4
 8006706:	f001 f881 	bl	800780c <__multiply>
 800670a:	900b      	str	r0, [sp, #44]	; 0x2c
 800670c:	2800      	cmp	r0, #0
 800670e:	f43f ae9f 	beq.w	8006450 <_strtod_l+0x490>
 8006712:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006714:	4620      	mov	r0, r4
 8006716:	f000 ff61 	bl	80075dc <_Bfree>
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	9318      	str	r3, [sp, #96]	; 0x60
 800671e:	f1b8 0f00 	cmp.w	r8, #0
 8006722:	f300 808c 	bgt.w	800683e <_strtod_l+0x87e>
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	dd08      	ble.n	800673e <_strtod_l+0x77e>
 800672c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800672e:	9905      	ldr	r1, [sp, #20]
 8006730:	4620      	mov	r0, r4
 8006732:	f001 f915 	bl	8007960 <__pow5mult>
 8006736:	9005      	str	r0, [sp, #20]
 8006738:	2800      	cmp	r0, #0
 800673a:	f43f ae89 	beq.w	8006450 <_strtod_l+0x490>
 800673e:	2f00      	cmp	r7, #0
 8006740:	dd08      	ble.n	8006754 <_strtod_l+0x794>
 8006742:	9905      	ldr	r1, [sp, #20]
 8006744:	463a      	mov	r2, r7
 8006746:	4620      	mov	r0, r4
 8006748:	f001 f964 	bl	8007a14 <__lshift>
 800674c:	9005      	str	r0, [sp, #20]
 800674e:	2800      	cmp	r0, #0
 8006750:	f43f ae7e 	beq.w	8006450 <_strtod_l+0x490>
 8006754:	f1b9 0f00 	cmp.w	r9, #0
 8006758:	dd08      	ble.n	800676c <_strtod_l+0x7ac>
 800675a:	4631      	mov	r1, r6
 800675c:	464a      	mov	r2, r9
 800675e:	4620      	mov	r0, r4
 8006760:	f001 f958 	bl	8007a14 <__lshift>
 8006764:	4606      	mov	r6, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f ae72 	beq.w	8006450 <_strtod_l+0x490>
 800676c:	9a05      	ldr	r2, [sp, #20]
 800676e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006770:	4620      	mov	r0, r4
 8006772:	f001 f9db 	bl	8007b2c <__mdiff>
 8006776:	4605      	mov	r5, r0
 8006778:	2800      	cmp	r0, #0
 800677a:	f43f ae69 	beq.w	8006450 <_strtod_l+0x490>
 800677e:	68c3      	ldr	r3, [r0, #12]
 8006780:	930b      	str	r3, [sp, #44]	; 0x2c
 8006782:	2300      	movs	r3, #0
 8006784:	60c3      	str	r3, [r0, #12]
 8006786:	4631      	mov	r1, r6
 8006788:	f001 f9b4 	bl	8007af4 <__mcmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	da60      	bge.n	8006852 <_strtod_l+0x892>
 8006790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006792:	ea53 030a 	orrs.w	r3, r3, sl
 8006796:	f040 8082 	bne.w	800689e <_strtod_l+0x8de>
 800679a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d17d      	bne.n	800689e <_strtod_l+0x8de>
 80067a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067a6:	0d1b      	lsrs	r3, r3, #20
 80067a8:	051b      	lsls	r3, r3, #20
 80067aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80067ae:	d976      	bls.n	800689e <_strtod_l+0x8de>
 80067b0:	696b      	ldr	r3, [r5, #20]
 80067b2:	b913      	cbnz	r3, 80067ba <_strtod_l+0x7fa>
 80067b4:	692b      	ldr	r3, [r5, #16]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	dd71      	ble.n	800689e <_strtod_l+0x8de>
 80067ba:	4629      	mov	r1, r5
 80067bc:	2201      	movs	r2, #1
 80067be:	4620      	mov	r0, r4
 80067c0:	f001 f928 	bl	8007a14 <__lshift>
 80067c4:	4631      	mov	r1, r6
 80067c6:	4605      	mov	r5, r0
 80067c8:	f001 f994 	bl	8007af4 <__mcmp>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dd66      	ble.n	800689e <_strtod_l+0x8de>
 80067d0:	9904      	ldr	r1, [sp, #16]
 80067d2:	4a53      	ldr	r2, [pc, #332]	; (8006920 <_strtod_l+0x960>)
 80067d4:	465b      	mov	r3, fp
 80067d6:	2900      	cmp	r1, #0
 80067d8:	f000 8081 	beq.w	80068de <_strtod_l+0x91e>
 80067dc:	ea02 010b 	and.w	r1, r2, fp
 80067e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067e4:	dc7b      	bgt.n	80068de <_strtod_l+0x91e>
 80067e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067ea:	f77f aea9 	ble.w	8006540 <_strtod_l+0x580>
 80067ee:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <_strtod_l+0x964>)
 80067f0:	4650      	mov	r0, sl
 80067f2:	4659      	mov	r1, fp
 80067f4:	2200      	movs	r2, #0
 80067f6:	f7f9 feff 	bl	80005f8 <__aeabi_dmul>
 80067fa:	460b      	mov	r3, r1
 80067fc:	4303      	orrs	r3, r0
 80067fe:	bf08      	it	eq
 8006800:	2322      	moveq	r3, #34	; 0x22
 8006802:	4682      	mov	sl, r0
 8006804:	468b      	mov	fp, r1
 8006806:	bf08      	it	eq
 8006808:	6023      	streq	r3, [r4, #0]
 800680a:	e62b      	b.n	8006464 <_strtod_l+0x4a4>
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	ea03 0a0a 	and.w	sl, r3, sl
 8006818:	e6e3      	b.n	80065e2 <_strtod_l+0x622>
 800681a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800681e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006822:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006826:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800682a:	fa01 f308 	lsl.w	r3, r1, r8
 800682e:	9308      	str	r3, [sp, #32]
 8006830:	910d      	str	r1, [sp, #52]	; 0x34
 8006832:	e746      	b.n	80066c2 <_strtod_l+0x702>
 8006834:	2300      	movs	r3, #0
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	2301      	movs	r3, #1
 800683a:	930d      	str	r3, [sp, #52]	; 0x34
 800683c:	e741      	b.n	80066c2 <_strtod_l+0x702>
 800683e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006840:	4642      	mov	r2, r8
 8006842:	4620      	mov	r0, r4
 8006844:	f001 f8e6 	bl	8007a14 <__lshift>
 8006848:	9018      	str	r0, [sp, #96]	; 0x60
 800684a:	2800      	cmp	r0, #0
 800684c:	f47f af6b 	bne.w	8006726 <_strtod_l+0x766>
 8006850:	e5fe      	b.n	8006450 <_strtod_l+0x490>
 8006852:	465f      	mov	r7, fp
 8006854:	d16e      	bne.n	8006934 <_strtod_l+0x974>
 8006856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006858:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800685c:	b342      	cbz	r2, 80068b0 <_strtod_l+0x8f0>
 800685e:	4a32      	ldr	r2, [pc, #200]	; (8006928 <_strtod_l+0x968>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d128      	bne.n	80068b6 <_strtod_l+0x8f6>
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	4651      	mov	r1, sl
 8006868:	b1eb      	cbz	r3, 80068a6 <_strtod_l+0x8e6>
 800686a:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <_strtod_l+0x960>)
 800686c:	403b      	ands	r3, r7
 800686e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006872:	f04f 32ff 	mov.w	r2, #4294967295
 8006876:	d819      	bhi.n	80068ac <_strtod_l+0x8ec>
 8006878:	0d1b      	lsrs	r3, r3, #20
 800687a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	4299      	cmp	r1, r3
 8006884:	d117      	bne.n	80068b6 <_strtod_l+0x8f6>
 8006886:	4b29      	ldr	r3, [pc, #164]	; (800692c <_strtod_l+0x96c>)
 8006888:	429f      	cmp	r7, r3
 800688a:	d102      	bne.n	8006892 <_strtod_l+0x8d2>
 800688c:	3101      	adds	r1, #1
 800688e:	f43f addf 	beq.w	8006450 <_strtod_l+0x490>
 8006892:	4b23      	ldr	r3, [pc, #140]	; (8006920 <_strtod_l+0x960>)
 8006894:	403b      	ands	r3, r7
 8006896:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800689a:	f04f 0a00 	mov.w	sl, #0
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1a4      	bne.n	80067ee <_strtod_l+0x82e>
 80068a4:	e5de      	b.n	8006464 <_strtod_l+0x4a4>
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295
 80068aa:	e7ea      	b.n	8006882 <_strtod_l+0x8c2>
 80068ac:	4613      	mov	r3, r2
 80068ae:	e7e8      	b.n	8006882 <_strtod_l+0x8c2>
 80068b0:	ea53 030a 	orrs.w	r3, r3, sl
 80068b4:	d08c      	beq.n	80067d0 <_strtod_l+0x810>
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	b1db      	cbz	r3, 80068f2 <_strtod_l+0x932>
 80068ba:	423b      	tst	r3, r7
 80068bc:	d0ef      	beq.n	800689e <_strtod_l+0x8de>
 80068be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c0:	9a04      	ldr	r2, [sp, #16]
 80068c2:	4650      	mov	r0, sl
 80068c4:	4659      	mov	r1, fp
 80068c6:	b1c3      	cbz	r3, 80068fa <_strtod_l+0x93a>
 80068c8:	f7ff fb5e 	bl	8005f88 <sulp>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	ec51 0b18 	vmov	r0, r1, d8
 80068d4:	f7f9 fcda 	bl	800028c <__adddf3>
 80068d8:	4682      	mov	sl, r0
 80068da:	468b      	mov	fp, r1
 80068dc:	e7df      	b.n	800689e <_strtod_l+0x8de>
 80068de:	4013      	ands	r3, r2
 80068e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80068e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80068ec:	f04f 3aff 	mov.w	sl, #4294967295
 80068f0:	e7d5      	b.n	800689e <_strtod_l+0x8de>
 80068f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f4:	ea13 0f0a 	tst.w	r3, sl
 80068f8:	e7e0      	b.n	80068bc <_strtod_l+0x8fc>
 80068fa:	f7ff fb45 	bl	8005f88 <sulp>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	ec51 0b18 	vmov	r0, r1, d8
 8006906:	f7f9 fcbf 	bl	8000288 <__aeabi_dsub>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	4682      	mov	sl, r0
 8006910:	468b      	mov	fp, r1
 8006912:	f7fa f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006916:	2800      	cmp	r0, #0
 8006918:	d0c1      	beq.n	800689e <_strtod_l+0x8de>
 800691a:	e611      	b.n	8006540 <_strtod_l+0x580>
 800691c:	fffffc02 	.word	0xfffffc02
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	39500000 	.word	0x39500000
 8006928:	000fffff 	.word	0x000fffff
 800692c:	7fefffff 	.word	0x7fefffff
 8006930:	0800a2a0 	.word	0x0800a2a0
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	f001 fa5a 	bl	8007df0 <__ratio>
 800693c:	ec59 8b10 	vmov	r8, r9, d0
 8006940:	ee10 0a10 	vmov	r0, s0
 8006944:	2200      	movs	r2, #0
 8006946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800694a:	4649      	mov	r1, r9
 800694c:	f7fa f8d0 	bl	8000af0 <__aeabi_dcmple>
 8006950:	2800      	cmp	r0, #0
 8006952:	d07a      	beq.n	8006a4a <_strtod_l+0xa8a>
 8006954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d04a      	beq.n	80069f0 <_strtod_l+0xa30>
 800695a:	4b95      	ldr	r3, [pc, #596]	; (8006bb0 <_strtod_l+0xbf0>)
 800695c:	2200      	movs	r2, #0
 800695e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006962:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006bb0 <_strtod_l+0xbf0>
 8006966:	f04f 0800 	mov.w	r8, #0
 800696a:	4b92      	ldr	r3, [pc, #584]	; (8006bb4 <_strtod_l+0xbf4>)
 800696c:	403b      	ands	r3, r7
 800696e:	930d      	str	r3, [sp, #52]	; 0x34
 8006970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006972:	4b91      	ldr	r3, [pc, #580]	; (8006bb8 <_strtod_l+0xbf8>)
 8006974:	429a      	cmp	r2, r3
 8006976:	f040 80b0 	bne.w	8006ada <_strtod_l+0xb1a>
 800697a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800697e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006982:	ec4b ab10 	vmov	d0, sl, fp
 8006986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800698a:	f001 f959 	bl	8007c40 <__ulp>
 800698e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006992:	ec53 2b10 	vmov	r2, r3, d0
 8006996:	f7f9 fe2f 	bl	80005f8 <__aeabi_dmul>
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	f7f9 fc75 	bl	800028c <__adddf3>
 80069a2:	460b      	mov	r3, r1
 80069a4:	4983      	ldr	r1, [pc, #524]	; (8006bb4 <_strtod_l+0xbf4>)
 80069a6:	4a85      	ldr	r2, [pc, #532]	; (8006bbc <_strtod_l+0xbfc>)
 80069a8:	4019      	ands	r1, r3
 80069aa:	4291      	cmp	r1, r2
 80069ac:	4682      	mov	sl, r0
 80069ae:	d960      	bls.n	8006a72 <_strtod_l+0xab2>
 80069b0:	ee18 3a90 	vmov	r3, s17
 80069b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d104      	bne.n	80069c6 <_strtod_l+0xa06>
 80069bc:	ee18 3a10 	vmov	r3, s16
 80069c0:	3301      	adds	r3, #1
 80069c2:	f43f ad45 	beq.w	8006450 <_strtod_l+0x490>
 80069c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006bc8 <_strtod_l+0xc08>
 80069ca:	f04f 3aff 	mov.w	sl, #4294967295
 80069ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fe03 	bl	80075dc <_Bfree>
 80069d6:	9905      	ldr	r1, [sp, #20]
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fdff 	bl	80075dc <_Bfree>
 80069de:	4631      	mov	r1, r6
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fdfb 	bl	80075dc <_Bfree>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fdf7 	bl	80075dc <_Bfree>
 80069ee:	e61a      	b.n	8006626 <_strtod_l+0x666>
 80069f0:	f1ba 0f00 	cmp.w	sl, #0
 80069f4:	d11b      	bne.n	8006a2e <_strtod_l+0xa6e>
 80069f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069fa:	b9f3      	cbnz	r3, 8006a3a <_strtod_l+0xa7a>
 80069fc:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <_strtod_l+0xbf0>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	f7fa f86a 	bl	8000adc <__aeabi_dcmplt>
 8006a08:	b9d0      	cbnz	r0, 8006a40 <_strtod_l+0xa80>
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4b6c      	ldr	r3, [pc, #432]	; (8006bc0 <_strtod_l+0xc00>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f7f9 fdf1 	bl	80005f8 <__aeabi_dmul>
 8006a16:	4680      	mov	r8, r0
 8006a18:	4689      	mov	r9, r1
 8006a1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006a22:	9315      	str	r3, [sp, #84]	; 0x54
 8006a24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a2c:	e79d      	b.n	800696a <_strtod_l+0x9aa>
 8006a2e:	f1ba 0f01 	cmp.w	sl, #1
 8006a32:	d102      	bne.n	8006a3a <_strtod_l+0xa7a>
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f43f ad83 	beq.w	8006540 <_strtod_l+0x580>
 8006a3a:	4b62      	ldr	r3, [pc, #392]	; (8006bc4 <_strtod_l+0xc04>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	e78e      	b.n	800695e <_strtod_l+0x99e>
 8006a40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006bc0 <_strtod_l+0xc00>
 8006a44:	f04f 0800 	mov.w	r8, #0
 8006a48:	e7e7      	b.n	8006a1a <_strtod_l+0xa5a>
 8006a4a:	4b5d      	ldr	r3, [pc, #372]	; (8006bc0 <_strtod_l+0xc00>)
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	4649      	mov	r1, r9
 8006a50:	2200      	movs	r2, #0
 8006a52:	f7f9 fdd1 	bl	80005f8 <__aeabi_dmul>
 8006a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a58:	4680      	mov	r8, r0
 8006a5a:	4689      	mov	r9, r1
 8006a5c:	b933      	cbnz	r3, 8006a6c <_strtod_l+0xaac>
 8006a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a62:	900e      	str	r0, [sp, #56]	; 0x38
 8006a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a6a:	e7dd      	b.n	8006a28 <_strtod_l+0xa68>
 8006a6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006a70:	e7f9      	b.n	8006a66 <_strtod_l+0xaa6>
 8006a72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1a8      	bne.n	80069ce <_strtod_l+0xa0e>
 8006a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a82:	0d1b      	lsrs	r3, r3, #20
 8006a84:	051b      	lsls	r3, r3, #20
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d1a1      	bne.n	80069ce <_strtod_l+0xa0e>
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7fa f8e5 	bl	8000c5c <__aeabi_d2lz>
 8006a92:	f7f9 fd83 	bl	800059c <__aeabi_l2d>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aa8:	ea43 030a 	orr.w	r3, r3, sl
 8006aac:	4313      	orrs	r3, r2
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	d055      	beq.n	8006b60 <_strtod_l+0xba0>
 8006ab4:	a336      	add	r3, pc, #216	; (adr r3, 8006b90 <_strtod_l+0xbd0>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7fa f80f 	bl	8000adc <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f47f acd0 	bne.w	8006464 <_strtod_l+0x4a4>
 8006ac4:	a334      	add	r3, pc, #208	; (adr r3, 8006b98 <_strtod_l+0xbd8>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7fa f823 	bl	8000b18 <__aeabi_dcmpgt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f43f af7b 	beq.w	80069ce <_strtod_l+0xa0e>
 8006ad8:	e4c4      	b.n	8006464 <_strtod_l+0x4a4>
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	b333      	cbz	r3, 8006b2c <_strtod_l+0xb6c>
 8006ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ae0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ae4:	d822      	bhi.n	8006b2c <_strtod_l+0xb6c>
 8006ae6:	a32e      	add	r3, pc, #184	; (adr r3, 8006ba0 <_strtod_l+0xbe0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4640      	mov	r0, r8
 8006aee:	4649      	mov	r1, r9
 8006af0:	f7f9 fffe 	bl	8000af0 <__aeabi_dcmple>
 8006af4:	b1a0      	cbz	r0, 8006b20 <_strtod_l+0xb60>
 8006af6:	4649      	mov	r1, r9
 8006af8:	4640      	mov	r0, r8
 8006afa:	f7fa f83f 	bl	8000b7c <__aeabi_d2uiz>
 8006afe:	2801      	cmp	r0, #1
 8006b00:	bf38      	it	cc
 8006b02:	2001      	movcc	r0, #1
 8006b04:	f7f9 fcfe 	bl	8000504 <__aeabi_ui2d>
 8006b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	bb23      	cbnz	r3, 8006b5a <_strtod_l+0xb9a>
 8006b10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b14:	9010      	str	r0, [sp, #64]	; 0x40
 8006b16:	9311      	str	r3, [sp, #68]	; 0x44
 8006b18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b30:	eeb0 0a48 	vmov.f32	s0, s16
 8006b34:	eef0 0a68 	vmov.f32	s1, s17
 8006b38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b3c:	f001 f880 	bl	8007c40 <__ulp>
 8006b40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b44:	ec53 2b10 	vmov	r2, r3, d0
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	ec53 2b18 	vmov	r2, r3, d8
 8006b50:	f7f9 fb9c 	bl	800028c <__adddf3>
 8006b54:	4682      	mov	sl, r0
 8006b56:	468b      	mov	fp, r1
 8006b58:	e78d      	b.n	8006a76 <_strtod_l+0xab6>
 8006b5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006b5e:	e7db      	b.n	8006b18 <_strtod_l+0xb58>
 8006b60:	a311      	add	r3, pc, #68	; (adr r3, 8006ba8 <_strtod_l+0xbe8>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 ffb9 	bl	8000adc <__aeabi_dcmplt>
 8006b6a:	e7b2      	b.n	8006ad2 <_strtod_l+0xb12>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	f7ff ba6b 	b.w	8006050 <_strtod_l+0x90>
 8006b7a:	2a65      	cmp	r2, #101	; 0x65
 8006b7c:	f43f ab5f 	beq.w	800623e <_strtod_l+0x27e>
 8006b80:	2a45      	cmp	r2, #69	; 0x45
 8006b82:	f43f ab5c 	beq.w	800623e <_strtod_l+0x27e>
 8006b86:	2301      	movs	r3, #1
 8006b88:	f7ff bb94 	b.w	80062b4 <_strtod_l+0x2f4>
 8006b8c:	f3af 8000 	nop.w
 8006b90:	94a03595 	.word	0x94a03595
 8006b94:	3fdfffff 	.word	0x3fdfffff
 8006b98:	35afe535 	.word	0x35afe535
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	ffc00000 	.word	0xffc00000
 8006ba4:	41dfffff 	.word	0x41dfffff
 8006ba8:	94a03595 	.word	0x94a03595
 8006bac:	3fcfffff 	.word	0x3fcfffff
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	7ff00000 	.word	0x7ff00000
 8006bb8:	7fe00000 	.word	0x7fe00000
 8006bbc:	7c9fffff 	.word	0x7c9fffff
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	bff00000 	.word	0xbff00000
 8006bc8:	7fefffff 	.word	0x7fefffff

08006bcc <strtod>:
 8006bcc:	460a      	mov	r2, r1
 8006bce:	4601      	mov	r1, r0
 8006bd0:	4802      	ldr	r0, [pc, #8]	; (8006bdc <strtod+0x10>)
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <strtod+0x14>)
 8006bd4:	6800      	ldr	r0, [r0, #0]
 8006bd6:	f7ff b9f3 	b.w	8005fc0 <_strtod_l>
 8006bda:	bf00      	nop
 8006bdc:	2000001c 	.word	0x2000001c
 8006be0:	20000084 	.word	0x20000084

08006be4 <print_e>:
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	b087      	sub	sp, #28
 8006be8:	ec43 2b10 	vmov	d0, r2, r3
 8006bec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006bee:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006bf2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006bf4:	ab04      	add	r3, sp, #16
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	ab03      	add	r3, sp, #12
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	1c62      	adds	r2, r4, #1
 8006bfe:	ab05      	add	r3, sp, #20
 8006c00:	460f      	mov	r7, r1
 8006c02:	2102      	movs	r1, #2
 8006c04:	f001 fe40 	bl	8008888 <_dtoa_r>
 8006c08:	9a05      	ldr	r2, [sp, #20]
 8006c0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d105      	bne.n	8006c1e <print_e+0x3a>
 8006c12:	4601      	mov	r1, r0
 8006c14:	4638      	mov	r0, r7
 8006c16:	f001 fd63 	bl	80086e0 <strcpy>
 8006c1a:	b007      	add	sp, #28
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	463b      	mov	r3, r7
 8006c20:	7801      	ldrb	r1, [r0, #0]
 8006c22:	f803 1b01 	strb.w	r1, [r3], #1
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	bfc8      	it	gt
 8006c2a:	2501      	movgt	r5, #1
 8006c2c:	212e      	movs	r1, #46	; 0x2e
 8006c2e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006c32:	b10f      	cbz	r7, 8006c38 <print_e+0x54>
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	dc37      	bgt.n	8006ca8 <print_e+0xc4>
 8006c38:	2e67      	cmp	r6, #103	; 0x67
 8006c3a:	d046      	beq.n	8006cca <print_e+0xe6>
 8006c3c:	2e47      	cmp	r6, #71	; 0x47
 8006c3e:	d046      	beq.n	8006cce <print_e+0xea>
 8006c40:	212e      	movs	r1, #46	; 0x2e
 8006c42:	2030      	movs	r0, #48	; 0x30
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	dc38      	bgt.n	8006cba <print_e+0xd6>
 8006c48:	1e51      	subs	r1, r2, #1
 8006c4a:	2900      	cmp	r1, #0
 8006c4c:	bfb8      	it	lt
 8006c4e:	f1c2 0201 	rsblt	r2, r2, #1
 8006c52:	4618      	mov	r0, r3
 8006c54:	9105      	str	r1, [sp, #20]
 8006c56:	bfac      	ite	ge
 8006c58:	222b      	movge	r2, #43	; 0x2b
 8006c5a:	9205      	strlt	r2, [sp, #20]
 8006c5c:	f800 6b02 	strb.w	r6, [r0], #2
 8006c60:	bfa8      	it	ge
 8006c62:	705a      	strbge	r2, [r3, #1]
 8006c64:	9a05      	ldr	r2, [sp, #20]
 8006c66:	bfbc      	itt	lt
 8006c68:	212d      	movlt	r1, #45	; 0x2d
 8006c6a:	7059      	strblt	r1, [r3, #1]
 8006c6c:	2a63      	cmp	r2, #99	; 0x63
 8006c6e:	dd0b      	ble.n	8006c88 <print_e+0xa4>
 8006c70:	2164      	movs	r1, #100	; 0x64
 8006c72:	fb92 f1f1 	sdiv	r1, r2, r1
 8006c76:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8006c7a:	1cd8      	adds	r0, r3, #3
 8006c7c:	709c      	strb	r4, [r3, #2]
 8006c7e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006c82:	fb03 2201 	mla	r2, r3, r1, r2
 8006c86:	9205      	str	r2, [sp, #20]
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	220a      	movs	r2, #10
 8006c8c:	fb93 f2f2 	sdiv	r2, r3, r2
 8006c90:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8006c94:	7001      	strb	r1, [r0, #0]
 8006c96:	f06f 0109 	mvn.w	r1, #9
 8006c9a:	fb01 3302 	mla	r3, r1, r2, r3
 8006c9e:	3330      	adds	r3, #48	; 0x30
 8006ca0:	7043      	strb	r3, [r0, #1]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	7083      	strb	r3, [r0, #2]
 8006ca6:	e7b8      	b.n	8006c1a <print_e+0x36>
 8006ca8:	b10d      	cbz	r5, 8006cae <print_e+0xca>
 8006caa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cae:	7805      	ldrb	r5, [r0, #0]
 8006cb0:	f803 5b01 	strb.w	r5, [r3], #1
 8006cb4:	3c01      	subs	r4, #1
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	e7b9      	b.n	8006c2e <print_e+0x4a>
 8006cba:	b10d      	cbz	r5, 8006cc0 <print_e+0xdc>
 8006cbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc0:	f803 0b01 	strb.w	r0, [r3], #1
 8006cc4:	3c01      	subs	r4, #1
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	e7bc      	b.n	8006c44 <print_e+0x60>
 8006cca:	2665      	movs	r6, #101	; 0x65
 8006ccc:	e7bc      	b.n	8006c48 <print_e+0x64>
 8006cce:	2645      	movs	r6, #69	; 0x45
 8006cd0:	e7ba      	b.n	8006c48 <print_e+0x64>
 8006cd2:	0000      	movs	r0, r0
 8006cd4:	0000      	movs	r0, r0
	...

08006cd8 <_gcvt>:
 8006cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	ec55 4b10 	vmov	r4, r5, d0
 8006ce0:	b088      	sub	sp, #32
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	4688      	mov	r8, r1
 8006ce6:	4616      	mov	r6, r2
 8006ce8:	469a      	mov	sl, r3
 8006cea:	ee10 0a10 	vmov	r0, s0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006cf6:	f7f9 fef1 	bl	8000adc <__aeabi_dcmplt>
 8006cfa:	b110      	cbz	r0, 8006d02 <_gcvt+0x2a>
 8006cfc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d00:	461d      	mov	r5, r3
 8006d02:	2200      	movs	r2, #0
 8006d04:	2300      	movs	r3, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d0e:	b138      	cbz	r0, 8006d20 <_gcvt+0x48>
 8006d10:	2330      	movs	r3, #48	; 0x30
 8006d12:	7033      	strb	r3, [r6, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	7073      	strb	r3, [r6, #1]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	b008      	add	sp, #32
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	a34b      	add	r3, pc, #300	; (adr r3, 8006e50 <_gcvt+0x178>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	4620      	mov	r0, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7f9 fee1 	bl	8000af0 <__aeabi_dcmple>
 8006d2e:	b158      	cbz	r0, 8006d48 <_gcvt+0x70>
 8006d30:	f108 31ff 	add.w	r1, r8, #4294967295
 8006d34:	9100      	str	r1, [sp, #0]
 8006d36:	e9cd a701 	strd	sl, r7, [sp, #4]
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4648      	mov	r0, r9
 8006d42:	f7ff ff4f 	bl	8006be4 <print_e>
 8006d46:	e7e7      	b.n	8006d18 <_gcvt+0x40>
 8006d48:	4640      	mov	r0, r8
 8006d4a:	f001 f885 	bl	8007e58 <_mprec_log10>
 8006d4e:	4622      	mov	r2, r4
 8006d50:	ec51 0b10 	vmov	r0, r1, d0
 8006d54:	462b      	mov	r3, r5
 8006d56:	f7f9 fecb 	bl	8000af0 <__aeabi_dcmple>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d1e8      	bne.n	8006d30 <_gcvt+0x58>
 8006d5e:	ab07      	add	r3, sp, #28
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	ab06      	add	r3, sp, #24
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4642      	mov	r2, r8
 8006d68:	ab05      	add	r3, sp, #20
 8006d6a:	ec45 4b10 	vmov	d0, r4, r5
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4648      	mov	r0, r9
 8006d72:	f001 fd89 	bl	8008888 <_dtoa_r>
 8006d76:	9a05      	ldr	r2, [sp, #20]
 8006d78:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d00e      	beq.n	8006d9e <_gcvt+0xc6>
 8006d80:	4633      	mov	r3, r6
 8006d82:	44b0      	add	r8, r6
 8006d84:	4605      	mov	r5, r0
 8006d86:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006d8a:	9c05      	ldr	r4, [sp, #20]
 8006d8c:	eba8 0203 	sub.w	r2, r8, r3
 8006d90:	b109      	cbz	r1, 8006d96 <_gcvt+0xbe>
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	dc08      	bgt.n	8006da8 <_gcvt+0xd0>
 8006d96:	2100      	movs	r1, #0
 8006d98:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8006d9c:	e00d      	b.n	8006dba <_gcvt+0xe2>
 8006d9e:	4601      	mov	r1, r0
 8006da0:	4630      	mov	r0, r6
 8006da2:	f001 fc9d 	bl	80086e0 <strcpy>
 8006da6:	e7b7      	b.n	8006d18 <_gcvt+0x40>
 8006da8:	3c01      	subs	r4, #1
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	9405      	str	r4, [sp, #20]
 8006db0:	e7e8      	b.n	8006d84 <_gcvt+0xac>
 8006db2:	f803 cb01 	strb.w	ip, [r3], #1
 8006db6:	3a01      	subs	r2, #1
 8006db8:	2101      	movs	r1, #1
 8006dba:	2c00      	cmp	r4, #0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	dc2a      	bgt.n	8006e16 <_gcvt+0x13e>
 8006dc0:	b101      	cbz	r1, 8006dc4 <_gcvt+0xec>
 8006dc2:	9405      	str	r4, [sp, #20]
 8006dc4:	b90f      	cbnz	r7, 8006dca <_gcvt+0xf2>
 8006dc6:	7829      	ldrb	r1, [r5, #0]
 8006dc8:	b311      	cbz	r1, 8006e10 <_gcvt+0x138>
 8006dca:	42b3      	cmp	r3, r6
 8006dcc:	bf04      	itt	eq
 8006dce:	2130      	moveq	r1, #48	; 0x30
 8006dd0:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006dd4:	212e      	movs	r1, #46	; 0x2e
 8006dd6:	7019      	strb	r1, [r3, #0]
 8006dd8:	9905      	ldr	r1, [sp, #20]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	2400      	movs	r4, #0
 8006dde:	eba1 0c03 	sub.w	ip, r1, r3
 8006de2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006de6:	eb1c 0f00 	cmn.w	ip, r0
 8006dea:	d41c      	bmi.n	8006e26 <_gcvt+0x14e>
 8006dec:	2900      	cmp	r1, #0
 8006dee:	f1c1 0000 	rsb	r0, r1, #0
 8006df2:	bfc8      	it	gt
 8006df4:	2000      	movgt	r0, #0
 8006df6:	f100 0c01 	add.w	ip, r0, #1
 8006dfa:	4463      	add	r3, ip
 8006dfc:	4401      	add	r1, r0
 8006dfe:	b104      	cbz	r4, 8006e02 <_gcvt+0x12a>
 8006e00:	9105      	str	r1, [sp, #20]
 8006e02:	1e69      	subs	r1, r5, #1
 8006e04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e08:	b108      	cbz	r0, 8006e0e <_gcvt+0x136>
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	dc0f      	bgt.n	8006e2e <_gcvt+0x156>
 8006e0e:	b9df      	cbnz	r7, 8006e48 <_gcvt+0x170>
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	e780      	b.n	8006d18 <_gcvt+0x40>
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e1c:	dcc9      	bgt.n	8006db2 <_gcvt+0xda>
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d0d0      	beq.n	8006dc4 <_gcvt+0xec>
 8006e22:	9005      	str	r0, [sp, #20]
 8006e24:	e7ce      	b.n	8006dc4 <_gcvt+0xec>
 8006e26:	f800 ef01 	strb.w	lr, [r0, #1]!
 8006e2a:	2401      	movs	r4, #1
 8006e2c:	e7db      	b.n	8006de6 <_gcvt+0x10e>
 8006e2e:	f803 0b01 	strb.w	r0, [r3], #1
 8006e32:	3a01      	subs	r2, #1
 8006e34:	e7e6      	b.n	8006e04 <_gcvt+0x12c>
 8006e36:	f801 5b01 	strb.w	r5, [r1], #1
 8006e3a:	1a60      	subs	r0, r4, r1
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	dcfa      	bgt.n	8006e36 <_gcvt+0x15e>
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	bfa8      	it	ge
 8006e44:	189b      	addge	r3, r3, r2
 8006e46:	e7e3      	b.n	8006e10 <_gcvt+0x138>
 8006e48:	4619      	mov	r1, r3
 8006e4a:	189c      	adds	r4, r3, r2
 8006e4c:	2530      	movs	r5, #48	; 0x30
 8006e4e:	e7f4      	b.n	8006e3a <_gcvt+0x162>
 8006e50:	eb1c432d 	.word	0xeb1c432d
 8006e54:	3f1a36e2 	.word	0x3f1a36e2

08006e58 <rshift>:
 8006e58:	6903      	ldr	r3, [r0, #16]
 8006e5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e66:	f100 0414 	add.w	r4, r0, #20
 8006e6a:	dd45      	ble.n	8006ef8 <rshift+0xa0>
 8006e6c:	f011 011f 	ands.w	r1, r1, #31
 8006e70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e78:	d10c      	bne.n	8006e94 <rshift+0x3c>
 8006e7a:	f100 0710 	add.w	r7, r0, #16
 8006e7e:	4629      	mov	r1, r5
 8006e80:	42b1      	cmp	r1, r6
 8006e82:	d334      	bcc.n	8006eee <rshift+0x96>
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	1eea      	subs	r2, r5, #3
 8006e8a:	4296      	cmp	r6, r2
 8006e8c:	bf38      	it	cc
 8006e8e:	2300      	movcc	r3, #0
 8006e90:	4423      	add	r3, r4
 8006e92:	e015      	b.n	8006ec0 <rshift+0x68>
 8006e94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e98:	f1c1 0820 	rsb	r8, r1, #32
 8006e9c:	40cf      	lsrs	r7, r1
 8006e9e:	f105 0e04 	add.w	lr, r5, #4
 8006ea2:	46a1      	mov	r9, r4
 8006ea4:	4576      	cmp	r6, lr
 8006ea6:	46f4      	mov	ip, lr
 8006ea8:	d815      	bhi.n	8006ed6 <rshift+0x7e>
 8006eaa:	1a9a      	subs	r2, r3, r2
 8006eac:	0092      	lsls	r2, r2, #2
 8006eae:	3a04      	subs	r2, #4
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	42ae      	cmp	r6, r5
 8006eb4:	bf38      	it	cc
 8006eb6:	2200      	movcc	r2, #0
 8006eb8:	18a3      	adds	r3, r4, r2
 8006eba:	50a7      	str	r7, [r4, r2]
 8006ebc:	b107      	cbz	r7, 8006ec0 <rshift+0x68>
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	1b1a      	subs	r2, r3, r4
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ec8:	bf08      	it	eq
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	6102      	str	r2, [r0, #16]
 8006ece:	bf08      	it	eq
 8006ed0:	6143      	streq	r3, [r0, #20]
 8006ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed6:	f8dc c000 	ldr.w	ip, [ip]
 8006eda:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ede:	ea4c 0707 	orr.w	r7, ip, r7
 8006ee2:	f849 7b04 	str.w	r7, [r9], #4
 8006ee6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006eea:	40cf      	lsrs	r7, r1
 8006eec:	e7da      	b.n	8006ea4 <rshift+0x4c>
 8006eee:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ef2:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ef6:	e7c3      	b.n	8006e80 <rshift+0x28>
 8006ef8:	4623      	mov	r3, r4
 8006efa:	e7e1      	b.n	8006ec0 <rshift+0x68>

08006efc <__hexdig_fun>:
 8006efc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d802      	bhi.n	8006f0a <__hexdig_fun+0xe>
 8006f04:	3820      	subs	r0, #32
 8006f06:	b2c0      	uxtb	r0, r0
 8006f08:	4770      	bx	lr
 8006f0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	d801      	bhi.n	8006f16 <__hexdig_fun+0x1a>
 8006f12:	3847      	subs	r0, #71	; 0x47
 8006f14:	e7f7      	b.n	8006f06 <__hexdig_fun+0xa>
 8006f16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d801      	bhi.n	8006f22 <__hexdig_fun+0x26>
 8006f1e:	3827      	subs	r0, #39	; 0x27
 8006f20:	e7f1      	b.n	8006f06 <__hexdig_fun+0xa>
 8006f22:	2000      	movs	r0, #0
 8006f24:	4770      	bx	lr
	...

08006f28 <__gethex>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	ed2d 8b02 	vpush	{d8}
 8006f30:	b089      	sub	sp, #36	; 0x24
 8006f32:	ee08 0a10 	vmov	s16, r0
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	4bb4      	ldr	r3, [pc, #720]	; (800720c <__gethex+0x2e4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	468b      	mov	fp, r1
 8006f42:	4690      	mov	r8, r2
 8006f44:	f7f9 f944 	bl	80001d0 <strlen>
 8006f48:	9b01      	ldr	r3, [sp, #4]
 8006f4a:	f8db 2000 	ldr.w	r2, [fp]
 8006f4e:	4403      	add	r3, r0
 8006f50:	4682      	mov	sl, r0
 8006f52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	1c93      	adds	r3, r2, #2
 8006f5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f62:	32fe      	adds	r2, #254	; 0xfe
 8006f64:	18d1      	adds	r1, r2, r3
 8006f66:	461f      	mov	r7, r3
 8006f68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f6c:	9100      	str	r1, [sp, #0]
 8006f6e:	2830      	cmp	r0, #48	; 0x30
 8006f70:	d0f8      	beq.n	8006f64 <__gethex+0x3c>
 8006f72:	f7ff ffc3 	bl	8006efc <__hexdig_fun>
 8006f76:	4604      	mov	r4, r0
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d13a      	bne.n	8006ff2 <__gethex+0xca>
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4638      	mov	r0, r7
 8006f82:	f001 fbb5 	bl	80086f0 <strncmp>
 8006f86:	4605      	mov	r5, r0
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d168      	bne.n	800705e <__gethex+0x136>
 8006f8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006f90:	eb07 060a 	add.w	r6, r7, sl
 8006f94:	f7ff ffb2 	bl	8006efc <__hexdig_fun>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d062      	beq.n	8007062 <__gethex+0x13a>
 8006f9c:	4633      	mov	r3, r6
 8006f9e:	7818      	ldrb	r0, [r3, #0]
 8006fa0:	2830      	cmp	r0, #48	; 0x30
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	f103 0301 	add.w	r3, r3, #1
 8006fa8:	d0f9      	beq.n	8006f9e <__gethex+0x76>
 8006faa:	f7ff ffa7 	bl	8006efc <__hexdig_fun>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	fab0 f480 	clz	r4, r0
 8006fb4:	0964      	lsrs	r4, r4, #5
 8006fb6:	4635      	mov	r5, r6
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	463a      	mov	r2, r7
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	3201      	adds	r2, #1
 8006fc0:	7830      	ldrb	r0, [r6, #0]
 8006fc2:	f7ff ff9b 	bl	8006efc <__hexdig_fun>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d1f8      	bne.n	8006fbc <__gethex+0x94>
 8006fca:	9901      	ldr	r1, [sp, #4]
 8006fcc:	4652      	mov	r2, sl
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f001 fb8e 	bl	80086f0 <strncmp>
 8006fd4:	b980      	cbnz	r0, 8006ff8 <__gethex+0xd0>
 8006fd6:	b94d      	cbnz	r5, 8006fec <__gethex+0xc4>
 8006fd8:	eb06 050a 	add.w	r5, r6, sl
 8006fdc:	462a      	mov	r2, r5
 8006fde:	4616      	mov	r6, r2
 8006fe0:	3201      	adds	r2, #1
 8006fe2:	7830      	ldrb	r0, [r6, #0]
 8006fe4:	f7ff ff8a 	bl	8006efc <__hexdig_fun>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d1f8      	bne.n	8006fde <__gethex+0xb6>
 8006fec:	1bad      	subs	r5, r5, r6
 8006fee:	00ad      	lsls	r5, r5, #2
 8006ff0:	e004      	b.n	8006ffc <__gethex+0xd4>
 8006ff2:	2400      	movs	r4, #0
 8006ff4:	4625      	mov	r5, r4
 8006ff6:	e7e0      	b.n	8006fba <__gethex+0x92>
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	d1f7      	bne.n	8006fec <__gethex+0xc4>
 8006ffc:	7833      	ldrb	r3, [r6, #0]
 8006ffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007002:	2b50      	cmp	r3, #80	; 0x50
 8007004:	d13b      	bne.n	800707e <__gethex+0x156>
 8007006:	7873      	ldrb	r3, [r6, #1]
 8007008:	2b2b      	cmp	r3, #43	; 0x2b
 800700a:	d02c      	beq.n	8007066 <__gethex+0x13e>
 800700c:	2b2d      	cmp	r3, #45	; 0x2d
 800700e:	d02e      	beq.n	800706e <__gethex+0x146>
 8007010:	1c71      	adds	r1, r6, #1
 8007012:	f04f 0900 	mov.w	r9, #0
 8007016:	7808      	ldrb	r0, [r1, #0]
 8007018:	f7ff ff70 	bl	8006efc <__hexdig_fun>
 800701c:	1e43      	subs	r3, r0, #1
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b18      	cmp	r3, #24
 8007022:	d82c      	bhi.n	800707e <__gethex+0x156>
 8007024:	f1a0 0210 	sub.w	r2, r0, #16
 8007028:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800702c:	f7ff ff66 	bl	8006efc <__hexdig_fun>
 8007030:	1e43      	subs	r3, r0, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b18      	cmp	r3, #24
 8007036:	d91d      	bls.n	8007074 <__gethex+0x14c>
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	d000      	beq.n	8007040 <__gethex+0x118>
 800703e:	4252      	negs	r2, r2
 8007040:	4415      	add	r5, r2
 8007042:	f8cb 1000 	str.w	r1, [fp]
 8007046:	b1e4      	cbz	r4, 8007082 <__gethex+0x15a>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2700      	movne	r7, #0
 8007050:	2706      	moveq	r7, #6
 8007052:	4638      	mov	r0, r7
 8007054:	b009      	add	sp, #36	; 0x24
 8007056:	ecbd 8b02 	vpop	{d8}
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	463e      	mov	r6, r7
 8007060:	4625      	mov	r5, r4
 8007062:	2401      	movs	r4, #1
 8007064:	e7ca      	b.n	8006ffc <__gethex+0xd4>
 8007066:	f04f 0900 	mov.w	r9, #0
 800706a:	1cb1      	adds	r1, r6, #2
 800706c:	e7d3      	b.n	8007016 <__gethex+0xee>
 800706e:	f04f 0901 	mov.w	r9, #1
 8007072:	e7fa      	b.n	800706a <__gethex+0x142>
 8007074:	230a      	movs	r3, #10
 8007076:	fb03 0202 	mla	r2, r3, r2, r0
 800707a:	3a10      	subs	r2, #16
 800707c:	e7d4      	b.n	8007028 <__gethex+0x100>
 800707e:	4631      	mov	r1, r6
 8007080:	e7df      	b.n	8007042 <__gethex+0x11a>
 8007082:	1bf3      	subs	r3, r6, r7
 8007084:	3b01      	subs	r3, #1
 8007086:	4621      	mov	r1, r4
 8007088:	2b07      	cmp	r3, #7
 800708a:	dc0b      	bgt.n	80070a4 <__gethex+0x17c>
 800708c:	ee18 0a10 	vmov	r0, s16
 8007090:	f000 fa64 	bl	800755c <_Balloc>
 8007094:	4604      	mov	r4, r0
 8007096:	b940      	cbnz	r0, 80070aa <__gethex+0x182>
 8007098:	4b5d      	ldr	r3, [pc, #372]	; (8007210 <__gethex+0x2e8>)
 800709a:	4602      	mov	r2, r0
 800709c:	21de      	movs	r1, #222	; 0xde
 800709e:	485d      	ldr	r0, [pc, #372]	; (8007214 <__gethex+0x2ec>)
 80070a0:	f001 fb48 	bl	8008734 <__assert_func>
 80070a4:	3101      	adds	r1, #1
 80070a6:	105b      	asrs	r3, r3, #1
 80070a8:	e7ee      	b.n	8007088 <__gethex+0x160>
 80070aa:	f100 0914 	add.w	r9, r0, #20
 80070ae:	f04f 0b00 	mov.w	fp, #0
 80070b2:	f1ca 0301 	rsb	r3, sl, #1
 80070b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80070ba:	f8cd b000 	str.w	fp, [sp]
 80070be:	9306      	str	r3, [sp, #24]
 80070c0:	42b7      	cmp	r7, r6
 80070c2:	d340      	bcc.n	8007146 <__gethex+0x21e>
 80070c4:	9802      	ldr	r0, [sp, #8]
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	f840 3b04 	str.w	r3, [r0], #4
 80070cc:	eba0 0009 	sub.w	r0, r0, r9
 80070d0:	1080      	asrs	r0, r0, #2
 80070d2:	0146      	lsls	r6, r0, #5
 80070d4:	6120      	str	r0, [r4, #16]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fb32 	bl	8007740 <__hi0bits>
 80070dc:	1a30      	subs	r0, r6, r0
 80070de:	f8d8 6000 	ldr.w	r6, [r8]
 80070e2:	42b0      	cmp	r0, r6
 80070e4:	dd63      	ble.n	80071ae <__gethex+0x286>
 80070e6:	1b87      	subs	r7, r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fef5 	bl	8007eda <__any_on>
 80070f0:	4682      	mov	sl, r0
 80070f2:	b1a8      	cbz	r0, 8007120 <__gethex+0x1f8>
 80070f4:	1e7b      	subs	r3, r7, #1
 80070f6:	1159      	asrs	r1, r3, #5
 80070f8:	f003 021f 	and.w	r2, r3, #31
 80070fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007100:	f04f 0a01 	mov.w	sl, #1
 8007104:	fa0a f202 	lsl.w	r2, sl, r2
 8007108:	420a      	tst	r2, r1
 800710a:	d009      	beq.n	8007120 <__gethex+0x1f8>
 800710c:	4553      	cmp	r3, sl
 800710e:	dd05      	ble.n	800711c <__gethex+0x1f4>
 8007110:	1eb9      	subs	r1, r7, #2
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fee1 	bl	8007eda <__any_on>
 8007118:	2800      	cmp	r0, #0
 800711a:	d145      	bne.n	80071a8 <__gethex+0x280>
 800711c:	f04f 0a02 	mov.w	sl, #2
 8007120:	4639      	mov	r1, r7
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fe98 	bl	8006e58 <rshift>
 8007128:	443d      	add	r5, r7
 800712a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800712e:	42ab      	cmp	r3, r5
 8007130:	da4c      	bge.n	80071cc <__gethex+0x2a4>
 8007132:	ee18 0a10 	vmov	r0, s16
 8007136:	4621      	mov	r1, r4
 8007138:	f000 fa50 	bl	80075dc <_Bfree>
 800713c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800713e:	2300      	movs	r3, #0
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	27a3      	movs	r7, #163	; 0xa3
 8007144:	e785      	b.n	8007052 <__gethex+0x12a>
 8007146:	1e73      	subs	r3, r6, #1
 8007148:	9a05      	ldr	r2, [sp, #20]
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007150:	4293      	cmp	r3, r2
 8007152:	d019      	beq.n	8007188 <__gethex+0x260>
 8007154:	f1bb 0f20 	cmp.w	fp, #32
 8007158:	d107      	bne.n	800716a <__gethex+0x242>
 800715a:	9b02      	ldr	r3, [sp, #8]
 800715c:	9a00      	ldr	r2, [sp, #0]
 800715e:	f843 2b04 	str.w	r2, [r3], #4
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	2300      	movs	r3, #0
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	469b      	mov	fp, r3
 800716a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800716e:	f7ff fec5 	bl	8006efc <__hexdig_fun>
 8007172:	9b00      	ldr	r3, [sp, #0]
 8007174:	f000 000f 	and.w	r0, r0, #15
 8007178:	fa00 f00b 	lsl.w	r0, r0, fp
 800717c:	4303      	orrs	r3, r0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f10b 0b04 	add.w	fp, fp, #4
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	e00d      	b.n	80071a4 <__gethex+0x27c>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	9a06      	ldr	r2, [sp, #24]
 800718c:	4413      	add	r3, r2
 800718e:	42bb      	cmp	r3, r7
 8007190:	d3e0      	bcc.n	8007154 <__gethex+0x22c>
 8007192:	4618      	mov	r0, r3
 8007194:	9901      	ldr	r1, [sp, #4]
 8007196:	9307      	str	r3, [sp, #28]
 8007198:	4652      	mov	r2, sl
 800719a:	f001 faa9 	bl	80086f0 <strncmp>
 800719e:	9b07      	ldr	r3, [sp, #28]
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d1d7      	bne.n	8007154 <__gethex+0x22c>
 80071a4:	461e      	mov	r6, r3
 80071a6:	e78b      	b.n	80070c0 <__gethex+0x198>
 80071a8:	f04f 0a03 	mov.w	sl, #3
 80071ac:	e7b8      	b.n	8007120 <__gethex+0x1f8>
 80071ae:	da0a      	bge.n	80071c6 <__gethex+0x29e>
 80071b0:	1a37      	subs	r7, r6, r0
 80071b2:	4621      	mov	r1, r4
 80071b4:	ee18 0a10 	vmov	r0, s16
 80071b8:	463a      	mov	r2, r7
 80071ba:	f000 fc2b 	bl	8007a14 <__lshift>
 80071be:	1bed      	subs	r5, r5, r7
 80071c0:	4604      	mov	r4, r0
 80071c2:	f100 0914 	add.w	r9, r0, #20
 80071c6:	f04f 0a00 	mov.w	sl, #0
 80071ca:	e7ae      	b.n	800712a <__gethex+0x202>
 80071cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071d0:	42a8      	cmp	r0, r5
 80071d2:	dd72      	ble.n	80072ba <__gethex+0x392>
 80071d4:	1b45      	subs	r5, r0, r5
 80071d6:	42ae      	cmp	r6, r5
 80071d8:	dc36      	bgt.n	8007248 <__gethex+0x320>
 80071da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d02a      	beq.n	8007238 <__gethex+0x310>
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d02c      	beq.n	8007240 <__gethex+0x318>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11c      	bne.n	8007224 <__gethex+0x2fc>
 80071ea:	42ae      	cmp	r6, r5
 80071ec:	d11a      	bne.n	8007224 <__gethex+0x2fc>
 80071ee:	2e01      	cmp	r6, #1
 80071f0:	d112      	bne.n	8007218 <__gethex+0x2f0>
 80071f2:	9a04      	ldr	r2, [sp, #16]
 80071f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	2301      	movs	r3, #1
 80071fc:	6123      	str	r3, [r4, #16]
 80071fe:	f8c9 3000 	str.w	r3, [r9]
 8007202:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007204:	2762      	movs	r7, #98	; 0x62
 8007206:	601c      	str	r4, [r3, #0]
 8007208:	e723      	b.n	8007052 <__gethex+0x12a>
 800720a:	bf00      	nop
 800720c:	0800a340 	.word	0x0800a340
 8007210:	0800a2c8 	.word	0x0800a2c8
 8007214:	0800a2d9 	.word	0x0800a2d9
 8007218:	1e71      	subs	r1, r6, #1
 800721a:	4620      	mov	r0, r4
 800721c:	f000 fe5d 	bl	8007eda <__any_on>
 8007220:	2800      	cmp	r0, #0
 8007222:	d1e6      	bne.n	80071f2 <__gethex+0x2ca>
 8007224:	ee18 0a10 	vmov	r0, s16
 8007228:	4621      	mov	r1, r4
 800722a:	f000 f9d7 	bl	80075dc <_Bfree>
 800722e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007230:	2300      	movs	r3, #0
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	2750      	movs	r7, #80	; 0x50
 8007236:	e70c      	b.n	8007052 <__gethex+0x12a>
 8007238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f2      	bne.n	8007224 <__gethex+0x2fc>
 800723e:	e7d8      	b.n	80071f2 <__gethex+0x2ca>
 8007240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1d5      	bne.n	80071f2 <__gethex+0x2ca>
 8007246:	e7ed      	b.n	8007224 <__gethex+0x2fc>
 8007248:	1e6f      	subs	r7, r5, #1
 800724a:	f1ba 0f00 	cmp.w	sl, #0
 800724e:	d131      	bne.n	80072b4 <__gethex+0x38c>
 8007250:	b127      	cbz	r7, 800725c <__gethex+0x334>
 8007252:	4639      	mov	r1, r7
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fe40 	bl	8007eda <__any_on>
 800725a:	4682      	mov	sl, r0
 800725c:	117b      	asrs	r3, r7, #5
 800725e:	2101      	movs	r1, #1
 8007260:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007264:	f007 071f 	and.w	r7, r7, #31
 8007268:	fa01 f707 	lsl.w	r7, r1, r7
 800726c:	421f      	tst	r7, r3
 800726e:	4629      	mov	r1, r5
 8007270:	4620      	mov	r0, r4
 8007272:	bf18      	it	ne
 8007274:	f04a 0a02 	orrne.w	sl, sl, #2
 8007278:	1b76      	subs	r6, r6, r5
 800727a:	f7ff fded 	bl	8006e58 <rshift>
 800727e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007282:	2702      	movs	r7, #2
 8007284:	f1ba 0f00 	cmp.w	sl, #0
 8007288:	d048      	beq.n	800731c <__gethex+0x3f4>
 800728a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d015      	beq.n	80072be <__gethex+0x396>
 8007292:	2b03      	cmp	r3, #3
 8007294:	d017      	beq.n	80072c6 <__gethex+0x39e>
 8007296:	2b01      	cmp	r3, #1
 8007298:	d109      	bne.n	80072ae <__gethex+0x386>
 800729a:	f01a 0f02 	tst.w	sl, #2
 800729e:	d006      	beq.n	80072ae <__gethex+0x386>
 80072a0:	f8d9 0000 	ldr.w	r0, [r9]
 80072a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80072a8:	f01a 0f01 	tst.w	sl, #1
 80072ac:	d10e      	bne.n	80072cc <__gethex+0x3a4>
 80072ae:	f047 0710 	orr.w	r7, r7, #16
 80072b2:	e033      	b.n	800731c <__gethex+0x3f4>
 80072b4:	f04f 0a01 	mov.w	sl, #1
 80072b8:	e7d0      	b.n	800725c <__gethex+0x334>
 80072ba:	2701      	movs	r7, #1
 80072bc:	e7e2      	b.n	8007284 <__gethex+0x35c>
 80072be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072c0:	f1c3 0301 	rsb	r3, r3, #1
 80072c4:	9315      	str	r3, [sp, #84]	; 0x54
 80072c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <__gethex+0x386>
 80072cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80072d0:	f104 0314 	add.w	r3, r4, #20
 80072d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80072d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80072dc:	f04f 0c00 	mov.w	ip, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80072ea:	d01c      	beq.n	8007326 <__gethex+0x3fe>
 80072ec:	3201      	adds	r2, #1
 80072ee:	6002      	str	r2, [r0, #0]
 80072f0:	2f02      	cmp	r7, #2
 80072f2:	f104 0314 	add.w	r3, r4, #20
 80072f6:	d13f      	bne.n	8007378 <__gethex+0x450>
 80072f8:	f8d8 2000 	ldr.w	r2, [r8]
 80072fc:	3a01      	subs	r2, #1
 80072fe:	42b2      	cmp	r2, r6
 8007300:	d10a      	bne.n	8007318 <__gethex+0x3f0>
 8007302:	1171      	asrs	r1, r6, #5
 8007304:	2201      	movs	r2, #1
 8007306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800730a:	f006 061f 	and.w	r6, r6, #31
 800730e:	fa02 f606 	lsl.w	r6, r2, r6
 8007312:	421e      	tst	r6, r3
 8007314:	bf18      	it	ne
 8007316:	4617      	movne	r7, r2
 8007318:	f047 0720 	orr.w	r7, r7, #32
 800731c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800731e:	601c      	str	r4, [r3, #0]
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	601d      	str	r5, [r3, #0]
 8007324:	e695      	b.n	8007052 <__gethex+0x12a>
 8007326:	4299      	cmp	r1, r3
 8007328:	f843 cc04 	str.w	ip, [r3, #-4]
 800732c:	d8d8      	bhi.n	80072e0 <__gethex+0x3b8>
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	459b      	cmp	fp, r3
 8007332:	db19      	blt.n	8007368 <__gethex+0x440>
 8007334:	6861      	ldr	r1, [r4, #4]
 8007336:	ee18 0a10 	vmov	r0, s16
 800733a:	3101      	adds	r1, #1
 800733c:	f000 f90e 	bl	800755c <_Balloc>
 8007340:	4681      	mov	r9, r0
 8007342:	b918      	cbnz	r0, 800734c <__gethex+0x424>
 8007344:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <__gethex+0x488>)
 8007346:	4602      	mov	r2, r0
 8007348:	2184      	movs	r1, #132	; 0x84
 800734a:	e6a8      	b.n	800709e <__gethex+0x176>
 800734c:	6922      	ldr	r2, [r4, #16]
 800734e:	3202      	adds	r2, #2
 8007350:	f104 010c 	add.w	r1, r4, #12
 8007354:	0092      	lsls	r2, r2, #2
 8007356:	300c      	adds	r0, #12
 8007358:	f7fe fdc0 	bl	8005edc <memcpy>
 800735c:	4621      	mov	r1, r4
 800735e:	ee18 0a10 	vmov	r0, s16
 8007362:	f000 f93b 	bl	80075dc <_Bfree>
 8007366:	464c      	mov	r4, r9
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007370:	6122      	str	r2, [r4, #16]
 8007372:	2201      	movs	r2, #1
 8007374:	615a      	str	r2, [r3, #20]
 8007376:	e7bb      	b.n	80072f0 <__gethex+0x3c8>
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	455a      	cmp	r2, fp
 800737c:	dd0b      	ble.n	8007396 <__gethex+0x46e>
 800737e:	2101      	movs	r1, #1
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff fd69 	bl	8006e58 <rshift>
 8007386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800738a:	3501      	adds	r5, #1
 800738c:	42ab      	cmp	r3, r5
 800738e:	f6ff aed0 	blt.w	8007132 <__gethex+0x20a>
 8007392:	2701      	movs	r7, #1
 8007394:	e7c0      	b.n	8007318 <__gethex+0x3f0>
 8007396:	f016 061f 	ands.w	r6, r6, #31
 800739a:	d0fa      	beq.n	8007392 <__gethex+0x46a>
 800739c:	4453      	add	r3, sl
 800739e:	f1c6 0620 	rsb	r6, r6, #32
 80073a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80073a6:	f000 f9cb 	bl	8007740 <__hi0bits>
 80073aa:	42b0      	cmp	r0, r6
 80073ac:	dbe7      	blt.n	800737e <__gethex+0x456>
 80073ae:	e7f0      	b.n	8007392 <__gethex+0x46a>
 80073b0:	0800a2c8 	.word	0x0800a2c8

080073b4 <L_shift>:
 80073b4:	f1c2 0208 	rsb	r2, r2, #8
 80073b8:	0092      	lsls	r2, r2, #2
 80073ba:	b570      	push	{r4, r5, r6, lr}
 80073bc:	f1c2 0620 	rsb	r6, r2, #32
 80073c0:	6843      	ldr	r3, [r0, #4]
 80073c2:	6804      	ldr	r4, [r0, #0]
 80073c4:	fa03 f506 	lsl.w	r5, r3, r6
 80073c8:	432c      	orrs	r4, r5
 80073ca:	40d3      	lsrs	r3, r2
 80073cc:	6004      	str	r4, [r0, #0]
 80073ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80073d2:	4288      	cmp	r0, r1
 80073d4:	d3f4      	bcc.n	80073c0 <L_shift+0xc>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}

080073d8 <__match>:
 80073d8:	b530      	push	{r4, r5, lr}
 80073da:	6803      	ldr	r3, [r0, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e2:	b914      	cbnz	r4, 80073ea <__match+0x12>
 80073e4:	6003      	str	r3, [r0, #0]
 80073e6:	2001      	movs	r0, #1
 80073e8:	bd30      	pop	{r4, r5, pc}
 80073ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80073f2:	2d19      	cmp	r5, #25
 80073f4:	bf98      	it	ls
 80073f6:	3220      	addls	r2, #32
 80073f8:	42a2      	cmp	r2, r4
 80073fa:	d0f0      	beq.n	80073de <__match+0x6>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e7f3      	b.n	80073e8 <__match+0x10>

08007400 <__hexnan>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	680b      	ldr	r3, [r1, #0]
 8007406:	115e      	asrs	r6, r3, #5
 8007408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800740c:	f013 031f 	ands.w	r3, r3, #31
 8007410:	b087      	sub	sp, #28
 8007412:	bf18      	it	ne
 8007414:	3604      	addne	r6, #4
 8007416:	2500      	movs	r5, #0
 8007418:	1f37      	subs	r7, r6, #4
 800741a:	4690      	mov	r8, r2
 800741c:	6802      	ldr	r2, [r0, #0]
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	4682      	mov	sl, r0
 8007422:	f846 5c04 	str.w	r5, [r6, #-4]
 8007426:	46b9      	mov	r9, r7
 8007428:	463c      	mov	r4, r7
 800742a:	9502      	str	r5, [sp, #8]
 800742c:	46ab      	mov	fp, r5
 800742e:	7851      	ldrb	r1, [r2, #1]
 8007430:	1c53      	adds	r3, r2, #1
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	b341      	cbz	r1, 8007488 <__hexnan+0x88>
 8007436:	4608      	mov	r0, r1
 8007438:	9205      	str	r2, [sp, #20]
 800743a:	9104      	str	r1, [sp, #16]
 800743c:	f7ff fd5e 	bl	8006efc <__hexdig_fun>
 8007440:	2800      	cmp	r0, #0
 8007442:	d14f      	bne.n	80074e4 <__hexnan+0xe4>
 8007444:	9904      	ldr	r1, [sp, #16]
 8007446:	9a05      	ldr	r2, [sp, #20]
 8007448:	2920      	cmp	r1, #32
 800744a:	d818      	bhi.n	800747e <__hexnan+0x7e>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	459b      	cmp	fp, r3
 8007450:	dd13      	ble.n	800747a <__hexnan+0x7a>
 8007452:	454c      	cmp	r4, r9
 8007454:	d206      	bcs.n	8007464 <__hexnan+0x64>
 8007456:	2d07      	cmp	r5, #7
 8007458:	dc04      	bgt.n	8007464 <__hexnan+0x64>
 800745a:	462a      	mov	r2, r5
 800745c:	4649      	mov	r1, r9
 800745e:	4620      	mov	r0, r4
 8007460:	f7ff ffa8 	bl	80073b4 <L_shift>
 8007464:	4544      	cmp	r4, r8
 8007466:	d950      	bls.n	800750a <__hexnan+0x10a>
 8007468:	2300      	movs	r3, #0
 800746a:	f1a4 0904 	sub.w	r9, r4, #4
 800746e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007472:	f8cd b008 	str.w	fp, [sp, #8]
 8007476:	464c      	mov	r4, r9
 8007478:	461d      	mov	r5, r3
 800747a:	9a03      	ldr	r2, [sp, #12]
 800747c:	e7d7      	b.n	800742e <__hexnan+0x2e>
 800747e:	2929      	cmp	r1, #41	; 0x29
 8007480:	d156      	bne.n	8007530 <__hexnan+0x130>
 8007482:	3202      	adds	r2, #2
 8007484:	f8ca 2000 	str.w	r2, [sl]
 8007488:	f1bb 0f00 	cmp.w	fp, #0
 800748c:	d050      	beq.n	8007530 <__hexnan+0x130>
 800748e:	454c      	cmp	r4, r9
 8007490:	d206      	bcs.n	80074a0 <__hexnan+0xa0>
 8007492:	2d07      	cmp	r5, #7
 8007494:	dc04      	bgt.n	80074a0 <__hexnan+0xa0>
 8007496:	462a      	mov	r2, r5
 8007498:	4649      	mov	r1, r9
 800749a:	4620      	mov	r0, r4
 800749c:	f7ff ff8a 	bl	80073b4 <L_shift>
 80074a0:	4544      	cmp	r4, r8
 80074a2:	d934      	bls.n	800750e <__hexnan+0x10e>
 80074a4:	f1a8 0204 	sub.w	r2, r8, #4
 80074a8:	4623      	mov	r3, r4
 80074aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80074ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80074b2:	429f      	cmp	r7, r3
 80074b4:	d2f9      	bcs.n	80074aa <__hexnan+0xaa>
 80074b6:	1b3b      	subs	r3, r7, r4
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	3304      	adds	r3, #4
 80074be:	3401      	adds	r4, #1
 80074c0:	3e03      	subs	r6, #3
 80074c2:	42b4      	cmp	r4, r6
 80074c4:	bf88      	it	hi
 80074c6:	2304      	movhi	r3, #4
 80074c8:	4443      	add	r3, r8
 80074ca:	2200      	movs	r2, #0
 80074cc:	f843 2b04 	str.w	r2, [r3], #4
 80074d0:	429f      	cmp	r7, r3
 80074d2:	d2fb      	bcs.n	80074cc <__hexnan+0xcc>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	b91b      	cbnz	r3, 80074e0 <__hexnan+0xe0>
 80074d8:	4547      	cmp	r7, r8
 80074da:	d127      	bne.n	800752c <__hexnan+0x12c>
 80074dc:	2301      	movs	r3, #1
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	2005      	movs	r0, #5
 80074e2:	e026      	b.n	8007532 <__hexnan+0x132>
 80074e4:	3501      	adds	r5, #1
 80074e6:	2d08      	cmp	r5, #8
 80074e8:	f10b 0b01 	add.w	fp, fp, #1
 80074ec:	dd06      	ble.n	80074fc <__hexnan+0xfc>
 80074ee:	4544      	cmp	r4, r8
 80074f0:	d9c3      	bls.n	800747a <__hexnan+0x7a>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80074f8:	2501      	movs	r5, #1
 80074fa:	3c04      	subs	r4, #4
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	f000 000f 	and.w	r0, r0, #15
 8007502:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	e7b7      	b.n	800747a <__hexnan+0x7a>
 800750a:	2508      	movs	r5, #8
 800750c:	e7b5      	b.n	800747a <__hexnan+0x7a>
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0df      	beq.n	80074d4 <__hexnan+0xd4>
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	f1c3 0320 	rsb	r3, r3, #32
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007524:	401a      	ands	r2, r3
 8007526:	f846 2c04 	str.w	r2, [r6, #-4]
 800752a:	e7d3      	b.n	80074d4 <__hexnan+0xd4>
 800752c:	3f04      	subs	r7, #4
 800752e:	e7d1      	b.n	80074d4 <__hexnan+0xd4>
 8007530:	2004      	movs	r0, #4
 8007532:	b007      	add	sp, #28
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007538 <__ascii_mbtowc>:
 8007538:	b082      	sub	sp, #8
 800753a:	b901      	cbnz	r1, 800753e <__ascii_mbtowc+0x6>
 800753c:	a901      	add	r1, sp, #4
 800753e:	b142      	cbz	r2, 8007552 <__ascii_mbtowc+0x1a>
 8007540:	b14b      	cbz	r3, 8007556 <__ascii_mbtowc+0x1e>
 8007542:	7813      	ldrb	r3, [r2, #0]
 8007544:	600b      	str	r3, [r1, #0]
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	1e10      	subs	r0, r2, #0
 800754a:	bf18      	it	ne
 800754c:	2001      	movne	r0, #1
 800754e:	b002      	add	sp, #8
 8007550:	4770      	bx	lr
 8007552:	4610      	mov	r0, r2
 8007554:	e7fb      	b.n	800754e <__ascii_mbtowc+0x16>
 8007556:	f06f 0001 	mvn.w	r0, #1
 800755a:	e7f8      	b.n	800754e <__ascii_mbtowc+0x16>

0800755c <_Balloc>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	b976      	cbnz	r6, 8007584 <_Balloc+0x28>
 8007566:	2010      	movs	r0, #16
 8007568:	f001 ff8e 	bl	8009488 <malloc>
 800756c:	4602      	mov	r2, r0
 800756e:	6260      	str	r0, [r4, #36]	; 0x24
 8007570:	b920      	cbnz	r0, 800757c <_Balloc+0x20>
 8007572:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <_Balloc+0x78>)
 8007574:	4818      	ldr	r0, [pc, #96]	; (80075d8 <_Balloc+0x7c>)
 8007576:	2166      	movs	r1, #102	; 0x66
 8007578:	f001 f8dc 	bl	8008734 <__assert_func>
 800757c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007580:	6006      	str	r6, [r0, #0]
 8007582:	60c6      	str	r6, [r0, #12]
 8007584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007586:	68f3      	ldr	r3, [r6, #12]
 8007588:	b183      	cbz	r3, 80075ac <_Balloc+0x50>
 800758a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007592:	b9b8      	cbnz	r0, 80075c4 <_Balloc+0x68>
 8007594:	2101      	movs	r1, #1
 8007596:	fa01 f605 	lsl.w	r6, r1, r5
 800759a:	1d72      	adds	r2, r6, #5
 800759c:	0092      	lsls	r2, r2, #2
 800759e:	4620      	mov	r0, r4
 80075a0:	f000 fcbc 	bl	8007f1c <_calloc_r>
 80075a4:	b160      	cbz	r0, 80075c0 <_Balloc+0x64>
 80075a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075aa:	e00e      	b.n	80075ca <_Balloc+0x6e>
 80075ac:	2221      	movs	r2, #33	; 0x21
 80075ae:	2104      	movs	r1, #4
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fcb3 	bl	8007f1c <_calloc_r>
 80075b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075b8:	60f0      	str	r0, [r6, #12]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e4      	bne.n	800758a <_Balloc+0x2e>
 80075c0:	2000      	movs	r0, #0
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	6802      	ldr	r2, [r0, #0]
 80075c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ca:	2300      	movs	r3, #0
 80075cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075d0:	e7f7      	b.n	80075c2 <_Balloc+0x66>
 80075d2:	bf00      	nop
 80075d4:	0800a354 	.word	0x0800a354
 80075d8:	0800a36b 	.word	0x0800a36b

080075dc <_Bfree>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075e0:	4605      	mov	r5, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	b976      	cbnz	r6, 8007604 <_Bfree+0x28>
 80075e6:	2010      	movs	r0, #16
 80075e8:	f001 ff4e 	bl	8009488 <malloc>
 80075ec:	4602      	mov	r2, r0
 80075ee:	6268      	str	r0, [r5, #36]	; 0x24
 80075f0:	b920      	cbnz	r0, 80075fc <_Bfree+0x20>
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <_Bfree+0x3c>)
 80075f4:	4809      	ldr	r0, [pc, #36]	; (800761c <_Bfree+0x40>)
 80075f6:	218a      	movs	r1, #138	; 0x8a
 80075f8:	f001 f89c 	bl	8008734 <__assert_func>
 80075fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007600:	6006      	str	r6, [r0, #0]
 8007602:	60c6      	str	r6, [r0, #12]
 8007604:	b13c      	cbz	r4, 8007616 <_Bfree+0x3a>
 8007606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007608:	6862      	ldr	r2, [r4, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007610:	6021      	str	r1, [r4, #0]
 8007612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	0800a354 	.word	0x0800a354
 800761c:	0800a36b 	.word	0x0800a36b

08007620 <__multadd>:
 8007620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007624:	690d      	ldr	r5, [r1, #16]
 8007626:	4607      	mov	r7, r0
 8007628:	460c      	mov	r4, r1
 800762a:	461e      	mov	r6, r3
 800762c:	f101 0c14 	add.w	ip, r1, #20
 8007630:	2000      	movs	r0, #0
 8007632:	f8dc 3000 	ldr.w	r3, [ip]
 8007636:	b299      	uxth	r1, r3
 8007638:	fb02 6101 	mla	r1, r2, r1, r6
 800763c:	0c1e      	lsrs	r6, r3, #16
 800763e:	0c0b      	lsrs	r3, r1, #16
 8007640:	fb02 3306 	mla	r3, r2, r6, r3
 8007644:	b289      	uxth	r1, r1
 8007646:	3001      	adds	r0, #1
 8007648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800764c:	4285      	cmp	r5, r0
 800764e:	f84c 1b04 	str.w	r1, [ip], #4
 8007652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007656:	dcec      	bgt.n	8007632 <__multadd+0x12>
 8007658:	b30e      	cbz	r6, 800769e <__multadd+0x7e>
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc19      	bgt.n	8007694 <__multadd+0x74>
 8007660:	6861      	ldr	r1, [r4, #4]
 8007662:	4638      	mov	r0, r7
 8007664:	3101      	adds	r1, #1
 8007666:	f7ff ff79 	bl	800755c <_Balloc>
 800766a:	4680      	mov	r8, r0
 800766c:	b928      	cbnz	r0, 800767a <__multadd+0x5a>
 800766e:	4602      	mov	r2, r0
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <__multadd+0x84>)
 8007672:	480d      	ldr	r0, [pc, #52]	; (80076a8 <__multadd+0x88>)
 8007674:	21b5      	movs	r1, #181	; 0xb5
 8007676:	f001 f85d 	bl	8008734 <__assert_func>
 800767a:	6922      	ldr	r2, [r4, #16]
 800767c:	3202      	adds	r2, #2
 800767e:	f104 010c 	add.w	r1, r4, #12
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	300c      	adds	r0, #12
 8007686:	f7fe fc29 	bl	8005edc <memcpy>
 800768a:	4621      	mov	r1, r4
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff ffa5 	bl	80075dc <_Bfree>
 8007692:	4644      	mov	r4, r8
 8007694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007698:	3501      	adds	r5, #1
 800769a:	615e      	str	r6, [r3, #20]
 800769c:	6125      	str	r5, [r4, #16]
 800769e:	4620      	mov	r0, r4
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	0800a2c8 	.word	0x0800a2c8
 80076a8:	0800a36b 	.word	0x0800a36b

080076ac <__s2b>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	4615      	mov	r5, r2
 80076b4:	461f      	mov	r7, r3
 80076b6:	2209      	movs	r2, #9
 80076b8:	3308      	adds	r3, #8
 80076ba:	4606      	mov	r6, r0
 80076bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80076c0:	2100      	movs	r1, #0
 80076c2:	2201      	movs	r2, #1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	db09      	blt.n	80076dc <__s2b+0x30>
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7ff ff47 	bl	800755c <_Balloc>
 80076ce:	b940      	cbnz	r0, 80076e2 <__s2b+0x36>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b19      	ldr	r3, [pc, #100]	; (8007738 <__s2b+0x8c>)
 80076d4:	4819      	ldr	r0, [pc, #100]	; (800773c <__s2b+0x90>)
 80076d6:	21ce      	movs	r1, #206	; 0xce
 80076d8:	f001 f82c 	bl	8008734 <__assert_func>
 80076dc:	0052      	lsls	r2, r2, #1
 80076de:	3101      	adds	r1, #1
 80076e0:	e7f0      	b.n	80076c4 <__s2b+0x18>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	6143      	str	r3, [r0, #20]
 80076e6:	2d09      	cmp	r5, #9
 80076e8:	f04f 0301 	mov.w	r3, #1
 80076ec:	6103      	str	r3, [r0, #16]
 80076ee:	dd16      	ble.n	800771e <__s2b+0x72>
 80076f0:	f104 0909 	add.w	r9, r4, #9
 80076f4:	46c8      	mov	r8, r9
 80076f6:	442c      	add	r4, r5
 80076f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076fc:	4601      	mov	r1, r0
 80076fe:	3b30      	subs	r3, #48	; 0x30
 8007700:	220a      	movs	r2, #10
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ff8c 	bl	8007620 <__multadd>
 8007708:	45a0      	cmp	r8, r4
 800770a:	d1f5      	bne.n	80076f8 <__s2b+0x4c>
 800770c:	f1a5 0408 	sub.w	r4, r5, #8
 8007710:	444c      	add	r4, r9
 8007712:	1b2d      	subs	r5, r5, r4
 8007714:	1963      	adds	r3, r4, r5
 8007716:	42bb      	cmp	r3, r7
 8007718:	db04      	blt.n	8007724 <__s2b+0x78>
 800771a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800771e:	340a      	adds	r4, #10
 8007720:	2509      	movs	r5, #9
 8007722:	e7f6      	b.n	8007712 <__s2b+0x66>
 8007724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007728:	4601      	mov	r1, r0
 800772a:	3b30      	subs	r3, #48	; 0x30
 800772c:	220a      	movs	r2, #10
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff ff76 	bl	8007620 <__multadd>
 8007734:	e7ee      	b.n	8007714 <__s2b+0x68>
 8007736:	bf00      	nop
 8007738:	0800a2c8 	.word	0x0800a2c8
 800773c:	0800a36b 	.word	0x0800a36b

08007740 <__hi0bits>:
 8007740:	0c03      	lsrs	r3, r0, #16
 8007742:	041b      	lsls	r3, r3, #16
 8007744:	b9d3      	cbnz	r3, 800777c <__hi0bits+0x3c>
 8007746:	0400      	lsls	r0, r0, #16
 8007748:	2310      	movs	r3, #16
 800774a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800774e:	bf04      	itt	eq
 8007750:	0200      	lsleq	r0, r0, #8
 8007752:	3308      	addeq	r3, #8
 8007754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007758:	bf04      	itt	eq
 800775a:	0100      	lsleq	r0, r0, #4
 800775c:	3304      	addeq	r3, #4
 800775e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007762:	bf04      	itt	eq
 8007764:	0080      	lsleq	r0, r0, #2
 8007766:	3302      	addeq	r3, #2
 8007768:	2800      	cmp	r0, #0
 800776a:	db05      	blt.n	8007778 <__hi0bits+0x38>
 800776c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007770:	f103 0301 	add.w	r3, r3, #1
 8007774:	bf08      	it	eq
 8007776:	2320      	moveq	r3, #32
 8007778:	4618      	mov	r0, r3
 800777a:	4770      	bx	lr
 800777c:	2300      	movs	r3, #0
 800777e:	e7e4      	b.n	800774a <__hi0bits+0xa>

08007780 <__lo0bits>:
 8007780:	6803      	ldr	r3, [r0, #0]
 8007782:	f013 0207 	ands.w	r2, r3, #7
 8007786:	4601      	mov	r1, r0
 8007788:	d00b      	beq.n	80077a2 <__lo0bits+0x22>
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d423      	bmi.n	80077d6 <__lo0bits+0x56>
 800778e:	0798      	lsls	r0, r3, #30
 8007790:	bf49      	itett	mi
 8007792:	085b      	lsrmi	r3, r3, #1
 8007794:	089b      	lsrpl	r3, r3, #2
 8007796:	2001      	movmi	r0, #1
 8007798:	600b      	strmi	r3, [r1, #0]
 800779a:	bf5c      	itt	pl
 800779c:	600b      	strpl	r3, [r1, #0]
 800779e:	2002      	movpl	r0, #2
 80077a0:	4770      	bx	lr
 80077a2:	b298      	uxth	r0, r3
 80077a4:	b9a8      	cbnz	r0, 80077d2 <__lo0bits+0x52>
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	2010      	movs	r0, #16
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	b90a      	cbnz	r2, 80077b2 <__lo0bits+0x32>
 80077ae:	3008      	adds	r0, #8
 80077b0:	0a1b      	lsrs	r3, r3, #8
 80077b2:	071a      	lsls	r2, r3, #28
 80077b4:	bf04      	itt	eq
 80077b6:	091b      	lsreq	r3, r3, #4
 80077b8:	3004      	addeq	r0, #4
 80077ba:	079a      	lsls	r2, r3, #30
 80077bc:	bf04      	itt	eq
 80077be:	089b      	lsreq	r3, r3, #2
 80077c0:	3002      	addeq	r0, #2
 80077c2:	07da      	lsls	r2, r3, #31
 80077c4:	d403      	bmi.n	80077ce <__lo0bits+0x4e>
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	f100 0001 	add.w	r0, r0, #1
 80077cc:	d005      	beq.n	80077da <__lo0bits+0x5a>
 80077ce:	600b      	str	r3, [r1, #0]
 80077d0:	4770      	bx	lr
 80077d2:	4610      	mov	r0, r2
 80077d4:	e7e9      	b.n	80077aa <__lo0bits+0x2a>
 80077d6:	2000      	movs	r0, #0
 80077d8:	4770      	bx	lr
 80077da:	2020      	movs	r0, #32
 80077dc:	4770      	bx	lr
	...

080077e0 <__i2b>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	2101      	movs	r1, #1
 80077e6:	f7ff feb9 	bl	800755c <_Balloc>
 80077ea:	4602      	mov	r2, r0
 80077ec:	b928      	cbnz	r0, 80077fa <__i2b+0x1a>
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <__i2b+0x24>)
 80077f0:	4805      	ldr	r0, [pc, #20]	; (8007808 <__i2b+0x28>)
 80077f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077f6:	f000 ff9d 	bl	8008734 <__assert_func>
 80077fa:	2301      	movs	r3, #1
 80077fc:	6144      	str	r4, [r0, #20]
 80077fe:	6103      	str	r3, [r0, #16]
 8007800:	bd10      	pop	{r4, pc}
 8007802:	bf00      	nop
 8007804:	0800a2c8 	.word	0x0800a2c8
 8007808:	0800a36b 	.word	0x0800a36b

0800780c <__multiply>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	4691      	mov	r9, r2
 8007812:	690a      	ldr	r2, [r1, #16]
 8007814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	bfb8      	it	lt
 800781c:	460b      	movlt	r3, r1
 800781e:	460c      	mov	r4, r1
 8007820:	bfbc      	itt	lt
 8007822:	464c      	movlt	r4, r9
 8007824:	4699      	movlt	r9, r3
 8007826:	6927      	ldr	r7, [r4, #16]
 8007828:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800782c:	68a3      	ldr	r3, [r4, #8]
 800782e:	6861      	ldr	r1, [r4, #4]
 8007830:	eb07 060a 	add.w	r6, r7, sl
 8007834:	42b3      	cmp	r3, r6
 8007836:	b085      	sub	sp, #20
 8007838:	bfb8      	it	lt
 800783a:	3101      	addlt	r1, #1
 800783c:	f7ff fe8e 	bl	800755c <_Balloc>
 8007840:	b930      	cbnz	r0, 8007850 <__multiply+0x44>
 8007842:	4602      	mov	r2, r0
 8007844:	4b44      	ldr	r3, [pc, #272]	; (8007958 <__multiply+0x14c>)
 8007846:	4845      	ldr	r0, [pc, #276]	; (800795c <__multiply+0x150>)
 8007848:	f240 115d 	movw	r1, #349	; 0x15d
 800784c:	f000 ff72 	bl	8008734 <__assert_func>
 8007850:	f100 0514 	add.w	r5, r0, #20
 8007854:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007858:	462b      	mov	r3, r5
 800785a:	2200      	movs	r2, #0
 800785c:	4543      	cmp	r3, r8
 800785e:	d321      	bcc.n	80078a4 <__multiply+0x98>
 8007860:	f104 0314 	add.w	r3, r4, #20
 8007864:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007868:	f109 0314 	add.w	r3, r9, #20
 800786c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	1b3a      	subs	r2, r7, r4
 8007874:	3a15      	subs	r2, #21
 8007876:	f022 0203 	bic.w	r2, r2, #3
 800787a:	3204      	adds	r2, #4
 800787c:	f104 0115 	add.w	r1, r4, #21
 8007880:	428f      	cmp	r7, r1
 8007882:	bf38      	it	cc
 8007884:	2204      	movcc	r2, #4
 8007886:	9201      	str	r2, [sp, #4]
 8007888:	9a02      	ldr	r2, [sp, #8]
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d80c      	bhi.n	80078aa <__multiply+0x9e>
 8007890:	2e00      	cmp	r6, #0
 8007892:	dd03      	ble.n	800789c <__multiply+0x90>
 8007894:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007898:	2b00      	cmp	r3, #0
 800789a:	d05a      	beq.n	8007952 <__multiply+0x146>
 800789c:	6106      	str	r6, [r0, #16]
 800789e:	b005      	add	sp, #20
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	f843 2b04 	str.w	r2, [r3], #4
 80078a8:	e7d8      	b.n	800785c <__multiply+0x50>
 80078aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80078ae:	f1ba 0f00 	cmp.w	sl, #0
 80078b2:	d024      	beq.n	80078fe <__multiply+0xf2>
 80078b4:	f104 0e14 	add.w	lr, r4, #20
 80078b8:	46a9      	mov	r9, r5
 80078ba:	f04f 0c00 	mov.w	ip, #0
 80078be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078c2:	f8d9 1000 	ldr.w	r1, [r9]
 80078c6:	fa1f fb82 	uxth.w	fp, r2
 80078ca:	b289      	uxth	r1, r1
 80078cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80078d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078d4:	f8d9 2000 	ldr.w	r2, [r9]
 80078d8:	4461      	add	r1, ip
 80078da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078de:	fb0a c20b 	mla	r2, sl, fp, ip
 80078e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078e6:	b289      	uxth	r1, r1
 80078e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078ec:	4577      	cmp	r7, lr
 80078ee:	f849 1b04 	str.w	r1, [r9], #4
 80078f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078f6:	d8e2      	bhi.n	80078be <__multiply+0xb2>
 80078f8:	9a01      	ldr	r2, [sp, #4]
 80078fa:	f845 c002 	str.w	ip, [r5, r2]
 80078fe:	9a03      	ldr	r2, [sp, #12]
 8007900:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007904:	3304      	adds	r3, #4
 8007906:	f1b9 0f00 	cmp.w	r9, #0
 800790a:	d020      	beq.n	800794e <__multiply+0x142>
 800790c:	6829      	ldr	r1, [r5, #0]
 800790e:	f104 0c14 	add.w	ip, r4, #20
 8007912:	46ae      	mov	lr, r5
 8007914:	f04f 0a00 	mov.w	sl, #0
 8007918:	f8bc b000 	ldrh.w	fp, [ip]
 800791c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007920:	fb09 220b 	mla	r2, r9, fp, r2
 8007924:	4492      	add	sl, r2
 8007926:	b289      	uxth	r1, r1
 8007928:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800792c:	f84e 1b04 	str.w	r1, [lr], #4
 8007930:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007934:	f8be 1000 	ldrh.w	r1, [lr]
 8007938:	0c12      	lsrs	r2, r2, #16
 800793a:	fb09 1102 	mla	r1, r9, r2, r1
 800793e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007942:	4567      	cmp	r7, ip
 8007944:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007948:	d8e6      	bhi.n	8007918 <__multiply+0x10c>
 800794a:	9a01      	ldr	r2, [sp, #4]
 800794c:	50a9      	str	r1, [r5, r2]
 800794e:	3504      	adds	r5, #4
 8007950:	e79a      	b.n	8007888 <__multiply+0x7c>
 8007952:	3e01      	subs	r6, #1
 8007954:	e79c      	b.n	8007890 <__multiply+0x84>
 8007956:	bf00      	nop
 8007958:	0800a2c8 	.word	0x0800a2c8
 800795c:	0800a36b 	.word	0x0800a36b

08007960 <__pow5mult>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4615      	mov	r5, r2
 8007966:	f012 0203 	ands.w	r2, r2, #3
 800796a:	4606      	mov	r6, r0
 800796c:	460f      	mov	r7, r1
 800796e:	d007      	beq.n	8007980 <__pow5mult+0x20>
 8007970:	4c25      	ldr	r4, [pc, #148]	; (8007a08 <__pow5mult+0xa8>)
 8007972:	3a01      	subs	r2, #1
 8007974:	2300      	movs	r3, #0
 8007976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800797a:	f7ff fe51 	bl	8007620 <__multadd>
 800797e:	4607      	mov	r7, r0
 8007980:	10ad      	asrs	r5, r5, #2
 8007982:	d03d      	beq.n	8007a00 <__pow5mult+0xa0>
 8007984:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007986:	b97c      	cbnz	r4, 80079a8 <__pow5mult+0x48>
 8007988:	2010      	movs	r0, #16
 800798a:	f001 fd7d 	bl	8009488 <malloc>
 800798e:	4602      	mov	r2, r0
 8007990:	6270      	str	r0, [r6, #36]	; 0x24
 8007992:	b928      	cbnz	r0, 80079a0 <__pow5mult+0x40>
 8007994:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <__pow5mult+0xac>)
 8007996:	481e      	ldr	r0, [pc, #120]	; (8007a10 <__pow5mult+0xb0>)
 8007998:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800799c:	f000 feca 	bl	8008734 <__assert_func>
 80079a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079a4:	6004      	str	r4, [r0, #0]
 80079a6:	60c4      	str	r4, [r0, #12]
 80079a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079b0:	b94c      	cbnz	r4, 80079c6 <__pow5mult+0x66>
 80079b2:	f240 2171 	movw	r1, #625	; 0x271
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ff12 	bl	80077e0 <__i2b>
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c8 0008 	str.w	r0, [r8, #8]
 80079c2:	4604      	mov	r4, r0
 80079c4:	6003      	str	r3, [r0, #0]
 80079c6:	f04f 0900 	mov.w	r9, #0
 80079ca:	07eb      	lsls	r3, r5, #31
 80079cc:	d50a      	bpl.n	80079e4 <__pow5mult+0x84>
 80079ce:	4639      	mov	r1, r7
 80079d0:	4622      	mov	r2, r4
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7ff ff1a 	bl	800780c <__multiply>
 80079d8:	4639      	mov	r1, r7
 80079da:	4680      	mov	r8, r0
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fdfd 	bl	80075dc <_Bfree>
 80079e2:	4647      	mov	r7, r8
 80079e4:	106d      	asrs	r5, r5, #1
 80079e6:	d00b      	beq.n	8007a00 <__pow5mult+0xa0>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	b938      	cbnz	r0, 80079fc <__pow5mult+0x9c>
 80079ec:	4622      	mov	r2, r4
 80079ee:	4621      	mov	r1, r4
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff ff0b 	bl	800780c <__multiply>
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	f8c0 9000 	str.w	r9, [r0]
 80079fc:	4604      	mov	r4, r0
 80079fe:	e7e4      	b.n	80079ca <__pow5mult+0x6a>
 8007a00:	4638      	mov	r0, r7
 8007a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a06:	bf00      	nop
 8007a08:	0800a4b8 	.word	0x0800a4b8
 8007a0c:	0800a354 	.word	0x0800a354
 8007a10:	0800a36b 	.word	0x0800a36b

08007a14 <__lshift>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	460c      	mov	r4, r1
 8007a1a:	6849      	ldr	r1, [r1, #4]
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a22:	68a3      	ldr	r3, [r4, #8]
 8007a24:	4607      	mov	r7, r0
 8007a26:	4691      	mov	r9, r2
 8007a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a2c:	f108 0601 	add.w	r6, r8, #1
 8007a30:	42b3      	cmp	r3, r6
 8007a32:	db0b      	blt.n	8007a4c <__lshift+0x38>
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff fd91 	bl	800755c <_Balloc>
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	b948      	cbnz	r0, 8007a52 <__lshift+0x3e>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	4b2a      	ldr	r3, [pc, #168]	; (8007aec <__lshift+0xd8>)
 8007a42:	482b      	ldr	r0, [pc, #172]	; (8007af0 <__lshift+0xdc>)
 8007a44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a48:	f000 fe74 	bl	8008734 <__assert_func>
 8007a4c:	3101      	adds	r1, #1
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	e7ee      	b.n	8007a30 <__lshift+0x1c>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f100 0114 	add.w	r1, r0, #20
 8007a58:	f100 0210 	add.w	r2, r0, #16
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	4553      	cmp	r3, sl
 8007a60:	db37      	blt.n	8007ad2 <__lshift+0xbe>
 8007a62:	6920      	ldr	r0, [r4, #16]
 8007a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a68:	f104 0314 	add.w	r3, r4, #20
 8007a6c:	f019 091f 	ands.w	r9, r9, #31
 8007a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a78:	d02f      	beq.n	8007ada <__lshift+0xc6>
 8007a7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a7e:	468a      	mov	sl, r1
 8007a80:	f04f 0c00 	mov.w	ip, #0
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	fa02 f209 	lsl.w	r2, r2, r9
 8007a8a:	ea42 020c 	orr.w	r2, r2, ip
 8007a8e:	f84a 2b04 	str.w	r2, [sl], #4
 8007a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a96:	4298      	cmp	r0, r3
 8007a98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a9c:	d8f2      	bhi.n	8007a84 <__lshift+0x70>
 8007a9e:	1b03      	subs	r3, r0, r4
 8007aa0:	3b15      	subs	r3, #21
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	f104 0215 	add.w	r2, r4, #21
 8007aac:	4290      	cmp	r0, r2
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	f841 c003 	str.w	ip, [r1, r3]
 8007ab6:	f1bc 0f00 	cmp.w	ip, #0
 8007aba:	d001      	beq.n	8007ac0 <__lshift+0xac>
 8007abc:	f108 0602 	add.w	r6, r8, #2
 8007ac0:	3e01      	subs	r6, #1
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	612e      	str	r6, [r5, #16]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f7ff fd88 	bl	80075dc <_Bfree>
 8007acc:	4628      	mov	r0, r5
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	e7c1      	b.n	8007a5e <__lshift+0x4a>
 8007ada:	3904      	subs	r1, #4
 8007adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	d8f9      	bhi.n	8007adc <__lshift+0xc8>
 8007ae8:	e7ea      	b.n	8007ac0 <__lshift+0xac>
 8007aea:	bf00      	nop
 8007aec:	0800a2c8 	.word	0x0800a2c8
 8007af0:	0800a36b 	.word	0x0800a36b

08007af4 <__mcmp>:
 8007af4:	b530      	push	{r4, r5, lr}
 8007af6:	6902      	ldr	r2, [r0, #16]
 8007af8:	690c      	ldr	r4, [r1, #16]
 8007afa:	1b12      	subs	r2, r2, r4
 8007afc:	d10e      	bne.n	8007b1c <__mcmp+0x28>
 8007afe:	f100 0314 	add.w	r3, r0, #20
 8007b02:	3114      	adds	r1, #20
 8007b04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b14:	42a5      	cmp	r5, r4
 8007b16:	d003      	beq.n	8007b20 <__mcmp+0x2c>
 8007b18:	d305      	bcc.n	8007b26 <__mcmp+0x32>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	4283      	cmp	r3, r0
 8007b22:	d3f3      	bcc.n	8007b0c <__mcmp+0x18>
 8007b24:	e7fa      	b.n	8007b1c <__mcmp+0x28>
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	e7f7      	b.n	8007b1c <__mcmp+0x28>

08007b2c <__mdiff>:
 8007b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	4606      	mov	r6, r0
 8007b34:	4611      	mov	r1, r2
 8007b36:	4620      	mov	r0, r4
 8007b38:	4690      	mov	r8, r2
 8007b3a:	f7ff ffdb 	bl	8007af4 <__mcmp>
 8007b3e:	1e05      	subs	r5, r0, #0
 8007b40:	d110      	bne.n	8007b64 <__mdiff+0x38>
 8007b42:	4629      	mov	r1, r5
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fd09 	bl	800755c <_Balloc>
 8007b4a:	b930      	cbnz	r0, 8007b5a <__mdiff+0x2e>
 8007b4c:	4b3a      	ldr	r3, [pc, #232]	; (8007c38 <__mdiff+0x10c>)
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f240 2132 	movw	r1, #562	; 0x232
 8007b54:	4839      	ldr	r0, [pc, #228]	; (8007c3c <__mdiff+0x110>)
 8007b56:	f000 fded 	bl	8008734 <__assert_func>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	bfa4      	itt	ge
 8007b66:	4643      	movge	r3, r8
 8007b68:	46a0      	movge	r8, r4
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b70:	bfa6      	itte	ge
 8007b72:	461c      	movge	r4, r3
 8007b74:	2500      	movge	r5, #0
 8007b76:	2501      	movlt	r5, #1
 8007b78:	f7ff fcf0 	bl	800755c <_Balloc>
 8007b7c:	b920      	cbnz	r0, 8007b88 <__mdiff+0x5c>
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <__mdiff+0x10c>)
 8007b80:	4602      	mov	r2, r0
 8007b82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b86:	e7e5      	b.n	8007b54 <__mdiff+0x28>
 8007b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b8c:	6926      	ldr	r6, [r4, #16]
 8007b8e:	60c5      	str	r5, [r0, #12]
 8007b90:	f104 0914 	add.w	r9, r4, #20
 8007b94:	f108 0514 	add.w	r5, r8, #20
 8007b98:	f100 0e14 	add.w	lr, r0, #20
 8007b9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ba4:	f108 0210 	add.w	r2, r8, #16
 8007ba8:	46f2      	mov	sl, lr
 8007baa:	2100      	movs	r1, #0
 8007bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bb4:	fa1f f883 	uxth.w	r8, r3
 8007bb8:	fa11 f18b 	uxtah	r1, r1, fp
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	eba1 0808 	sub.w	r8, r1, r8
 8007bc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bca:	fa1f f888 	uxth.w	r8, r8
 8007bce:	1419      	asrs	r1, r3, #16
 8007bd0:	454e      	cmp	r6, r9
 8007bd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bd6:	f84a 3b04 	str.w	r3, [sl], #4
 8007bda:	d8e7      	bhi.n	8007bac <__mdiff+0x80>
 8007bdc:	1b33      	subs	r3, r6, r4
 8007bde:	3b15      	subs	r3, #21
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	3304      	adds	r3, #4
 8007be6:	3415      	adds	r4, #21
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	bf38      	it	cc
 8007bec:	2304      	movcc	r3, #4
 8007bee:	441d      	add	r5, r3
 8007bf0:	4473      	add	r3, lr
 8007bf2:	469e      	mov	lr, r3
 8007bf4:	462e      	mov	r6, r5
 8007bf6:	4566      	cmp	r6, ip
 8007bf8:	d30e      	bcc.n	8007c18 <__mdiff+0xec>
 8007bfa:	f10c 0203 	add.w	r2, ip, #3
 8007bfe:	1b52      	subs	r2, r2, r5
 8007c00:	f022 0203 	bic.w	r2, r2, #3
 8007c04:	3d03      	subs	r5, #3
 8007c06:	45ac      	cmp	ip, r5
 8007c08:	bf38      	it	cc
 8007c0a:	2200      	movcc	r2, #0
 8007c0c:	441a      	add	r2, r3
 8007c0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c12:	b17b      	cbz	r3, 8007c34 <__mdiff+0x108>
 8007c14:	6107      	str	r7, [r0, #16]
 8007c16:	e7a3      	b.n	8007b60 <__mdiff+0x34>
 8007c18:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c1c:	fa11 f288 	uxtah	r2, r1, r8
 8007c20:	1414      	asrs	r4, r2, #16
 8007c22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c26:	b292      	uxth	r2, r2
 8007c28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c2c:	f84e 2b04 	str.w	r2, [lr], #4
 8007c30:	1421      	asrs	r1, r4, #16
 8007c32:	e7e0      	b.n	8007bf6 <__mdiff+0xca>
 8007c34:	3f01      	subs	r7, #1
 8007c36:	e7ea      	b.n	8007c0e <__mdiff+0xe2>
 8007c38:	0800a2c8 	.word	0x0800a2c8
 8007c3c:	0800a36b 	.word	0x0800a36b

08007c40 <__ulp>:
 8007c40:	b082      	sub	sp, #8
 8007c42:	ed8d 0b00 	vstr	d0, [sp]
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	4912      	ldr	r1, [pc, #72]	; (8007c94 <__ulp+0x54>)
 8007c4a:	4019      	ands	r1, r3
 8007c4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007c50:	2900      	cmp	r1, #0
 8007c52:	dd05      	ble.n	8007c60 <__ulp+0x20>
 8007c54:	2200      	movs	r2, #0
 8007c56:	460b      	mov	r3, r1
 8007c58:	ec43 2b10 	vmov	d0, r2, r3
 8007c5c:	b002      	add	sp, #8
 8007c5e:	4770      	bx	lr
 8007c60:	4249      	negs	r1, r1
 8007c62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007c66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	da04      	bge.n	8007c7e <__ulp+0x3e>
 8007c74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c78:	fa41 f300 	asr.w	r3, r1, r0
 8007c7c:	e7ec      	b.n	8007c58 <__ulp+0x18>
 8007c7e:	f1a0 0114 	sub.w	r1, r0, #20
 8007c82:	291e      	cmp	r1, #30
 8007c84:	bfda      	itte	le
 8007c86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007c8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8007c8e:	2101      	movgt	r1, #1
 8007c90:	460a      	mov	r2, r1
 8007c92:	e7e1      	b.n	8007c58 <__ulp+0x18>
 8007c94:	7ff00000 	.word	0x7ff00000

08007c98 <__b2d>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	6905      	ldr	r5, [r0, #16]
 8007c9c:	f100 0714 	add.w	r7, r0, #20
 8007ca0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007ca4:	1f2e      	subs	r6, r5, #4
 8007ca6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fd48 	bl	8007740 <__hi0bits>
 8007cb0:	f1c0 0320 	rsb	r3, r0, #32
 8007cb4:	280a      	cmp	r0, #10
 8007cb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007d34 <__b2d+0x9c>
 8007cba:	600b      	str	r3, [r1, #0]
 8007cbc:	dc14      	bgt.n	8007ce8 <__b2d+0x50>
 8007cbe:	f1c0 0e0b 	rsb	lr, r0, #11
 8007cc2:	fa24 f10e 	lsr.w	r1, r4, lr
 8007cc6:	42b7      	cmp	r7, r6
 8007cc8:	ea41 030c 	orr.w	r3, r1, ip
 8007ccc:	bf34      	ite	cc
 8007cce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cd2:	2100      	movcs	r1, #0
 8007cd4:	3015      	adds	r0, #21
 8007cd6:	fa04 f000 	lsl.w	r0, r4, r0
 8007cda:	fa21 f10e 	lsr.w	r1, r1, lr
 8007cde:	ea40 0201 	orr.w	r2, r0, r1
 8007ce2:	ec43 2b10 	vmov	d0, r2, r3
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce8:	42b7      	cmp	r7, r6
 8007cea:	bf3a      	itte	cc
 8007cec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007cf4:	2100      	movcs	r1, #0
 8007cf6:	380b      	subs	r0, #11
 8007cf8:	d017      	beq.n	8007d2a <__b2d+0x92>
 8007cfa:	f1c0 0c20 	rsb	ip, r0, #32
 8007cfe:	fa04 f500 	lsl.w	r5, r4, r0
 8007d02:	42be      	cmp	r6, r7
 8007d04:	fa21 f40c 	lsr.w	r4, r1, ip
 8007d08:	ea45 0504 	orr.w	r5, r5, r4
 8007d0c:	bf8c      	ite	hi
 8007d0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007d12:	2400      	movls	r4, #0
 8007d14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007d18:	fa01 f000 	lsl.w	r0, r1, r0
 8007d1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007d20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d24:	ea40 0204 	orr.w	r2, r0, r4
 8007d28:	e7db      	b.n	8007ce2 <__b2d+0x4a>
 8007d2a:	ea44 030c 	orr.w	r3, r4, ip
 8007d2e:	460a      	mov	r2, r1
 8007d30:	e7d7      	b.n	8007ce2 <__b2d+0x4a>
 8007d32:	bf00      	nop
 8007d34:	3ff00000 	.word	0x3ff00000

08007d38 <__d2b>:
 8007d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	2101      	movs	r1, #1
 8007d40:	ec57 6b10 	vmov	r6, r7, d0
 8007d44:	4690      	mov	r8, r2
 8007d46:	f7ff fc09 	bl	800755c <_Balloc>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b930      	cbnz	r0, 8007d5c <__d2b+0x24>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b25      	ldr	r3, [pc, #148]	; (8007de8 <__d2b+0xb0>)
 8007d52:	4826      	ldr	r0, [pc, #152]	; (8007dec <__d2b+0xb4>)
 8007d54:	f240 310a 	movw	r1, #778	; 0x30a
 8007d58:	f000 fcec 	bl	8008734 <__assert_func>
 8007d5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d64:	bb35      	cbnz	r5, 8007db4 <__d2b+0x7c>
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	d028      	beq.n	8007dbe <__d2b+0x86>
 8007d6c:	4668      	mov	r0, sp
 8007d6e:	9600      	str	r6, [sp, #0]
 8007d70:	f7ff fd06 	bl	8007780 <__lo0bits>
 8007d74:	9900      	ldr	r1, [sp, #0]
 8007d76:	b300      	cbz	r0, 8007dba <__d2b+0x82>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	f1c0 0320 	rsb	r3, r0, #32
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	430b      	orrs	r3, r1
 8007d84:	40c2      	lsrs	r2, r0
 8007d86:	6163      	str	r3, [r4, #20]
 8007d88:	9201      	str	r2, [sp, #4]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	61a3      	str	r3, [r4, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf14      	ite	ne
 8007d92:	2202      	movne	r2, #2
 8007d94:	2201      	moveq	r2, #1
 8007d96:	6122      	str	r2, [r4, #16]
 8007d98:	b1d5      	cbz	r5, 8007dd0 <__d2b+0x98>
 8007d9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d9e:	4405      	add	r5, r0
 8007da0:	f8c9 5000 	str.w	r5, [r9]
 8007da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007da8:	f8c8 0000 	str.w	r0, [r8]
 8007dac:	4620      	mov	r0, r4
 8007dae:	b003      	add	sp, #12
 8007db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db8:	e7d5      	b.n	8007d66 <__d2b+0x2e>
 8007dba:	6161      	str	r1, [r4, #20]
 8007dbc:	e7e5      	b.n	8007d8a <__d2b+0x52>
 8007dbe:	a801      	add	r0, sp, #4
 8007dc0:	f7ff fcde 	bl	8007780 <__lo0bits>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	6163      	str	r3, [r4, #20]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	6122      	str	r2, [r4, #16]
 8007dcc:	3020      	adds	r0, #32
 8007dce:	e7e3      	b.n	8007d98 <__d2b+0x60>
 8007dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dd8:	f8c9 0000 	str.w	r0, [r9]
 8007ddc:	6918      	ldr	r0, [r3, #16]
 8007dde:	f7ff fcaf 	bl	8007740 <__hi0bits>
 8007de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007de6:	e7df      	b.n	8007da8 <__d2b+0x70>
 8007de8:	0800a2c8 	.word	0x0800a2c8
 8007dec:	0800a36b 	.word	0x0800a36b

08007df0 <__ratio>:
 8007df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	4688      	mov	r8, r1
 8007df6:	4669      	mov	r1, sp
 8007df8:	4681      	mov	r9, r0
 8007dfa:	f7ff ff4d 	bl	8007c98 <__b2d>
 8007dfe:	a901      	add	r1, sp, #4
 8007e00:	4640      	mov	r0, r8
 8007e02:	ec55 4b10 	vmov	r4, r5, d0
 8007e06:	f7ff ff47 	bl	8007c98 <__b2d>
 8007e0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007e12:	eba3 0c02 	sub.w	ip, r3, r2
 8007e16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007e20:	ec51 0b10 	vmov	r0, r1, d0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bfd6      	itet	le
 8007e28:	460a      	movle	r2, r1
 8007e2a:	462a      	movgt	r2, r5
 8007e2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e30:	468b      	mov	fp, r1
 8007e32:	462f      	mov	r7, r5
 8007e34:	bfd4      	ite	le
 8007e36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007e3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e3e:	4620      	mov	r0, r4
 8007e40:	ee10 2a10 	vmov	r2, s0
 8007e44:	465b      	mov	r3, fp
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fd00 	bl	800084c <__aeabi_ddiv>
 8007e4c:	ec41 0b10 	vmov	d0, r0, r1
 8007e50:	b003      	add	sp, #12
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007e58 <_mprec_log10>:
 8007e58:	2817      	cmp	r0, #23
 8007e5a:	b5d0      	push	{r4, r6, r7, lr}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	dc07      	bgt.n	8007e70 <_mprec_log10+0x18>
 8007e60:	4809      	ldr	r0, [pc, #36]	; (8007e88 <_mprec_log10+0x30>)
 8007e62:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007e66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007e6a:	ec41 0b10 	vmov	d0, r0, r1
 8007e6e:	bdd0      	pop	{r4, r6, r7, pc}
 8007e70:	4906      	ldr	r1, [pc, #24]	; (8007e8c <_mprec_log10+0x34>)
 8007e72:	4f07      	ldr	r7, [pc, #28]	; (8007e90 <_mprec_log10+0x38>)
 8007e74:	2000      	movs	r0, #0
 8007e76:	2600      	movs	r6, #0
 8007e78:	4632      	mov	r2, r6
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	f7f8 fbbc 	bl	80005f8 <__aeabi_dmul>
 8007e80:	3c01      	subs	r4, #1
 8007e82:	d1f9      	bne.n	8007e78 <_mprec_log10+0x20>
 8007e84:	e7f1      	b.n	8007e6a <_mprec_log10+0x12>
 8007e86:	bf00      	nop
 8007e88:	0800a3f0 	.word	0x0800a3f0
 8007e8c:	3ff00000 	.word	0x3ff00000
 8007e90:	40240000 	.word	0x40240000

08007e94 <__copybits>:
 8007e94:	3901      	subs	r1, #1
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	1149      	asrs	r1, r1, #5
 8007e9a:	6914      	ldr	r4, [r2, #16]
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	f102 0314 	add.w	r3, r2, #20
 8007ea2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ea6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eaa:	1f05      	subs	r5, r0, #4
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	d30c      	bcc.n	8007eca <__copybits+0x36>
 8007eb0:	1aa3      	subs	r3, r4, r2
 8007eb2:	3b11      	subs	r3, #17
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	3211      	adds	r2, #17
 8007eba:	42a2      	cmp	r2, r4
 8007ebc:	bf88      	it	hi
 8007ebe:	2300      	movhi	r3, #0
 8007ec0:	4418      	add	r0, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4288      	cmp	r0, r1
 8007ec6:	d305      	bcc.n	8007ed4 <__copybits+0x40>
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ece:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ed2:	e7eb      	b.n	8007eac <__copybits+0x18>
 8007ed4:	f840 3b04 	str.w	r3, [r0], #4
 8007ed8:	e7f4      	b.n	8007ec4 <__copybits+0x30>

08007eda <__any_on>:
 8007eda:	f100 0214 	add.w	r2, r0, #20
 8007ede:	6900      	ldr	r0, [r0, #16]
 8007ee0:	114b      	asrs	r3, r1, #5
 8007ee2:	4298      	cmp	r0, r3
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	db11      	blt.n	8007f0c <__any_on+0x32>
 8007ee8:	dd0a      	ble.n	8007f00 <__any_on+0x26>
 8007eea:	f011 011f 	ands.w	r1, r1, #31
 8007eee:	d007      	beq.n	8007f00 <__any_on+0x26>
 8007ef0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ef4:	fa24 f001 	lsr.w	r0, r4, r1
 8007ef8:	fa00 f101 	lsl.w	r1, r0, r1
 8007efc:	428c      	cmp	r4, r1
 8007efe:	d10b      	bne.n	8007f18 <__any_on+0x3e>
 8007f00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d803      	bhi.n	8007f10 <__any_on+0x36>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	bd10      	pop	{r4, pc}
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	e7f7      	b.n	8007f00 <__any_on+0x26>
 8007f10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d0f5      	beq.n	8007f04 <__any_on+0x2a>
 8007f18:	2001      	movs	r0, #1
 8007f1a:	e7f6      	b.n	8007f0a <__any_on+0x30>

08007f1c <_calloc_r>:
 8007f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1e:	fba1 2402 	umull	r2, r4, r1, r2
 8007f22:	b94c      	cbnz	r4, 8007f38 <_calloc_r+0x1c>
 8007f24:	4611      	mov	r1, r2
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	f000 f82e 	bl	8007f88 <_malloc_r>
 8007f2c:	9a01      	ldr	r2, [sp, #4]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b930      	cbnz	r0, 8007f40 <_calloc_r+0x24>
 8007f32:	4628      	mov	r0, r5
 8007f34:	b003      	add	sp, #12
 8007f36:	bd30      	pop	{r4, r5, pc}
 8007f38:	220c      	movs	r2, #12
 8007f3a:	6002      	str	r2, [r0, #0]
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	e7f8      	b.n	8007f32 <_calloc_r+0x16>
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7fd ffd9 	bl	8005ef8 <memset>
 8007f46:	e7f4      	b.n	8007f32 <_calloc_r+0x16>

08007f48 <sbrk_aligned>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	4e0e      	ldr	r6, [pc, #56]	; (8007f84 <sbrk_aligned+0x3c>)
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	6831      	ldr	r1, [r6, #0]
 8007f50:	4605      	mov	r5, r0
 8007f52:	b911      	cbnz	r1, 8007f5a <sbrk_aligned+0x12>
 8007f54:	f000 fbb4 	bl	80086c0 <_sbrk_r>
 8007f58:	6030      	str	r0, [r6, #0]
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f000 fbaf 	bl	80086c0 <_sbrk_r>
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	d00a      	beq.n	8007f7c <sbrk_aligned+0x34>
 8007f66:	1cc4      	adds	r4, r0, #3
 8007f68:	f024 0403 	bic.w	r4, r4, #3
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d007      	beq.n	8007f80 <sbrk_aligned+0x38>
 8007f70:	1a21      	subs	r1, r4, r0
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 fba4 	bl	80086c0 <_sbrk_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d101      	bne.n	8007f80 <sbrk_aligned+0x38>
 8007f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f80:	4620      	mov	r0, r4
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	200004ec 	.word	0x200004ec

08007f88 <_malloc_r>:
 8007f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8c:	1ccd      	adds	r5, r1, #3
 8007f8e:	f025 0503 	bic.w	r5, r5, #3
 8007f92:	3508      	adds	r5, #8
 8007f94:	2d0c      	cmp	r5, #12
 8007f96:	bf38      	it	cc
 8007f98:	250c      	movcc	r5, #12
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	db01      	blt.n	8007fa4 <_malloc_r+0x1c>
 8007fa0:	42a9      	cmp	r1, r5
 8007fa2:	d905      	bls.n	8007fb0 <_malloc_r+0x28>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	2600      	movs	r6, #0
 8007faa:	4630      	mov	r0, r6
 8007fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb0:	4e2e      	ldr	r6, [pc, #184]	; (800806c <_malloc_r+0xe4>)
 8007fb2:	f001 fa8b 	bl	80094cc <__malloc_lock>
 8007fb6:	6833      	ldr	r3, [r6, #0]
 8007fb8:	461c      	mov	r4, r3
 8007fba:	bb34      	cbnz	r4, 800800a <_malloc_r+0x82>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7ff ffc2 	bl	8007f48 <sbrk_aligned>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	d14d      	bne.n	8008066 <_malloc_r+0xde>
 8007fca:	6834      	ldr	r4, [r6, #0]
 8007fcc:	4626      	mov	r6, r4
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d140      	bne.n	8008054 <_malloc_r+0xcc>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	eb04 0803 	add.w	r8, r4, r3
 8007fdc:	f000 fb70 	bl	80086c0 <_sbrk_r>
 8007fe0:	4580      	cmp	r8, r0
 8007fe2:	d13a      	bne.n	800805a <_malloc_r+0xd2>
 8007fe4:	6821      	ldr	r1, [r4, #0]
 8007fe6:	3503      	adds	r5, #3
 8007fe8:	1a6d      	subs	r5, r5, r1
 8007fea:	f025 0503 	bic.w	r5, r5, #3
 8007fee:	3508      	adds	r5, #8
 8007ff0:	2d0c      	cmp	r5, #12
 8007ff2:	bf38      	it	cc
 8007ff4:	250c      	movcc	r5, #12
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ffa5 	bl	8007f48 <sbrk_aligned>
 8007ffe:	3001      	adds	r0, #1
 8008000:	d02b      	beq.n	800805a <_malloc_r+0xd2>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	442b      	add	r3, r5
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	e00e      	b.n	8008028 <_malloc_r+0xa0>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	1b52      	subs	r2, r2, r5
 800800e:	d41e      	bmi.n	800804e <_malloc_r+0xc6>
 8008010:	2a0b      	cmp	r2, #11
 8008012:	d916      	bls.n	8008042 <_malloc_r+0xba>
 8008014:	1961      	adds	r1, r4, r5
 8008016:	42a3      	cmp	r3, r4
 8008018:	6025      	str	r5, [r4, #0]
 800801a:	bf18      	it	ne
 800801c:	6059      	strne	r1, [r3, #4]
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	bf08      	it	eq
 8008022:	6031      	streq	r1, [r6, #0]
 8008024:	5162      	str	r2, [r4, r5]
 8008026:	604b      	str	r3, [r1, #4]
 8008028:	4638      	mov	r0, r7
 800802a:	f104 060b 	add.w	r6, r4, #11
 800802e:	f001 fa53 	bl	80094d8 <__malloc_unlock>
 8008032:	f026 0607 	bic.w	r6, r6, #7
 8008036:	1d23      	adds	r3, r4, #4
 8008038:	1af2      	subs	r2, r6, r3
 800803a:	d0b6      	beq.n	8007faa <_malloc_r+0x22>
 800803c:	1b9b      	subs	r3, r3, r6
 800803e:	50a3      	str	r3, [r4, r2]
 8008040:	e7b3      	b.n	8007faa <_malloc_r+0x22>
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	42a3      	cmp	r3, r4
 8008046:	bf0c      	ite	eq
 8008048:	6032      	streq	r2, [r6, #0]
 800804a:	605a      	strne	r2, [r3, #4]
 800804c:	e7ec      	b.n	8008028 <_malloc_r+0xa0>
 800804e:	4623      	mov	r3, r4
 8008050:	6864      	ldr	r4, [r4, #4]
 8008052:	e7b2      	b.n	8007fba <_malloc_r+0x32>
 8008054:	4634      	mov	r4, r6
 8008056:	6876      	ldr	r6, [r6, #4]
 8008058:	e7b9      	b.n	8007fce <_malloc_r+0x46>
 800805a:	230c      	movs	r3, #12
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4638      	mov	r0, r7
 8008060:	f001 fa3a 	bl	80094d8 <__malloc_unlock>
 8008064:	e7a1      	b.n	8007faa <_malloc_r+0x22>
 8008066:	6025      	str	r5, [r4, #0]
 8008068:	e7de      	b.n	8008028 <_malloc_r+0xa0>
 800806a:	bf00      	nop
 800806c:	200004e8 	.word	0x200004e8

08008070 <_realloc_r>:
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4680      	mov	r8, r0
 8008076:	4614      	mov	r4, r2
 8008078:	460e      	mov	r6, r1
 800807a:	b921      	cbnz	r1, 8008086 <_realloc_r+0x16>
 800807c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	4611      	mov	r1, r2
 8008082:	f7ff bf81 	b.w	8007f88 <_malloc_r>
 8008086:	b92a      	cbnz	r2, 8008094 <_realloc_r+0x24>
 8008088:	f001 fa2c 	bl	80094e4 <_free_r>
 800808c:	4625      	mov	r5, r4
 800808e:	4628      	mov	r0, r5
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	f001 fa72 	bl	800957c <_malloc_usable_size_r>
 8008098:	4284      	cmp	r4, r0
 800809a:	4607      	mov	r7, r0
 800809c:	d802      	bhi.n	80080a4 <_realloc_r+0x34>
 800809e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080a2:	d812      	bhi.n	80080ca <_realloc_r+0x5a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4640      	mov	r0, r8
 80080a8:	f7ff ff6e 	bl	8007f88 <_malloc_r>
 80080ac:	4605      	mov	r5, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0ed      	beq.n	800808e <_realloc_r+0x1e>
 80080b2:	42bc      	cmp	r4, r7
 80080b4:	4622      	mov	r2, r4
 80080b6:	4631      	mov	r1, r6
 80080b8:	bf28      	it	cs
 80080ba:	463a      	movcs	r2, r7
 80080bc:	f7fd ff0e 	bl	8005edc <memcpy>
 80080c0:	4631      	mov	r1, r6
 80080c2:	4640      	mov	r0, r8
 80080c4:	f001 fa0e 	bl	80094e4 <_free_r>
 80080c8:	e7e1      	b.n	800808e <_realloc_r+0x1e>
 80080ca:	4635      	mov	r5, r6
 80080cc:	e7df      	b.n	800808e <_realloc_r+0x1e>

080080ce <__ssputs_r>:
 80080ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d2:	688e      	ldr	r6, [r1, #8]
 80080d4:	429e      	cmp	r6, r3
 80080d6:	4682      	mov	sl, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	4690      	mov	r8, r2
 80080dc:	461f      	mov	r7, r3
 80080de:	d838      	bhi.n	8008152 <__ssputs_r+0x84>
 80080e0:	898a      	ldrh	r2, [r1, #12]
 80080e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080e6:	d032      	beq.n	800814e <__ssputs_r+0x80>
 80080e8:	6825      	ldr	r5, [r4, #0]
 80080ea:	6909      	ldr	r1, [r1, #16]
 80080ec:	eba5 0901 	sub.w	r9, r5, r1
 80080f0:	6965      	ldr	r5, [r4, #20]
 80080f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080fa:	3301      	adds	r3, #1
 80080fc:	444b      	add	r3, r9
 80080fe:	106d      	asrs	r5, r5, #1
 8008100:	429d      	cmp	r5, r3
 8008102:	bf38      	it	cc
 8008104:	461d      	movcc	r5, r3
 8008106:	0553      	lsls	r3, r2, #21
 8008108:	d531      	bpl.n	800816e <__ssputs_r+0xa0>
 800810a:	4629      	mov	r1, r5
 800810c:	f7ff ff3c 	bl	8007f88 <_malloc_r>
 8008110:	4606      	mov	r6, r0
 8008112:	b950      	cbnz	r0, 800812a <__ssputs_r+0x5c>
 8008114:	230c      	movs	r3, #12
 8008116:	f8ca 3000 	str.w	r3, [sl]
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	6921      	ldr	r1, [r4, #16]
 800812c:	464a      	mov	r2, r9
 800812e:	f7fd fed5 	bl	8005edc <memcpy>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	6126      	str	r6, [r4, #16]
 8008140:	6165      	str	r5, [r4, #20]
 8008142:	444e      	add	r6, r9
 8008144:	eba5 0509 	sub.w	r5, r5, r9
 8008148:	6026      	str	r6, [r4, #0]
 800814a:	60a5      	str	r5, [r4, #8]
 800814c:	463e      	mov	r6, r7
 800814e:	42be      	cmp	r6, r7
 8008150:	d900      	bls.n	8008154 <__ssputs_r+0x86>
 8008152:	463e      	mov	r6, r7
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	4632      	mov	r2, r6
 8008158:	4641      	mov	r1, r8
 800815a:	f001 f99d 	bl	8009498 <memmove>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	1b9b      	subs	r3, r3, r6
 8008162:	60a3      	str	r3, [r4, #8]
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	4433      	add	r3, r6
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	2000      	movs	r0, #0
 800816c:	e7db      	b.n	8008126 <__ssputs_r+0x58>
 800816e:	462a      	mov	r2, r5
 8008170:	f7ff ff7e 	bl	8008070 <_realloc_r>
 8008174:	4606      	mov	r6, r0
 8008176:	2800      	cmp	r0, #0
 8008178:	d1e1      	bne.n	800813e <__ssputs_r+0x70>
 800817a:	6921      	ldr	r1, [r4, #16]
 800817c:	4650      	mov	r0, sl
 800817e:	f001 f9b1 	bl	80094e4 <_free_r>
 8008182:	e7c7      	b.n	8008114 <__ssputs_r+0x46>

08008184 <_svfiprintf_r>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4698      	mov	r8, r3
 800818a:	898b      	ldrh	r3, [r1, #12]
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	b09d      	sub	sp, #116	; 0x74
 8008190:	4607      	mov	r7, r0
 8008192:	460d      	mov	r5, r1
 8008194:	4614      	mov	r4, r2
 8008196:	d50e      	bpl.n	80081b6 <_svfiprintf_r+0x32>
 8008198:	690b      	ldr	r3, [r1, #16]
 800819a:	b963      	cbnz	r3, 80081b6 <_svfiprintf_r+0x32>
 800819c:	2140      	movs	r1, #64	; 0x40
 800819e:	f7ff fef3 	bl	8007f88 <_malloc_r>
 80081a2:	6028      	str	r0, [r5, #0]
 80081a4:	6128      	str	r0, [r5, #16]
 80081a6:	b920      	cbnz	r0, 80081b2 <_svfiprintf_r+0x2e>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e0d1      	b.n	8008356 <_svfiprintf_r+0x1d2>
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	616b      	str	r3, [r5, #20]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ba:	2320      	movs	r3, #32
 80081bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c4:	2330      	movs	r3, #48	; 0x30
 80081c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008370 <_svfiprintf_r+0x1ec>
 80081ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ce:	f04f 0901 	mov.w	r9, #1
 80081d2:	4623      	mov	r3, r4
 80081d4:	469a      	mov	sl, r3
 80081d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081da:	b10a      	cbz	r2, 80081e0 <_svfiprintf_r+0x5c>
 80081dc:	2a25      	cmp	r2, #37	; 0x25
 80081de:	d1f9      	bne.n	80081d4 <_svfiprintf_r+0x50>
 80081e0:	ebba 0b04 	subs.w	fp, sl, r4
 80081e4:	d00b      	beq.n	80081fe <_svfiprintf_r+0x7a>
 80081e6:	465b      	mov	r3, fp
 80081e8:	4622      	mov	r2, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	4638      	mov	r0, r7
 80081ee:	f7ff ff6e 	bl	80080ce <__ssputs_r>
 80081f2:	3001      	adds	r0, #1
 80081f4:	f000 80aa 	beq.w	800834c <_svfiprintf_r+0x1c8>
 80081f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fa:	445a      	add	r2, fp
 80081fc:	9209      	str	r2, [sp, #36]	; 0x24
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80a2 	beq.w	800834c <_svfiprintf_r+0x1c8>
 8008208:	2300      	movs	r3, #0
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008212:	f10a 0a01 	add.w	sl, sl, #1
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	9307      	str	r3, [sp, #28]
 800821a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800821e:	931a      	str	r3, [sp, #104]	; 0x68
 8008220:	4654      	mov	r4, sl
 8008222:	2205      	movs	r2, #5
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	4851      	ldr	r0, [pc, #324]	; (8008370 <_svfiprintf_r+0x1ec>)
 800822a:	f7f7 ffd9 	bl	80001e0 <memchr>
 800822e:	9a04      	ldr	r2, [sp, #16]
 8008230:	b9d8      	cbnz	r0, 800826a <_svfiprintf_r+0xe6>
 8008232:	06d0      	lsls	r0, r2, #27
 8008234:	bf44      	itt	mi
 8008236:	2320      	movmi	r3, #32
 8008238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823c:	0711      	lsls	r1, r2, #28
 800823e:	bf44      	itt	mi
 8008240:	232b      	movmi	r3, #43	; 0x2b
 8008242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008246:	f89a 3000 	ldrb.w	r3, [sl]
 800824a:	2b2a      	cmp	r3, #42	; 0x2a
 800824c:	d015      	beq.n	800827a <_svfiprintf_r+0xf6>
 800824e:	9a07      	ldr	r2, [sp, #28]
 8008250:	4654      	mov	r4, sl
 8008252:	2000      	movs	r0, #0
 8008254:	f04f 0c0a 	mov.w	ip, #10
 8008258:	4621      	mov	r1, r4
 800825a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825e:	3b30      	subs	r3, #48	; 0x30
 8008260:	2b09      	cmp	r3, #9
 8008262:	d94e      	bls.n	8008302 <_svfiprintf_r+0x17e>
 8008264:	b1b0      	cbz	r0, 8008294 <_svfiprintf_r+0x110>
 8008266:	9207      	str	r2, [sp, #28]
 8008268:	e014      	b.n	8008294 <_svfiprintf_r+0x110>
 800826a:	eba0 0308 	sub.w	r3, r0, r8
 800826e:	fa09 f303 	lsl.w	r3, r9, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	46a2      	mov	sl, r4
 8008278:	e7d2      	b.n	8008220 <_svfiprintf_r+0x9c>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	1d19      	adds	r1, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	9103      	str	r1, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfbb      	ittet	lt
 8008286:	425b      	neglt	r3, r3
 8008288:	f042 0202 	orrlt.w	r2, r2, #2
 800828c:	9307      	strge	r3, [sp, #28]
 800828e:	9307      	strlt	r3, [sp, #28]
 8008290:	bfb8      	it	lt
 8008292:	9204      	strlt	r2, [sp, #16]
 8008294:	7823      	ldrb	r3, [r4, #0]
 8008296:	2b2e      	cmp	r3, #46	; 0x2e
 8008298:	d10c      	bne.n	80082b4 <_svfiprintf_r+0x130>
 800829a:	7863      	ldrb	r3, [r4, #1]
 800829c:	2b2a      	cmp	r3, #42	; 0x2a
 800829e:	d135      	bne.n	800830c <_svfiprintf_r+0x188>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	1d1a      	adds	r2, r3, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	9203      	str	r2, [sp, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bfb8      	it	lt
 80082ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b0:	3402      	adds	r4, #2
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008380 <_svfiprintf_r+0x1fc>
 80082b8:	7821      	ldrb	r1, [r4, #0]
 80082ba:	2203      	movs	r2, #3
 80082bc:	4650      	mov	r0, sl
 80082be:	f7f7 ff8f 	bl	80001e0 <memchr>
 80082c2:	b140      	cbz	r0, 80082d6 <_svfiprintf_r+0x152>
 80082c4:	2340      	movs	r3, #64	; 0x40
 80082c6:	eba0 000a 	sub.w	r0, r0, sl
 80082ca:	fa03 f000 	lsl.w	r0, r3, r0
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	4303      	orrs	r3, r0
 80082d2:	3401      	adds	r4, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082da:	4826      	ldr	r0, [pc, #152]	; (8008374 <_svfiprintf_r+0x1f0>)
 80082dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e0:	2206      	movs	r2, #6
 80082e2:	f7f7 ff7d 	bl	80001e0 <memchr>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d038      	beq.n	800835c <_svfiprintf_r+0x1d8>
 80082ea:	4b23      	ldr	r3, [pc, #140]	; (8008378 <_svfiprintf_r+0x1f4>)
 80082ec:	bb1b      	cbnz	r3, 8008336 <_svfiprintf_r+0x1b2>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	3307      	adds	r3, #7
 80082f2:	f023 0307 	bic.w	r3, r3, #7
 80082f6:	3308      	adds	r3, #8
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fc:	4433      	add	r3, r6
 80082fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008300:	e767      	b.n	80081d2 <_svfiprintf_r+0x4e>
 8008302:	fb0c 3202 	mla	r2, ip, r2, r3
 8008306:	460c      	mov	r4, r1
 8008308:	2001      	movs	r0, #1
 800830a:	e7a5      	b.n	8008258 <_svfiprintf_r+0xd4>
 800830c:	2300      	movs	r3, #0
 800830e:	3401      	adds	r4, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	4619      	mov	r1, r3
 8008314:	f04f 0c0a 	mov.w	ip, #10
 8008318:	4620      	mov	r0, r4
 800831a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831e:	3a30      	subs	r2, #48	; 0x30
 8008320:	2a09      	cmp	r2, #9
 8008322:	d903      	bls.n	800832c <_svfiprintf_r+0x1a8>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0c5      	beq.n	80082b4 <_svfiprintf_r+0x130>
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	e7c3      	b.n	80082b4 <_svfiprintf_r+0x130>
 800832c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008330:	4604      	mov	r4, r0
 8008332:	2301      	movs	r3, #1
 8008334:	e7f0      	b.n	8008318 <_svfiprintf_r+0x194>
 8008336:	ab03      	add	r3, sp, #12
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	462a      	mov	r2, r5
 800833c:	4b0f      	ldr	r3, [pc, #60]	; (800837c <_svfiprintf_r+0x1f8>)
 800833e:	a904      	add	r1, sp, #16
 8008340:	4638      	mov	r0, r7
 8008342:	f3af 8000 	nop.w
 8008346:	1c42      	adds	r2, r0, #1
 8008348:	4606      	mov	r6, r0
 800834a:	d1d6      	bne.n	80082fa <_svfiprintf_r+0x176>
 800834c:	89ab      	ldrh	r3, [r5, #12]
 800834e:	065b      	lsls	r3, r3, #25
 8008350:	f53f af2c 	bmi.w	80081ac <_svfiprintf_r+0x28>
 8008354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008356:	b01d      	add	sp, #116	; 0x74
 8008358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835c:	ab03      	add	r3, sp, #12
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	462a      	mov	r2, r5
 8008362:	4b06      	ldr	r3, [pc, #24]	; (800837c <_svfiprintf_r+0x1f8>)
 8008364:	a904      	add	r1, sp, #16
 8008366:	4638      	mov	r0, r7
 8008368:	f000 f87a 	bl	8008460 <_printf_i>
 800836c:	e7eb      	b.n	8008346 <_svfiprintf_r+0x1c2>
 800836e:	bf00      	nop
 8008370:	0800a4c4 	.word	0x0800a4c4
 8008374:	0800a4ce 	.word	0x0800a4ce
 8008378:	00000000 	.word	0x00000000
 800837c:	080080cf 	.word	0x080080cf
 8008380:	0800a4ca 	.word	0x0800a4ca

08008384 <_printf_common>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	4616      	mov	r6, r2
 800838a:	4699      	mov	r9, r3
 800838c:	688a      	ldr	r2, [r1, #8]
 800838e:	690b      	ldr	r3, [r1, #16]
 8008390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008394:	4293      	cmp	r3, r2
 8008396:	bfb8      	it	lt
 8008398:	4613      	movlt	r3, r2
 800839a:	6033      	str	r3, [r6, #0]
 800839c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083a0:	4607      	mov	r7, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	b10a      	cbz	r2, 80083aa <_printf_common+0x26>
 80083a6:	3301      	adds	r3, #1
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	0699      	lsls	r1, r3, #26
 80083ae:	bf42      	ittt	mi
 80083b0:	6833      	ldrmi	r3, [r6, #0]
 80083b2:	3302      	addmi	r3, #2
 80083b4:	6033      	strmi	r3, [r6, #0]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	f015 0506 	ands.w	r5, r5, #6
 80083bc:	d106      	bne.n	80083cc <_printf_common+0x48>
 80083be:	f104 0a19 	add.w	sl, r4, #25
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	6832      	ldr	r2, [r6, #0]
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	42ab      	cmp	r3, r5
 80083ca:	dc26      	bgt.n	800841a <_printf_common+0x96>
 80083cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083d0:	1e13      	subs	r3, r2, #0
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	bf18      	it	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	0692      	lsls	r2, r2, #26
 80083da:	d42b      	bmi.n	8008434 <_printf_common+0xb0>
 80083dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e0:	4649      	mov	r1, r9
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c0      	blx	r8
 80083e6:	3001      	adds	r0, #1
 80083e8:	d01e      	beq.n	8008428 <_printf_common+0xa4>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	68e5      	ldr	r5, [r4, #12]
 80083ee:	6832      	ldr	r2, [r6, #0]
 80083f0:	f003 0306 	and.w	r3, r3, #6
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	bf08      	it	eq
 80083f8:	1aad      	subeq	r5, r5, r2
 80083fa:	68a3      	ldr	r3, [r4, #8]
 80083fc:	6922      	ldr	r2, [r4, #16]
 80083fe:	bf0c      	ite	eq
 8008400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008404:	2500      	movne	r5, #0
 8008406:	4293      	cmp	r3, r2
 8008408:	bfc4      	itt	gt
 800840a:	1a9b      	subgt	r3, r3, r2
 800840c:	18ed      	addgt	r5, r5, r3
 800840e:	2600      	movs	r6, #0
 8008410:	341a      	adds	r4, #26
 8008412:	42b5      	cmp	r5, r6
 8008414:	d11a      	bne.n	800844c <_printf_common+0xc8>
 8008416:	2000      	movs	r0, #0
 8008418:	e008      	b.n	800842c <_printf_common+0xa8>
 800841a:	2301      	movs	r3, #1
 800841c:	4652      	mov	r2, sl
 800841e:	4649      	mov	r1, r9
 8008420:	4638      	mov	r0, r7
 8008422:	47c0      	blx	r8
 8008424:	3001      	adds	r0, #1
 8008426:	d103      	bne.n	8008430 <_printf_common+0xac>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	3501      	adds	r5, #1
 8008432:	e7c6      	b.n	80083c2 <_printf_common+0x3e>
 8008434:	18e1      	adds	r1, r4, r3
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	2030      	movs	r0, #48	; 0x30
 800843a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800843e:	4422      	add	r2, r4
 8008440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008448:	3302      	adds	r3, #2
 800844a:	e7c7      	b.n	80083dc <_printf_common+0x58>
 800844c:	2301      	movs	r3, #1
 800844e:	4622      	mov	r2, r4
 8008450:	4649      	mov	r1, r9
 8008452:	4638      	mov	r0, r7
 8008454:	47c0      	blx	r8
 8008456:	3001      	adds	r0, #1
 8008458:	d0e6      	beq.n	8008428 <_printf_common+0xa4>
 800845a:	3601      	adds	r6, #1
 800845c:	e7d9      	b.n	8008412 <_printf_common+0x8e>
	...

08008460 <_printf_i>:
 8008460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	7e0f      	ldrb	r7, [r1, #24]
 8008466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008468:	2f78      	cmp	r7, #120	; 0x78
 800846a:	4691      	mov	r9, r2
 800846c:	4680      	mov	r8, r0
 800846e:	460c      	mov	r4, r1
 8008470:	469a      	mov	sl, r3
 8008472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008476:	d807      	bhi.n	8008488 <_printf_i+0x28>
 8008478:	2f62      	cmp	r7, #98	; 0x62
 800847a:	d80a      	bhi.n	8008492 <_printf_i+0x32>
 800847c:	2f00      	cmp	r7, #0
 800847e:	f000 80d8 	beq.w	8008632 <_printf_i+0x1d2>
 8008482:	2f58      	cmp	r7, #88	; 0x58
 8008484:	f000 80a3 	beq.w	80085ce <_printf_i+0x16e>
 8008488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800848c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008490:	e03a      	b.n	8008508 <_printf_i+0xa8>
 8008492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008496:	2b15      	cmp	r3, #21
 8008498:	d8f6      	bhi.n	8008488 <_printf_i+0x28>
 800849a:	a101      	add	r1, pc, #4	; (adr r1, 80084a0 <_printf_i+0x40>)
 800849c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	08008489 	.word	0x08008489
 80084ac:	08008489 	.word	0x08008489
 80084b0:	08008489 	.word	0x08008489
 80084b4:	08008489 	.word	0x08008489
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008489 	.word	0x08008489
 80084c0:	08008489 	.word	0x08008489
 80084c4:	08008489 	.word	0x08008489
 80084c8:	08008489 	.word	0x08008489
 80084cc:	08008619 	.word	0x08008619
 80084d0:	0800853d 	.word	0x0800853d
 80084d4:	080085fb 	.word	0x080085fb
 80084d8:	08008489 	.word	0x08008489
 80084dc:	08008489 	.word	0x08008489
 80084e0:	0800863b 	.word	0x0800863b
 80084e4:	08008489 	.word	0x08008489
 80084e8:	0800853d 	.word	0x0800853d
 80084ec:	08008489 	.word	0x08008489
 80084f0:	08008489 	.word	0x08008489
 80084f4:	08008603 	.word	0x08008603
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	602a      	str	r2, [r5, #0]
 8008500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008508:	2301      	movs	r3, #1
 800850a:	e0a3      	b.n	8008654 <_printf_i+0x1f4>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	6829      	ldr	r1, [r5, #0]
 8008510:	0606      	lsls	r6, r0, #24
 8008512:	f101 0304 	add.w	r3, r1, #4
 8008516:	d50a      	bpl.n	800852e <_printf_i+0xce>
 8008518:	680e      	ldr	r6, [r1, #0]
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	2e00      	cmp	r6, #0
 800851e:	da03      	bge.n	8008528 <_printf_i+0xc8>
 8008520:	232d      	movs	r3, #45	; 0x2d
 8008522:	4276      	negs	r6, r6
 8008524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008528:	485e      	ldr	r0, [pc, #376]	; (80086a4 <_printf_i+0x244>)
 800852a:	230a      	movs	r3, #10
 800852c:	e019      	b.n	8008562 <_printf_i+0x102>
 800852e:	680e      	ldr	r6, [r1, #0]
 8008530:	602b      	str	r3, [r5, #0]
 8008532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008536:	bf18      	it	ne
 8008538:	b236      	sxthne	r6, r6
 800853a:	e7ef      	b.n	800851c <_printf_i+0xbc>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	6029      	str	r1, [r5, #0]
 8008544:	0601      	lsls	r1, r0, #24
 8008546:	d501      	bpl.n	800854c <_printf_i+0xec>
 8008548:	681e      	ldr	r6, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0xf2>
 800854c:	0646      	lsls	r6, r0, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0xe8>
 8008550:	881e      	ldrh	r6, [r3, #0]
 8008552:	4854      	ldr	r0, [pc, #336]	; (80086a4 <_printf_i+0x244>)
 8008554:	2f6f      	cmp	r7, #111	; 0x6f
 8008556:	bf0c      	ite	eq
 8008558:	2308      	moveq	r3, #8
 800855a:	230a      	movne	r3, #10
 800855c:	2100      	movs	r1, #0
 800855e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008562:	6865      	ldr	r5, [r4, #4]
 8008564:	60a5      	str	r5, [r4, #8]
 8008566:	2d00      	cmp	r5, #0
 8008568:	bfa2      	ittt	ge
 800856a:	6821      	ldrge	r1, [r4, #0]
 800856c:	f021 0104 	bicge.w	r1, r1, #4
 8008570:	6021      	strge	r1, [r4, #0]
 8008572:	b90e      	cbnz	r6, 8008578 <_printf_i+0x118>
 8008574:	2d00      	cmp	r5, #0
 8008576:	d04d      	beq.n	8008614 <_printf_i+0x1b4>
 8008578:	4615      	mov	r5, r2
 800857a:	fbb6 f1f3 	udiv	r1, r6, r3
 800857e:	fb03 6711 	mls	r7, r3, r1, r6
 8008582:	5dc7      	ldrb	r7, [r0, r7]
 8008584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008588:	4637      	mov	r7, r6
 800858a:	42bb      	cmp	r3, r7
 800858c:	460e      	mov	r6, r1
 800858e:	d9f4      	bls.n	800857a <_printf_i+0x11a>
 8008590:	2b08      	cmp	r3, #8
 8008592:	d10b      	bne.n	80085ac <_printf_i+0x14c>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	07de      	lsls	r6, r3, #31
 8008598:	d508      	bpl.n	80085ac <_printf_i+0x14c>
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	6861      	ldr	r1, [r4, #4]
 800859e:	4299      	cmp	r1, r3
 80085a0:	bfde      	ittt	le
 80085a2:	2330      	movle	r3, #48	; 0x30
 80085a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085ac:	1b52      	subs	r2, r2, r5
 80085ae:	6122      	str	r2, [r4, #16]
 80085b0:	f8cd a000 	str.w	sl, [sp]
 80085b4:	464b      	mov	r3, r9
 80085b6:	aa03      	add	r2, sp, #12
 80085b8:	4621      	mov	r1, r4
 80085ba:	4640      	mov	r0, r8
 80085bc:	f7ff fee2 	bl	8008384 <_printf_common>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d14c      	bne.n	800865e <_printf_i+0x1fe>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	b004      	add	sp, #16
 80085ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ce:	4835      	ldr	r0, [pc, #212]	; (80086a4 <_printf_i+0x244>)
 80085d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085d4:	6829      	ldr	r1, [r5, #0]
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085dc:	6029      	str	r1, [r5, #0]
 80085de:	061d      	lsls	r5, r3, #24
 80085e0:	d514      	bpl.n	800860c <_printf_i+0x1ac>
 80085e2:	07df      	lsls	r7, r3, #31
 80085e4:	bf44      	itt	mi
 80085e6:	f043 0320 	orrmi.w	r3, r3, #32
 80085ea:	6023      	strmi	r3, [r4, #0]
 80085ec:	b91e      	cbnz	r6, 80085f6 <_printf_i+0x196>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f023 0320 	bic.w	r3, r3, #32
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	2310      	movs	r3, #16
 80085f8:	e7b0      	b.n	800855c <_printf_i+0xfc>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	f043 0320 	orr.w	r3, r3, #32
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	2378      	movs	r3, #120	; 0x78
 8008604:	4828      	ldr	r0, [pc, #160]	; (80086a8 <_printf_i+0x248>)
 8008606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800860a:	e7e3      	b.n	80085d4 <_printf_i+0x174>
 800860c:	0659      	lsls	r1, r3, #25
 800860e:	bf48      	it	mi
 8008610:	b2b6      	uxthmi	r6, r6
 8008612:	e7e6      	b.n	80085e2 <_printf_i+0x182>
 8008614:	4615      	mov	r5, r2
 8008616:	e7bb      	b.n	8008590 <_printf_i+0x130>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	6826      	ldr	r6, [r4, #0]
 800861c:	6961      	ldr	r1, [r4, #20]
 800861e:	1d18      	adds	r0, r3, #4
 8008620:	6028      	str	r0, [r5, #0]
 8008622:	0635      	lsls	r5, r6, #24
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	d501      	bpl.n	800862c <_printf_i+0x1cc>
 8008628:	6019      	str	r1, [r3, #0]
 800862a:	e002      	b.n	8008632 <_printf_i+0x1d2>
 800862c:	0670      	lsls	r0, r6, #25
 800862e:	d5fb      	bpl.n	8008628 <_printf_i+0x1c8>
 8008630:	8019      	strh	r1, [r3, #0]
 8008632:	2300      	movs	r3, #0
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	4615      	mov	r5, r2
 8008638:	e7ba      	b.n	80085b0 <_printf_i+0x150>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	1d1a      	adds	r2, r3, #4
 800863e:	602a      	str	r2, [r5, #0]
 8008640:	681d      	ldr	r5, [r3, #0]
 8008642:	6862      	ldr	r2, [r4, #4]
 8008644:	2100      	movs	r1, #0
 8008646:	4628      	mov	r0, r5
 8008648:	f7f7 fdca 	bl	80001e0 <memchr>
 800864c:	b108      	cbz	r0, 8008652 <_printf_i+0x1f2>
 800864e:	1b40      	subs	r0, r0, r5
 8008650:	6060      	str	r0, [r4, #4]
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	2300      	movs	r3, #0
 8008658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865c:	e7a8      	b.n	80085b0 <_printf_i+0x150>
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	462a      	mov	r2, r5
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	47d0      	blx	sl
 8008668:	3001      	adds	r0, #1
 800866a:	d0ab      	beq.n	80085c4 <_printf_i+0x164>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	079b      	lsls	r3, r3, #30
 8008670:	d413      	bmi.n	800869a <_printf_i+0x23a>
 8008672:	68e0      	ldr	r0, [r4, #12]
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	4298      	cmp	r0, r3
 8008678:	bfb8      	it	lt
 800867a:	4618      	movlt	r0, r3
 800867c:	e7a4      	b.n	80085c8 <_printf_i+0x168>
 800867e:	2301      	movs	r3, #1
 8008680:	4632      	mov	r2, r6
 8008682:	4649      	mov	r1, r9
 8008684:	4640      	mov	r0, r8
 8008686:	47d0      	blx	sl
 8008688:	3001      	adds	r0, #1
 800868a:	d09b      	beq.n	80085c4 <_printf_i+0x164>
 800868c:	3501      	adds	r5, #1
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	9903      	ldr	r1, [sp, #12]
 8008692:	1a5b      	subs	r3, r3, r1
 8008694:	42ab      	cmp	r3, r5
 8008696:	dcf2      	bgt.n	800867e <_printf_i+0x21e>
 8008698:	e7eb      	b.n	8008672 <_printf_i+0x212>
 800869a:	2500      	movs	r5, #0
 800869c:	f104 0619 	add.w	r6, r4, #25
 80086a0:	e7f5      	b.n	800868e <_printf_i+0x22e>
 80086a2:	bf00      	nop
 80086a4:	0800a4d5 	.word	0x0800a4d5
 80086a8:	0800a4e6 	.word	0x0800a4e6
 80086ac:	00000000 	.word	0x00000000

080086b0 <nan>:
 80086b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086b8 <nan+0x8>
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	00000000 	.word	0x00000000
 80086bc:	7ff80000 	.word	0x7ff80000

080086c0 <_sbrk_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_sbrk_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f9 fe5a 	bl	8002384 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_sbrk_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_sbrk_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	200004f0 	.word	0x200004f0

080086e0 <strcpy>:
 80086e0:	4603      	mov	r3, r0
 80086e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086e6:	f803 2b01 	strb.w	r2, [r3], #1
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	d1f9      	bne.n	80086e2 <strcpy+0x2>
 80086ee:	4770      	bx	lr

080086f0 <strncmp>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	b17a      	cbz	r2, 8008714 <strncmp+0x24>
 80086f4:	4603      	mov	r3, r0
 80086f6:	3901      	subs	r1, #1
 80086f8:	1884      	adds	r4, r0, r2
 80086fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008702:	4290      	cmp	r0, r2
 8008704:	d101      	bne.n	800870a <strncmp+0x1a>
 8008706:	42a3      	cmp	r3, r4
 8008708:	d101      	bne.n	800870e <strncmp+0x1e>
 800870a:	1a80      	subs	r0, r0, r2
 800870c:	bd10      	pop	{r4, pc}
 800870e:	2800      	cmp	r0, #0
 8008710:	d1f3      	bne.n	80086fa <strncmp+0xa>
 8008712:	e7fa      	b.n	800870a <strncmp+0x1a>
 8008714:	4610      	mov	r0, r2
 8008716:	e7f9      	b.n	800870c <strncmp+0x1c>

08008718 <__ascii_wctomb>:
 8008718:	b149      	cbz	r1, 800872e <__ascii_wctomb+0x16>
 800871a:	2aff      	cmp	r2, #255	; 0xff
 800871c:	bf85      	ittet	hi
 800871e:	238a      	movhi	r3, #138	; 0x8a
 8008720:	6003      	strhi	r3, [r0, #0]
 8008722:	700a      	strbls	r2, [r1, #0]
 8008724:	f04f 30ff 	movhi.w	r0, #4294967295
 8008728:	bf98      	it	ls
 800872a:	2001      	movls	r0, #1
 800872c:	4770      	bx	lr
 800872e:	4608      	mov	r0, r1
 8008730:	4770      	bx	lr
	...

08008734 <__assert_func>:
 8008734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008736:	4614      	mov	r4, r2
 8008738:	461a      	mov	r2, r3
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <__assert_func+0x2c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4605      	mov	r5, r0
 8008740:	68d8      	ldr	r0, [r3, #12]
 8008742:	b14c      	cbz	r4, 8008758 <__assert_func+0x24>
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <__assert_func+0x30>)
 8008746:	9100      	str	r1, [sp, #0]
 8008748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800874c:	4906      	ldr	r1, [pc, #24]	; (8008768 <__assert_func+0x34>)
 800874e:	462b      	mov	r3, r5
 8008750:	f000 fe88 	bl	8009464 <fiprintf>
 8008754:	f001 f934 	bl	80099c0 <abort>
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <__assert_func+0x38>)
 800875a:	461c      	mov	r4, r3
 800875c:	e7f3      	b.n	8008746 <__assert_func+0x12>
 800875e:	bf00      	nop
 8008760:	2000001c 	.word	0x2000001c
 8008764:	0800a4f7 	.word	0x0800a4f7
 8008768:	0800a504 	.word	0x0800a504
 800876c:	0800a532 	.word	0x0800a532

08008770 <quorem>:
 8008770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	6903      	ldr	r3, [r0, #16]
 8008776:	690c      	ldr	r4, [r1, #16]
 8008778:	42a3      	cmp	r3, r4
 800877a:	4607      	mov	r7, r0
 800877c:	f2c0 8081 	blt.w	8008882 <quorem+0x112>
 8008780:	3c01      	subs	r4, #1
 8008782:	f101 0814 	add.w	r8, r1, #20
 8008786:	f100 0514 	add.w	r5, r0, #20
 800878a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008798:	3301      	adds	r3, #1
 800879a:	429a      	cmp	r2, r3
 800879c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80087a8:	d331      	bcc.n	800880e <quorem+0x9e>
 80087aa:	f04f 0e00 	mov.w	lr, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	46ac      	mov	ip, r5
 80087b2:	46f2      	mov	sl, lr
 80087b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80087b8:	b293      	uxth	r3, r2
 80087ba:	fb06 e303 	mla	r3, r6, r3, lr
 80087be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ebaa 0303 	sub.w	r3, sl, r3
 80087c8:	f8dc a000 	ldr.w	sl, [ip]
 80087cc:	0c12      	lsrs	r2, r2, #16
 80087ce:	fa13 f38a 	uxtah	r3, r3, sl
 80087d2:	fb06 e202 	mla	r2, r6, r2, lr
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	9b00      	ldr	r3, [sp, #0]
 80087da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087de:	b292      	uxth	r2, r2
 80087e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80087ec:	4581      	cmp	r9, r0
 80087ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f2:	f84c 3b04 	str.w	r3, [ip], #4
 80087f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087fa:	d2db      	bcs.n	80087b4 <quorem+0x44>
 80087fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008800:	b92b      	cbnz	r3, 800880e <quorem+0x9e>
 8008802:	9b01      	ldr	r3, [sp, #4]
 8008804:	3b04      	subs	r3, #4
 8008806:	429d      	cmp	r5, r3
 8008808:	461a      	mov	r2, r3
 800880a:	d32e      	bcc.n	800886a <quorem+0xfa>
 800880c:	613c      	str	r4, [r7, #16]
 800880e:	4638      	mov	r0, r7
 8008810:	f7ff f970 	bl	8007af4 <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	db24      	blt.n	8008862 <quorem+0xf2>
 8008818:	3601      	adds	r6, #1
 800881a:	4628      	mov	r0, r5
 800881c:	f04f 0c00 	mov.w	ip, #0
 8008820:	f858 2b04 	ldr.w	r2, [r8], #4
 8008824:	f8d0 e000 	ldr.w	lr, [r0]
 8008828:	b293      	uxth	r3, r2
 800882a:	ebac 0303 	sub.w	r3, ip, r3
 800882e:	0c12      	lsrs	r2, r2, #16
 8008830:	fa13 f38e 	uxtah	r3, r3, lr
 8008834:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008842:	45c1      	cmp	r9, r8
 8008844:	f840 3b04 	str.w	r3, [r0], #4
 8008848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800884c:	d2e8      	bcs.n	8008820 <quorem+0xb0>
 800884e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008856:	b922      	cbnz	r2, 8008862 <quorem+0xf2>
 8008858:	3b04      	subs	r3, #4
 800885a:	429d      	cmp	r5, r3
 800885c:	461a      	mov	r2, r3
 800885e:	d30a      	bcc.n	8008876 <quorem+0x106>
 8008860:	613c      	str	r4, [r7, #16]
 8008862:	4630      	mov	r0, r6
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	3b04      	subs	r3, #4
 800886e:	2a00      	cmp	r2, #0
 8008870:	d1cc      	bne.n	800880c <quorem+0x9c>
 8008872:	3c01      	subs	r4, #1
 8008874:	e7c7      	b.n	8008806 <quorem+0x96>
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	3b04      	subs	r3, #4
 800887a:	2a00      	cmp	r2, #0
 800887c:	d1f0      	bne.n	8008860 <quorem+0xf0>
 800887e:	3c01      	subs	r4, #1
 8008880:	e7eb      	b.n	800885a <quorem+0xea>
 8008882:	2000      	movs	r0, #0
 8008884:	e7ee      	b.n	8008864 <quorem+0xf4>
	...

08008888 <_dtoa_r>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	ed2d 8b04 	vpush	{d8-d9}
 8008890:	ec57 6b10 	vmov	r6, r7, d0
 8008894:	b093      	sub	sp, #76	; 0x4c
 8008896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008898:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800889c:	9106      	str	r1, [sp, #24]
 800889e:	ee10 aa10 	vmov	sl, s0
 80088a2:	4604      	mov	r4, r0
 80088a4:	9209      	str	r2, [sp, #36]	; 0x24
 80088a6:	930c      	str	r3, [sp, #48]	; 0x30
 80088a8:	46bb      	mov	fp, r7
 80088aa:	b975      	cbnz	r5, 80088ca <_dtoa_r+0x42>
 80088ac:	2010      	movs	r0, #16
 80088ae:	f000 fdeb 	bl	8009488 <malloc>
 80088b2:	4602      	mov	r2, r0
 80088b4:	6260      	str	r0, [r4, #36]	; 0x24
 80088b6:	b920      	cbnz	r0, 80088c2 <_dtoa_r+0x3a>
 80088b8:	4ba7      	ldr	r3, [pc, #668]	; (8008b58 <_dtoa_r+0x2d0>)
 80088ba:	21ea      	movs	r1, #234	; 0xea
 80088bc:	48a7      	ldr	r0, [pc, #668]	; (8008b5c <_dtoa_r+0x2d4>)
 80088be:	f7ff ff39 	bl	8008734 <__assert_func>
 80088c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088c6:	6005      	str	r5, [r0, #0]
 80088c8:	60c5      	str	r5, [r0, #12]
 80088ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088cc:	6819      	ldr	r1, [r3, #0]
 80088ce:	b151      	cbz	r1, 80088e6 <_dtoa_r+0x5e>
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	604a      	str	r2, [r1, #4]
 80088d4:	2301      	movs	r3, #1
 80088d6:	4093      	lsls	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
 80088da:	4620      	mov	r0, r4
 80088dc:	f7fe fe7e 	bl	80075dc <_Bfree>
 80088e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	1e3b      	subs	r3, r7, #0
 80088e8:	bfaa      	itet	ge
 80088ea:	2300      	movge	r3, #0
 80088ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80088f0:	f8c8 3000 	strge.w	r3, [r8]
 80088f4:	4b9a      	ldr	r3, [pc, #616]	; (8008b60 <_dtoa_r+0x2d8>)
 80088f6:	bfbc      	itt	lt
 80088f8:	2201      	movlt	r2, #1
 80088fa:	f8c8 2000 	strlt.w	r2, [r8]
 80088fe:	ea33 030b 	bics.w	r3, r3, fp
 8008902:	d11b      	bne.n	800893c <_dtoa_r+0xb4>
 8008904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008906:	f242 730f 	movw	r3, #9999	; 0x270f
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008910:	4333      	orrs	r3, r6
 8008912:	f000 8592 	beq.w	800943a <_dtoa_r+0xbb2>
 8008916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008918:	b963      	cbnz	r3, 8008934 <_dtoa_r+0xac>
 800891a:	4b92      	ldr	r3, [pc, #584]	; (8008b64 <_dtoa_r+0x2dc>)
 800891c:	e022      	b.n	8008964 <_dtoa_r+0xdc>
 800891e:	4b92      	ldr	r3, [pc, #584]	; (8008b68 <_dtoa_r+0x2e0>)
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	3308      	adds	r3, #8
 8008924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	9801      	ldr	r0, [sp, #4]
 800892a:	b013      	add	sp, #76	; 0x4c
 800892c:	ecbd 8b04 	vpop	{d8-d9}
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	4b8b      	ldr	r3, [pc, #556]	; (8008b64 <_dtoa_r+0x2dc>)
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	3303      	adds	r3, #3
 800893a:	e7f3      	b.n	8008924 <_dtoa_r+0x9c>
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	4650      	mov	r0, sl
 8008942:	4659      	mov	r1, fp
 8008944:	f7f8 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008948:	ec4b ab19 	vmov	d9, sl, fp
 800894c:	4680      	mov	r8, r0
 800894e:	b158      	cbz	r0, 8008968 <_dtoa_r+0xe0>
 8008950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008952:	2301      	movs	r3, #1
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 856b 	beq.w	8009434 <_dtoa_r+0xbac>
 800895e:	4883      	ldr	r0, [pc, #524]	; (8008b6c <_dtoa_r+0x2e4>)
 8008960:	6018      	str	r0, [r3, #0]
 8008962:	1e43      	subs	r3, r0, #1
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	e7df      	b.n	8008928 <_dtoa_r+0xa0>
 8008968:	ec4b ab10 	vmov	d0, sl, fp
 800896c:	aa10      	add	r2, sp, #64	; 0x40
 800896e:	a911      	add	r1, sp, #68	; 0x44
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff f9e1 	bl	8007d38 <__d2b>
 8008976:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800897a:	ee08 0a10 	vmov	s16, r0
 800897e:	2d00      	cmp	r5, #0
 8008980:	f000 8084 	beq.w	8008a8c <_dtoa_r+0x204>
 8008984:	ee19 3a90 	vmov	r3, s19
 8008988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008990:	4656      	mov	r6, sl
 8008992:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800899a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800899e:	4b74      	ldr	r3, [pc, #464]	; (8008b70 <_dtoa_r+0x2e8>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 fc6f 	bl	8000288 <__aeabi_dsub>
 80089aa:	a365      	add	r3, pc, #404	; (adr r3, 8008b40 <_dtoa_r+0x2b8>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	a364      	add	r3, pc, #400	; (adr r3, 8008b48 <_dtoa_r+0x2c0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc67 	bl	800028c <__adddf3>
 80089be:	4606      	mov	r6, r0
 80089c0:	4628      	mov	r0, r5
 80089c2:	460f      	mov	r7, r1
 80089c4:	f7f7 fdae 	bl	8000524 <__aeabi_i2d>
 80089c8:	a361      	add	r3, pc, #388	; (adr r3, 8008b50 <_dtoa_r+0x2c8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f7 fc57 	bl	800028c <__adddf3>
 80089de:	4606      	mov	r6, r0
 80089e0:	460f      	mov	r7, r1
 80089e2:	f7f8 f8a3 	bl	8000b2c <__aeabi_d2iz>
 80089e6:	2200      	movs	r2, #0
 80089e8:	9000      	str	r0, [sp, #0]
 80089ea:	2300      	movs	r3, #0
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f8 f874 	bl	8000adc <__aeabi_dcmplt>
 80089f4:	b150      	cbz	r0, 8008a0c <_dtoa_r+0x184>
 80089f6:	9800      	ldr	r0, [sp, #0]
 80089f8:	f7f7 fd94 	bl	8000524 <__aeabi_i2d>
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	f7f8 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a04:	b910      	cbnz	r0, 8008a0c <_dtoa_r+0x184>
 8008a06:	9b00      	ldr	r3, [sp, #0]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	2b16      	cmp	r3, #22
 8008a10:	d85a      	bhi.n	8008ac8 <_dtoa_r+0x240>
 8008a12:	9a00      	ldr	r2, [sp, #0]
 8008a14:	4b57      	ldr	r3, [pc, #348]	; (8008b74 <_dtoa_r+0x2ec>)
 8008a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	ec51 0b19 	vmov	r0, r1, d9
 8008a22:	f7f8 f85b 	bl	8000adc <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d050      	beq.n	8008acc <_dtoa_r+0x244>
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2300      	movs	r3, #0
 8008a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a36:	1b5d      	subs	r5, r3, r5
 8008a38:	1e6b      	subs	r3, r5, #1
 8008a3a:	9305      	str	r3, [sp, #20]
 8008a3c:	bf45      	ittet	mi
 8008a3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a42:	9304      	strmi	r3, [sp, #16]
 8008a44:	2300      	movpl	r3, #0
 8008a46:	2300      	movmi	r3, #0
 8008a48:	bf4c      	ite	mi
 8008a4a:	9305      	strmi	r3, [sp, #20]
 8008a4c:	9304      	strpl	r3, [sp, #16]
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	db3d      	blt.n	8008ad0 <_dtoa_r+0x248>
 8008a54:	9b05      	ldr	r3, [sp, #20]
 8008a56:	9a00      	ldr	r2, [sp, #0]
 8008a58:	920a      	str	r2, [sp, #40]	; 0x28
 8008a5a:	4413      	add	r3, r2
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	9b06      	ldr	r3, [sp, #24]
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	f200 8089 	bhi.w	8008b7c <_dtoa_r+0x2f4>
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	bfc4      	itt	gt
 8008a6e:	3b04      	subgt	r3, #4
 8008a70:	9306      	strgt	r3, [sp, #24]
 8008a72:	9b06      	ldr	r3, [sp, #24]
 8008a74:	f1a3 0302 	sub.w	r3, r3, #2
 8008a78:	bfcc      	ite	gt
 8008a7a:	2500      	movgt	r5, #0
 8008a7c:	2501      	movle	r5, #1
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	f200 8087 	bhi.w	8008b92 <_dtoa_r+0x30a>
 8008a84:	e8df f003 	tbb	[pc, r3]
 8008a88:	59383a2d 	.word	0x59383a2d
 8008a8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a90:	441d      	add	r5, r3
 8008a92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	bfc1      	itttt	gt
 8008a9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008aa2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008aa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008aaa:	bfda      	itte	le
 8008aac:	f1c3 0320 	rsble	r3, r3, #32
 8008ab0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ab4:	4318      	orrgt	r0, r3
 8008ab6:	f7f7 fd25 	bl	8000504 <__aeabi_ui2d>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4606      	mov	r6, r0
 8008abe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ac2:	3d01      	subs	r5, #1
 8008ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac6:	e76a      	b.n	800899e <_dtoa_r+0x116>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7b2      	b.n	8008a32 <_dtoa_r+0x1aa>
 8008acc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ace:	e7b1      	b.n	8008a34 <_dtoa_r+0x1ac>
 8008ad0:	9b04      	ldr	r3, [sp, #16]
 8008ad2:	9a00      	ldr	r2, [sp, #0]
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	9304      	str	r3, [sp, #16]
 8008ad8:	4253      	negs	r3, r2
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	2300      	movs	r3, #0
 8008ade:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae0:	e7bf      	b.n	8008a62 <_dtoa_r+0x1da>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9308      	str	r3, [sp, #32]
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc55      	bgt.n	8008b98 <_dtoa_r+0x310>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008af2:	461a      	mov	r2, r3
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	e00c      	b.n	8008b12 <_dtoa_r+0x28a>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e7f3      	b.n	8008ae4 <_dtoa_r+0x25c>
 8008afc:	2300      	movs	r3, #0
 8008afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	9b00      	ldr	r3, [sp, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	9302      	str	r3, [sp, #8]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	9303      	str	r3, [sp, #12]
 8008b0e:	bfb8      	it	lt
 8008b10:	2301      	movlt	r3, #1
 8008b12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b14:	2200      	movs	r2, #0
 8008b16:	6042      	str	r2, [r0, #4]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	f102 0614 	add.w	r6, r2, #20
 8008b1e:	429e      	cmp	r6, r3
 8008b20:	6841      	ldr	r1, [r0, #4]
 8008b22:	d93d      	bls.n	8008ba0 <_dtoa_r+0x318>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7fe fd19 	bl	800755c <_Balloc>
 8008b2a:	9001      	str	r0, [sp, #4]
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d13b      	bne.n	8008ba8 <_dtoa_r+0x320>
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <_dtoa_r+0x2f0>)
 8008b32:	4602      	mov	r2, r0
 8008b34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b38:	e6c0      	b.n	80088bc <_dtoa_r+0x34>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e7df      	b.n	8008afe <_dtoa_r+0x276>
 8008b3e:	bf00      	nop
 8008b40:	636f4361 	.word	0x636f4361
 8008b44:	3fd287a7 	.word	0x3fd287a7
 8008b48:	8b60c8b3 	.word	0x8b60c8b3
 8008b4c:	3fc68a28 	.word	0x3fc68a28
 8008b50:	509f79fb 	.word	0x509f79fb
 8008b54:	3fd34413 	.word	0x3fd34413
 8008b58:	0800a354 	.word	0x0800a354
 8008b5c:	0800a643 	.word	0x0800a643
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	0800a63d 	.word	0x0800a63d
 8008b68:	0800a634 	.word	0x0800a634
 8008b6c:	0800a642 	.word	0x0800a642
 8008b70:	3ff80000 	.word	0x3ff80000
 8008b74:	0800a3f0 	.word	0x0800a3f0
 8008b78:	0800a2c8 	.word	0x0800a2c8
 8008b7c:	2501      	movs	r5, #1
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9306      	str	r3, [sp, #24]
 8008b82:	9508      	str	r5, [sp, #32]
 8008b84:	f04f 33ff 	mov.w	r3, #4294967295
 8008b88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2312      	movs	r3, #18
 8008b90:	e7b0      	b.n	8008af4 <_dtoa_r+0x26c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	e7f5      	b.n	8008b84 <_dtoa_r+0x2fc>
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b9e:	e7b8      	b.n	8008b12 <_dtoa_r+0x28a>
 8008ba0:	3101      	adds	r1, #1
 8008ba2:	6041      	str	r1, [r0, #4]
 8008ba4:	0052      	lsls	r2, r2, #1
 8008ba6:	e7b8      	b.n	8008b1a <_dtoa_r+0x292>
 8008ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008baa:	9a01      	ldr	r2, [sp, #4]
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2b0e      	cmp	r3, #14
 8008bb2:	f200 809d 	bhi.w	8008cf0 <_dtoa_r+0x468>
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	f000 809a 	beq.w	8008cf0 <_dtoa_r+0x468>
 8008bbc:	9b00      	ldr	r3, [sp, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dd32      	ble.n	8008c28 <_dtoa_r+0x3a0>
 8008bc2:	4ab7      	ldr	r2, [pc, #732]	; (8008ea0 <_dtoa_r+0x618>)
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	05d8      	lsls	r0, r3, #23
 8008bd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008bd8:	d516      	bpl.n	8008c08 <_dtoa_r+0x380>
 8008bda:	4bb2      	ldr	r3, [pc, #712]	; (8008ea4 <_dtoa_r+0x61c>)
 8008bdc:	ec51 0b19 	vmov	r0, r1, d9
 8008be0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008be4:	f7f7 fe32 	bl	800084c <__aeabi_ddiv>
 8008be8:	f007 070f 	and.w	r7, r7, #15
 8008bec:	4682      	mov	sl, r0
 8008bee:	468b      	mov	fp, r1
 8008bf0:	2503      	movs	r5, #3
 8008bf2:	4eac      	ldr	r6, [pc, #688]	; (8008ea4 <_dtoa_r+0x61c>)
 8008bf4:	b957      	cbnz	r7, 8008c0c <_dtoa_r+0x384>
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	f7f7 fe25 	bl	800084c <__aeabi_ddiv>
 8008c02:	4682      	mov	sl, r0
 8008c04:	468b      	mov	fp, r1
 8008c06:	e028      	b.n	8008c5a <_dtoa_r+0x3d2>
 8008c08:	2502      	movs	r5, #2
 8008c0a:	e7f2      	b.n	8008bf2 <_dtoa_r+0x36a>
 8008c0c:	07f9      	lsls	r1, r7, #31
 8008c0e:	d508      	bpl.n	8008c22 <_dtoa_r+0x39a>
 8008c10:	4640      	mov	r0, r8
 8008c12:	4649      	mov	r1, r9
 8008c14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4689      	mov	r9, r1
 8008c22:	107f      	asrs	r7, r7, #1
 8008c24:	3608      	adds	r6, #8
 8008c26:	e7e5      	b.n	8008bf4 <_dtoa_r+0x36c>
 8008c28:	f000 809b 	beq.w	8008d62 <_dtoa_r+0x4da>
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	4f9d      	ldr	r7, [pc, #628]	; (8008ea4 <_dtoa_r+0x61c>)
 8008c30:	425e      	negs	r6, r3
 8008c32:	4b9b      	ldr	r3, [pc, #620]	; (8008ea0 <_dtoa_r+0x618>)
 8008c34:	f006 020f 	and.w	r2, r6, #15
 8008c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	ec51 0b19 	vmov	r0, r1, d9
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	1136      	asrs	r6, r6, #4
 8008c4a:	4682      	mov	sl, r0
 8008c4c:	468b      	mov	fp, r1
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2502      	movs	r5, #2
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d17a      	bne.n	8008d4c <_dtoa_r+0x4c4>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1d3      	bne.n	8008c02 <_dtoa_r+0x37a>
 8008c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8082 	beq.w	8008d66 <_dtoa_r+0x4de>
 8008c62:	4b91      	ldr	r3, [pc, #580]	; (8008ea8 <_dtoa_r+0x620>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	4650      	mov	r0, sl
 8008c68:	4659      	mov	r1, fp
 8008c6a:	f7f7 ff37 	bl	8000adc <__aeabi_dcmplt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d079      	beq.n	8008d66 <_dtoa_r+0x4de>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d076      	beq.n	8008d66 <_dtoa_r+0x4de>
 8008c78:	9b02      	ldr	r3, [sp, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd36      	ble.n	8008cec <_dtoa_r+0x464>
 8008c7e:	9b00      	ldr	r3, [sp, #0]
 8008c80:	4650      	mov	r0, sl
 8008c82:	4659      	mov	r1, fp
 8008c84:	1e5f      	subs	r7, r3, #1
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b88      	ldr	r3, [pc, #544]	; (8008eac <_dtoa_r+0x624>)
 8008c8a:	f7f7 fcb5 	bl	80005f8 <__aeabi_dmul>
 8008c8e:	9e02      	ldr	r6, [sp, #8]
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	3501      	adds	r5, #1
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7f7 fc44 	bl	8000524 <__aeabi_i2d>
 8008c9c:	4652      	mov	r2, sl
 8008c9e:	465b      	mov	r3, fp
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	4b82      	ldr	r3, [pc, #520]	; (8008eb0 <_dtoa_r+0x628>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f7f7 faf0 	bl	800028c <__adddf3>
 8008cac:	46d0      	mov	r8, sl
 8008cae:	46d9      	mov	r9, fp
 8008cb0:	4682      	mov	sl, r0
 8008cb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	d158      	bne.n	8008d6c <_dtoa_r+0x4e4>
 8008cba:	4b7e      	ldr	r3, [pc, #504]	; (8008eb4 <_dtoa_r+0x62c>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fae1 	bl	8000288 <__aeabi_dsub>
 8008cc6:	4652      	mov	r2, sl
 8008cc8:	465b      	mov	r3, fp
 8008cca:	4680      	mov	r8, r0
 8008ccc:	4689      	mov	r9, r1
 8008cce:	f7f7 ff23 	bl	8000b18 <__aeabi_dcmpgt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f040 8295 	bne.w	8009202 <_dtoa_r+0x97a>
 8008cd8:	4652      	mov	r2, sl
 8008cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f7f7 fefb 	bl	8000adc <__aeabi_dcmplt>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f040 8289 	bne.w	80091fe <_dtoa_r+0x976>
 8008cec:	ec5b ab19 	vmov	sl, fp, d9
 8008cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f2c0 8148 	blt.w	8008f88 <_dtoa_r+0x700>
 8008cf8:	9a00      	ldr	r2, [sp, #0]
 8008cfa:	2a0e      	cmp	r2, #14
 8008cfc:	f300 8144 	bgt.w	8008f88 <_dtoa_r+0x700>
 8008d00:	4b67      	ldr	r3, [pc, #412]	; (8008ea0 <_dtoa_r+0x618>)
 8008d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f280 80d5 	bge.w	8008ebc <_dtoa_r+0x634>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f300 80d1 	bgt.w	8008ebc <_dtoa_r+0x634>
 8008d1a:	f040 826f 	bne.w	80091fc <_dtoa_r+0x974>
 8008d1e:	4b65      	ldr	r3, [pc, #404]	; (8008eb4 <_dtoa_r+0x62c>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 fc67 	bl	80005f8 <__aeabi_dmul>
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	f7f7 fee9 	bl	8000b04 <__aeabi_dcmpge>
 8008d32:	9e03      	ldr	r6, [sp, #12]
 8008d34:	4637      	mov	r7, r6
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f040 8245 	bne.w	80091c6 <_dtoa_r+0x93e>
 8008d3c:	9d01      	ldr	r5, [sp, #4]
 8008d3e:	2331      	movs	r3, #49	; 0x31
 8008d40:	f805 3b01 	strb.w	r3, [r5], #1
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	e240      	b.n	80091ce <_dtoa_r+0x946>
 8008d4c:	07f2      	lsls	r2, r6, #31
 8008d4e:	d505      	bpl.n	8008d5c <_dtoa_r+0x4d4>
 8008d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	3501      	adds	r5, #1
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	1076      	asrs	r6, r6, #1
 8008d5e:	3708      	adds	r7, #8
 8008d60:	e777      	b.n	8008c52 <_dtoa_r+0x3ca>
 8008d62:	2502      	movs	r5, #2
 8008d64:	e779      	b.n	8008c5a <_dtoa_r+0x3d2>
 8008d66:	9f00      	ldr	r7, [sp, #0]
 8008d68:	9e03      	ldr	r6, [sp, #12]
 8008d6a:	e794      	b.n	8008c96 <_dtoa_r+0x40e>
 8008d6c:	9901      	ldr	r1, [sp, #4]
 8008d6e:	4b4c      	ldr	r3, [pc, #304]	; (8008ea0 <_dtoa_r+0x618>)
 8008d70:	4431      	add	r1, r6
 8008d72:	910d      	str	r1, [sp, #52]	; 0x34
 8008d74:	9908      	ldr	r1, [sp, #32]
 8008d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d043      	beq.n	8008e0a <_dtoa_r+0x582>
 8008d82:	494d      	ldr	r1, [pc, #308]	; (8008eb8 <_dtoa_r+0x630>)
 8008d84:	2000      	movs	r0, #0
 8008d86:	f7f7 fd61 	bl	800084c <__aeabi_ddiv>
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	f7f7 fa7b 	bl	8000288 <__aeabi_dsub>
 8008d92:	9d01      	ldr	r5, [sp, #4]
 8008d94:	4682      	mov	sl, r0
 8008d96:	468b      	mov	fp, r1
 8008d98:	4649      	mov	r1, r9
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	f7f7 fec6 	bl	8000b2c <__aeabi_d2iz>
 8008da0:	4606      	mov	r6, r0
 8008da2:	f7f7 fbbf 	bl	8000524 <__aeabi_i2d>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	3630      	adds	r6, #48	; 0x30
 8008db4:	f805 6b01 	strb.w	r6, [r5], #1
 8008db8:	4652      	mov	r2, sl
 8008dba:	465b      	mov	r3, fp
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	4689      	mov	r9, r1
 8008dc0:	f7f7 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d163      	bne.n	8008e90 <_dtoa_r+0x608>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	4936      	ldr	r1, [pc, #216]	; (8008ea8 <_dtoa_r+0x620>)
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7f7 fa5a 	bl	8000288 <__aeabi_dsub>
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	465b      	mov	r3, fp
 8008dd8:	f7f7 fe80 	bl	8000adc <__aeabi_dcmplt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f040 80b5 	bne.w	8008f4c <_dtoa_r+0x6c4>
 8008de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008de4:	429d      	cmp	r5, r3
 8008de6:	d081      	beq.n	8008cec <_dtoa_r+0x464>
 8008de8:	4b30      	ldr	r3, [pc, #192]	; (8008eac <_dtoa_r+0x624>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	4650      	mov	r0, sl
 8008dee:	4659      	mov	r1, fp
 8008df0:	f7f7 fc02 	bl	80005f8 <__aeabi_dmul>
 8008df4:	4b2d      	ldr	r3, [pc, #180]	; (8008eac <_dtoa_r+0x624>)
 8008df6:	4682      	mov	sl, r0
 8008df8:	468b      	mov	fp, r1
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f7f7 fbfa 	bl	80005f8 <__aeabi_dmul>
 8008e04:	4680      	mov	r8, r0
 8008e06:	4689      	mov	r9, r1
 8008e08:	e7c6      	b.n	8008d98 <_dtoa_r+0x510>
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e14:	9d01      	ldr	r5, [sp, #4]
 8008e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e18:	4682      	mov	sl, r0
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f7f7 fe84 	bl	8000b2c <__aeabi_d2iz>
 8008e24:	4606      	mov	r6, r0
 8008e26:	f7f7 fb7d 	bl	8000524 <__aeabi_i2d>
 8008e2a:	3630      	adds	r6, #48	; 0x30
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4640      	mov	r0, r8
 8008e32:	4649      	mov	r1, r9
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	f805 6b01 	strb.w	r6, [r5], #1
 8008e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	4680      	mov	r8, r0
 8008e42:	4689      	mov	r9, r1
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	d124      	bne.n	8008e94 <_dtoa_r+0x60c>
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <_dtoa_r+0x630>)
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	4659      	mov	r1, fp
 8008e50:	f7f7 fa1c 	bl	800028c <__adddf3>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fe5c 	bl	8000b18 <__aeabi_dcmpgt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d173      	bne.n	8008f4c <_dtoa_r+0x6c4>
 8008e64:	4652      	mov	r2, sl
 8008e66:	465b      	mov	r3, fp
 8008e68:	4913      	ldr	r1, [pc, #76]	; (8008eb8 <_dtoa_r+0x630>)
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f7f7 fa0c 	bl	8000288 <__aeabi_dsub>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4640      	mov	r0, r8
 8008e76:	4649      	mov	r1, r9
 8008e78:	f7f7 fe30 	bl	8000adc <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f43f af35 	beq.w	8008cec <_dtoa_r+0x464>
 8008e82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e84:	1e6b      	subs	r3, r5, #1
 8008e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e8c:	2b30      	cmp	r3, #48	; 0x30
 8008e8e:	d0f8      	beq.n	8008e82 <_dtoa_r+0x5fa>
 8008e90:	9700      	str	r7, [sp, #0]
 8008e92:	e049      	b.n	8008f28 <_dtoa_r+0x6a0>
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <_dtoa_r+0x624>)
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	e7bd      	b.n	8008e1c <_dtoa_r+0x594>
 8008ea0:	0800a3f0 	.word	0x0800a3f0
 8008ea4:	0800a3c8 	.word	0x0800a3c8
 8008ea8:	3ff00000 	.word	0x3ff00000
 8008eac:	40240000 	.word	0x40240000
 8008eb0:	401c0000 	.word	0x401c0000
 8008eb4:	40140000 	.word	0x40140000
 8008eb8:	3fe00000 	.word	0x3fe00000
 8008ebc:	9d01      	ldr	r5, [sp, #4]
 8008ebe:	4656      	mov	r6, sl
 8008ec0:	465f      	mov	r7, fp
 8008ec2:	4642      	mov	r2, r8
 8008ec4:	464b      	mov	r3, r9
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 fcbf 	bl	800084c <__aeabi_ddiv>
 8008ece:	f7f7 fe2d 	bl	8000b2c <__aeabi_d2iz>
 8008ed2:	4682      	mov	sl, r0
 8008ed4:	f7f7 fb26 	bl	8000524 <__aeabi_i2d>
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	f7f7 fb8c 	bl	80005f8 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008eec:	f7f7 f9cc 	bl	8000288 <__aeabi_dsub>
 8008ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef4:	9e01      	ldr	r6, [sp, #4]
 8008ef6:	9f03      	ldr	r7, [sp, #12]
 8008ef8:	1bae      	subs	r6, r5, r6
 8008efa:	42b7      	cmp	r7, r6
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	d135      	bne.n	8008f6e <_dtoa_r+0x6e6>
 8008f02:	f7f7 f9c3 	bl	800028c <__adddf3>
 8008f06:	4642      	mov	r2, r8
 8008f08:	464b      	mov	r3, r9
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	f7f7 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8008f12:	b9d0      	cbnz	r0, 8008f4a <_dtoa_r+0x6c2>
 8008f14:	4642      	mov	r2, r8
 8008f16:	464b      	mov	r3, r9
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f20:	b110      	cbz	r0, 8008f28 <_dtoa_r+0x6a0>
 8008f22:	f01a 0f01 	tst.w	sl, #1
 8008f26:	d110      	bne.n	8008f4a <_dtoa_r+0x6c2>
 8008f28:	4620      	mov	r0, r4
 8008f2a:	ee18 1a10 	vmov	r1, s16
 8008f2e:	f7fe fb55 	bl	80075dc <_Bfree>
 8008f32:	2300      	movs	r3, #0
 8008f34:	9800      	ldr	r0, [sp, #0]
 8008f36:	702b      	strb	r3, [r5, #0]
 8008f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	6018      	str	r0, [r3, #0]
 8008f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f43f acf1 	beq.w	8008928 <_dtoa_r+0xa0>
 8008f46:	601d      	str	r5, [r3, #0]
 8008f48:	e4ee      	b.n	8008928 <_dtoa_r+0xa0>
 8008f4a:	9f00      	ldr	r7, [sp, #0]
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	461d      	mov	r5, r3
 8008f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f54:	2a39      	cmp	r2, #57	; 0x39
 8008f56:	d106      	bne.n	8008f66 <_dtoa_r+0x6de>
 8008f58:	9a01      	ldr	r2, [sp, #4]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d1f7      	bne.n	8008f4e <_dtoa_r+0x6c6>
 8008f5e:	9901      	ldr	r1, [sp, #4]
 8008f60:	2230      	movs	r2, #48	; 0x30
 8008f62:	3701      	adds	r7, #1
 8008f64:	700a      	strb	r2, [r1, #0]
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	3201      	adds	r2, #1
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	e790      	b.n	8008e90 <_dtoa_r+0x608>
 8008f6e:	4ba6      	ldr	r3, [pc, #664]	; (8009208 <_dtoa_r+0x980>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	2200      	movs	r2, #0
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	f7f7 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d09d      	beq.n	8008ec2 <_dtoa_r+0x63a>
 8008f86:	e7cf      	b.n	8008f28 <_dtoa_r+0x6a0>
 8008f88:	9a08      	ldr	r2, [sp, #32]
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	f000 80d7 	beq.w	800913e <_dtoa_r+0x8b6>
 8008f90:	9a06      	ldr	r2, [sp, #24]
 8008f92:	2a01      	cmp	r2, #1
 8008f94:	f300 80ba 	bgt.w	800910c <_dtoa_r+0x884>
 8008f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	f000 80b2 	beq.w	8009104 <_dtoa_r+0x87c>
 8008fa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fa4:	9e07      	ldr	r6, [sp, #28]
 8008fa6:	9d04      	ldr	r5, [sp, #16]
 8008fa8:	9a04      	ldr	r2, [sp, #16]
 8008faa:	441a      	add	r2, r3
 8008fac:	9204      	str	r2, [sp, #16]
 8008fae:	9a05      	ldr	r2, [sp, #20]
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	441a      	add	r2, r3
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	9205      	str	r2, [sp, #20]
 8008fb8:	f7fe fc12 	bl	80077e0 <__i2b>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	dd0c      	ble.n	8008fdc <_dtoa_r+0x754>
 8008fc2:	9b05      	ldr	r3, [sp, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dd09      	ble.n	8008fdc <_dtoa_r+0x754>
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	bfa8      	it	ge
 8008fce:	462b      	movge	r3, r5
 8008fd0:	1ad2      	subs	r2, r2, r3
 8008fd2:	9204      	str	r2, [sp, #16]
 8008fd4:	9a05      	ldr	r2, [sp, #20]
 8008fd6:	1aed      	subs	r5, r5, r3
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	9b07      	ldr	r3, [sp, #28]
 8008fde:	b31b      	cbz	r3, 8009028 <_dtoa_r+0x7a0>
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80af 	beq.w	8009146 <_dtoa_r+0x8be>
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	dd13      	ble.n	8009014 <_dtoa_r+0x78c>
 8008fec:	4639      	mov	r1, r7
 8008fee:	4632      	mov	r2, r6
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7fe fcb5 	bl	8007960 <__pow5mult>
 8008ff6:	ee18 2a10 	vmov	r2, s16
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7fe fc04 	bl	800780c <__multiply>
 8009004:	ee18 1a10 	vmov	r1, s16
 8009008:	4680      	mov	r8, r0
 800900a:	4620      	mov	r0, r4
 800900c:	f7fe fae6 	bl	80075dc <_Bfree>
 8009010:	ee08 8a10 	vmov	s16, r8
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	1b9a      	subs	r2, r3, r6
 8009018:	d006      	beq.n	8009028 <_dtoa_r+0x7a0>
 800901a:	ee18 1a10 	vmov	r1, s16
 800901e:	4620      	mov	r0, r4
 8009020:	f7fe fc9e 	bl	8007960 <__pow5mult>
 8009024:	ee08 0a10 	vmov	s16, r0
 8009028:	2101      	movs	r1, #1
 800902a:	4620      	mov	r0, r4
 800902c:	f7fe fbd8 	bl	80077e0 <__i2b>
 8009030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	4606      	mov	r6, r0
 8009036:	f340 8088 	ble.w	800914a <_dtoa_r+0x8c2>
 800903a:	461a      	mov	r2, r3
 800903c:	4601      	mov	r1, r0
 800903e:	4620      	mov	r0, r4
 8009040:	f7fe fc8e 	bl	8007960 <__pow5mult>
 8009044:	9b06      	ldr	r3, [sp, #24]
 8009046:	2b01      	cmp	r3, #1
 8009048:	4606      	mov	r6, r0
 800904a:	f340 8081 	ble.w	8009150 <_dtoa_r+0x8c8>
 800904e:	f04f 0800 	mov.w	r8, #0
 8009052:	6933      	ldr	r3, [r6, #16]
 8009054:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009058:	6918      	ldr	r0, [r3, #16]
 800905a:	f7fe fb71 	bl	8007740 <__hi0bits>
 800905e:	f1c0 0020 	rsb	r0, r0, #32
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	4418      	add	r0, r3
 8009066:	f010 001f 	ands.w	r0, r0, #31
 800906a:	f000 8092 	beq.w	8009192 <_dtoa_r+0x90a>
 800906e:	f1c0 0320 	rsb	r3, r0, #32
 8009072:	2b04      	cmp	r3, #4
 8009074:	f340 808a 	ble.w	800918c <_dtoa_r+0x904>
 8009078:	f1c0 001c 	rsb	r0, r0, #28
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	4403      	add	r3, r0
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	4403      	add	r3, r0
 8009086:	4405      	add	r5, r0
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	9b04      	ldr	r3, [sp, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dd07      	ble.n	80090a0 <_dtoa_r+0x818>
 8009090:	ee18 1a10 	vmov	r1, s16
 8009094:	461a      	mov	r2, r3
 8009096:	4620      	mov	r0, r4
 8009098:	f7fe fcbc 	bl	8007a14 <__lshift>
 800909c:	ee08 0a10 	vmov	s16, r0
 80090a0:	9b05      	ldr	r3, [sp, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	dd05      	ble.n	80090b2 <_dtoa_r+0x82a>
 80090a6:	4631      	mov	r1, r6
 80090a8:	461a      	mov	r2, r3
 80090aa:	4620      	mov	r0, r4
 80090ac:	f7fe fcb2 	bl	8007a14 <__lshift>
 80090b0:	4606      	mov	r6, r0
 80090b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d06e      	beq.n	8009196 <_dtoa_r+0x90e>
 80090b8:	ee18 0a10 	vmov	r0, s16
 80090bc:	4631      	mov	r1, r6
 80090be:	f7fe fd19 	bl	8007af4 <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	da67      	bge.n	8009196 <_dtoa_r+0x90e>
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	ee18 1a10 	vmov	r1, s16
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	220a      	movs	r2, #10
 80090d2:	2300      	movs	r3, #0
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7fe faa3 	bl	8007620 <__multadd>
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	ee08 0a10 	vmov	s16, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 81b1 	beq.w	8009448 <_dtoa_r+0xbc0>
 80090e6:	2300      	movs	r3, #0
 80090e8:	4639      	mov	r1, r7
 80090ea:	220a      	movs	r2, #10
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7fe fa97 	bl	8007620 <__multadd>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	4607      	mov	r7, r0
 80090f8:	f300 808e 	bgt.w	8009218 <_dtoa_r+0x990>
 80090fc:	9b06      	ldr	r3, [sp, #24]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	dc51      	bgt.n	80091a6 <_dtoa_r+0x91e>
 8009102:	e089      	b.n	8009218 <_dtoa_r+0x990>
 8009104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800910a:	e74b      	b.n	8008fa4 <_dtoa_r+0x71c>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1e5e      	subs	r6, r3, #1
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	42b3      	cmp	r3, r6
 8009114:	bfbf      	itttt	lt
 8009116:	9b07      	ldrlt	r3, [sp, #28]
 8009118:	9607      	strlt	r6, [sp, #28]
 800911a:	1af2      	sublt	r2, r6, r3
 800911c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800911e:	bfb6      	itet	lt
 8009120:	189b      	addlt	r3, r3, r2
 8009122:	1b9e      	subge	r6, r3, r6
 8009124:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	bfb8      	it	lt
 800912a:	2600      	movlt	r6, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfb7      	itett	lt
 8009130:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009134:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009138:	1a9d      	sublt	r5, r3, r2
 800913a:	2300      	movlt	r3, #0
 800913c:	e734      	b.n	8008fa8 <_dtoa_r+0x720>
 800913e:	9e07      	ldr	r6, [sp, #28]
 8009140:	9d04      	ldr	r5, [sp, #16]
 8009142:	9f08      	ldr	r7, [sp, #32]
 8009144:	e73b      	b.n	8008fbe <_dtoa_r+0x736>
 8009146:	9a07      	ldr	r2, [sp, #28]
 8009148:	e767      	b.n	800901a <_dtoa_r+0x792>
 800914a:	9b06      	ldr	r3, [sp, #24]
 800914c:	2b01      	cmp	r3, #1
 800914e:	dc18      	bgt.n	8009182 <_dtoa_r+0x8fa>
 8009150:	f1ba 0f00 	cmp.w	sl, #0
 8009154:	d115      	bne.n	8009182 <_dtoa_r+0x8fa>
 8009156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800915a:	b993      	cbnz	r3, 8009182 <_dtoa_r+0x8fa>
 800915c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009160:	0d1b      	lsrs	r3, r3, #20
 8009162:	051b      	lsls	r3, r3, #20
 8009164:	b183      	cbz	r3, 8009188 <_dtoa_r+0x900>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	3301      	adds	r3, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	3301      	adds	r3, #1
 8009170:	9305      	str	r3, [sp, #20]
 8009172:	f04f 0801 	mov.w	r8, #1
 8009176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009178:	2b00      	cmp	r3, #0
 800917a:	f47f af6a 	bne.w	8009052 <_dtoa_r+0x7ca>
 800917e:	2001      	movs	r0, #1
 8009180:	e76f      	b.n	8009062 <_dtoa_r+0x7da>
 8009182:	f04f 0800 	mov.w	r8, #0
 8009186:	e7f6      	b.n	8009176 <_dtoa_r+0x8ee>
 8009188:	4698      	mov	r8, r3
 800918a:	e7f4      	b.n	8009176 <_dtoa_r+0x8ee>
 800918c:	f43f af7d 	beq.w	800908a <_dtoa_r+0x802>
 8009190:	4618      	mov	r0, r3
 8009192:	301c      	adds	r0, #28
 8009194:	e772      	b.n	800907c <_dtoa_r+0x7f4>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dc37      	bgt.n	800920c <_dtoa_r+0x984>
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	dd34      	ble.n	800920c <_dtoa_r+0x984>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	9b02      	ldr	r3, [sp, #8]
 80091a8:	b96b      	cbnz	r3, 80091c6 <_dtoa_r+0x93e>
 80091aa:	4631      	mov	r1, r6
 80091ac:	2205      	movs	r2, #5
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7fe fa36 	bl	8007620 <__multadd>
 80091b4:	4601      	mov	r1, r0
 80091b6:	4606      	mov	r6, r0
 80091b8:	ee18 0a10 	vmov	r0, s16
 80091bc:	f7fe fc9a 	bl	8007af4 <__mcmp>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f73f adbb 	bgt.w	8008d3c <_dtoa_r+0x4b4>
 80091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c8:	9d01      	ldr	r5, [sp, #4]
 80091ca:	43db      	mvns	r3, r3
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	f04f 0800 	mov.w	r8, #0
 80091d2:	4631      	mov	r1, r6
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7fe fa01 	bl	80075dc <_Bfree>
 80091da:	2f00      	cmp	r7, #0
 80091dc:	f43f aea4 	beq.w	8008f28 <_dtoa_r+0x6a0>
 80091e0:	f1b8 0f00 	cmp.w	r8, #0
 80091e4:	d005      	beq.n	80091f2 <_dtoa_r+0x96a>
 80091e6:	45b8      	cmp	r8, r7
 80091e8:	d003      	beq.n	80091f2 <_dtoa_r+0x96a>
 80091ea:	4641      	mov	r1, r8
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7fe f9f5 	bl	80075dc <_Bfree>
 80091f2:	4639      	mov	r1, r7
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7fe f9f1 	bl	80075dc <_Bfree>
 80091fa:	e695      	b.n	8008f28 <_dtoa_r+0x6a0>
 80091fc:	2600      	movs	r6, #0
 80091fe:	4637      	mov	r7, r6
 8009200:	e7e1      	b.n	80091c6 <_dtoa_r+0x93e>
 8009202:	9700      	str	r7, [sp, #0]
 8009204:	4637      	mov	r7, r6
 8009206:	e599      	b.n	8008d3c <_dtoa_r+0x4b4>
 8009208:	40240000 	.word	0x40240000
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80ca 	beq.w	80093a8 <_dtoa_r+0xb20>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	9302      	str	r3, [sp, #8]
 8009218:	2d00      	cmp	r5, #0
 800921a:	dd05      	ble.n	8009228 <_dtoa_r+0x9a0>
 800921c:	4639      	mov	r1, r7
 800921e:	462a      	mov	r2, r5
 8009220:	4620      	mov	r0, r4
 8009222:	f7fe fbf7 	bl	8007a14 <__lshift>
 8009226:	4607      	mov	r7, r0
 8009228:	f1b8 0f00 	cmp.w	r8, #0
 800922c:	d05b      	beq.n	80092e6 <_dtoa_r+0xa5e>
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4620      	mov	r0, r4
 8009232:	f7fe f993 	bl	800755c <_Balloc>
 8009236:	4605      	mov	r5, r0
 8009238:	b928      	cbnz	r0, 8009246 <_dtoa_r+0x9be>
 800923a:	4b87      	ldr	r3, [pc, #540]	; (8009458 <_dtoa_r+0xbd0>)
 800923c:	4602      	mov	r2, r0
 800923e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009242:	f7ff bb3b 	b.w	80088bc <_dtoa_r+0x34>
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	3202      	adds	r2, #2
 800924a:	0092      	lsls	r2, r2, #2
 800924c:	f107 010c 	add.w	r1, r7, #12
 8009250:	300c      	adds	r0, #12
 8009252:	f7fc fe43 	bl	8005edc <memcpy>
 8009256:	2201      	movs	r2, #1
 8009258:	4629      	mov	r1, r5
 800925a:	4620      	mov	r0, r4
 800925c:	f7fe fbda 	bl	8007a14 <__lshift>
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	f103 0901 	add.w	r9, r3, #1
 8009266:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800926a:	4413      	add	r3, r2
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	f00a 0301 	and.w	r3, sl, #1
 8009272:	46b8      	mov	r8, r7
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	4607      	mov	r7, r0
 8009278:	4631      	mov	r1, r6
 800927a:	ee18 0a10 	vmov	r0, s16
 800927e:	f7ff fa77 	bl	8008770 <quorem>
 8009282:	4641      	mov	r1, r8
 8009284:	9002      	str	r0, [sp, #8]
 8009286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800928a:	ee18 0a10 	vmov	r0, s16
 800928e:	f7fe fc31 	bl	8007af4 <__mcmp>
 8009292:	463a      	mov	r2, r7
 8009294:	9003      	str	r0, [sp, #12]
 8009296:	4631      	mov	r1, r6
 8009298:	4620      	mov	r0, r4
 800929a:	f7fe fc47 	bl	8007b2c <__mdiff>
 800929e:	68c2      	ldr	r2, [r0, #12]
 80092a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80092a4:	4605      	mov	r5, r0
 80092a6:	bb02      	cbnz	r2, 80092ea <_dtoa_r+0xa62>
 80092a8:	4601      	mov	r1, r0
 80092aa:	ee18 0a10 	vmov	r0, s16
 80092ae:	f7fe fc21 	bl	8007af4 <__mcmp>
 80092b2:	4602      	mov	r2, r0
 80092b4:	4629      	mov	r1, r5
 80092b6:	4620      	mov	r0, r4
 80092b8:	9207      	str	r2, [sp, #28]
 80092ba:	f7fe f98f 	bl	80075dc <_Bfree>
 80092be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092c2:	ea43 0102 	orr.w	r1, r3, r2
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	430b      	orrs	r3, r1
 80092ca:	464d      	mov	r5, r9
 80092cc:	d10f      	bne.n	80092ee <_dtoa_r+0xa66>
 80092ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092d2:	d02a      	beq.n	800932a <_dtoa_r+0xaa2>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd02      	ble.n	80092e0 <_dtoa_r+0xa58>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80092e0:	f88b a000 	strb.w	sl, [fp]
 80092e4:	e775      	b.n	80091d2 <_dtoa_r+0x94a>
 80092e6:	4638      	mov	r0, r7
 80092e8:	e7ba      	b.n	8009260 <_dtoa_r+0x9d8>
 80092ea:	2201      	movs	r2, #1
 80092ec:	e7e2      	b.n	80092b4 <_dtoa_r+0xa2c>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	db04      	blt.n	80092fe <_dtoa_r+0xa76>
 80092f4:	9906      	ldr	r1, [sp, #24]
 80092f6:	430b      	orrs	r3, r1
 80092f8:	9904      	ldr	r1, [sp, #16]
 80092fa:	430b      	orrs	r3, r1
 80092fc:	d122      	bne.n	8009344 <_dtoa_r+0xabc>
 80092fe:	2a00      	cmp	r2, #0
 8009300:	ddee      	ble.n	80092e0 <_dtoa_r+0xa58>
 8009302:	ee18 1a10 	vmov	r1, s16
 8009306:	2201      	movs	r2, #1
 8009308:	4620      	mov	r0, r4
 800930a:	f7fe fb83 	bl	8007a14 <__lshift>
 800930e:	4631      	mov	r1, r6
 8009310:	ee08 0a10 	vmov	s16, r0
 8009314:	f7fe fbee 	bl	8007af4 <__mcmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	dc03      	bgt.n	8009324 <_dtoa_r+0xa9c>
 800931c:	d1e0      	bne.n	80092e0 <_dtoa_r+0xa58>
 800931e:	f01a 0f01 	tst.w	sl, #1
 8009322:	d0dd      	beq.n	80092e0 <_dtoa_r+0xa58>
 8009324:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009328:	d1d7      	bne.n	80092da <_dtoa_r+0xa52>
 800932a:	2339      	movs	r3, #57	; 0x39
 800932c:	f88b 3000 	strb.w	r3, [fp]
 8009330:	462b      	mov	r3, r5
 8009332:	461d      	mov	r5, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800933a:	2a39      	cmp	r2, #57	; 0x39
 800933c:	d071      	beq.n	8009422 <_dtoa_r+0xb9a>
 800933e:	3201      	adds	r2, #1
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e746      	b.n	80091d2 <_dtoa_r+0x94a>
 8009344:	2a00      	cmp	r2, #0
 8009346:	dd07      	ble.n	8009358 <_dtoa_r+0xad0>
 8009348:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800934c:	d0ed      	beq.n	800932a <_dtoa_r+0xaa2>
 800934e:	f10a 0301 	add.w	r3, sl, #1
 8009352:	f88b 3000 	strb.w	r3, [fp]
 8009356:	e73c      	b.n	80091d2 <_dtoa_r+0x94a>
 8009358:	9b05      	ldr	r3, [sp, #20]
 800935a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800935e:	4599      	cmp	r9, r3
 8009360:	d047      	beq.n	80093f2 <_dtoa_r+0xb6a>
 8009362:	ee18 1a10 	vmov	r1, s16
 8009366:	2300      	movs	r3, #0
 8009368:	220a      	movs	r2, #10
 800936a:	4620      	mov	r0, r4
 800936c:	f7fe f958 	bl	8007620 <__multadd>
 8009370:	45b8      	cmp	r8, r7
 8009372:	ee08 0a10 	vmov	s16, r0
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	f04f 020a 	mov.w	r2, #10
 800937e:	4641      	mov	r1, r8
 8009380:	4620      	mov	r0, r4
 8009382:	d106      	bne.n	8009392 <_dtoa_r+0xb0a>
 8009384:	f7fe f94c 	bl	8007620 <__multadd>
 8009388:	4680      	mov	r8, r0
 800938a:	4607      	mov	r7, r0
 800938c:	f109 0901 	add.w	r9, r9, #1
 8009390:	e772      	b.n	8009278 <_dtoa_r+0x9f0>
 8009392:	f7fe f945 	bl	8007620 <__multadd>
 8009396:	4639      	mov	r1, r7
 8009398:	4680      	mov	r8, r0
 800939a:	2300      	movs	r3, #0
 800939c:	220a      	movs	r2, #10
 800939e:	4620      	mov	r0, r4
 80093a0:	f7fe f93e 	bl	8007620 <__multadd>
 80093a4:	4607      	mov	r7, r0
 80093a6:	e7f1      	b.n	800938c <_dtoa_r+0xb04>
 80093a8:	9b03      	ldr	r3, [sp, #12]
 80093aa:	9302      	str	r3, [sp, #8]
 80093ac:	9d01      	ldr	r5, [sp, #4]
 80093ae:	ee18 0a10 	vmov	r0, s16
 80093b2:	4631      	mov	r1, r6
 80093b4:	f7ff f9dc 	bl	8008770 <quorem>
 80093b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	f805 ab01 	strb.w	sl, [r5], #1
 80093c2:	1aea      	subs	r2, r5, r3
 80093c4:	9b02      	ldr	r3, [sp, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	dd09      	ble.n	80093de <_dtoa_r+0xb56>
 80093ca:	ee18 1a10 	vmov	r1, s16
 80093ce:	2300      	movs	r3, #0
 80093d0:	220a      	movs	r2, #10
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7fe f924 	bl	8007620 <__multadd>
 80093d8:	ee08 0a10 	vmov	s16, r0
 80093dc:	e7e7      	b.n	80093ae <_dtoa_r+0xb26>
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfc8      	it	gt
 80093e4:	461d      	movgt	r5, r3
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	bfd8      	it	le
 80093ea:	2501      	movle	r5, #1
 80093ec:	441d      	add	r5, r3
 80093ee:	f04f 0800 	mov.w	r8, #0
 80093f2:	ee18 1a10 	vmov	r1, s16
 80093f6:	2201      	movs	r2, #1
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7fe fb0b 	bl	8007a14 <__lshift>
 80093fe:	4631      	mov	r1, r6
 8009400:	ee08 0a10 	vmov	s16, r0
 8009404:	f7fe fb76 	bl	8007af4 <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	dc91      	bgt.n	8009330 <_dtoa_r+0xaa8>
 800940c:	d102      	bne.n	8009414 <_dtoa_r+0xb8c>
 800940e:	f01a 0f01 	tst.w	sl, #1
 8009412:	d18d      	bne.n	8009330 <_dtoa_r+0xaa8>
 8009414:	462b      	mov	r3, r5
 8009416:	461d      	mov	r5, r3
 8009418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941c:	2a30      	cmp	r2, #48	; 0x30
 800941e:	d0fa      	beq.n	8009416 <_dtoa_r+0xb8e>
 8009420:	e6d7      	b.n	80091d2 <_dtoa_r+0x94a>
 8009422:	9a01      	ldr	r2, [sp, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d184      	bne.n	8009332 <_dtoa_r+0xaaa>
 8009428:	9b00      	ldr	r3, [sp, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	2331      	movs	r3, #49	; 0x31
 8009430:	7013      	strb	r3, [r2, #0]
 8009432:	e6ce      	b.n	80091d2 <_dtoa_r+0x94a>
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <_dtoa_r+0xbd4>)
 8009436:	f7ff ba95 	b.w	8008964 <_dtoa_r+0xdc>
 800943a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800943c:	2b00      	cmp	r3, #0
 800943e:	f47f aa6e 	bne.w	800891e <_dtoa_r+0x96>
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <_dtoa_r+0xbd8>)
 8009444:	f7ff ba8e 	b.w	8008964 <_dtoa_r+0xdc>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	dcae      	bgt.n	80093ac <_dtoa_r+0xb24>
 800944e:	9b06      	ldr	r3, [sp, #24]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f73f aea8 	bgt.w	80091a6 <_dtoa_r+0x91e>
 8009456:	e7a9      	b.n	80093ac <_dtoa_r+0xb24>
 8009458:	0800a2c8 	.word	0x0800a2c8
 800945c:	0800a641 	.word	0x0800a641
 8009460:	0800a634 	.word	0x0800a634

08009464 <fiprintf>:
 8009464:	b40e      	push	{r1, r2, r3}
 8009466:	b503      	push	{r0, r1, lr}
 8009468:	4601      	mov	r1, r0
 800946a:	ab03      	add	r3, sp, #12
 800946c:	4805      	ldr	r0, [pc, #20]	; (8009484 <fiprintf+0x20>)
 800946e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009472:	6800      	ldr	r0, [r0, #0]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f000 f8b3 	bl	80095e0 <_vfiprintf_r>
 800947a:	b002      	add	sp, #8
 800947c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009480:	b003      	add	sp, #12
 8009482:	4770      	bx	lr
 8009484:	2000001c 	.word	0x2000001c

08009488 <malloc>:
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <malloc+0xc>)
 800948a:	4601      	mov	r1, r0
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f7fe bd7b 	b.w	8007f88 <_malloc_r>
 8009492:	bf00      	nop
 8009494:	2000001c 	.word	0x2000001c

08009498 <memmove>:
 8009498:	4288      	cmp	r0, r1
 800949a:	b510      	push	{r4, lr}
 800949c:	eb01 0402 	add.w	r4, r1, r2
 80094a0:	d902      	bls.n	80094a8 <memmove+0x10>
 80094a2:	4284      	cmp	r4, r0
 80094a4:	4623      	mov	r3, r4
 80094a6:	d807      	bhi.n	80094b8 <memmove+0x20>
 80094a8:	1e43      	subs	r3, r0, #1
 80094aa:	42a1      	cmp	r1, r4
 80094ac:	d008      	beq.n	80094c0 <memmove+0x28>
 80094ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094b6:	e7f8      	b.n	80094aa <memmove+0x12>
 80094b8:	4402      	add	r2, r0
 80094ba:	4601      	mov	r1, r0
 80094bc:	428a      	cmp	r2, r1
 80094be:	d100      	bne.n	80094c2 <memmove+0x2a>
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ca:	e7f7      	b.n	80094bc <memmove+0x24>

080094cc <__malloc_lock>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__malloc_lock+0x8>)
 80094ce:	f000 bc37 	b.w	8009d40 <__retarget_lock_acquire_recursive>
 80094d2:	bf00      	nop
 80094d4:	200004f4 	.word	0x200004f4

080094d8 <__malloc_unlock>:
 80094d8:	4801      	ldr	r0, [pc, #4]	; (80094e0 <__malloc_unlock+0x8>)
 80094da:	f000 bc32 	b.w	8009d42 <__retarget_lock_release_recursive>
 80094de:	bf00      	nop
 80094e0:	200004f4 	.word	0x200004f4

080094e4 <_free_r>:
 80094e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094e6:	2900      	cmp	r1, #0
 80094e8:	d044      	beq.n	8009574 <_free_r+0x90>
 80094ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ee:	9001      	str	r0, [sp, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f1a1 0404 	sub.w	r4, r1, #4
 80094f6:	bfb8      	it	lt
 80094f8:	18e4      	addlt	r4, r4, r3
 80094fa:	f7ff ffe7 	bl	80094cc <__malloc_lock>
 80094fe:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <_free_r+0x94>)
 8009500:	9801      	ldr	r0, [sp, #4]
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x30>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009510:	f7ff bfe2 	b.w	80094d8 <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x46>
 8009518:	6825      	ldr	r5, [r4, #0]
 800951a:	1961      	adds	r1, r4, r5
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1949      	addeq	r1, r1, r5
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x22>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x50>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x46>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1855      	adds	r5, r2, r1
 8009538:	42a5      	cmp	r5, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x70>
 800953c:	6824      	ldr	r4, [r4, #0]
 800953e:	4421      	add	r1, r4
 8009540:	1854      	adds	r4, r2, r1
 8009542:	42a3      	cmp	r3, r4
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x26>
 8009548:	681c      	ldr	r4, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	6053      	str	r3, [r2, #4]
 800954e:	4421      	add	r1, r4
 8009550:	6011      	str	r1, [r2, #0]
 8009552:	e7da      	b.n	800950a <_free_r+0x26>
 8009554:	d902      	bls.n	800955c <_free_r+0x78>
 8009556:	230c      	movs	r3, #12
 8009558:	6003      	str	r3, [r0, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x26>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	1961      	adds	r1, r4, r5
 8009560:	428b      	cmp	r3, r1
 8009562:	bf04      	itt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	bf04      	itt	eq
 800956c:	1949      	addeq	r1, r1, r5
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	6054      	str	r4, [r2, #4]
 8009572:	e7ca      	b.n	800950a <_free_r+0x26>
 8009574:	b003      	add	sp, #12
 8009576:	bd30      	pop	{r4, r5, pc}
 8009578:	200004e8 	.word	0x200004e8

0800957c <_malloc_usable_size_r>:
 800957c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009580:	1f18      	subs	r0, r3, #4
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfbc      	itt	lt
 8009586:	580b      	ldrlt	r3, [r1, r0]
 8009588:	18c0      	addlt	r0, r0, r3
 800958a:	4770      	bx	lr

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	b410      	push	{r4}
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da08      	bge.n	80095aa <__sfputc_r+0x1e>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d103      	bne.n	80095aa <__sfputc_r+0x1e>
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	f000 b94b 	b.w	8009840 <__swbuf_r>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	1c58      	adds	r0, r3, #1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <__sfputs_r>:
 80095ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	18d5      	adds	r5, r2, r3
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	d101      	bne.n	80095cc <__sfputs_r+0x12>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e007      	b.n	80095dc <__sfputs_r+0x22>
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	463a      	mov	r2, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffda 	bl	800958c <__sfputc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d1f3      	bne.n	80095c4 <__sfputs_r+0xa>
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6983      	ldr	r3, [r0, #24]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f000 fb06 	bl	8009c04 <__sinit>
 80095f8:	4b89      	ldr	r3, [pc, #548]	; (8009820 <_vfiprintf_r+0x240>)
 80095fa:	429d      	cmp	r5, r3
 80095fc:	d11b      	bne.n	8009636 <_vfiprintf_r+0x56>
 80095fe:	6875      	ldr	r5, [r6, #4]
 8009600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d405      	bmi.n	8009612 <_vfiprintf_r+0x32>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	059a      	lsls	r2, r3, #22
 800960a:	d402      	bmi.n	8009612 <_vfiprintf_r+0x32>
 800960c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800960e:	f000 fb97 	bl	8009d40 <__retarget_lock_acquire_recursive>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	071b      	lsls	r3, r3, #28
 8009616:	d501      	bpl.n	800961c <_vfiprintf_r+0x3c>
 8009618:	692b      	ldr	r3, [r5, #16]
 800961a:	b9eb      	cbnz	r3, 8009658 <_vfiprintf_r+0x78>
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f960 	bl	80098e4 <__swsetup_r>
 8009624:	b1c0      	cbz	r0, 8009658 <_vfiprintf_r+0x78>
 8009626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009628:	07dc      	lsls	r4, r3, #31
 800962a:	d50e      	bpl.n	800964a <_vfiprintf_r+0x6a>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b01d      	add	sp, #116	; 0x74
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <_vfiprintf_r+0x244>)
 8009638:	429d      	cmp	r5, r3
 800963a:	d101      	bne.n	8009640 <_vfiprintf_r+0x60>
 800963c:	68b5      	ldr	r5, [r6, #8]
 800963e:	e7df      	b.n	8009600 <_vfiprintf_r+0x20>
 8009640:	4b79      	ldr	r3, [pc, #484]	; (8009828 <_vfiprintf_r+0x248>)
 8009642:	429d      	cmp	r5, r3
 8009644:	bf08      	it	eq
 8009646:	68f5      	ldreq	r5, [r6, #12]
 8009648:	e7da      	b.n	8009600 <_vfiprintf_r+0x20>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	0598      	lsls	r0, r3, #22
 800964e:	d4ed      	bmi.n	800962c <_vfiprintf_r+0x4c>
 8009650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009652:	f000 fb76 	bl	8009d42 <__retarget_lock_release_recursive>
 8009656:	e7e9      	b.n	800962c <_vfiprintf_r+0x4c>
 8009658:	2300      	movs	r3, #0
 800965a:	9309      	str	r3, [sp, #36]	; 0x24
 800965c:	2320      	movs	r3, #32
 800965e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009662:	f8cd 800c 	str.w	r8, [sp, #12]
 8009666:	2330      	movs	r3, #48	; 0x30
 8009668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800982c <_vfiprintf_r+0x24c>
 800966c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009670:	f04f 0901 	mov.w	r9, #1
 8009674:	4623      	mov	r3, r4
 8009676:	469a      	mov	sl, r3
 8009678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967c:	b10a      	cbz	r2, 8009682 <_vfiprintf_r+0xa2>
 800967e:	2a25      	cmp	r2, #37	; 0x25
 8009680:	d1f9      	bne.n	8009676 <_vfiprintf_r+0x96>
 8009682:	ebba 0b04 	subs.w	fp, sl, r4
 8009686:	d00b      	beq.n	80096a0 <_vfiprintf_r+0xc0>
 8009688:	465b      	mov	r3, fp
 800968a:	4622      	mov	r2, r4
 800968c:	4629      	mov	r1, r5
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ff93 	bl	80095ba <__sfputs_r>
 8009694:	3001      	adds	r0, #1
 8009696:	f000 80aa 	beq.w	80097ee <_vfiprintf_r+0x20e>
 800969a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969c:	445a      	add	r2, fp
 800969e:	9209      	str	r2, [sp, #36]	; 0x24
 80096a0:	f89a 3000 	ldrb.w	r3, [sl]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80a2 	beq.w	80097ee <_vfiprintf_r+0x20e>
 80096aa:	2300      	movs	r3, #0
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b4:	f10a 0a01 	add.w	sl, sl, #1
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c0:	931a      	str	r3, [sp, #104]	; 0x68
 80096c2:	4654      	mov	r4, sl
 80096c4:	2205      	movs	r2, #5
 80096c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ca:	4858      	ldr	r0, [pc, #352]	; (800982c <_vfiprintf_r+0x24c>)
 80096cc:	f7f6 fd88 	bl	80001e0 <memchr>
 80096d0:	9a04      	ldr	r2, [sp, #16]
 80096d2:	b9d8      	cbnz	r0, 800970c <_vfiprintf_r+0x12c>
 80096d4:	06d1      	lsls	r1, r2, #27
 80096d6:	bf44      	itt	mi
 80096d8:	2320      	movmi	r3, #32
 80096da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096de:	0713      	lsls	r3, r2, #28
 80096e0:	bf44      	itt	mi
 80096e2:	232b      	movmi	r3, #43	; 0x2b
 80096e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e8:	f89a 3000 	ldrb.w	r3, [sl]
 80096ec:	2b2a      	cmp	r3, #42	; 0x2a
 80096ee:	d015      	beq.n	800971c <_vfiprintf_r+0x13c>
 80096f0:	9a07      	ldr	r2, [sp, #28]
 80096f2:	4654      	mov	r4, sl
 80096f4:	2000      	movs	r0, #0
 80096f6:	f04f 0c0a 	mov.w	ip, #10
 80096fa:	4621      	mov	r1, r4
 80096fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009700:	3b30      	subs	r3, #48	; 0x30
 8009702:	2b09      	cmp	r3, #9
 8009704:	d94e      	bls.n	80097a4 <_vfiprintf_r+0x1c4>
 8009706:	b1b0      	cbz	r0, 8009736 <_vfiprintf_r+0x156>
 8009708:	9207      	str	r2, [sp, #28]
 800970a:	e014      	b.n	8009736 <_vfiprintf_r+0x156>
 800970c:	eba0 0308 	sub.w	r3, r0, r8
 8009710:	fa09 f303 	lsl.w	r3, r9, r3
 8009714:	4313      	orrs	r3, r2
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	46a2      	mov	sl, r4
 800971a:	e7d2      	b.n	80096c2 <_vfiprintf_r+0xe2>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d19      	adds	r1, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9103      	str	r1, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbb      	ittet	lt
 8009728:	425b      	neglt	r3, r3
 800972a:	f042 0202 	orrlt.w	r2, r2, #2
 800972e:	9307      	strge	r3, [sp, #28]
 8009730:	9307      	strlt	r3, [sp, #28]
 8009732:	bfb8      	it	lt
 8009734:	9204      	strlt	r2, [sp, #16]
 8009736:	7823      	ldrb	r3, [r4, #0]
 8009738:	2b2e      	cmp	r3, #46	; 0x2e
 800973a:	d10c      	bne.n	8009756 <_vfiprintf_r+0x176>
 800973c:	7863      	ldrb	r3, [r4, #1]
 800973e:	2b2a      	cmp	r3, #42	; 0x2a
 8009740:	d135      	bne.n	80097ae <_vfiprintf_r+0x1ce>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	1d1a      	adds	r2, r3, #4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	9203      	str	r2, [sp, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	bfb8      	it	lt
 800974e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009752:	3402      	adds	r4, #2
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800983c <_vfiprintf_r+0x25c>
 800975a:	7821      	ldrb	r1, [r4, #0]
 800975c:	2203      	movs	r2, #3
 800975e:	4650      	mov	r0, sl
 8009760:	f7f6 fd3e 	bl	80001e0 <memchr>
 8009764:	b140      	cbz	r0, 8009778 <_vfiprintf_r+0x198>
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	eba0 000a 	sub.w	r0, r0, sl
 800976c:	fa03 f000 	lsl.w	r0, r3, r0
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	4303      	orrs	r3, r0
 8009774:	3401      	adds	r4, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	482c      	ldr	r0, [pc, #176]	; (8009830 <_vfiprintf_r+0x250>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009782:	2206      	movs	r2, #6
 8009784:	f7f6 fd2c 	bl	80001e0 <memchr>
 8009788:	2800      	cmp	r0, #0
 800978a:	d03f      	beq.n	800980c <_vfiprintf_r+0x22c>
 800978c:	4b29      	ldr	r3, [pc, #164]	; (8009834 <_vfiprintf_r+0x254>)
 800978e:	bb1b      	cbnz	r3, 80097d8 <_vfiprintf_r+0x1f8>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	3307      	adds	r3, #7
 8009794:	f023 0307 	bic.w	r3, r3, #7
 8009798:	3308      	adds	r3, #8
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	443b      	add	r3, r7
 80097a0:	9309      	str	r3, [sp, #36]	; 0x24
 80097a2:	e767      	b.n	8009674 <_vfiprintf_r+0x94>
 80097a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a8:	460c      	mov	r4, r1
 80097aa:	2001      	movs	r0, #1
 80097ac:	e7a5      	b.n	80096fa <_vfiprintf_r+0x11a>
 80097ae:	2300      	movs	r3, #0
 80097b0:	3401      	adds	r4, #1
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c0:	3a30      	subs	r2, #48	; 0x30
 80097c2:	2a09      	cmp	r2, #9
 80097c4:	d903      	bls.n	80097ce <_vfiprintf_r+0x1ee>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0c5      	beq.n	8009756 <_vfiprintf_r+0x176>
 80097ca:	9105      	str	r1, [sp, #20]
 80097cc:	e7c3      	b.n	8009756 <_vfiprintf_r+0x176>
 80097ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d2:	4604      	mov	r4, r0
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7f0      	b.n	80097ba <_vfiprintf_r+0x1da>
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b16      	ldr	r3, [pc, #88]	; (8009838 <_vfiprintf_r+0x258>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4630      	mov	r0, r6
 80097e4:	f3af 8000 	nop.w
 80097e8:	4607      	mov	r7, r0
 80097ea:	1c78      	adds	r0, r7, #1
 80097ec:	d1d6      	bne.n	800979c <_vfiprintf_r+0x1bc>
 80097ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d405      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	059a      	lsls	r2, r3, #22
 80097f8:	d402      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fc:	f000 faa1 	bl	8009d42 <__retarget_lock_release_recursive>
 8009800:	89ab      	ldrh	r3, [r5, #12]
 8009802:	065b      	lsls	r3, r3, #25
 8009804:	f53f af12 	bmi.w	800962c <_vfiprintf_r+0x4c>
 8009808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980a:	e711      	b.n	8009630 <_vfiprintf_r+0x50>
 800980c:	ab03      	add	r3, sp, #12
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	462a      	mov	r2, r5
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_vfiprintf_r+0x258>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	4630      	mov	r0, r6
 8009818:	f7fe fe22 	bl	8008460 <_printf_i>
 800981c:	e7e4      	b.n	80097e8 <_vfiprintf_r+0x208>
 800981e:	bf00      	nop
 8009820:	0800a6c0 	.word	0x0800a6c0
 8009824:	0800a6e0 	.word	0x0800a6e0
 8009828:	0800a6a0 	.word	0x0800a6a0
 800982c:	0800a4c4 	.word	0x0800a4c4
 8009830:	0800a4ce 	.word	0x0800a4ce
 8009834:	00000000 	.word	0x00000000
 8009838:	080095bb 	.word	0x080095bb
 800983c:	0800a4ca 	.word	0x0800a4ca

08009840 <__swbuf_r>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	460e      	mov	r6, r1
 8009844:	4614      	mov	r4, r2
 8009846:	4605      	mov	r5, r0
 8009848:	b118      	cbz	r0, 8009852 <__swbuf_r+0x12>
 800984a:	6983      	ldr	r3, [r0, #24]
 800984c:	b90b      	cbnz	r3, 8009852 <__swbuf_r+0x12>
 800984e:	f000 f9d9 	bl	8009c04 <__sinit>
 8009852:	4b21      	ldr	r3, [pc, #132]	; (80098d8 <__swbuf_r+0x98>)
 8009854:	429c      	cmp	r4, r3
 8009856:	d12b      	bne.n	80098b0 <__swbuf_r+0x70>
 8009858:	686c      	ldr	r4, [r5, #4]
 800985a:	69a3      	ldr	r3, [r4, #24]
 800985c:	60a3      	str	r3, [r4, #8]
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	071a      	lsls	r2, r3, #28
 8009862:	d52f      	bpl.n	80098c4 <__swbuf_r+0x84>
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	b36b      	cbz	r3, 80098c4 <__swbuf_r+0x84>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	1ac0      	subs	r0, r0, r3
 800986e:	6963      	ldr	r3, [r4, #20]
 8009870:	b2f6      	uxtb	r6, r6
 8009872:	4283      	cmp	r3, r0
 8009874:	4637      	mov	r7, r6
 8009876:	dc04      	bgt.n	8009882 <__swbuf_r+0x42>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f92e 	bl	8009adc <_fflush_r>
 8009880:	bb30      	cbnz	r0, 80098d0 <__swbuf_r+0x90>
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	3b01      	subs	r3, #1
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	6022      	str	r2, [r4, #0]
 800988e:	701e      	strb	r6, [r3, #0]
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	3001      	adds	r0, #1
 8009894:	4283      	cmp	r3, r0
 8009896:	d004      	beq.n	80098a2 <__swbuf_r+0x62>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	07db      	lsls	r3, r3, #31
 800989c:	d506      	bpl.n	80098ac <__swbuf_r+0x6c>
 800989e:	2e0a      	cmp	r6, #10
 80098a0:	d104      	bne.n	80098ac <__swbuf_r+0x6c>
 80098a2:	4621      	mov	r1, r4
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f919 	bl	8009adc <_fflush_r>
 80098aa:	b988      	cbnz	r0, 80098d0 <__swbuf_r+0x90>
 80098ac:	4638      	mov	r0, r7
 80098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <__swbuf_r+0x9c>)
 80098b2:	429c      	cmp	r4, r3
 80098b4:	d101      	bne.n	80098ba <__swbuf_r+0x7a>
 80098b6:	68ac      	ldr	r4, [r5, #8]
 80098b8:	e7cf      	b.n	800985a <__swbuf_r+0x1a>
 80098ba:	4b09      	ldr	r3, [pc, #36]	; (80098e0 <__swbuf_r+0xa0>)
 80098bc:	429c      	cmp	r4, r3
 80098be:	bf08      	it	eq
 80098c0:	68ec      	ldreq	r4, [r5, #12]
 80098c2:	e7ca      	b.n	800985a <__swbuf_r+0x1a>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 f80c 	bl	80098e4 <__swsetup_r>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d0cb      	beq.n	8009868 <__swbuf_r+0x28>
 80098d0:	f04f 37ff 	mov.w	r7, #4294967295
 80098d4:	e7ea      	b.n	80098ac <__swbuf_r+0x6c>
 80098d6:	bf00      	nop
 80098d8:	0800a6c0 	.word	0x0800a6c0
 80098dc:	0800a6e0 	.word	0x0800a6e0
 80098e0:	0800a6a0 	.word	0x0800a6a0

080098e4 <__swsetup_r>:
 80098e4:	4b32      	ldr	r3, [pc, #200]	; (80099b0 <__swsetup_r+0xcc>)
 80098e6:	b570      	push	{r4, r5, r6, lr}
 80098e8:	681d      	ldr	r5, [r3, #0]
 80098ea:	4606      	mov	r6, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	b125      	cbz	r5, 80098fa <__swsetup_r+0x16>
 80098f0:	69ab      	ldr	r3, [r5, #24]
 80098f2:	b913      	cbnz	r3, 80098fa <__swsetup_r+0x16>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 f985 	bl	8009c04 <__sinit>
 80098fa:	4b2e      	ldr	r3, [pc, #184]	; (80099b4 <__swsetup_r+0xd0>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d10f      	bne.n	8009920 <__swsetup_r+0x3c>
 8009900:	686c      	ldr	r4, [r5, #4]
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009908:	0719      	lsls	r1, r3, #28
 800990a:	d42c      	bmi.n	8009966 <__swsetup_r+0x82>
 800990c:	06dd      	lsls	r5, r3, #27
 800990e:	d411      	bmi.n	8009934 <__swsetup_r+0x50>
 8009910:	2309      	movs	r3, #9
 8009912:	6033      	str	r3, [r6, #0]
 8009914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295
 800991e:	e03e      	b.n	800999e <__swsetup_r+0xba>
 8009920:	4b25      	ldr	r3, [pc, #148]	; (80099b8 <__swsetup_r+0xd4>)
 8009922:	429c      	cmp	r4, r3
 8009924:	d101      	bne.n	800992a <__swsetup_r+0x46>
 8009926:	68ac      	ldr	r4, [r5, #8]
 8009928:	e7eb      	b.n	8009902 <__swsetup_r+0x1e>
 800992a:	4b24      	ldr	r3, [pc, #144]	; (80099bc <__swsetup_r+0xd8>)
 800992c:	429c      	cmp	r4, r3
 800992e:	bf08      	it	eq
 8009930:	68ec      	ldreq	r4, [r5, #12]
 8009932:	e7e6      	b.n	8009902 <__swsetup_r+0x1e>
 8009934:	0758      	lsls	r0, r3, #29
 8009936:	d512      	bpl.n	800995e <__swsetup_r+0x7a>
 8009938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800993a:	b141      	cbz	r1, 800994e <__swsetup_r+0x6a>
 800993c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009940:	4299      	cmp	r1, r3
 8009942:	d002      	beq.n	800994a <__swsetup_r+0x66>
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff fdcd 	bl	80094e4 <_free_r>
 800994a:	2300      	movs	r3, #0
 800994c:	6363      	str	r3, [r4, #52]	; 0x34
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	2300      	movs	r3, #0
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f043 0308 	orr.w	r3, r3, #8
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	b94b      	cbnz	r3, 800997e <__swsetup_r+0x9a>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009974:	d003      	beq.n	800997e <__swsetup_r+0x9a>
 8009976:	4621      	mov	r1, r4
 8009978:	4630      	mov	r0, r6
 800997a:	f000 fa09 	bl	8009d90 <__smakebuf_r>
 800997e:	89a0      	ldrh	r0, [r4, #12]
 8009980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009984:	f010 0301 	ands.w	r3, r0, #1
 8009988:	d00a      	beq.n	80099a0 <__swsetup_r+0xbc>
 800998a:	2300      	movs	r3, #0
 800998c:	60a3      	str	r3, [r4, #8]
 800998e:	6963      	ldr	r3, [r4, #20]
 8009990:	425b      	negs	r3, r3
 8009992:	61a3      	str	r3, [r4, #24]
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	b943      	cbnz	r3, 80099aa <__swsetup_r+0xc6>
 8009998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800999c:	d1ba      	bne.n	8009914 <__swsetup_r+0x30>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	0781      	lsls	r1, r0, #30
 80099a2:	bf58      	it	pl
 80099a4:	6963      	ldrpl	r3, [r4, #20]
 80099a6:	60a3      	str	r3, [r4, #8]
 80099a8:	e7f4      	b.n	8009994 <__swsetup_r+0xb0>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e7f7      	b.n	800999e <__swsetup_r+0xba>
 80099ae:	bf00      	nop
 80099b0:	2000001c 	.word	0x2000001c
 80099b4:	0800a6c0 	.word	0x0800a6c0
 80099b8:	0800a6e0 	.word	0x0800a6e0
 80099bc:	0800a6a0 	.word	0x0800a6a0

080099c0 <abort>:
 80099c0:	b508      	push	{r3, lr}
 80099c2:	2006      	movs	r0, #6
 80099c4:	f000 fa4c 	bl	8009e60 <raise>
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7f8 fc63 	bl	8002294 <_exit>
	...

080099d0 <__sflush_r>:
 80099d0:	898a      	ldrh	r2, [r1, #12]
 80099d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	4605      	mov	r5, r0
 80099d8:	0710      	lsls	r0, r2, #28
 80099da:	460c      	mov	r4, r1
 80099dc:	d458      	bmi.n	8009a90 <__sflush_r+0xc0>
 80099de:	684b      	ldr	r3, [r1, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dc05      	bgt.n	80099f0 <__sflush_r+0x20>
 80099e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	dc02      	bgt.n	80099f0 <__sflush_r+0x20>
 80099ea:	2000      	movs	r0, #0
 80099ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	d0f9      	beq.n	80099ea <__sflush_r+0x1a>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099fc:	682f      	ldr	r7, [r5, #0]
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	d032      	beq.n	8009a68 <__sflush_r+0x98>
 8009a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	075a      	lsls	r2, r3, #29
 8009a08:	d505      	bpl.n	8009a16 <__sflush_r+0x46>
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	1ac0      	subs	r0, r0, r3
 8009a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a10:	b10b      	cbz	r3, 8009a16 <__sflush_r+0x46>
 8009a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a14:	1ac0      	subs	r0, r0, r3
 8009a16:	2300      	movs	r3, #0
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a1c:	6a21      	ldr	r1, [r4, #32]
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b0      	blx	r6
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	d106      	bne.n	8009a36 <__sflush_r+0x66>
 8009a28:	6829      	ldr	r1, [r5, #0]
 8009a2a:	291d      	cmp	r1, #29
 8009a2c:	d82c      	bhi.n	8009a88 <__sflush_r+0xb8>
 8009a2e:	4a2a      	ldr	r2, [pc, #168]	; (8009ad8 <__sflush_r+0x108>)
 8009a30:	40ca      	lsrs	r2, r1
 8009a32:	07d6      	lsls	r6, r2, #31
 8009a34:	d528      	bpl.n	8009a88 <__sflush_r+0xb8>
 8009a36:	2200      	movs	r2, #0
 8009a38:	6062      	str	r2, [r4, #4]
 8009a3a:	04d9      	lsls	r1, r3, #19
 8009a3c:	6922      	ldr	r2, [r4, #16]
 8009a3e:	6022      	str	r2, [r4, #0]
 8009a40:	d504      	bpl.n	8009a4c <__sflush_r+0x7c>
 8009a42:	1c42      	adds	r2, r0, #1
 8009a44:	d101      	bne.n	8009a4a <__sflush_r+0x7a>
 8009a46:	682b      	ldr	r3, [r5, #0]
 8009a48:	b903      	cbnz	r3, 8009a4c <__sflush_r+0x7c>
 8009a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a4e:	602f      	str	r7, [r5, #0]
 8009a50:	2900      	cmp	r1, #0
 8009a52:	d0ca      	beq.n	80099ea <__sflush_r+0x1a>
 8009a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	d002      	beq.n	8009a62 <__sflush_r+0x92>
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff fd41 	bl	80094e4 <_free_r>
 8009a62:	2000      	movs	r0, #0
 8009a64:	6360      	str	r0, [r4, #52]	; 0x34
 8009a66:	e7c1      	b.n	80099ec <__sflush_r+0x1c>
 8009a68:	6a21      	ldr	r1, [r4, #32]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b0      	blx	r6
 8009a70:	1c41      	adds	r1, r0, #1
 8009a72:	d1c7      	bne.n	8009a04 <__sflush_r+0x34>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0c4      	beq.n	8009a04 <__sflush_r+0x34>
 8009a7a:	2b1d      	cmp	r3, #29
 8009a7c:	d001      	beq.n	8009a82 <__sflush_r+0xb2>
 8009a7e:	2b16      	cmp	r3, #22
 8009a80:	d101      	bne.n	8009a86 <__sflush_r+0xb6>
 8009a82:	602f      	str	r7, [r5, #0]
 8009a84:	e7b1      	b.n	80099ea <__sflush_r+0x1a>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	e7ad      	b.n	80099ec <__sflush_r+0x1c>
 8009a90:	690f      	ldr	r7, [r1, #16]
 8009a92:	2f00      	cmp	r7, #0
 8009a94:	d0a9      	beq.n	80099ea <__sflush_r+0x1a>
 8009a96:	0793      	lsls	r3, r2, #30
 8009a98:	680e      	ldr	r6, [r1, #0]
 8009a9a:	bf08      	it	eq
 8009a9c:	694b      	ldreq	r3, [r1, #20]
 8009a9e:	600f      	str	r7, [r1, #0]
 8009aa0:	bf18      	it	ne
 8009aa2:	2300      	movne	r3, #0
 8009aa4:	eba6 0807 	sub.w	r8, r6, r7
 8009aa8:	608b      	str	r3, [r1, #8]
 8009aaa:	f1b8 0f00 	cmp.w	r8, #0
 8009aae:	dd9c      	ble.n	80099ea <__sflush_r+0x1a>
 8009ab0:	6a21      	ldr	r1, [r4, #32]
 8009ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ab4:	4643      	mov	r3, r8
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b0      	blx	r6
 8009abc:	2800      	cmp	r0, #0
 8009abe:	dc06      	bgt.n	8009ace <__sflush_r+0xfe>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	e78e      	b.n	80099ec <__sflush_r+0x1c>
 8009ace:	4407      	add	r7, r0
 8009ad0:	eba8 0800 	sub.w	r8, r8, r0
 8009ad4:	e7e9      	b.n	8009aaa <__sflush_r+0xda>
 8009ad6:	bf00      	nop
 8009ad8:	20400001 	.word	0x20400001

08009adc <_fflush_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	690b      	ldr	r3, [r1, #16]
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	b913      	cbnz	r3, 8009aec <_fflush_r+0x10>
 8009ae6:	2500      	movs	r5, #0
 8009ae8:	4628      	mov	r0, r5
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	b118      	cbz	r0, 8009af6 <_fflush_r+0x1a>
 8009aee:	6983      	ldr	r3, [r0, #24]
 8009af0:	b90b      	cbnz	r3, 8009af6 <_fflush_r+0x1a>
 8009af2:	f000 f887 	bl	8009c04 <__sinit>
 8009af6:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <_fflush_r+0x6c>)
 8009af8:	429c      	cmp	r4, r3
 8009afa:	d11b      	bne.n	8009b34 <_fflush_r+0x58>
 8009afc:	686c      	ldr	r4, [r5, #4]
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0ef      	beq.n	8009ae6 <_fflush_r+0xa>
 8009b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b08:	07d0      	lsls	r0, r2, #31
 8009b0a:	d404      	bmi.n	8009b16 <_fflush_r+0x3a>
 8009b0c:	0599      	lsls	r1, r3, #22
 8009b0e:	d402      	bmi.n	8009b16 <_fflush_r+0x3a>
 8009b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b12:	f000 f915 	bl	8009d40 <__retarget_lock_acquire_recursive>
 8009b16:	4628      	mov	r0, r5
 8009b18:	4621      	mov	r1, r4
 8009b1a:	f7ff ff59 	bl	80099d0 <__sflush_r>
 8009b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b20:	07da      	lsls	r2, r3, #31
 8009b22:	4605      	mov	r5, r0
 8009b24:	d4e0      	bmi.n	8009ae8 <_fflush_r+0xc>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	059b      	lsls	r3, r3, #22
 8009b2a:	d4dd      	bmi.n	8009ae8 <_fflush_r+0xc>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2e:	f000 f908 	bl	8009d42 <__retarget_lock_release_recursive>
 8009b32:	e7d9      	b.n	8009ae8 <_fflush_r+0xc>
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <_fflush_r+0x70>)
 8009b36:	429c      	cmp	r4, r3
 8009b38:	d101      	bne.n	8009b3e <_fflush_r+0x62>
 8009b3a:	68ac      	ldr	r4, [r5, #8]
 8009b3c:	e7df      	b.n	8009afe <_fflush_r+0x22>
 8009b3e:	4b04      	ldr	r3, [pc, #16]	; (8009b50 <_fflush_r+0x74>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	bf08      	it	eq
 8009b44:	68ec      	ldreq	r4, [r5, #12]
 8009b46:	e7da      	b.n	8009afe <_fflush_r+0x22>
 8009b48:	0800a6c0 	.word	0x0800a6c0
 8009b4c:	0800a6e0 	.word	0x0800a6e0
 8009b50:	0800a6a0 	.word	0x0800a6a0

08009b54 <std>:
 8009b54:	2300      	movs	r3, #0
 8009b56:	b510      	push	{r4, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b62:	6083      	str	r3, [r0, #8]
 8009b64:	8181      	strh	r1, [r0, #12]
 8009b66:	6643      	str	r3, [r0, #100]	; 0x64
 8009b68:	81c2      	strh	r2, [r0, #14]
 8009b6a:	6183      	str	r3, [r0, #24]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	2208      	movs	r2, #8
 8009b70:	305c      	adds	r0, #92	; 0x5c
 8009b72:	f7fc f9c1 	bl	8005ef8 <memset>
 8009b76:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <std+0x38>)
 8009b78:	6263      	str	r3, [r4, #36]	; 0x24
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <std+0x3c>)
 8009b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <std+0x40>)
 8009b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <std+0x44>)
 8009b84:	6224      	str	r4, [r4, #32]
 8009b86:	6323      	str	r3, [r4, #48]	; 0x30
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	bf00      	nop
 8009b8c:	08009e99 	.word	0x08009e99
 8009b90:	08009ebb 	.word	0x08009ebb
 8009b94:	08009ef3 	.word	0x08009ef3
 8009b98:	08009f17 	.word	0x08009f17

08009b9c <_cleanup_r>:
 8009b9c:	4901      	ldr	r1, [pc, #4]	; (8009ba4 <_cleanup_r+0x8>)
 8009b9e:	f000 b8af 	b.w	8009d00 <_fwalk_reent>
 8009ba2:	bf00      	nop
 8009ba4:	08009add 	.word	0x08009add

08009ba8 <__sfmoreglue>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	2268      	movs	r2, #104	; 0x68
 8009bac:	1e4d      	subs	r5, r1, #1
 8009bae:	4355      	muls	r5, r2
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bb6:	f7fe f9e7 	bl	8007f88 <_malloc_r>
 8009bba:	4604      	mov	r4, r0
 8009bbc:	b140      	cbz	r0, 8009bd0 <__sfmoreglue+0x28>
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009bc4:	300c      	adds	r0, #12
 8009bc6:	60a0      	str	r0, [r4, #8]
 8009bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bcc:	f7fc f994 	bl	8005ef8 <memset>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}

08009bd4 <__sfp_lock_acquire>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__sfp_lock_acquire+0x8>)
 8009bd6:	f000 b8b3 	b.w	8009d40 <__retarget_lock_acquire_recursive>
 8009bda:	bf00      	nop
 8009bdc:	200004f5 	.word	0x200004f5

08009be0 <__sfp_lock_release>:
 8009be0:	4801      	ldr	r0, [pc, #4]	; (8009be8 <__sfp_lock_release+0x8>)
 8009be2:	f000 b8ae 	b.w	8009d42 <__retarget_lock_release_recursive>
 8009be6:	bf00      	nop
 8009be8:	200004f5 	.word	0x200004f5

08009bec <__sinit_lock_acquire>:
 8009bec:	4801      	ldr	r0, [pc, #4]	; (8009bf4 <__sinit_lock_acquire+0x8>)
 8009bee:	f000 b8a7 	b.w	8009d40 <__retarget_lock_acquire_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	200004f6 	.word	0x200004f6

08009bf8 <__sinit_lock_release>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__sinit_lock_release+0x8>)
 8009bfa:	f000 b8a2 	b.w	8009d42 <__retarget_lock_release_recursive>
 8009bfe:	bf00      	nop
 8009c00:	200004f6 	.word	0x200004f6

08009c04 <__sinit>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	4604      	mov	r4, r0
 8009c08:	f7ff fff0 	bl	8009bec <__sinit_lock_acquire>
 8009c0c:	69a3      	ldr	r3, [r4, #24]
 8009c0e:	b11b      	cbz	r3, 8009c18 <__sinit+0x14>
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f7ff bff0 	b.w	8009bf8 <__sinit_lock_release>
 8009c18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <__sinit+0x68>)
 8009c20:	4a13      	ldr	r2, [pc, #76]	; (8009c70 <__sinit+0x6c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c26:	42a3      	cmp	r3, r4
 8009c28:	bf04      	itt	eq
 8009c2a:	2301      	moveq	r3, #1
 8009c2c:	61a3      	streq	r3, [r4, #24]
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 f820 	bl	8009c74 <__sfp>
 8009c34:	6060      	str	r0, [r4, #4]
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 f81c 	bl	8009c74 <__sfp>
 8009c3c:	60a0      	str	r0, [r4, #8]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 f818 	bl	8009c74 <__sfp>
 8009c44:	2200      	movs	r2, #0
 8009c46:	60e0      	str	r0, [r4, #12]
 8009c48:	2104      	movs	r1, #4
 8009c4a:	6860      	ldr	r0, [r4, #4]
 8009c4c:	f7ff ff82 	bl	8009b54 <std>
 8009c50:	68a0      	ldr	r0, [r4, #8]
 8009c52:	2201      	movs	r2, #1
 8009c54:	2109      	movs	r1, #9
 8009c56:	f7ff ff7d 	bl	8009b54 <std>
 8009c5a:	68e0      	ldr	r0, [r4, #12]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	2112      	movs	r1, #18
 8009c60:	f7ff ff78 	bl	8009b54 <std>
 8009c64:	2301      	movs	r3, #1
 8009c66:	61a3      	str	r3, [r4, #24]
 8009c68:	e7d2      	b.n	8009c10 <__sinit+0xc>
 8009c6a:	bf00      	nop
 8009c6c:	0800a26c 	.word	0x0800a26c
 8009c70:	08009b9d 	.word	0x08009b9d

08009c74 <__sfp>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	4607      	mov	r7, r0
 8009c78:	f7ff ffac 	bl	8009bd4 <__sfp_lock_acquire>
 8009c7c:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <__sfp+0x84>)
 8009c7e:	681e      	ldr	r6, [r3, #0]
 8009c80:	69b3      	ldr	r3, [r6, #24]
 8009c82:	b913      	cbnz	r3, 8009c8a <__sfp+0x16>
 8009c84:	4630      	mov	r0, r6
 8009c86:	f7ff ffbd 	bl	8009c04 <__sinit>
 8009c8a:	3648      	adds	r6, #72	; 0x48
 8009c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	d503      	bpl.n	8009c9c <__sfp+0x28>
 8009c94:	6833      	ldr	r3, [r6, #0]
 8009c96:	b30b      	cbz	r3, 8009cdc <__sfp+0x68>
 8009c98:	6836      	ldr	r6, [r6, #0]
 8009c9a:	e7f7      	b.n	8009c8c <__sfp+0x18>
 8009c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ca0:	b9d5      	cbnz	r5, 8009cd8 <__sfp+0x64>
 8009ca2:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <__sfp+0x88>)
 8009ca4:	60e3      	str	r3, [r4, #12]
 8009ca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009caa:	6665      	str	r5, [r4, #100]	; 0x64
 8009cac:	f000 f847 	bl	8009d3e <__retarget_lock_init_recursive>
 8009cb0:	f7ff ff96 	bl	8009be0 <__sfp_lock_release>
 8009cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cbc:	6025      	str	r5, [r4, #0]
 8009cbe:	61a5      	str	r5, [r4, #24]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cc8:	f7fc f916 	bl	8005ef8 <memset>
 8009ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd8:	3468      	adds	r4, #104	; 0x68
 8009cda:	e7d9      	b.n	8009c90 <__sfp+0x1c>
 8009cdc:	2104      	movs	r1, #4
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7ff ff62 	bl	8009ba8 <__sfmoreglue>
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	6030      	str	r0, [r6, #0]
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d1d5      	bne.n	8009c98 <__sfp+0x24>
 8009cec:	f7ff ff78 	bl	8009be0 <__sfp_lock_release>
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	e7ee      	b.n	8009cd4 <__sfp+0x60>
 8009cf6:	bf00      	nop
 8009cf8:	0800a26c 	.word	0x0800a26c
 8009cfc:	ffff0001 	.word	0xffff0001

08009d00 <_fwalk_reent>:
 8009d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d04:	4606      	mov	r6, r0
 8009d06:	4688      	mov	r8, r1
 8009d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d0c:	2700      	movs	r7, #0
 8009d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d12:	f1b9 0901 	subs.w	r9, r9, #1
 8009d16:	d505      	bpl.n	8009d24 <_fwalk_reent+0x24>
 8009d18:	6824      	ldr	r4, [r4, #0]
 8009d1a:	2c00      	cmp	r4, #0
 8009d1c:	d1f7      	bne.n	8009d0e <_fwalk_reent+0xe>
 8009d1e:	4638      	mov	r0, r7
 8009d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d24:	89ab      	ldrh	r3, [r5, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d907      	bls.n	8009d3a <_fwalk_reent+0x3a>
 8009d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	d003      	beq.n	8009d3a <_fwalk_reent+0x3a>
 8009d32:	4629      	mov	r1, r5
 8009d34:	4630      	mov	r0, r6
 8009d36:	47c0      	blx	r8
 8009d38:	4307      	orrs	r7, r0
 8009d3a:	3568      	adds	r5, #104	; 0x68
 8009d3c:	e7e9      	b.n	8009d12 <_fwalk_reent+0x12>

08009d3e <__retarget_lock_init_recursive>:
 8009d3e:	4770      	bx	lr

08009d40 <__retarget_lock_acquire_recursive>:
 8009d40:	4770      	bx	lr

08009d42 <__retarget_lock_release_recursive>:
 8009d42:	4770      	bx	lr

08009d44 <__swhatbuf_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	460e      	mov	r6, r1
 8009d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	b096      	sub	sp, #88	; 0x58
 8009d50:	4614      	mov	r4, r2
 8009d52:	461d      	mov	r5, r3
 8009d54:	da08      	bge.n	8009d68 <__swhatbuf_r+0x24>
 8009d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	061a      	lsls	r2, r3, #24
 8009d60:	d410      	bmi.n	8009d84 <__swhatbuf_r+0x40>
 8009d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d66:	e00e      	b.n	8009d86 <__swhatbuf_r+0x42>
 8009d68:	466a      	mov	r2, sp
 8009d6a:	f000 f8fb 	bl	8009f64 <_fstat_r>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	dbf1      	blt.n	8009d56 <__swhatbuf_r+0x12>
 8009d72:	9a01      	ldr	r2, [sp, #4]
 8009d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d7c:	425a      	negs	r2, r3
 8009d7e:	415a      	adcs	r2, r3
 8009d80:	602a      	str	r2, [r5, #0]
 8009d82:	e7ee      	b.n	8009d62 <__swhatbuf_r+0x1e>
 8009d84:	2340      	movs	r3, #64	; 0x40
 8009d86:	2000      	movs	r0, #0
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	b016      	add	sp, #88	; 0x58
 8009d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d90 <__smakebuf_r>:
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d94:	079d      	lsls	r5, r3, #30
 8009d96:	4606      	mov	r6, r0
 8009d98:	460c      	mov	r4, r1
 8009d9a:	d507      	bpl.n	8009dac <__smakebuf_r+0x1c>
 8009d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	2301      	movs	r3, #1
 8009da6:	6163      	str	r3, [r4, #20]
 8009da8:	b002      	add	sp, #8
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	ab01      	add	r3, sp, #4
 8009dae:	466a      	mov	r2, sp
 8009db0:	f7ff ffc8 	bl	8009d44 <__swhatbuf_r>
 8009db4:	9900      	ldr	r1, [sp, #0]
 8009db6:	4605      	mov	r5, r0
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7fe f8e5 	bl	8007f88 <_malloc_r>
 8009dbe:	b948      	cbnz	r0, 8009dd4 <__smakebuf_r+0x44>
 8009dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc4:	059a      	lsls	r2, r3, #22
 8009dc6:	d4ef      	bmi.n	8009da8 <__smakebuf_r+0x18>
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	f043 0302 	orr.w	r3, r3, #2
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	e7e3      	b.n	8009d9c <__smakebuf_r+0xc>
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <__smakebuf_r+0x7c>)
 8009dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	6020      	str	r0, [r4, #0]
 8009ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	9b00      	ldr	r3, [sp, #0]
 8009de4:	6163      	str	r3, [r4, #20]
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	6120      	str	r0, [r4, #16]
 8009dea:	b15b      	cbz	r3, 8009e04 <__smakebuf_r+0x74>
 8009dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 f8c9 	bl	8009f88 <_isatty_r>
 8009df6:	b128      	cbz	r0, 8009e04 <__smakebuf_r+0x74>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	f043 0301 	orr.w	r3, r3, #1
 8009e02:	81a3      	strh	r3, [r4, #12]
 8009e04:	89a0      	ldrh	r0, [r4, #12]
 8009e06:	4305      	orrs	r5, r0
 8009e08:	81a5      	strh	r5, [r4, #12]
 8009e0a:	e7cd      	b.n	8009da8 <__smakebuf_r+0x18>
 8009e0c:	08009b9d 	.word	0x08009b9d

08009e10 <_raise_r>:
 8009e10:	291f      	cmp	r1, #31
 8009e12:	b538      	push	{r3, r4, r5, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	d904      	bls.n	8009e24 <_raise_r+0x14>
 8009e1a:	2316      	movs	r3, #22
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e26:	b112      	cbz	r2, 8009e2e <_raise_r+0x1e>
 8009e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e2c:	b94b      	cbnz	r3, 8009e42 <_raise_r+0x32>
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 f830 	bl	8009e94 <_getpid_r>
 8009e34:	462a      	mov	r2, r5
 8009e36:	4601      	mov	r1, r0
 8009e38:	4620      	mov	r0, r4
 8009e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3e:	f000 b817 	b.w	8009e70 <_kill_r>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d00a      	beq.n	8009e5c <_raise_r+0x4c>
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	d103      	bne.n	8009e52 <_raise_r+0x42>
 8009e4a:	2316      	movs	r3, #22
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	2001      	movs	r0, #1
 8009e50:	e7e7      	b.n	8009e22 <_raise_r+0x12>
 8009e52:	2400      	movs	r4, #0
 8009e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	4798      	blx	r3
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e7e0      	b.n	8009e22 <_raise_r+0x12>

08009e60 <raise>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <raise+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f7ff bfd3 	b.w	8009e10 <_raise_r>
 8009e6a:	bf00      	nop
 8009e6c:	2000001c 	.word	0x2000001c

08009e70 <_kill_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_kill_r+0x20>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	f7f8 f9f9 	bl	8002274 <_kill>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d102      	bne.n	8009e8c <_kill_r+0x1c>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	b103      	cbz	r3, 8009e8c <_kill_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	200004f0 	.word	0x200004f0

08009e94 <_getpid_r>:
 8009e94:	f7f8 b9e6 	b.w	8002264 <_getpid>

08009e98 <__sread>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea0:	f000 f894 	bl	8009fcc <_read_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	bfab      	itete	ge
 8009ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8009eac:	181b      	addge	r3, r3, r0
 8009eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009eb2:	bfac      	ite	ge
 8009eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eb6:	81a3      	strhlt	r3, [r4, #12]
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <__swrite>:
 8009eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	898b      	ldrh	r3, [r1, #12]
 8009ec2:	05db      	lsls	r3, r3, #23
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	4616      	mov	r6, r2
 8009eca:	d505      	bpl.n	8009ed8 <__swrite+0x1e>
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f000 f868 	bl	8009fa8 <_lseek_r>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	f000 b817 	b.w	8009f20 <_write_r>

08009ef2 <__sseek>:
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efa:	f000 f855 	bl	8009fa8 <_lseek_r>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	bf15      	itete	ne
 8009f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f0e:	81a3      	strheq	r3, [r4, #12]
 8009f10:	bf18      	it	ne
 8009f12:	81a3      	strhne	r3, [r4, #12]
 8009f14:	bd10      	pop	{r4, pc}

08009f16 <__sclose>:
 8009f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1a:	f000 b813 	b.w	8009f44 <_close_r>
	...

08009f20 <_write_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_write_r+0x20>)
 8009f24:	4604      	mov	r4, r0
 8009f26:	4608      	mov	r0, r1
 8009f28:	4611      	mov	r1, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	602a      	str	r2, [r5, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f7f8 f9d7 	bl	80022e2 <_write>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_write_r+0x1e>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_write_r+0x1e>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	200004f0 	.word	0x200004f0

08009f44 <_close_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_close_r+0x1c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f7f8 f9e3 	bl	800231a <_close>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_close_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_close_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	200004f0 	.word	0x200004f0

08009f64 <_fstat_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d07      	ldr	r5, [pc, #28]	; (8009f84 <_fstat_r+0x20>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	602b      	str	r3, [r5, #0]
 8009f72:	f7f8 f9de 	bl	8002332 <_fstat>
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	d102      	bne.n	8009f80 <_fstat_r+0x1c>
 8009f7a:	682b      	ldr	r3, [r5, #0]
 8009f7c:	b103      	cbz	r3, 8009f80 <_fstat_r+0x1c>
 8009f7e:	6023      	str	r3, [r4, #0]
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	bf00      	nop
 8009f84:	200004f0 	.word	0x200004f0

08009f88 <_isatty_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_isatty_r+0x1c>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	f7f8 f9dd 	bl	8002352 <_isatty>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_isatty_r+0x1a>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_isatty_r+0x1a>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	200004f0 	.word	0x200004f0

08009fa8 <_lseek_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	; (8009fc8 <_lseek_r+0x20>)
 8009fac:	4604      	mov	r4, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	602a      	str	r2, [r5, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f7f8 f9d6 	bl	8002368 <_lseek>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_lseek_r+0x1e>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_lseek_r+0x1e>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	200004f0 	.word	0x200004f0

08009fcc <_read_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d07      	ldr	r5, [pc, #28]	; (8009fec <_read_r+0x20>)
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	602a      	str	r2, [r5, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f7f8 f964 	bl	80022a8 <_read>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_read_r+0x1e>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_read_r+0x1e>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	200004f0 	.word	0x200004f0

08009ff0 <fminf>:
 8009ff0:	b508      	push	{r3, lr}
 8009ff2:	ed2d 8b02 	vpush	{d8}
 8009ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8009ffa:	eef0 8a60 	vmov.f32	s17, s1
 8009ffe:	f000 f813 	bl	800a028 <__fpclassifyf>
 800a002:	b148      	cbz	r0, 800a018 <fminf+0x28>
 800a004:	eeb0 0a68 	vmov.f32	s0, s17
 800a008:	f000 f80e 	bl	800a028 <__fpclassifyf>
 800a00c:	b130      	cbz	r0, 800a01c <fminf+0x2c>
 800a00e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a016:	d401      	bmi.n	800a01c <fminf+0x2c>
 800a018:	eeb0 8a68 	vmov.f32	s16, s17
 800a01c:	eeb0 0a48 	vmov.f32	s0, s16
 800a020:	ecbd 8b02 	vpop	{d8}
 800a024:	bd08      	pop	{r3, pc}
	...

0800a028 <__fpclassifyf>:
 800a028:	ee10 3a10 	vmov	r3, s0
 800a02c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800a030:	d00d      	beq.n	800a04e <__fpclassifyf+0x26>
 800a032:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800a036:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a03a:	d30a      	bcc.n	800a052 <__fpclassifyf+0x2a>
 800a03c:	4b07      	ldr	r3, [pc, #28]	; (800a05c <__fpclassifyf+0x34>)
 800a03e:	1e42      	subs	r2, r0, #1
 800a040:	429a      	cmp	r2, r3
 800a042:	d908      	bls.n	800a056 <__fpclassifyf+0x2e>
 800a044:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800a048:	4258      	negs	r0, r3
 800a04a:	4158      	adcs	r0, r3
 800a04c:	4770      	bx	lr
 800a04e:	2002      	movs	r0, #2
 800a050:	4770      	bx	lr
 800a052:	2004      	movs	r0, #4
 800a054:	4770      	bx	lr
 800a056:	2003      	movs	r0, #3
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	007ffffe 	.word	0x007ffffe

0800a060 <roundf>:
 800a060:	ee10 0a10 	vmov	r0, s0
 800a064:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a068:	3a7f      	subs	r2, #127	; 0x7f
 800a06a:	2a16      	cmp	r2, #22
 800a06c:	dc15      	bgt.n	800a09a <roundf+0x3a>
 800a06e:	2a00      	cmp	r2, #0
 800a070:	da08      	bge.n	800a084 <roundf+0x24>
 800a072:	3201      	adds	r2, #1
 800a074:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a078:	d101      	bne.n	800a07e <roundf+0x1e>
 800a07a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a07e:	ee00 3a10 	vmov	s0, r3
 800a082:	4770      	bx	lr
 800a084:	4907      	ldr	r1, [pc, #28]	; (800a0a4 <roundf+0x44>)
 800a086:	4111      	asrs	r1, r2
 800a088:	4208      	tst	r0, r1
 800a08a:	d0fa      	beq.n	800a082 <roundf+0x22>
 800a08c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a090:	4113      	asrs	r3, r2
 800a092:	4403      	add	r3, r0
 800a094:	ea23 0301 	bic.w	r3, r3, r1
 800a098:	e7f1      	b.n	800a07e <roundf+0x1e>
 800a09a:	2a80      	cmp	r2, #128	; 0x80
 800a09c:	d1f1      	bne.n	800a082 <roundf+0x22>
 800a09e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a0a2:	4770      	bx	lr
 800a0a4:	007fffff 	.word	0x007fffff

0800a0a8 <_init>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_fini>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr
