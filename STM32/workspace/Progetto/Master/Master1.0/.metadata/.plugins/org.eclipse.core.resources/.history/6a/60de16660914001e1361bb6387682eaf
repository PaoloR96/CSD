/*
 * fuzzy.c
 *
 *  Created on: Jun 20, 2023
 *      Author: Utente
 */

#include "fuzzy.h"

// Funzione di appartenenza triangolare
float triangular_membership(float *x, FuzzyTerm * term) {
  if (*x <= term->a || *x >= term->c) {
    return 0;
  } else if (*x > term->a && *x <= term->b) {
    return (*x - term->a) / (term->b - term->a);
  } else {
    return (term->c - *x) / (term->c - term->b);
  }
}

// Funzione di inferenza fuzzy
float fuzzy_inference(float *input1, float *input2, FuzzyVariable *var1, FuzzyVariable *var2, FuzzyVariable *outputVar, FuzzyRule *rules[], int *nRules) {
  float output = 0;
  float total_weight = 0;

  for (int i = 0; i < *nRules; i++) {
    float rule_strength = fminf(triangular_membership(*input1, var1->terms[rules[i]->input1]),
                                triangular_membership(input2, var2->terms[rules[i]->input2]));

    float centroid = (outputVar.terms[rules[i].output].a + outputVar.terms[rules[i].output].b + outputVar.terms[rules[i].output].c) / 3;

    output += rule_strength * centroid;
    total_weight += rule_strength;
  }

  return total_weight != 0 ? output / total_weight : 0;
}

