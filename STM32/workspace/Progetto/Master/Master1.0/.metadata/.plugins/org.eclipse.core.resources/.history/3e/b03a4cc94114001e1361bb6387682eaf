
#include "pid.h"
void PidInit(PID_typedef* Pid){
	Pid->prev_error=0;    //Variabile errore iterazione precedente
	Pid->integrale=0;     //Variabile azione integrale
	Pid->error=0;
	Pid->derivata=0;
	Pid->output=0;
	Pid->abserror=0;
	Pid->input=0;
}

int PID(int *setpoint, int *input,PID_typedef* Pid){          //Funzione PID

  error = setpoint - input;                              //calcola l'errore tra input e setpoint

  if(abs(error) > Epsilon){                              //Se l'errore è maggiore di epsilon
    integrale = integrale + error*DT;                    //Calcola l'azione integrale
  }
   derivata = (error - prev_error)/DT;                   //Calcola l'azione derivativa
   output = Kp*error + Ki*integrale + Kd*derivata;       //Calcola output PID

   if(output > MAXout) {                      //Se l'uscita supera il valore massimo
     output = MAXout;                         //Satura l'uscita
     integrale=0;                             //Azzera l'azione integrale
   }
   else if(output < MINout) {                 //Se l'uscita invece è troppo piccola
     output = MINout;                         //Satura alla minima uscita
     integrale=0;                             //Azzera anche in questo caso l'azione integrale
   }

   prev_error = error;                        //Salva il valore dell'uscita
   return output;                             //Restituisci uscita PID
}
