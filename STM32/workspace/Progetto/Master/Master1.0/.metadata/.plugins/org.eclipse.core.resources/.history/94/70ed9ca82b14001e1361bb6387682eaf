#include"pid.h"
PidTypedef pid;
float max_output = 100.0f;      // Massimo valore di uscita
float min_output = 0.0f;        // Minimo valore di uscita
void pid_init(void)
{
    pid.integral_temp = 0.0f;
    pid.integral_hum = 0.0f;
    pid.last_error_temp = 0.0f;
    pid.last_error_hum = 0.0f;
}

// Funzione per calcolare il valore di uscita del regolatore PID
float pid_compute(float*temp, float*hum,float * setpoint_temp,float*setpoint_hum)
{
    // Calcolo dell'errore di temperatura e umidità
	pid.error_temp = *setpoint_temp - *temp;
	pid.error_hum = *setpoint_hum - *hum;

    // Calcolo del termine proporzionale
    float proportional_temp = Kp * pid.error_temp;
    float proportional_hum = Kp * pid.error_hum;

    // Calcolo del termine integrale
    pid->integral_temp += Ki * pid.error_temp;
    pid->integral_hum += Ki * pid.error_hum;

    // Limitazione del termine integrale
    if (pid.integral_temp > max_output) {
    	pid.integral_temp = max_output;
    } else if (pid.integral_temp < min_output) {
    	pid.integral_temp = min_output;
    }

    if (pid.integral_hum > max_output) {
    	pid.integral_hum = max_output;
    } else if (pid.integral_hum < min_output) {
    	pid.integral_hum = min_output;
    }

    // Calcolo del termine derivativo
    pid.derivative_temp = Kd * (pid.error_temp - pid.last_error_temp);
    pid.derivative_hum = Kd * (pid.error_hum - pid.last_error_hum);

    // Calcolo del valore di uscita
    float output = proportional_temp + pid.integral_temp + pid.derivative_temp +
    		pid.proportional_hum + pid.integral_hum + pid.derivative_hum;

    // Limitazione del valore di uscita
    if (output > max_output) {
        output = max_output;
    } else if (output < min_output) {
        output = min_output;
    }

    // Memorizzazione dell'ultimo errore di temperatura e umidità
    pid.last_error_temp = pid.error_temp;
    pid.last_error_hum = pid.error_hum;

    return output;
}
