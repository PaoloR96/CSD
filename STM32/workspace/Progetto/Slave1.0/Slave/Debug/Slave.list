
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08008348  08008348  00018348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008668  08008668  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008668  08008668  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000798  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000808  20000808  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002576  00000000  00000000  00030fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d40  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0c0  00000000  00000000  000350d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001223c  00000000  00000000  00054198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8cee  00000000  00000000  000663d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f0c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ca8  00000000  00000000  0011f114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800832c 	.word	0x0800832c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800832c 	.word	0x0800832c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c36:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c56:	bf00      	nop
     __ASM volatile ("NOP");
 8000c58:	bf00      	nop
  __ASM volatile ("NOP");
 8000c5a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000c64:	2300      	movs	r3, #0
 8000c66:	e000      	b.n	8000c6a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000c68:	2301      	movs	r3, #1
  }
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000edf0 	.word	0xe000edf0
 8000c78:	e0001000 	.word	0xe0001000

08000c7c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <delay+0x40>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c8a:	f002 fe49 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <delay+0x44>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ca0:	bf00      	nop
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <delay+0x40>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3f8      	bcc.n	8000ca2 <delay+0x26>
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e0001000 	.word	0xe0001000
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fa46 	bl	8002184 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f001 fa28 	bl	8002184 <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DHT_Start>:


void DHT_Start (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000d40:	f7ff ff6c 	bl	8000c1c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000d44:	2120      	movs	r1, #32
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f7ff ffbb 	bl	8000cc4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f001 fba7 	bl	80024a8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000d5a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000d5e:	f7ff ff8d 	bl	8000c7c <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 fb9d 	bl	80024a8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f7ff ff84 	bl	8000c7c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffc1 	bl	8000d00 <Set_Pin_Input>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000d8c:	2028      	movs	r0, #40	; 0x28
 8000d8e:	f7ff ff75 	bl	8000c7c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000d92:	2120      	movs	r1, #32
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fb6e 	bl	8002478 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <DHT_Check_Response+0x40>
	{
		delay (80);
 8000da2:	2050      	movs	r0, #80	; 0x50
 8000da4:	f7ff ff6a 	bl	8000c7c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000da8:	2120      	movs	r1, #32
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f001 fb63 	bl	8002478 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <DHT_Check_Response+0x3c>
 8000db8:	2301      	movs	r3, #1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	e001      	b.n	8000dc2 <DHT_Check_Response+0x40>
		else Response = -1;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000dc2:	bf00      	nop
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fb55 	bl	8002478 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f7      	bne.n	8000dc4 <DHT_Check_Response+0x42>

	return Response;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	71bb      	strb	r3, [r7, #6]
 8000de8:	e03a      	b.n	8000e60 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000dea:	bf00      	nop
 8000dec:	2120      	movs	r1, #32
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 fb41 	bl	8002478 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f7      	beq.n	8000dec <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f7ff ff3d 	bl	8000c7c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000e02:	2120      	movs	r1, #32
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 fb36 	bl	8002478 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	f1c3 0307 	rsb	r3, r3, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e00b      	b.n	8000e48 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000e48:	bf00      	nop
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 fb12 	bl	8002478 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f7      	bne.n	8000e4a <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9c1      	bls.n	8000dea <DHT_Read+0xc>
	}
	return i;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000e78:	f7ff ff60 	bl	8000d3c <DHT_Start>
	Presence = DHT_Check_Response ();
 8000e7c:	f7ff ff81 	bl	8000d82 <DHT_Check_Response>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <DHT_GetData+0xc8>)
 8000e86:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000e88:	f7ff ffa9 	bl	8000dde <DHT_Read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <DHT_GetData+0xcc>)
 8000e92:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000e94:	f7ff ffa3 	bl	8000dde <DHT_Read>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <DHT_GetData+0xd0>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000ea0:	f7ff ff9d 	bl	8000dde <DHT_Read>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <DHT_GetData+0xd4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000eac:	f7ff ff97 	bl	8000dde <DHT_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <DHT_GetData+0xd8>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000eb8:	f7ff ff91 	bl	8000dde <DHT_Read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <DHT_GetData+0xcc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <DHT_GetData+0xd0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <DHT_GetData+0xd4>)
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <DHT_GetData+0xd8>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d123      	bne.n	8000f2e <DHT_GetData+0xbe>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->TemperatureD = Temp_byte1;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <DHT_GetData+0xd4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->HumidityD = Rh_byte1;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <DHT_GetData+0xcc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edc3 7a02 	vstr	s15, [r3, #8]

			DHT_Data->TemperatureU = Temp_byte2;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <DHT_GetData+0xd8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->HumidityU = Rh_byte2;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <DHT_GetData+0xd0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a03 	vstr	s15, [r3, #12]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000092 	.word	0x20000092
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	2000008d 	.word	0x2000008d
 8000f44:	2000008e 	.word	0x2000008e
 8000f48:	2000008f 	.word	0x2000008f
 8000f4c:	20000090 	.word	0x20000090

08000f50 <TruncatedMean_Init>:
#include "TruncateMean.h"
void TruncatedMean_Init(TruncatedMeanData *data) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < SAMPLES; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e011      	b.n	8000f82 <TruncatedMean_Init+0x32>
    data->temperature[i] = 0;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
    data->humidity[i] = 0;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	33c8      	adds	r3, #200	; 0xc8
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES; i++) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2bc7      	cmp	r3, #199	; 0xc7
 8000f86:	ddea      	ble.n	8000f5e <TruncatedMean_Init+0xe>
  }
  data->index = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <TruncatedMean_AddSample>:

void TruncatedMean_AddSample(TruncatedMeanData *data, float temperature, float humidity) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa8:	edc7 0a01 	vstr	s1, [r7, #4]
  data->temperature[data->index] = temperature;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
  data->humidity[data->index] = humidity;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	33c8      	adds	r3, #200	; 0xc8
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
  data->index = (data->index + 1) % SAMPLES;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <TruncatedMean_AddSample+0x60>)
 8000fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fdc:	1199      	asrs	r1, r3, #6
 8000fde:	17d3      	asrs	r3, r2, #31
 8000fe0:	1acb      	subs	r3, r1, r3
 8000fe2:	21c8      	movs	r1, #200	; 0xc8
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	51eb851f 	.word	0x51eb851f

08001000 <TruncatedMean_CalculateTemperature>:

float TruncatedMean_CalculateTemperature(TruncatedMeanData *data) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  float sum = 0;
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

  float min = data->temperature[0];
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
  float max = data->temperature[0];
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	e034      	b.n	800108a <TruncatedMean_CalculateTemperature+0x8a>
    sum += data->temperature[i];
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->temperature[i] < min) {
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ed97 7a04 	vldr	s14, [r7, #16]
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	dd05      	ble.n	800105e <TruncatedMean_CalculateTemperature+0x5e>
      min = data->temperature[i];
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
    }
    if (data->temperature[i] > max) {
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ed97 7a03 	vldr	s14, [r7, #12]
 800106e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	d505      	bpl.n	8001084 <TruncatedMean_CalculateTemperature+0x84>
      max = data->temperature[i];
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3301      	adds	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2bc7      	cmp	r3, #199	; 0xc7
 800108e:	ddc7      	ble.n	8001020 <TruncatedMean_CalculateTemperature+0x20>
    }
  }
  sum -= min;
 8001090:	ed97 7a05 	vldr	s14, [r7, #20]
 8001094:	edd7 7a04 	vldr	s15, [r7, #16]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 80010a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ac:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010d0 <TruncatedMean_CalculateTemperature+0xd0>
 80010b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	43460000 	.word	0x43460000

080010d4 <TruncatedMean_CalculateHumidity>:

float TruncatedMean_CalculateHumidity(TruncatedMeanData *data) {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  float sum = 0;
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  float min = data->humidity[0];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80010e8:	613b      	str	r3, [r7, #16]
  float max = data->humidity[0];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80010f0:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	e039      	b.n	800116c <TruncatedMean_CalculateHumidity+0x98>
    sum += data->humidity[i];
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	33c8      	adds	r3, #200	; 0xc8
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ed97 7a05 	vldr	s14, [r7, #20]
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->humidity[i] < min) {
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	33c8      	adds	r3, #200	; 0xc8
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ed97 7a04 	vldr	s14, [r7, #16]
 8001124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dd06      	ble.n	800113c <TruncatedMean_CalculateHumidity+0x68>
      min = data->humidity[i];
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	33c8      	adds	r3, #200	; 0xc8
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
    }
    if (data->humidity[i] > max) {
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	33c8      	adds	r3, #200	; 0xc8
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ed97 7a03 	vldr	s14, [r7, #12]
 800114e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d506      	bpl.n	8001166 <TruncatedMean_CalculateHumidity+0x92>
      max = data->humidity[i];
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	33c8      	adds	r3, #200	; 0xc8
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2bc7      	cmp	r3, #199	; 0xc7
 8001170:	ddc2      	ble.n	80010f8 <TruncatedMean_CalculateHumidity+0x24>
    }
  }
  sum -= min;
 8001172:	ed97 7a05 	vldr	s14, [r7, #20]
 8001176:	edd7 7a04 	vldr	s15, [r7, #16]
 800117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117e:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 8001182:	ed97 7a05 	vldr	s14, [r7, #20]
 8001186:	edd7 7a03 	vldr	s15, [r7, #12]
 800118a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118e:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 8001192:	edd7 7a05 	vldr	s15, [r7, #20]
 8001196:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011b0 <TruncatedMean_CalculateHumidity+0xdc>
 800119a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800119e:	eef0 7a66 	vmov.f32	s15, s13
}
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	43460000 	.word	0x43460000

080011b4 <HAL_UART_RxCpltCallback>:
char bufferH[10],bufferT[10];
char msgRx;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive_IT(&huart1, &msgRx, 1) == HAL_OK && msgRx==one) {
 80011bc:	2201      	movs	r2, #1
 80011be:	490c      	ldr	r1, [pc, #48]	; (80011f0 <HAL_UART_RxCpltCallback+0x3c>)
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <HAL_UART_RxCpltCallback+0x40>)
 80011c2:	f003 f93d 	bl	8004440 <HAL_UART_Receive_IT>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10c      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x32>
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_UART_RxCpltCallback+0x3c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b31      	cmp	r3, #49	; 0x31
 80011d2:	d108      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x32>
			       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <HAL_UART_RxCpltCallback+0x44>)
 80011dc:	f001 f964 	bl	80024a8 <HAL_GPIO_WritePin>
			       StartSystem=true;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_UART_RxCpltCallback+0x48>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]

	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200007ee 	.word	0x200007ee
 80011f4:	200000e0 	.word	0x200000e0
 80011f8:	48001000 	.word	0x48001000
 80011fc:	200007d0 	.word	0x200007d0

08001200 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if( StartSystem==true){
 8001208:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8252 	beq.w	80016b6 <HAL_TIM_PeriodElapsedCallback+0x4b6>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	4888      	ldr	r0, [pc, #544]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800121a:	f001 f945 	bl	80024a8 <HAL_GPIO_WritePin>
	DHT_GetData(&DHT11_Data);
 800121e:	4888      	ldr	r0, [pc, #544]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001220:	f7ff fe26 	bl	8000e70 <DHT_GetData>
	//lettura dati
	Temperature = DHT11_Data.TemperatureD +(0.1)*DHT11_Data.TemperatureU;
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f98d 	bl	8000548 <__aeabi_f2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b83      	ldr	r3, [pc, #524]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	a37c      	add	r3, pc, #496	; (adr r3, 8001430 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9d9 	bl	80005f8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff f81d 	bl	800028c <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fc8f 	bl	8000b7c <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4a78      	ldr	r2, [pc, #480]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001262:	6013      	str	r3, [r2, #0]
	Humidity =    DHT11_Data.HumidityD +(0.1)*DHT11_Data.HumidityU;
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	4604      	mov	r4, r0
 8001270:	460d      	mov	r5, r1
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f966 	bl	8000548 <__aeabi_f2d>
 800127c:	a36c      	add	r3, pc, #432	; (adr r3, 8001430 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9b9 	bl	80005f8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7fe fffd 	bl	800028c <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc6f 	bl	8000b7c <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012a2:	6013      	str	r3, [r2, #0]
	if(modo==0){
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 815b 	bne.w	8001564 <HAL_TIM_PeriodElapsedCallback+0x364>
            	if(i<=SAMPLES){
 80012ae:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2bc8      	cmp	r3, #200	; 0xc8
 80012b4:	f300 80e0 	bgt.w	8001478 <HAL_TIM_PeriodElapsedCallback+0x278>
            			TruncatedMean_AddSample(&data,Temperature,Humidity);
 80012b8:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	eef0 0a47 	vmov.f32	s1, s14
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	4861      	ldr	r0, [pc, #388]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012ce:	f7ff fe65 	bl	8000f9c <TruncatedMean_AddSample>
						sprintf(bufferT, "Cattura%d:",i);
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	495f      	ldr	r1, [pc, #380]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012da:	4860      	ldr	r0, [pc, #384]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012dc:	f004 fae0 	bl	80058a0 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80012e0:	485e      	ldr	r0, [pc, #376]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012e2:	f7fe ff75 	bl	80001d0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	495b      	ldr	r1, [pc, #364]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012f0:	485b      	ldr	r0, [pc, #364]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012f2:	f003 f81b 	bl	800432c <HAL_UART_Transmit>
						gcvt(Temperature, sizeof(Temperature), bufferT);
 80012f6:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f924 	bl	8000548 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4955      	ldr	r1, [pc, #340]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001306:	2004      	movs	r0, #4
 8001308:	ec43 2b10 	vmov	d0, r2, r3
 800130c:	f004 fa72 	bl	80057f4 <gcvt>
						HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001310:	4852      	ldr	r0, [pc, #328]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001312:	f7fe ff5d 	bl	80001d0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	494f      	ldr	r1, [pc, #316]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001320:	484f      	ldr	r0, [pc, #316]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001322:	f003 f803 	bl	800432c <HAL_UART_Transmit>
						sprintf(bufferT, "\r\n");
 8001326:	494f      	ldr	r1, [pc, #316]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800132a:	f004 fab9 	bl	80058a0 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 800132e:	484b      	ldr	r0, [pc, #300]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001330:	f7fe ff4e 	bl	80001d0 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4947      	ldr	r1, [pc, #284]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800133e:	4848      	ldr	r0, [pc, #288]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001340:	f002 fff4 	bl	800432c <HAL_UART_Transmit>

						if(i==0){
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d16b      	bne.n	8001424 <HAL_TIM_PeriodElapsedCallback+0x224>
							//Trasmissione Temp
							 sprintf(bufferT, "TMP:");
 800134c:	4946      	ldr	r1, [pc, #280]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800134e:	4843      	ldr	r0, [pc, #268]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001350:	f004 faa6 	bl	80058a0 <siprintf>
							 HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001356:	f7fe ff3b 	bl	80001d0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	493e      	ldr	r1, [pc, #248]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001364:	483e      	ldr	r0, [pc, #248]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001366:	f002 ffe1 	bl	800432c <HAL_UART_Transmit>
							  gcvt(Temperature, sizeof(Temperature), bufferT);
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8ea 	bl	8000548 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4938      	ldr	r1, [pc, #224]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800137a:	2004      	movs	r0, #4
 800137c:	ec43 2b10 	vmov	d0, r2, r3
 8001380:	f004 fa38 	bl	80057f4 <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001384:	4835      	ldr	r0, [pc, #212]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001386:	f7fe ff23 	bl	80001d0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	4932      	ldr	r1, [pc, #200]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001396:	f002 ffc9 	bl	800432c <HAL_UART_Transmit>
							   sprintf(bufferT, "\r");
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800139c:	482f      	ldr	r0, [pc, #188]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800139e:	f004 fa7f 	bl	80058a0 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80013a2:	482e      	ldr	r0, [pc, #184]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013a4:	f7fe ff14 	bl	80001d0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	492a      	ldr	r1, [pc, #168]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013b2:	482b      	ldr	r0, [pc, #172]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80013b4:	f002 ffba 	bl	800432c <HAL_UART_Transmit>

							   //Trasmissione Umidità
							   sprintf(bufferH, "HDY:");
 80013b8:	492d      	ldr	r1, [pc, #180]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80013ba:	482e      	ldr	r0, [pc, #184]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013bc:	f004 fa70 	bl	80058a0 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 80013c0:	482c      	ldr	r0, [pc, #176]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013c2:	f7fe ff05 	bl	80001d0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	4929      	ldr	r1, [pc, #164]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80013d2:	f002 ffab 	bl	800432c <HAL_UART_Transmit>
							   gcvt(Humidity, sizeof(Humidity), bufferH);
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4923      	ldr	r1, [pc, #140]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013e6:	2004      	movs	r0, #4
 80013e8:	ec43 2b10 	vmov	d0, r2, r3
 80013ec:	f004 fa02 	bl	80057f4 <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 80013f0:	4820      	ldr	r0, [pc, #128]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80013f2:	f7fe feed 	bl	80001d0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	491d      	ldr	r1, [pc, #116]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001402:	f002 ff93 	bl	800432c <HAL_UART_Transmit>
							    sprintf(bufferH, "\r\n");
 8001406:	4917      	ldr	r1, [pc, #92]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001408:	481a      	ldr	r0, [pc, #104]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800140a:	f004 fa49 	bl	80058a0 <siprintf>
							     HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800140e:	4819      	ldr	r0, [pc, #100]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001410:	f7fe fede 	bl	80001d0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	4915      	ldr	r1, [pc, #84]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001420:	f002 ff84 	bl	800432c <HAL_UART_Transmit>


						}
						i++;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800142c:	6013      	str	r3, [r2, #0]
	}

 }


}
 800142e:	e142      	b.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x4b6>
 8001430:	9999999a 	.word	0x9999999a
 8001434:	3fb99999 	.word	0x3fb99999
 8001438:	200007d0 	.word	0x200007d0
 800143c:	48001000 	.word	0x48001000
 8001440:	20000168 	.word	0x20000168
 8001444:	200007bc 	.word	0x200007bc
 8001448:	200007c0 	.word	0x200007c0
 800144c:	200007cc 	.word	0x200007cc
 8001450:	200007d4 	.word	0x200007d4
 8001454:	20000178 	.word	0x20000178
 8001458:	08008348 	.word	0x08008348
 800145c:	200007e4 	.word	0x200007e4
 8001460:	200000e0 	.word	0x200000e0
 8001464:	08008354 	.word	0x08008354
 8001468:	08008358 	.word	0x08008358
 800146c:	08008360 	.word	0x08008360
 8001470:	08008364 	.word	0x08008364
 8001474:	200007d8 	.word	0x200007d8
						i=0;
 8001478:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
						float TmpMean= TruncatedMean_CalculateTemperature(&data);
 800147e:	4891      	ldr	r0, [pc, #580]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001480:	f7ff fdbe 	bl	8001000 <TruncatedMean_CalculateTemperature>
 8001484:	ed87 0a03 	vstr	s0, [r7, #12]
						float TmpHmdy= TruncatedMean_CalculateHumidity(&data);
 8001488:	488e      	ldr	r0, [pc, #568]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800148a:	f7ff fe23 	bl	80010d4 <TruncatedMean_CalculateHumidity>
 800148e:	ed87 0a02 	vstr	s0, [r7, #8]
            			sprintf(bufferT, "TMP:");
 8001492:	498d      	ldr	r1, [pc, #564]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001494:	488d      	ldr	r0, [pc, #564]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001496:	f004 fa03 	bl	80058a0 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 800149a:	488c      	ldr	r0, [pc, #560]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800149c:	f7fe fe98 	bl	80001d0 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	4988      	ldr	r1, [pc, #544]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014aa:	4889      	ldr	r0, [pc, #548]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80014ac:	f002 ff3e 	bl	800432c <HAL_UART_Transmit>
            			gcvt(TmpMean, sizeof(TmpMean), bufferT);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4984      	ldr	r1, [pc, #528]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014bc:	2004      	movs	r0, #4
 80014be:	ec43 2b10 	vmov	d0, r2, r3
 80014c2:	f004 f997 	bl	80057f4 <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80014c6:	4881      	ldr	r0, [pc, #516]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014c8:	f7fe fe82 	bl	80001d0 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	497d      	ldr	r1, [pc, #500]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014d6:	487e      	ldr	r0, [pc, #504]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80014d8:	f002 ff28 	bl	800432c <HAL_UART_Transmit>
            			sprintf(bufferT, "\r");
 80014dc:	497d      	ldr	r1, [pc, #500]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80014de:	487b      	ldr	r0, [pc, #492]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014e0:	f004 f9de 	bl	80058a0 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80014e4:	4879      	ldr	r0, [pc, #484]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014e6:	f7fe fe73 	bl	80001d0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	4976      	ldr	r1, [pc, #472]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80014f4:	4876      	ldr	r0, [pc, #472]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80014f6:	f002 ff19 	bl	800432c <HAL_UART_Transmit>
            			sprintf(bufferH, "HDY:");
 80014fa:	4977      	ldr	r1, [pc, #476]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80014fc:	4877      	ldr	r0, [pc, #476]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80014fe:	f004 f9cf 	bl	80058a0 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001502:	4876      	ldr	r0, [pc, #472]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001504:	f7fe fe64 	bl	80001d0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4972      	ldr	r1, [pc, #456]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001512:	486f      	ldr	r0, [pc, #444]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001514:	f002 ff0a 	bl	800432c <HAL_UART_Transmit>
            			gcvt(TmpHmdy, sizeof(TmpHmdy), bufferH);
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f7ff f815 	bl	8000548 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	496e      	ldr	r1, [pc, #440]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001524:	2004      	movs	r0, #4
 8001526:	ec43 2b10 	vmov	d0, r2, r3
 800152a:	f004 f963 	bl	80057f4 <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800152e:	486b      	ldr	r0, [pc, #428]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001530:	f7fe fe4e 	bl	80001d0 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	4967      	ldr	r1, [pc, #412]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800153e:	4864      	ldr	r0, [pc, #400]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001540:	f002 fef4 	bl	800432c <HAL_UART_Transmit>
            			sprintf(bufferH, "\r\n");
 8001544:	4966      	ldr	r1, [pc, #408]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001546:	4865      	ldr	r0, [pc, #404]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001548:	f004 f9aa 	bl	80058a0 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800154c:	4863      	ldr	r0, [pc, #396]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800154e:	f7fe fe3f 	bl	80001d0 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	4960      	ldr	r1, [pc, #384]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800155c:	485c      	ldr	r0, [pc, #368]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800155e:	f002 fee5 	bl	800432c <HAL_UART_Transmit>
}
 8001562:	e0a8      	b.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x4b6>
					if((Temperature!=LastTemperature)||(LastHumidity!=Humidity)){
 8001564:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb4 7a67 	vcmp.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d10b      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x392>
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb4 7a67 	vcmp.f32	s14, s15
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	f000 8092 	beq.w	80016b6 <HAL_TIM_PeriodElapsedCallback+0x4b6>
						if (Temperature - LastTemperature >= DT || LastTemperature - Temperature >= DT ) {
 8001592:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	da0e      	bge.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x3ce>
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	db6b      	blt.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x4a6>
							sprintf(bufferT, "TMP:");
 80015ce:	493e      	ldr	r1, [pc, #248]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80015d0:	483e      	ldr	r0, [pc, #248]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80015d2:	f004 f965 	bl	80058a0 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80015d6:	483d      	ldr	r0, [pc, #244]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80015d8:	f7fe fdfa 	bl	80001d0 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	4939      	ldr	r1, [pc, #228]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80015e6:	483a      	ldr	r0, [pc, #232]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80015e8:	f002 fea0 	bl	800432c <HAL_UART_Transmit>
							gcvt(Temperature, sizeof(Temperature), bufferT);
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4934      	ldr	r1, [pc, #208]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80015fc:	2004      	movs	r0, #4
 80015fe:	ec43 2b10 	vmov	d0, r2, r3
 8001602:	f004 f8f7 	bl	80057f4 <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001606:	4831      	ldr	r0, [pc, #196]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001608:	f7fe fde2 	bl	80001d0 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	492d      	ldr	r1, [pc, #180]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001616:	482e      	ldr	r0, [pc, #184]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001618:	f002 fe88 	bl	800432c <HAL_UART_Transmit>
							sprintf(bufferT, "\r");
 800161c:	492d      	ldr	r1, [pc, #180]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 800161e:	482b      	ldr	r0, [pc, #172]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001620:	f004 f93e 	bl	80058a0 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001624:	4829      	ldr	r0, [pc, #164]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001626:	f7fe fdd3 	bl	80001d0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	4926      	ldr	r1, [pc, #152]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001634:	4826      	ldr	r0, [pc, #152]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001636:	f002 fe79 	bl	800432c <HAL_UART_Transmit>
							sprintf(bufferH, "HDY:");
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800163c:	4827      	ldr	r0, [pc, #156]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800163e:	f004 f92f 	bl	80058a0 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001642:	4826      	ldr	r0, [pc, #152]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001652:	481f      	ldr	r0, [pc, #124]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001654:	f002 fe6a 	bl	800432c <HAL_UART_Transmit>
							gcvt(Humidity, sizeof(Humidity), bufferH);
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	491d      	ldr	r1, [pc, #116]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001668:	2004      	movs	r0, #4
 800166a:	ec43 2b10 	vmov	d0, r2, r3
 800166e:	f004 f8c1 	bl	80057f4 <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001672:	481a      	ldr	r0, [pc, #104]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001674:	f7fe fdac 	bl	80001d0 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001682:	4813      	ldr	r0, [pc, #76]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001684:	f002 fe52 	bl	800432c <HAL_UART_Transmit>
							sprintf(bufferH, "\r\n");
 8001688:	4915      	ldr	r1, [pc, #84]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800168c:	f004 f908 	bl	80058a0 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001692:	f7fe fd9d 	bl	80001d0 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	490f      	ldr	r1, [pc, #60]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80016a2:	f002 fe43 	bl	800432c <HAL_UART_Transmit>
						LastTemperature=Temperature;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80016ac:	6013      	str	r3, [r2, #0]
						LastHumidity=Humidity;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	200007d4 	.word	0x200007d4
 80016c4:	20000178 	.word	0x20000178
 80016c8:	08008358 	.word	0x08008358
 80016cc:	200007e4 	.word	0x200007e4
 80016d0:	200000e0 	.word	0x200000e0
 80016d4:	08008360 	.word	0x08008360
 80016d8:	08008364 	.word	0x08008364
 80016dc:	200007d8 	.word	0x200007d8
 80016e0:	08008354 	.word	0x08008354
 80016e4:	200007bc 	.word	0x200007bc
 80016e8:	200007c4 	.word	0x200007c4
 80016ec:	200007c8 	.word	0x200007c8
 80016f0:	200007c0 	.word	0x200007c0

080016f4 <main>:


int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f8:	f000 fb56 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f876 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f000 f91c 	bl	800193c <MX_GPIO_Init>
  MX_TIM16_Init();
 8001704:	f000 f8c2 	bl	800188c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001708:	f000 f8e8 	bl	80018dc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim16);
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <main+0xd0>)
 800170e:	f002 fb5f 	bl	8003dd0 <HAL_TIM_Base_Start_IT>
  TruncatedMean_Init(&data);
 8001712:	482d      	ldr	r0, [pc, #180]	; (80017c8 <main+0xd4>)
 8001714:	f7ff fc1c 	bl	8000f50 <TruncatedMean_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	482b      	ldr	r0, [pc, #172]	; (80017cc <main+0xd8>)
 8001720:	f000 fec2 	bl	80024a8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &msgRx, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	492a      	ldr	r1, [pc, #168]	; (80017d0 <main+0xdc>)
 8001728:	482a      	ldr	r0, [pc, #168]	; (80017d4 <main+0xe0>)
 800172a:	f002 fe89 	bl	8004440 <HAL_UART_Receive_IT>
  while (1)
  {

	 // if(msgRx==one){
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001734:	4825      	ldr	r0, [pc, #148]	; (80017cc <main+0xd8>)
 8001736:	f000 feb7 	bl	80024a8 <HAL_GPIO_WritePin>



	  if((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0 &&  StartSystem==true){
 800173a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d1f2      	bne.n	800172e <main+0x3a>
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <main+0xe4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <main+0x3a>
	 		  while((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0);
 8001750:	bf00      	nop
 8001752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0f8      	beq.n	8001752 <main+0x5e>
	 		  if(modo==0){
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <main+0xe8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d117      	bne.n	8001798 <main+0xa4>
	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176e:	4817      	ldr	r0, [pc, #92]	; (80017cc <main+0xd8>)
 8001770:	f000 fe9a 	bl	80024a8 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	4814      	ldr	r0, [pc, #80]	; (80017cc <main+0xd8>)
 800177c:	f000 fe94 	bl	80024a8 <HAL_GPIO_WritePin>
	 			  modo=1;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <main+0xe8>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
	 			  LastTemperature=0;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <main+0xec>)
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
	 			  LastHumidity=0;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <main+0xf0>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e7ca      	b.n	800172e <main+0x3a>


	 		  }else{
	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0xd8>)
 80017a0:	f000 fe82 	bl	80024a8 <HAL_GPIO_WritePin>
	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <main+0xd8>)
 80017ac:	f000 fe7c 	bl	80024a8 <HAL_GPIO_WritePin>
	 			  modo=0;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <main+0xe8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
	 			  i=0;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <main+0xf4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	 			  TruncatedMean_Init(&data);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <main+0xd4>)
 80017be:	f7ff fbc7 	bl	8000f50 <TruncatedMean_Init>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 80017c2:	e7b4      	b.n	800172e <main+0x3a>
 80017c4:	20000094 	.word	0x20000094
 80017c8:	20000178 	.word	0x20000178
 80017cc:	48001000 	.word	0x48001000
 80017d0:	200007ee 	.word	0x200007ee
 80017d4:	200000e0 	.word	0x200000e0
 80017d8:	200007d0 	.word	0x200007d0
 80017dc:	200007cc 	.word	0x200007cc
 80017e0:	200007c4 	.word	0x200007c4
 80017e4:	200007c8 	.word	0x200007c8
 80017e8:	200007d4 	.word	0x200007d4

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09e      	sub	sp, #120	; 0x78
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f6:	2228      	movs	r2, #40	; 0x28
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 f848 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	223c      	movs	r2, #60	; 0x3c
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f83a 	bl	8005890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181c:	2302      	movs	r3, #2
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001824:	2310      	movs	r3, #16
 8001826:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001828:	2300      	movs	r3, #0
 800182a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fe51 	bl	80024d8 <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800183c:	f000 f8d8 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001840:	230f      	movs	r3, #15
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001854:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fe7a 	bl	8003554 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001866:	f000 f8c3 	bl	80019f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800186a:	2301      	movs	r3, #1
 800186c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4618      	mov	r0, r3
 8001876:	f002 f8a3 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001880:	f000 f8b6 	bl	80019f0 <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3778      	adds	r7, #120	; 0x78
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_TIM16_Init+0x44>)
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <MX_TIM16_Init+0x48>)
 8001894:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 500000;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_TIM16_Init+0x44>)
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <MX_TIM16_Init+0x4c>)
 800189a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_TIM16_Init+0x44>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_TIM16_Init+0x44>)
 80018a4:	2264      	movs	r2, #100	; 0x64
 80018a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_TIM16_Init+0x44>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_TIM16_Init+0x44>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_TIM16_Init+0x44>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_TIM16_Init+0x44>)
 80018bc:	f002 fa30 	bl	8003d20 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80018c6:	f000 f893 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000094 	.word	0x20000094
 80018d4:	40014400 	.word	0x40014400
 80018d8:	0007a120 	.word	0x0007a120

080018dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_USART1_UART_Init+0x58>)
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <MX_USART1_UART_Init+0x5c>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_USART1_UART_Init+0x58>)
 80018e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_USART1_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_USART1_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_USART1_UART_Init+0x58>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_USART1_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_USART1_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_USART1_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_USART1_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART1_UART_Init+0x58>)
 8001920:	f002 fcb6 	bl	8004290 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 f861 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200000e0 	.word	0x200000e0
 8001938:	40013800 	.word	0x40013800

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_GPIO_Init+0xac>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198c:	6153      	str	r3, [r2, #20]
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_GPIO_Init+0xac>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_GPIO_Init+0xb0>)
 80019a2:	f000 fd81 	bl	80024a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80019a6:	2321      	movs	r3, #33	; 0x21
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f000 fbe2 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019c0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019c4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_GPIO_Init+0xb0>)
 80019da:	f000 fbd3 	bl	8002184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48001000 	.word	0x48001000

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <Error_Handler+0x8>
	...

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_MspInit+0x44>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_MspInit+0x44>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_MspInit+0x44>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_MspInit+0x44>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_MspInit+0x44>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_MspInit+0x44>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_TIM_Base_MspInit+0x44>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d113      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	6193      	str	r3, [r2, #24]
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2019      	movs	r0, #25
 8001a74:	f000 fad9 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a78:	2019      	movs	r0, #25
 8001a7a:	f000 faf2 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40014400 	.word	0x40014400
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x8c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12f      	bne.n	8001b12 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ae2:	2330      	movs	r3, #48	; 0x30
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af2:	2307      	movs	r3, #7
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_UART_MspInit+0x94>)
 8001afe:	f000 fb41 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2025      	movs	r0, #37	; 0x25
 8001b08:	f000 fa8f 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b0c:	2025      	movs	r0, #37	; 0x25
 8001b0e:	f000 faa8 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000800 	.word	0x48000800

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f95e 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b82:	f002 f98f 	bl	8003ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000094 	.word	0x20000094

08001b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <USART1_IRQHandler+0x10>)
 8001b96:	f002 fc97 	bl	80044c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000e0 	.word	0x200000e0

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f003 fe3d 	bl	800583c <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	e7fe      	b.n	8001be6 <_exit+0x12>

08001be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00a      	b.n	8001c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfa:	f3af 8000 	nop.w
 8001bfe:	4601      	mov	r1, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf0      	blt.n	8001bfa <_read+0x12>
  }

  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e009      	b.n	8001c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf1      	blt.n	8001c34 <_write+0x12>
  }
  return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_close>:

int _close(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	605a      	str	r2, [r3, #4]
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_isatty>:

int _isatty(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f003 fda2 	bl	800583c <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000a000 	.word	0x2000a000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	200007f0 	.word	0x200007f0
 8001d2c:	20000808 	.word	0x20000808

08001d30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d58:	f7ff ffea 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5e:	490d      	ldr	r1, [pc, #52]	; (8001d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <LoopForever+0xe>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d74:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <LoopForever+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f003 fd61 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d86:	f7ff fcb5 	bl	80016f4 <main>

08001d8a <LoopForever>:

LoopForever:
    b LoopForever
 8001d8a:	e7fe      	b.n	8001d8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d8c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d98:	08008670 	.word	0x08008670
  ldr r2, =_sbss
 8001d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001da0:	20000808 	.word	0x20000808

08001da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC1_2_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x28>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x28>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 f92b 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fe1a 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f943 	bl	800207e <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 f90b 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	200007f4 	.word	0x200007f4

08001e5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200007f4 	.word	0x200007f4

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e020      	b.n	80020fc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020e 	bic.w	r2, r2, #14
 80020c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	2b02      	cmp	r3, #2
 800211c:	d005      	beq.n	800212a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e027      	b.n	800217a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 020e 	bic.w	r2, r2, #14
 8002138:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
    } 
  }
  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e154      	b.n	800243e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8146 	beq.w	8002438 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x40>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0201 	and.w	r2, r3, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d123      	bne.n	80022b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0203 	and.w	r2, r3, #3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80a0 	beq.w	8002438 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_GPIO_Init+0x2d8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_GPIO_Init+0x2d8>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b55      	ldr	r3, [pc, #340]	; (800245c <HAL_GPIO_Init+0x2d8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002310:	4a53      	ldr	r2, [pc, #332]	; (8002460 <HAL_GPIO_Init+0x2dc>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800233a:	d019      	beq.n	8002370 <HAL_GPIO_Init+0x1ec>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a49      	ldr	r2, [pc, #292]	; (8002464 <HAL_GPIO_Init+0x2e0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_GPIO_Init+0x1e8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a48      	ldr	r2, [pc, #288]	; (8002468 <HAL_GPIO_Init+0x2e4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_GPIO_Init+0x1e4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_GPIO_Init+0x2e8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x1e0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a46      	ldr	r2, [pc, #280]	; (8002470 <HAL_GPIO_Init+0x2ec>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_Init+0x1dc>
 800235c:	2304      	movs	r3, #4
 800235e:	e008      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002360:	2305      	movs	r3, #5
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002364:	2303      	movs	r3, #3
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002370:	2300      	movs	r3, #0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002382:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_GPIO_Init+0x2dc>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023de:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002408:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002432:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f aea3 	bne.w	8002194 <HAL_GPIO_Init+0x10>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	48000400 	.word	0x48000400
 8002468:	48000800 	.word	0x48000800
 800246c:	48000c00 	.word	0x48000c00
 8002470:	48001000 	.word	0x48001000
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80024de:	af00      	add	r7, sp, #0
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f001 b823 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 817d 	beq.w	800280e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002514:	4bbc      	ldr	r3, [pc, #752]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002520:	4bb9      	ldr	r3, [pc, #740]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d15c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x10e>
 800252c:	4bb6      	ldr	r3, [pc, #728]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d155      	bne.n	80025e6 <HAL_RCC_OscConfig+0x10e>
 800253a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800254e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x94>
 8002566:	4ba8      	ldr	r3, [pc, #672]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e015      	b.n	8002598 <HAL_RCC_OscConfig+0xc0>
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002584:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002588:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002594:	4b9c      	ldr	r3, [pc, #624]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f042 0220 	orr.w	r2, r2, #32
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f202 	lsl.w	r2, r1, r2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 811f 	beq.w	800280c <HAL_RCC_OscConfig+0x334>
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8116 	bne.w	800280c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f000 bfaf 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x12e>
 80025f8:	4b83      	ldr	r3, [pc, #524]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a82      	ldr	r2, [pc, #520]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e036      	b.n	8002674 <HAL_RCC_OscConfig+0x19c>
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x158>
 8002616:	4b7c      	ldr	r3, [pc, #496]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a7b      	ldr	r2, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b79      	ldr	r3, [pc, #484]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a78      	ldr	r2, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e021      	b.n	8002674 <HAL_RCC_OscConfig+0x19c>
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x184>
 8002642:	4b71      	ldr	r3, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a70      	ldr	r2, [pc, #448]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6e      	ldr	r3, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6d      	ldr	r2, [pc, #436]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0x19c>
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a69      	ldr	r2, [pc, #420]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a66      	ldr	r2, [pc, #408]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f023 020f 	bic.w	r2, r3, #15
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	495f      	ldr	r1, [pc, #380]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800268a:	4313      	orrs	r3, r2
 800268c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d059      	beq.n	8002752 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7ff fbdd 	bl	8001e5c <HAL_GetTick>
 80026a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fbd8 	bl	8001e5c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bf43 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 80026be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x218>
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e015      	b.n	800271c <HAL_RCC_OscConfig+0x244>
 80026f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800270c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002720:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002724:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002728:	fa92 f2a2 	rbit	r2, r2
 800272c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002730:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ab      	beq.n	80026a8 <HAL_RCC_OscConfig+0x1d0>
 8002750:	e05d      	b.n	800280e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fb83 	bl	8001e5c <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff fb7e 	bl	8001e5c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d902      	bls.n	8002772 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f000 bee9 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 8002772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002776:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002786:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2cc>
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e015      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f8>
 80027a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_RCC_OscConfig+0x330>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027dc:	fa92 f2a2 	rbit	r2, r2
 80027e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80027e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ab      	bne.n	800275c <HAL_RCC_OscConfig+0x284>
 8002804:	e003      	b.n	800280e <HAL_RCC_OscConfig+0x336>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 817d 	beq.w	8002b1e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002824:	4ba6      	ldr	r3, [pc, #664]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002830:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d172      	bne.n	8002922 <HAL_RCC_OscConfig+0x44a>
 800283c:	4ba0      	ldr	r3, [pc, #640]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d16c      	bne.n	8002922 <HAL_RCC_OscConfig+0x44a>
 8002848:	2302      	movs	r3, #2
 800284a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800285a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_OscConfig+0x3a0>
 8002872:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e013      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c8>
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002890:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCC_OscConfig+0x410>
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f000 be2e 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	21f8      	movs	r1, #248	; 0xf8
 80028fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002906:	fa91 f1a1 	rbit	r1, r1
 800290a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800290e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002912:	fab1 f181 	clz	r1, r1
 8002916:	b2c9      	uxtb	r1, r1
 8002918:	408b      	lsls	r3, r1
 800291a:	4969      	ldr	r1, [pc, #420]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002920:	e0fd      	b.n	8002b1e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8088 	beq.w	8002a44 <HAL_RCC_OscConfig+0x56c>
 8002934:	2301      	movs	r3, #1
 8002936:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002946:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fa7c 	bl	8001e5c <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fa77 	bl	8001e5c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	f000 bde2 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002992:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4d8>
 80029aa:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e013      	b.n	80029d8 <HAL_RCC_OscConfig+0x500>
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2202      	movs	r2, #2
 80029da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029e2:	fa92 f2a2 	rbit	r2, r2
 80029e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0af      	beq.n	800296a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	21f8      	movs	r1, #248	; 0xf8
 8002a20:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a28:	fa91 f1a1 	rbit	r1, r1
 8002a2c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a30:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a34:	fab1 f181 	clz	r1, r1
 8002a38:	b2c9      	uxtb	r1, r1
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	4920      	ldr	r1, [pc, #128]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
 8002a42:	e06c      	b.n	8002b1e <HAL_RCC_OscConfig+0x646>
 8002a44:	2301      	movs	r3, #1
 8002a46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f9f4 	bl	8001e5c <HAL_GetTick>
 8002a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff f9ef 	bl	8001e5c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	f000 bd5a 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 8002a90:	2302      	movs	r3, #2
 8002a92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d104      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5ec>
 8002aba:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_RCC_OscConfig+0x5e8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e015      	b.n	8002aec <HAL_RCC_OscConfig+0x614>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002adc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ae8:	4bc8      	ldr	r3, [pc, #800]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002af2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002af6:	fa92 f2a2 	rbit	r2, r2
 8002afa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002afe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b02:	fab2 f282 	clz	r2, r2
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f042 0220 	orr.w	r2, r2, #32
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ad      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8110 	beq.w	8002d54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d079      	beq.n	8002c38 <HAL_RCC_OscConfig+0x760>
 8002b44:	2301      	movs	r3, #1
 8002b46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4bab      	ldr	r3, [pc, #684]	; (8002e10 <HAL_RCC_OscConfig+0x938>)
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f975 	bl	8001e5c <HAL_GetTick>
 8002b72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7ff f970 	bl	8001e5c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f000 bcdb 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ba8:	2202      	movs	r2, #2
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bcc:	2202      	movs	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be8:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f1a3 	rbit	r1, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c0e:	6019      	str	r1, [r3, #0]
  return result;
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0a0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x6a0>
 8002c36:	e08d      	b.n	8002d54 <HAL_RCC_OscConfig+0x87c>
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c5a:	601a      	str	r2, [r3, #0]
  return result;
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x938>)
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f8ef 	bl	8001e5c <HAL_GetTick>
 8002c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c84:	f7ff f8ea 	bl	8001e5c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d902      	bls.n	8002c9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	f000 bc55 	b.w	8003544 <HAL_RCC_OscConfig+0x106c>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d12:	2102      	movs	r1, #2
 8002d14:	6019      	str	r1, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f1a3 	rbit	r1, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d2c:	6019      	str	r1, [r3, #0]
  return result;
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d197      	bne.n	8002c84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 81a1 	beq.w	80030ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d116      	bne.n	8002daa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002da2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x93c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11a      	bne.n	8002dec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_RCC_OscConfig+0x93c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_RCC_OscConfig+0x93c>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7ff f84b 	bl	8001e5c <HAL_GetTick>
 8002dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	e009      	b.n	8002de0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7ff f846 	bl	8001e5c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e3b1      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x93c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCC_OscConfig+0x940>
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCC_OscConfig+0x934>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	e03c      	b.n	8002e84 <HAL_RCC_OscConfig+0x9ac>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	10908120 	.word	0x10908120
 8002e14:	40007000 	.word	0x40007000
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x96a>
 8002e28:	4bc1      	ldr	r3, [pc, #772]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4ac0      	ldr	r2, [pc, #768]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	4bbe      	ldr	r3, [pc, #760]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4abd      	ldr	r2, [pc, #756]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e020      	b.n	8002e84 <HAL_RCC_OscConfig+0x9ac>
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x994>
 8002e52:	4bb7      	ldr	r3, [pc, #732]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4ab6      	ldr	r2, [pc, #728]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4bb4      	ldr	r3, [pc, #720]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4ab3      	ldr	r2, [pc, #716]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x9ac>
 8002e6c:	4bb0      	ldr	r3, [pc, #704]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4aaf      	ldr	r2, [pc, #700]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4bad      	ldr	r3, [pc, #692]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4aac      	ldr	r2, [pc, #688]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8081 	beq.w	8002f98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe ffe1 	bl	8001e5c <HAL_GetTick>
 8002e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe ffdc 	bl	8001e5c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e345      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002efe:	601a      	str	r2, [r3, #0]
  return result;
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d102      	bne.n	8002f24 <HAL_RCC_OscConfig+0xa4c>
 8002f1e:	4b84      	ldr	r3, [pc, #528]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	e013      	b.n	8002f4c <HAL_RCC_OscConfig+0xa74>
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f54:	2102      	movs	r1, #2
 8002f56:	6011      	str	r1, [r2, #0]
 8002f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	fa92 f1a2 	rbit	r1, r2
 8002f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f6e:	6011      	str	r1, [r2, #0]
  return result;
 8002f70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	fab2 f282 	clz	r2, r2
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f002 021f 	and.w	r2, r2, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d084      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x9c8>
 8002f96:	e07f      	b.n	8003098 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fe ff60 	bl	8001e5c <HAL_GetTick>
 8002f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe ff5b 	bl	8001e5c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e2c4      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003000:	601a      	str	r2, [r3, #0]
  return result;
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800300a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0xb4e>
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	e013      	b.n	800304e <HAL_RCC_OscConfig+0xb76>
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003052:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003056:	2102      	movs	r1, #2
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800305e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fa92 f1a2 	rbit	r1, r2
 8003068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003070:	6011      	str	r1, [r2, #0]
  return result;
 8003072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003076:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fab2 f282 	clz	r2, r2
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f002 021f 	and.w	r2, r2, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d184      	bne.n	8002fa2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003098:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8242 	beq.w	8003542 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0xc58>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	f000 8213 	beq.w	80034f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 8162 	bne.w	80033a2 <HAL_RCC_OscConfig+0xeca>
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80030e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003102:	601a      	str	r2, [r3, #0]
  return result;
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800310c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003118:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fe9a 	bl	8001e5c <HAL_GetTick>
 8003128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312c:	e00c      	b.n	8003148 <HAL_RCC_OscConfig+0xc70>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fe92 	bl	8001e5c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1fd      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800316c:	601a      	str	r2, [r3, #0]
  return result;
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d102      	bne.n	8003192 <HAL_RCC_OscConfig+0xcba>
 800318c:	4bb0      	ldr	r3, [pc, #704]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	e027      	b.n	80031e2 <HAL_RCC_OscConfig+0xd0a>
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800319a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fa93 f2a3 	rbit	r2, r3
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b9c      	ldr	r3, [pc, #624]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80031ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ee:	6011      	str	r1, [r2, #0]
 80031f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	fa92 f1a2 	rbit	r1, r2
 80031fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003202:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003206:	6011      	str	r1, [r2, #0]
  return result;
 8003208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d182      	bne.n	8003134 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	430b      	orrs	r3, r1
 8003250:	497f      	ldr	r1, [pc, #508]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800325e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800327a:	601a      	str	r2, [r3, #0]
  return result;
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003284:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fdde 	bl	8001e5c <HAL_GetTick>
 80032a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fdd9 	bl	8001e5c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e144      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032de:	601a      	str	r2, [r3, #0]
  return result;
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_OscConfig+0xe2c>
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e027      	b.n	8003354 <HAL_RCC_OscConfig+0xe7c>
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800330c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003358:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800335c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003366:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	fa92 f1a2 	rbit	r1, r2
 8003370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003374:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003378:	6011      	str	r1, [r2, #0]
  return result;
 800337a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fab2 f282 	clz	r2, r2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	f042 0220 	orr.w	r2, r2, #32
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d082      	beq.n	80032a6 <HAL_RCC_OscConfig+0xdce>
 80033a0:	e0cf      	b.n	8003542 <HAL_RCC_OscConfig+0x106a>
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033c6:	601a      	str	r2, [r3, #0]
  return result;
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	461a      	mov	r2, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fd38 	bl	8001e5c <HAL_GetTick>
 80033ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fd33 	bl	8001e5c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e09e      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800340e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800342a:	601a      	str	r2, [r3, #0]
  return result;
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003434:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d104      	bne.n	8003454 <HAL_RCC_OscConfig+0xf7c>
 800344a:	4b01      	ldr	r3, [pc, #4]	; (8003450 <HAL_RCC_OscConfig+0xf78>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	e029      	b.n	80034a4 <HAL_RCC_OscConfig+0xfcc>
 8003450:	40021000 	.word	0x40021000
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800345c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fa93 f2a3 	rbit	r2, r3
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_OscConfig+0x1078>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034b0:	6011      	str	r1, [r2, #0]
 80034b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	fa92 f1a2 	rbit	r1, r2
 80034c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034c8:	6011      	str	r1, [r2, #0]
  return result;
 80034ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d180      	bne.n	80033f2 <HAL_RCC_OscConfig+0xf1a>
 80034f0:	e027      	b.n	8003542 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01e      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_OscConfig+0x1078>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800350e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003512:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	429a      	cmp	r2, r3
 8003524:	d10b      	bne.n	800353e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003526:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800352a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000

08003554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b09e      	sub	sp, #120	; 0x78
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e162      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	498b      	ldr	r1, [pc, #556]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e14a      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	497f      	ldr	r1, [pc, #508]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80dc 	beq.w	8003780 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d13c      	bne.n	800364a <HAL_RCC_ClockConfig+0xf6>
 80035d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_ClockConfig+0xa6>
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	e00f      	b.n	800361a <HAL_RCC_ClockConfig+0xc6>
 80035fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	667b      	str	r3, [r7, #100]	; 0x64
 8003608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800360c:	663b      	str	r3, [r7, #96]	; 0x60
 800360e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800361e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003622:	fa92 f2a2 	rbit	r2, r2
 8003626:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0220 	orr.w	r2, r2, #32
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d17b      	bne.n	800373e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0f3      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d13c      	bne.n	80036cc <HAL_RCC_ClockConfig+0x178>
 8003652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_RCC_ClockConfig+0x128>
 8003676:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	e00f      	b.n	800369c <HAL_RCC_ClockConfig+0x148>
 800367c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
 800368a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
 8003690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80036a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a4:	fa92 f2a2 	rbit	r2, r2
 80036a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ac:	fab2 f282 	clz	r2, r2
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f042 0220 	orr.w	r2, r2, #32
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f002 021f 	and.w	r2, r2, #31
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f202 	lsl.w	r2, r1, r2
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d13a      	bne.n	800373e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b2      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
 80036cc:	2302      	movs	r3, #2
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x1a0>
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e00d      	b.n	8003710 <HAL_RCC_ClockConfig+0x1bc>
 80036f4:	2302      	movs	r3, #2
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	2302      	movs	r3, #2
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2202      	movs	r2, #2
 8003712:	61ba      	str	r2, [r7, #24]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	617a      	str	r2, [r7, #20]
  return result;
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e079      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 0203 	bic.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	491a      	ldr	r1, [pc, #104]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003750:	f7fe fb84 	bl	8001e5c <HAL_GetTick>
 8003754:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fe fb80 	bl	8001e5c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e061      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_RCC_ClockConfig+0x260>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 020c 	and.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	429a      	cmp	r2, r3
 800377e:	d1eb      	bne.n	8003758 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d214      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4906      	ldr	r1, [pc, #24]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_ClockConfig+0x25c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e040      	b.n	8003832 <HAL_RCC_ClockConfig+0x2de>
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCC_ClockConfig+0x2e8>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	491a      	ldr	r1, [pc, #104]	; (800383c <HAL_RCC_ClockConfig+0x2e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x2e8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4912      	ldr	r1, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x2e8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037f6:	f000 f829 	bl	800384c <HAL_RCC_GetSysClockFreq>
 80037fa:	4601      	mov	r1, r0
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_ClockConfig+0x2e8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	22f0      	movs	r2, #240	; 0xf0
 8003806:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	60fa      	str	r2, [r7, #12]
  return result;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	40d3      	lsrs	r3, r2
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x2ec>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	fa21 f303 	lsr.w	r3, r1, r3
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_ClockConfig+0x2f0>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCC_ClockConfig+0x2f4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fad2 	bl	8001dd4 <HAL_InitTick>
  
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3778      	adds	r7, #120	; 0x78
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	0800836c 	.word	0x0800836c
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004

0800384c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	b08b      	sub	sp, #44	; 0x2c
 8003850:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x30>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x36>
 800387a:	e03c      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc4>)
 800387e:	623b      	str	r3, [r7, #32]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003888:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800388c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	fa92 f2a2 	rbit	r2, r2
 8003894:	607a      	str	r2, [r7, #4]
  return result;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	40d3      	lsrs	r3, r2
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	220f      	movs	r2, #15
 80038b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	fa92 f2a2 	rbit	r2, r2
 80038b8:	60fa      	str	r2, [r7, #12]
  return result;
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	40d3      	lsrs	r3, r2
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038d4:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	e004      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	623b      	str	r3, [r7, #32]
      break;
 80038f4:	e002      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f8:	623b      	str	r3, [r7, #32]
      break;
 80038fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	372c      	adds	r7, #44	; 0x2c
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	007a1200 	.word	0x007a1200
 8003914:	08008384 	.word	0x08008384
 8003918:	08008394 	.word	0x08008394
 800391c:	003d0900 	.word	0x003d0900

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800393e:	f7ff ffef 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003942:	4601      	mov	r1, r0
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800394c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003950:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	fa92 f2a2 	rbit	r2, r2
 8003958:	603a      	str	r2, [r7, #0]
  return result;
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	fab2 f282 	clz	r2, r2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	40d3      	lsrs	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	0800837c 	.word	0x0800837c

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003982:	f7ff ffcd 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003986:	4601      	mov	r1, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003990:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	fa92 f2a2 	rbit	r2, r2
 800399c:	603a      	str	r2, [r7, #0]
  return result;
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	40d3      	lsrs	r3, r2
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	0800837c 	.word	0x0800837c

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b092      	sub	sp, #72	; 0x48
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80d4 	beq.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e4:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10e      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b45      	ldr	r3, [pc, #276]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a41      	ldr	r2, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fa19 	bl	8001e5c <HAL_GetTick>
 8003a2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fe fa15 	bl	8001e5c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e169      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8084 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d07c      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe f9c5 	bl	8001e5c <HAL_GetTick>
 8003ad2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe f9c1 	bl	8001e5c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e113      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003aec:	2302      	movs	r3, #2
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	2302      	movs	r3, #2
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
  return result;
 8003b04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d108      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b1a:	4b01      	ldr	r3, [pc, #4]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	e00d      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	10908100 	.word	0x10908100
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	4b78      	ldr	r3, [pc, #480]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	613a      	str	r2, [r7, #16]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	60fa      	str	r2, [r7, #12]
  return result;
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0b7      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b66:	4b6d      	ldr	r3, [pc, #436]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	496a      	ldr	r1, [pc, #424]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a65      	ldr	r2, [pc, #404]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b98:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f023 0203 	bic.w	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	495d      	ldr	r1, [pc, #372]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb6:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4956      	ldr	r1, [pc, #344]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd4:	4b51      	ldr	r3, [pc, #324]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	494e      	ldr	r1, [pc, #312]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f023 0210 	bic.w	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4947      	ldr	r1, [pc, #284]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c10:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	493f      	ldr	r1, [pc, #252]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f023 0220 	bic.w	r2, r3, #32
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4938      	ldr	r1, [pc, #224]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4c:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4930      	ldr	r1, [pc, #192]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6a:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	4929      	ldr	r1, [pc, #164]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4921      	ldr	r1, [pc, #132]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	491a      	ldr	r1, [pc, #104]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	4912      	ldr	r1, [pc, #72]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	490b      	ldr	r1, [pc, #44]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3748      	adds	r7, #72	; 0x48
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e049      	b.n	8003dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fe7c 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 f9e8 	bl	8004134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d001      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04a      	b.n	8003e7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x6c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d013      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x6c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x6c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x6c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x6c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d115      	bne.n	8003e68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d015      	beq.n	8003e7a <HAL_TIM_Base_Start_IT+0xaa>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d011      	beq.n	8003e7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	e008      	b.n	8003e7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e000      	b.n	8003e7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	00010007 	.word	0x00010007

08003ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0202 	mvn.w	r2, #2
 8003ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f905 	bl	80040f6 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8f7 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f908 	bl	800410a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0204 	mvn.w	r2, #4
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8db 	bl	80040f6 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8cd 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8de 	bl	800410a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0208 	mvn.w	r2, #8
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8b1 	bl	80040f6 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8a3 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8b4 	bl	800410a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d122      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d11b      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0210 	mvn.w	r2, #16
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f887 	bl	80040f6 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f879 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f88a 	bl	800410a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd f8ec 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f90a 	bl	8004268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004062:	d10e      	bne.n	8004082 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b80      	cmp	r3, #128	; 0x80
 8004070:	d107      	bne.n	8004082 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8fd 	bl	800427c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d10e      	bne.n	80040ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d107      	bne.n	80040ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f838 	bl	800411e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d10e      	bne.n	80040da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d107      	bne.n	80040da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0220 	mvn.w	r2, #32
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8bd 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3c      	ldr	r2, [pc, #240]	; (8004238 <TIM_Base_SetConfig+0x104>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a39      	ldr	r2, [pc, #228]	; (800423c <TIM_Base_SetConfig+0x108>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a38      	ldr	r2, [pc, #224]	; (8004240 <TIM_Base_SetConfig+0x10c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a37      	ldr	r2, [pc, #220]	; (8004244 <TIM_Base_SetConfig+0x110>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <TIM_Base_SetConfig+0x104>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d017      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <TIM_Base_SetConfig+0x108>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a29      	ldr	r2, [pc, #164]	; (8004240 <TIM_Base_SetConfig+0x10c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a28      	ldr	r2, [pc, #160]	; (8004244 <TIM_Base_SetConfig+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <TIM_Base_SetConfig+0x114>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <TIM_Base_SetConfig+0x118>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <TIM_Base_SetConfig+0x11c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <TIM_Base_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0xe8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a11      	ldr	r2, [pc, #68]	; (8004244 <TIM_Base_SetConfig+0x110>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0xe8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <TIM_Base_SetConfig+0x114>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0xe8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0f      	ldr	r2, [pc, #60]	; (800424c <TIM_Base_SetConfig+0x118>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xe8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <TIM_Base_SetConfig+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40013400 	.word	0x40013400
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e040      	b.n	8004324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fbec 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fc00 	bl	8004ad4 <UART_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fdc8 	bl	8004e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fe4f 	bl	8004fc0 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004340:	2b20      	cmp	r3, #32
 8004342:	d178      	bne.n	8004436 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Transmit+0x24>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e071      	b.n	8004438 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2221      	movs	r2, #33	; 0x21
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004362:	f7fd fd7b 	bl	8001e5c <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d108      	bne.n	8004394 <HAL_UART_Transmit+0x68>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e003      	b.n	800439c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800439c:	e030      	b.n	8004400 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 feb1 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e03c      	b.n	8004438 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	3302      	adds	r3, #2
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e008      	b.n	80043ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	b292      	uxth	r2, r2
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1c8      	bne.n	800439e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fe7a 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e005      	b.n	8004438 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004454:	2b20      	cmp	r3, #32
 8004456:	d132      	bne.n	80044be <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_UART_Receive_IT+0x24>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02b      	b.n	80044c0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	461a      	mov	r2, r3
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fe93 	bl	80051e0 <UART_Start_Receive_IT>
 80044ba:	4603      	mov	r3, r0
 80044bc:	e000      	b.n	80044c0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0ba      	sub	sp, #232	; 0xe8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80044f6:	4013      	ands	r3, r2
 80044f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d115      	bne.n	8004530 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00f      	beq.n	8004530 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 82ab 	beq.w	8004a7c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
      }
      return;
 800452e:	e2a5      	b.n	8004a7c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8117 	beq.w	8004768 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004546:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800454a:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_UART_IRQHandler+0x298>)
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 810a 	beq.w	8004768 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_UART_IRQHandler+0xbc>
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2201      	movs	r2, #1
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <HAL_UART_IRQHandler+0xec>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2202      	movs	r2, #2
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045aa:	f043 0204 	orr.w	r2, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0x11c>
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2204      	movs	r2, #4
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004616:	f043 0208 	orr.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <HAL_UART_IRQHandler+0x18a>
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8211 	beq.w	8004a80 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d005      	beq.n	80046aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800469e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04f      	beq.n	800474a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fe4c 	bl	8005348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d141      	bne.n	8004742 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d9      	bne.n	80046be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_UART_IRQHandler+0x29c>)
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fcf2 	bl	8002108 <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00f      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f9b4 	bl	8004aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00b      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9b0 	bl	8004aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e007      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9ac 	bl	8004aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004758:	e192      	b.n	8004a80 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	bf00      	nop
    return;
 800475c:	e190      	b.n	8004a80 <HAL_UART_IRQHandler+0x5b8>
 800475e:	bf00      	nop
 8004760:	04000120 	.word	0x04000120
 8004764:	08005411 	.word	0x08005411

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 814b 	bne.w	8004a08 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8144 	beq.w	8004a08 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 813d 	beq.w	8004a08 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	f040 80b5 	bne.w	8004910 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8164 	beq.w	8004a84 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 815c 	bcs.w	8004a84 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b20      	cmp	r3, #32
 80047de:	f000 8086 	beq.w	80048ee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800480c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004810:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004818:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1da      	bne.n	80047e2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800483c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004850:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004854:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004858:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e1      	bne.n	800482c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3308      	adds	r3, #8
 8004888:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800488c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800488e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004892:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800489a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e3      	bne.n	8004868 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e4      	bne.n	80048ae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fd fbd4 	bl	8002096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004900:	b29b      	uxth	r3, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8d7 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800490e:	e0b9      	b.n	8004a84 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80ab 	beq.w	8004a88 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004932:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80a6 	beq.w	8004a88 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
 8004960:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e4      	bne.n	800493c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	623b      	str	r3, [r7, #32]
   return(result);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004996:	633a      	str	r2, [r7, #48]	; 0x30
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e3      	bne.n	8004972 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0310 	bic.w	r3, r3, #16
 80049d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	69b9      	ldr	r1, [r7, #24]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	617b      	str	r3, [r7, #20]
   return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e4      	bne.n	80049be <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f85b 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a06:	e03f      	b.n	8004a88 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <HAL_UART_IRQHandler+0x56a>
 8004a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fed8 	bl	80057e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a30:	e02d      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01c      	beq.n	8004a8c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
    }
    return;
 8004a5a:	e017      	b.n	8004a8c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fce1 	bl	800543c <UART_EndTransmit_IT>
    return;
 8004a7a:	e008      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004a7c:	bf00      	nop
 8004a7e:	e006      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004a80:	bf00      	nop
 8004a82:	e004      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004a84:	bf00      	nop
 8004a86:	e002      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004a88:	bf00      	nop
 8004a8a:	e000      	b.n	8004a8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004a8c:	bf00      	nop
  }

}
 8004a8e:	37e8      	adds	r7, #232	; 0xe8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b02:	f023 030c 	bic.w	r3, r3, #12
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4aa7      	ldr	r2, [pc, #668]	; (8004dec <UART_SetConfig+0x318>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d120      	bne.n	8004b96 <UART_SetConfig+0xc2>
 8004b54:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <UART_SetConfig+0x31c>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d817      	bhi.n	8004b90 <UART_SetConfig+0xbc>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x94>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b85 	.word	0x08004b85
 8004b70:	08004b8b 	.word	0x08004b8b
 8004b74:	08004b7f 	.word	0x08004b7f
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e0b5      	b.n	8004cea <UART_SetConfig+0x216>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e0b2      	b.n	8004cea <UART_SetConfig+0x216>
 8004b84:	2304      	movs	r3, #4
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e0af      	b.n	8004cea <UART_SetConfig+0x216>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e0ac      	b.n	8004cea <UART_SetConfig+0x216>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e0a9      	b.n	8004cea <UART_SetConfig+0x216>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a96      	ldr	r2, [pc, #600]	; (8004df4 <UART_SetConfig+0x320>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d124      	bne.n	8004bea <UART_SetConfig+0x116>
 8004ba0:	4b93      	ldr	r3, [pc, #588]	; (8004df0 <UART_SetConfig+0x31c>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bac:	d011      	beq.n	8004bd2 <UART_SetConfig+0xfe>
 8004bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bb2:	d817      	bhi.n	8004be4 <UART_SetConfig+0x110>
 8004bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb8:	d011      	beq.n	8004bde <UART_SetConfig+0x10a>
 8004bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bbe:	d811      	bhi.n	8004be4 <UART_SetConfig+0x110>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0xf8>
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x104>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x110>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e08b      	b.n	8004cea <UART_SetConfig+0x216>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e088      	b.n	8004cea <UART_SetConfig+0x216>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e085      	b.n	8004cea <UART_SetConfig+0x216>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e082      	b.n	8004cea <UART_SetConfig+0x216>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e07f      	b.n	8004cea <UART_SetConfig+0x216>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a82      	ldr	r2, [pc, #520]	; (8004df8 <UART_SetConfig+0x324>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d124      	bne.n	8004c3e <UART_SetConfig+0x16a>
 8004bf4:	4b7e      	ldr	r3, [pc, #504]	; (8004df0 <UART_SetConfig+0x31c>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004bfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c00:	d011      	beq.n	8004c26 <UART_SetConfig+0x152>
 8004c02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c06:	d817      	bhi.n	8004c38 <UART_SetConfig+0x164>
 8004c08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c0c:	d011      	beq.n	8004c32 <UART_SetConfig+0x15e>
 8004c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c12:	d811      	bhi.n	8004c38 <UART_SetConfig+0x164>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <UART_SetConfig+0x14c>
 8004c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c1c:	d006      	beq.n	8004c2c <UART_SetConfig+0x158>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x164>
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e061      	b.n	8004cea <UART_SetConfig+0x216>
 8004c26:	2302      	movs	r3, #2
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e05e      	b.n	8004cea <UART_SetConfig+0x216>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e05b      	b.n	8004cea <UART_SetConfig+0x216>
 8004c32:	2308      	movs	r3, #8
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e058      	b.n	8004cea <UART_SetConfig+0x216>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e055      	b.n	8004cea <UART_SetConfig+0x216>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a6e      	ldr	r2, [pc, #440]	; (8004dfc <UART_SetConfig+0x328>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d124      	bne.n	8004c92 <UART_SetConfig+0x1be>
 8004c48:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <UART_SetConfig+0x31c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c54:	d011      	beq.n	8004c7a <UART_SetConfig+0x1a6>
 8004c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x1b8>
 8004c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c60:	d011      	beq.n	8004c86 <UART_SetConfig+0x1b2>
 8004c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x1b8>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x1a0>
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x1ac>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x1b8>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e037      	b.n	8004cea <UART_SetConfig+0x216>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e034      	b.n	8004cea <UART_SetConfig+0x216>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e031      	b.n	8004cea <UART_SetConfig+0x216>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e02e      	b.n	8004cea <UART_SetConfig+0x216>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e02b      	b.n	8004cea <UART_SetConfig+0x216>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5a      	ldr	r2, [pc, #360]	; (8004e00 <UART_SetConfig+0x32c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d124      	bne.n	8004ce6 <UART_SetConfig+0x212>
 8004c9c:	4b54      	ldr	r3, [pc, #336]	; (8004df0 <UART_SetConfig+0x31c>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ca8:	d011      	beq.n	8004cce <UART_SetConfig+0x1fa>
 8004caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cae:	d817      	bhi.n	8004ce0 <UART_SetConfig+0x20c>
 8004cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cb4:	d011      	beq.n	8004cda <UART_SetConfig+0x206>
 8004cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cba:	d811      	bhi.n	8004ce0 <UART_SetConfig+0x20c>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <UART_SetConfig+0x1f4>
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d006      	beq.n	8004cd4 <UART_SetConfig+0x200>
 8004cc6:	e00b      	b.n	8004ce0 <UART_SetConfig+0x20c>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e00d      	b.n	8004cea <UART_SetConfig+0x216>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e00a      	b.n	8004cea <UART_SetConfig+0x216>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e007      	b.n	8004cea <UART_SetConfig+0x216>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e004      	b.n	8004cea <UART_SetConfig+0x216>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e001      	b.n	8004cea <UART_SetConfig+0x216>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d15b      	bne.n	8004dac <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d827      	bhi.n	8004d4a <UART_SetConfig+0x276>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x22c>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	08004d4b 	.word	0x08004d4b
 8004d10:	08004d3b 	.word	0x08004d3b
 8004d14:	08004d4b 	.word	0x08004d4b
 8004d18:	08004d4b 	.word	0x08004d4b
 8004d1c:	08004d4b 	.word	0x08004d4b
 8004d20:	08004d43 	.word	0x08004d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7fe fe08 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8004d28:	61b8      	str	r0, [r7, #24]
        break;
 8004d2a:	e013      	b.n	8004d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fe fe26 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004d30:	61b8      	str	r0, [r7, #24]
        break;
 8004d32:	e00f      	b.n	8004d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d34:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <UART_SetConfig+0x330>)
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e00c      	b.n	8004d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3a:	f7fe fd87 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8004d3e:	61b8      	str	r0, [r7, #24]
        break;
 8004d40:	e008      	b.n	8004d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d46:	61bb      	str	r3, [r7, #24]
        break;
 8004d48:	e004      	b.n	8004d54 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77bb      	strb	r3, [r7, #30]
        break;
 8004d52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8082 	beq.w	8004e60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	005a      	lsls	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d916      	bls.n	8004da6 <UART_SetConfig+0x2d2>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7e:	d212      	bcs.n	8004da6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f023 030f 	bic.w	r3, r3, #15
 8004d88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	89fb      	ldrh	r3, [r7, #14]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	89fa      	ldrh	r2, [r7, #14]
 8004da2:	60da      	str	r2, [r3, #12]
 8004da4:	e05c      	b.n	8004e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	77bb      	strb	r3, [r7, #30]
 8004daa:	e059      	b.n	8004e60 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dac:	7ffb      	ldrb	r3, [r7, #31]
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d835      	bhi.n	8004e1e <UART_SetConfig+0x34a>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x2e4>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e1f 	.word	0x08004e1f
 8004dc8:	08004e0f 	.word	0x08004e0f
 8004dcc:	08004e1f 	.word	0x08004e1f
 8004dd0:	08004e1f 	.word	0x08004e1f
 8004dd4:	08004e1f 	.word	0x08004e1f
 8004dd8:	08004e17 	.word	0x08004e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fe fdac 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8004de0:	61b8      	str	r0, [r7, #24]
        break;
 8004de2:	e021      	b.n	8004e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fe fdca 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004de8:	61b8      	str	r0, [r7, #24]
        break;
 8004dea:	e01d      	b.n	8004e28 <UART_SetConfig+0x354>
 8004dec:	40013800 	.word	0x40013800
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40004400 	.word	0x40004400
 8004df8:	40004800 	.word	0x40004800
 8004dfc:	40004c00 	.word	0x40004c00
 8004e00:	40005000 	.word	0x40005000
 8004e04:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e08:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <UART_SetConfig+0x3a4>)
 8004e0a:	61bb      	str	r3, [r7, #24]
        break;
 8004e0c:	e00c      	b.n	8004e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0e:	f7fe fd1d 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8004e12:	61b8      	str	r0, [r7, #24]
        break;
 8004e14:	e008      	b.n	8004e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1a:	61bb      	str	r3, [r7, #24]
        break;
 8004e1c:	e004      	b.n	8004e28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	77bb      	strb	r3, [r7, #30]
        break;
 8004e26:	bf00      	nop
    }

    if (pclk != 0U)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d018      	beq.n	8004e60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085a      	lsrs	r2, r3, #1
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	441a      	add	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b0f      	cmp	r3, #15
 8004e46:	d909      	bls.n	8004e5c <UART_SetConfig+0x388>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d205      	bcs.n	8004e5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	e001      	b.n	8004e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d10a      	bne.n	8004f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b098      	sub	sp, #96	; 0x60
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd0:	f7fc ff44 	bl	8001e5c <HAL_GetTick>
 8004fd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d12e      	bne.n	8005042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88c 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d021      	beq.n	8005042 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005012:	653b      	str	r3, [r7, #80]	; 0x50
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
 800501e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800502a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e062      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d149      	bne.n	80050e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f856 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03c      	beq.n	80050e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	623b      	str	r3, [r7, #32]
   return(result);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
 800508a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e011      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3758      	adds	r7, #88	; 0x58
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	e049      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d045      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fc fe97 	bl	8001e5c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <UART_WaitOnFlagUntilTimeout+0x30>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e048      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d031      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d110      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2208      	movs	r2, #8
 8005166:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f8ed 	bl	8005348 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2208      	movs	r2, #8
 8005172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e029      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005190:	d111      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800519a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f8d3 	bl	8005348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e00f      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d0a6      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b097      	sub	sp, #92	; 0x5c
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005212:	d10e      	bne.n	8005232 <UART_Start_Receive_IT+0x52>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <UART_Start_Receive_IT+0x48>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005226:	e01a      	b.n	800525e <UART_Start_Receive_IT+0x7e>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005230:	e015      	b.n	800525e <UART_Start_Receive_IT+0x7e>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <UART_Start_Receive_IT+0x76>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <UART_Start_Receive_IT+0x6c>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800524a:	e008      	b.n	800525e <UART_Start_Receive_IT+0x7e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	227f      	movs	r2, #127	; 0x7f
 8005250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005254:	e003      	b.n	800525e <UART_Start_Receive_IT+0x7e>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2222      	movs	r2, #34	; 0x22
 800526a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800528e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e5      	bne.n	800526e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d107      	bne.n	80052bc <UART_Start_Receive_IT+0xdc>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a22      	ldr	r2, [pc, #136]	; (8005340 <UART_Start_Receive_IT+0x160>)
 80052b8:	669a      	str	r2, [r3, #104]	; 0x68
 80052ba:	e002      	b.n	80052c2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <UART_Start_Receive_IT+0x164>)
 80052c0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d019      	beq.n	80052fe <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e6      	bne.n	80052ca <UART_Start_Receive_IT+0xea>
 80052fc:	e018      	b.n	8005330 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	613b      	str	r3, [r7, #16]
   return(result);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f043 0320 	orr.w	r3, r3, #32
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	6a3a      	ldr	r2, [r7, #32]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	61bb      	str	r3, [r7, #24]
   return(result);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	375c      	adds	r7, #92	; 0x5c
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	08005639 	.word	0x08005639
 8005344:	08005491 	.word	0x08005491

08005348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b095      	sub	sp, #84	; 0x54
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536e:	643b      	str	r3, [r7, #64]	; 0x40
 8005370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	61fb      	str	r3, [r7, #28]
   return(result);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	64bb      	str	r3, [r7, #72]	; 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d118      	bne.n	80053f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f023 0310 	bic.w	r3, r3, #16
 80053d2:	647b      	str	r3, [r7, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005404:	bf00      	nop
 8005406:	3754      	adds	r7, #84	; 0x54
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fb3a 	bl	8004aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fb06 	bl	8004a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b09c      	sub	sp, #112	; 0x70
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800549e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	2b22      	cmp	r3, #34	; 0x22
 80054aa:	f040 80b9 	bne.w	8005620 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054bc:	b2d9      	uxtb	r1, r3
 80054be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	400a      	ands	r2, r1
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 809c 	bne.w	8005630 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550c:	66bb      	str	r3, [r7, #104]	; 0x68
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005516:	65bb      	str	r3, [r7, #88]	; 0x58
 8005518:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800551c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800554a:	647a      	str	r2, [r7, #68]	; 0x44
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d018      	beq.n	80055b2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	623b      	str	r3, [r7, #32]
   return(result);
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005594:	663b      	str	r3, [r7, #96]	; 0x60
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
 80055a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d12e      	bne.n	8005618 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	69b9      	ldr	r1, [r7, #24]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	617b      	str	r3, [r7, #20]
   return(result);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d103      	bne.n	8005608 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fa53 	bl	8004abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005616:	e00b      	b.n	8005630 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fb fdcb 	bl	80011b4 <HAL_UART_RxCpltCallback>
}
 800561e:	e007      	b.n	8005630 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	619a      	str	r2, [r3, #24]
}
 8005630:	bf00      	nop
 8005632:	3770      	adds	r7, #112	; 0x70
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b09c      	sub	sp, #112	; 0x70
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005646:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005650:	2b22      	cmp	r3, #34	; 0x22
 8005652:	f040 80b9 	bne.w	80057c8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800565c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005666:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800566a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800566e:	4013      	ands	r3, r2
 8005670:	b29a      	uxth	r2, r3
 8005672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005674:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 809c 	bne.w	80057d8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b4:	667b      	str	r3, [r7, #100]	; 0x64
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056be:	657b      	str	r3, [r7, #84]	; 0x54
 80056c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056f2:	643a      	str	r2, [r7, #64]	; 0x40
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d018      	beq.n	800575a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	61fb      	str	r3, [r7, #28]
   return(result);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800573c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005748:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e6      	bne.n	8005728 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	2b01      	cmp	r3, #1
 8005760:	d12e      	bne.n	80057c0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	60bb      	str	r3, [r7, #8]
   return(result);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f023 0310 	bic.w	r3, r3, #16
 800577c:	65bb      	str	r3, [r7, #88]	; 0x58
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6979      	ldr	r1, [r7, #20]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	613b      	str	r3, [r7, #16]
   return(result);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d103      	bne.n	80057b0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2210      	movs	r2, #16
 80057ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff f97f 	bl	8004abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057be:	e00b      	b.n	80057d8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fb fcf7 	bl	80011b4 <HAL_UART_RxCpltCallback>
}
 80057c6:	e007      	b.n	80057d8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0208 	orr.w	r2, r2, #8
 80057d6:	619a      	str	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	3770      	adds	r7, #112	; 0x70
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <gcvt>:
 80057f4:	b530      	push	{r4, r5, lr}
 80057f6:	2200      	movs	r2, #0
 80057f8:	b085      	sub	sp, #20
 80057fa:	460c      	mov	r4, r1
 80057fc:	4605      	mov	r5, r0
 80057fe:	2300      	movs	r3, #0
 8005800:	ec51 0b10 	vmov	r0, r1, d0
 8005804:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005808:	f7fb f968 	bl	8000adc <__aeabi_dcmplt>
 800580c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005810:	4622      	mov	r2, r4
 8005812:	b118      	cbz	r0, 800581c <gcvt+0x28>
 8005814:	232d      	movs	r3, #45	; 0x2d
 8005816:	f802 3b01 	strb.w	r3, [r2], #1
 800581a:	3d01      	subs	r5, #1
 800581c:	2300      	movs	r3, #0
 800581e:	4806      	ldr	r0, [pc, #24]	; (8005838 <gcvt+0x44>)
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	4629      	mov	r1, r5
 8005824:	2367      	movs	r3, #103	; 0x67
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	f000 f8d2 	bl	80059d0 <_gcvt>
 800582c:	2800      	cmp	r0, #0
 800582e:	bf14      	ite	ne
 8005830:	4620      	movne	r0, r4
 8005832:	2000      	moveq	r0, #0
 8005834:	b005      	add	sp, #20
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	2000000c 	.word	0x2000000c

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f002 fd66 	bl	800832c <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	08008668 	.word	0x08008668
 8005884:	08008668 	.word	0x08008668
 8005888:	08008668 	.word	0x08008668
 800588c:	0800866c 	.word	0x0800866c

08005890 <memset>:
 8005890:	4402      	add	r2, r0
 8005892:	4603      	mov	r3, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <siprintf>:
 80058a0:	b40e      	push	{r1, r2, r3}
 80058a2:	b500      	push	{lr}
 80058a4:	b09c      	sub	sp, #112	; 0x70
 80058a6:	ab1d      	add	r3, sp, #116	; 0x74
 80058a8:	9002      	str	r0, [sp, #8]
 80058aa:	9006      	str	r0, [sp, #24]
 80058ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b0:	4809      	ldr	r0, [pc, #36]	; (80058d8 <siprintf+0x38>)
 80058b2:	9107      	str	r1, [sp, #28]
 80058b4:	9104      	str	r1, [sp, #16]
 80058b6:	4909      	ldr	r1, [pc, #36]	; (80058dc <siprintf+0x3c>)
 80058b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058bc:	9105      	str	r1, [sp, #20]
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	a902      	add	r1, sp, #8
 80058c4:	f000 fe1a 	bl	80064fc <_svfiprintf_r>
 80058c8:	9b02      	ldr	r3, [sp, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	b01c      	add	sp, #112	; 0x70
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	b003      	add	sp, #12
 80058d6:	4770      	bx	lr
 80058d8:	2000000c 	.word	0x2000000c
 80058dc:	ffff0208 	.word	0xffff0208

080058e0 <print_e>:
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	ec43 2b10 	vmov	d0, r2, r3
 80058e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80058ea:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80058ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80058f0:	ab04      	add	r3, sp, #16
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	ab03      	add	r3, sp, #12
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	1c62      	adds	r2, r4, #1
 80058fa:	ab05      	add	r3, sp, #20
 80058fc:	460f      	mov	r7, r1
 80058fe:	2102      	movs	r1, #2
 8005900:	f001 f952 	bl	8006ba8 <_dtoa_r>
 8005904:	9a05      	ldr	r2, [sp, #20]
 8005906:	f242 730f 	movw	r3, #9999	; 0x270f
 800590a:	429a      	cmp	r2, r3
 800590c:	d105      	bne.n	800591a <print_e+0x3a>
 800590e:	4601      	mov	r1, r0
 8005910:	4638      	mov	r0, r7
 8005912:	f001 f897 	bl	8006a44 <strcpy>
 8005916:	b007      	add	sp, #28
 8005918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591a:	463b      	mov	r3, r7
 800591c:	7801      	ldrb	r1, [r0, #0]
 800591e:	f803 1b01 	strb.w	r1, [r3], #1
 8005922:	2c00      	cmp	r4, #0
 8005924:	bfc8      	it	gt
 8005926:	2501      	movgt	r5, #1
 8005928:	212e      	movs	r1, #46	; 0x2e
 800592a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800592e:	b10f      	cbz	r7, 8005934 <print_e+0x54>
 8005930:	2c00      	cmp	r4, #0
 8005932:	dc37      	bgt.n	80059a4 <print_e+0xc4>
 8005934:	2e67      	cmp	r6, #103	; 0x67
 8005936:	d046      	beq.n	80059c6 <print_e+0xe6>
 8005938:	2e47      	cmp	r6, #71	; 0x47
 800593a:	d046      	beq.n	80059ca <print_e+0xea>
 800593c:	212e      	movs	r1, #46	; 0x2e
 800593e:	2030      	movs	r0, #48	; 0x30
 8005940:	2c00      	cmp	r4, #0
 8005942:	dc38      	bgt.n	80059b6 <print_e+0xd6>
 8005944:	1e51      	subs	r1, r2, #1
 8005946:	2900      	cmp	r1, #0
 8005948:	bfb8      	it	lt
 800594a:	f1c2 0201 	rsblt	r2, r2, #1
 800594e:	4618      	mov	r0, r3
 8005950:	9105      	str	r1, [sp, #20]
 8005952:	bfac      	ite	ge
 8005954:	222b      	movge	r2, #43	; 0x2b
 8005956:	9205      	strlt	r2, [sp, #20]
 8005958:	f800 6b02 	strb.w	r6, [r0], #2
 800595c:	bfa8      	it	ge
 800595e:	705a      	strbge	r2, [r3, #1]
 8005960:	9a05      	ldr	r2, [sp, #20]
 8005962:	bfbc      	itt	lt
 8005964:	212d      	movlt	r1, #45	; 0x2d
 8005966:	7059      	strblt	r1, [r3, #1]
 8005968:	2a63      	cmp	r2, #99	; 0x63
 800596a:	dd0b      	ble.n	8005984 <print_e+0xa4>
 800596c:	2164      	movs	r1, #100	; 0x64
 800596e:	fb92 f1f1 	sdiv	r1, r2, r1
 8005972:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005976:	1cd8      	adds	r0, r3, #3
 8005978:	709c      	strb	r4, [r3, #2]
 800597a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800597e:	fb03 2201 	mla	r2, r3, r1, r2
 8005982:	9205      	str	r2, [sp, #20]
 8005984:	9b05      	ldr	r3, [sp, #20]
 8005986:	220a      	movs	r2, #10
 8005988:	fb93 f2f2 	sdiv	r2, r3, r2
 800598c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005990:	7001      	strb	r1, [r0, #0]
 8005992:	f06f 0109 	mvn.w	r1, #9
 8005996:	fb01 3302 	mla	r3, r1, r2, r3
 800599a:	3330      	adds	r3, #48	; 0x30
 800599c:	7043      	strb	r3, [r0, #1]
 800599e:	2300      	movs	r3, #0
 80059a0:	7083      	strb	r3, [r0, #2]
 80059a2:	e7b8      	b.n	8005916 <print_e+0x36>
 80059a4:	b10d      	cbz	r5, 80059aa <print_e+0xca>
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	7805      	ldrb	r5, [r0, #0]
 80059ac:	f803 5b01 	strb.w	r5, [r3], #1
 80059b0:	3c01      	subs	r4, #1
 80059b2:	2500      	movs	r5, #0
 80059b4:	e7b9      	b.n	800592a <print_e+0x4a>
 80059b6:	b10d      	cbz	r5, 80059bc <print_e+0xdc>
 80059b8:	f803 1b01 	strb.w	r1, [r3], #1
 80059bc:	f803 0b01 	strb.w	r0, [r3], #1
 80059c0:	3c01      	subs	r4, #1
 80059c2:	2500      	movs	r5, #0
 80059c4:	e7bc      	b.n	8005940 <print_e+0x60>
 80059c6:	2665      	movs	r6, #101	; 0x65
 80059c8:	e7bc      	b.n	8005944 <print_e+0x64>
 80059ca:	2645      	movs	r6, #69	; 0x45
 80059cc:	e7ba      	b.n	8005944 <print_e+0x64>
	...

080059d0 <_gcvt>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	ec55 4b10 	vmov	r4, r5, d0
 80059d8:	b088      	sub	sp, #32
 80059da:	4681      	mov	r9, r0
 80059dc:	4688      	mov	r8, r1
 80059de:	4616      	mov	r6, r2
 80059e0:	469a      	mov	sl, r3
 80059e2:	ee10 0a10 	vmov	r0, s0
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	4629      	mov	r1, r5
 80059ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80059ee:	f7fb f875 	bl	8000adc <__aeabi_dcmplt>
 80059f2:	b110      	cbz	r0, 80059fa <_gcvt+0x2a>
 80059f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80059f8:	461d      	mov	r5, r3
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7fb f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a06:	b138      	cbz	r0, 8005a18 <_gcvt+0x48>
 8005a08:	2330      	movs	r3, #48	; 0x30
 8005a0a:	7033      	strb	r3, [r6, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	7073      	strb	r3, [r6, #1]
 8005a10:	4630      	mov	r0, r6
 8005a12:	b008      	add	sp, #32
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	a34b      	add	r3, pc, #300	; (adr r3, 8005b48 <_gcvt+0x178>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7fb f865 	bl	8000af0 <__aeabi_dcmple>
 8005a26:	b158      	cbz	r0, 8005a40 <_gcvt+0x70>
 8005a28:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a2c:	9100      	str	r1, [sp, #0]
 8005a2e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005a32:	4622      	mov	r2, r4
 8005a34:	462b      	mov	r3, r5
 8005a36:	4631      	mov	r1, r6
 8005a38:	4648      	mov	r0, r9
 8005a3a:	f7ff ff51 	bl	80058e0 <print_e>
 8005a3e:	e7e7      	b.n	8005a10 <_gcvt+0x40>
 8005a40:	4640      	mov	r0, r8
 8005a42:	f000 fc09 	bl	8006258 <_mprec_log10>
 8005a46:	4622      	mov	r2, r4
 8005a48:	ec51 0b10 	vmov	r0, r1, d0
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f7fb f84f 	bl	8000af0 <__aeabi_dcmple>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d1e8      	bne.n	8005a28 <_gcvt+0x58>
 8005a56:	ab07      	add	r3, sp, #28
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	ab06      	add	r3, sp, #24
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4642      	mov	r2, r8
 8005a60:	ab05      	add	r3, sp, #20
 8005a62:	ec45 4b10 	vmov	d0, r4, r5
 8005a66:	2102      	movs	r1, #2
 8005a68:	4648      	mov	r0, r9
 8005a6a:	f001 f89d 	bl	8006ba8 <_dtoa_r>
 8005a6e:	9a05      	ldr	r2, [sp, #20]
 8005a70:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d00e      	beq.n	8005a96 <_gcvt+0xc6>
 8005a78:	4633      	mov	r3, r6
 8005a7a:	44b0      	add	r8, r6
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005a82:	9c05      	ldr	r4, [sp, #20]
 8005a84:	eba8 0203 	sub.w	r2, r8, r3
 8005a88:	b109      	cbz	r1, 8005a8e <_gcvt+0xbe>
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	dc08      	bgt.n	8005aa0 <_gcvt+0xd0>
 8005a8e:	2100      	movs	r1, #0
 8005a90:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8005a94:	e00d      	b.n	8005ab2 <_gcvt+0xe2>
 8005a96:	4601      	mov	r1, r0
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 ffd3 	bl	8006a44 <strcpy>
 8005a9e:	e7b7      	b.n	8005a10 <_gcvt+0x40>
 8005aa0:	3c01      	subs	r4, #1
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	9405      	str	r4, [sp, #20]
 8005aa8:	e7e8      	b.n	8005a7c <_gcvt+0xac>
 8005aaa:	f803 cb01 	strb.w	ip, [r3], #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	2c00      	cmp	r4, #0
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	dc2a      	bgt.n	8005b0e <_gcvt+0x13e>
 8005ab8:	b101      	cbz	r1, 8005abc <_gcvt+0xec>
 8005aba:	9405      	str	r4, [sp, #20]
 8005abc:	b90f      	cbnz	r7, 8005ac2 <_gcvt+0xf2>
 8005abe:	7829      	ldrb	r1, [r5, #0]
 8005ac0:	b311      	cbz	r1, 8005b08 <_gcvt+0x138>
 8005ac2:	42b3      	cmp	r3, r6
 8005ac4:	bf04      	itt	eq
 8005ac6:	2130      	moveq	r1, #48	; 0x30
 8005ac8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005acc:	212e      	movs	r1, #46	; 0x2e
 8005ace:	7019      	strb	r1, [r3, #0]
 8005ad0:	9905      	ldr	r1, [sp, #20]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	2400      	movs	r4, #0
 8005ad6:	eba1 0c03 	sub.w	ip, r1, r3
 8005ada:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005ade:	eb1c 0f00 	cmn.w	ip, r0
 8005ae2:	d41c      	bmi.n	8005b1e <_gcvt+0x14e>
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	f1c1 0000 	rsb	r0, r1, #0
 8005aea:	bfc8      	it	gt
 8005aec:	2000      	movgt	r0, #0
 8005aee:	f100 0c01 	add.w	ip, r0, #1
 8005af2:	4463      	add	r3, ip
 8005af4:	4401      	add	r1, r0
 8005af6:	b104      	cbz	r4, 8005afa <_gcvt+0x12a>
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	1e69      	subs	r1, r5, #1
 8005afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b00:	b108      	cbz	r0, 8005b06 <_gcvt+0x136>
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	dc0f      	bgt.n	8005b26 <_gcvt+0x156>
 8005b06:	b9df      	cbnz	r7, 8005b40 <_gcvt+0x170>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e780      	b.n	8005a10 <_gcvt+0x40>
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b14:	dcc9      	bgt.n	8005aaa <_gcvt+0xda>
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d0d0      	beq.n	8005abc <_gcvt+0xec>
 8005b1a:	9005      	str	r0, [sp, #20]
 8005b1c:	e7ce      	b.n	8005abc <_gcvt+0xec>
 8005b1e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005b22:	2401      	movs	r4, #1
 8005b24:	e7db      	b.n	8005ade <_gcvt+0x10e>
 8005b26:	f803 0b01 	strb.w	r0, [r3], #1
 8005b2a:	3a01      	subs	r2, #1
 8005b2c:	e7e6      	b.n	8005afc <_gcvt+0x12c>
 8005b2e:	f801 5b01 	strb.w	r5, [r1], #1
 8005b32:	1a60      	subs	r0, r4, r1
 8005b34:	2800      	cmp	r0, #0
 8005b36:	dcfa      	bgt.n	8005b2e <_gcvt+0x15e>
 8005b38:	2a00      	cmp	r2, #0
 8005b3a:	bfa8      	it	ge
 8005b3c:	189b      	addge	r3, r3, r2
 8005b3e:	e7e3      	b.n	8005b08 <_gcvt+0x138>
 8005b40:	4619      	mov	r1, r3
 8005b42:	189c      	adds	r4, r3, r2
 8005b44:	2530      	movs	r5, #48	; 0x30
 8005b46:	e7f4      	b.n	8005b32 <_gcvt+0x162>
 8005b48:	eb1c432d 	.word	0xeb1c432d
 8005b4c:	3f1a36e2 	.word	0x3f1a36e2

08005b50 <_Balloc>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b54:	4604      	mov	r4, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	b976      	cbnz	r6, 8005b78 <_Balloc+0x28>
 8005b5a:	2010      	movs	r0, #16
 8005b5c:	f001 fe24 	bl	80077a8 <malloc>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6260      	str	r0, [r4, #36]	; 0x24
 8005b64:	b920      	cbnz	r0, 8005b70 <_Balloc+0x20>
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <_Balloc+0x78>)
 8005b68:	4818      	ldr	r0, [pc, #96]	; (8005bcc <_Balloc+0x7c>)
 8005b6a:	2166      	movs	r1, #102	; 0x66
 8005b6c:	f000 ff72 	bl	8006a54 <__assert_func>
 8005b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b74:	6006      	str	r6, [r0, #0]
 8005b76:	60c6      	str	r6, [r0, #12]
 8005b78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b7a:	68f3      	ldr	r3, [r6, #12]
 8005b7c:	b183      	cbz	r3, 8005ba0 <_Balloc+0x50>
 8005b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b86:	b9b8      	cbnz	r0, 8005bb8 <_Balloc+0x68>
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b8e:	1d72      	adds	r2, r6, #5
 8005b90:	0092      	lsls	r2, r2, #2
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fb7e 	bl	8006294 <_calloc_r>
 8005b98:	b160      	cbz	r0, 8005bb4 <_Balloc+0x64>
 8005b9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b9e:	e00e      	b.n	8005bbe <_Balloc+0x6e>
 8005ba0:	2221      	movs	r2, #33	; 0x21
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fb75 	bl	8006294 <_calloc_r>
 8005baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bac:	60f0      	str	r0, [r6, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <_Balloc+0x2e>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	6802      	ldr	r2, [r0, #0]
 8005bba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bc4:	e7f7      	b.n	8005bb6 <_Balloc+0x66>
 8005bc6:	bf00      	nop
 8005bc8:	080083a8 	.word	0x080083a8
 8005bcc:	080083bf 	.word	0x080083bf

08005bd0 <_Bfree>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b976      	cbnz	r6, 8005bf8 <_Bfree+0x28>
 8005bda:	2010      	movs	r0, #16
 8005bdc:	f001 fde4 	bl	80077a8 <malloc>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6268      	str	r0, [r5, #36]	; 0x24
 8005be4:	b920      	cbnz	r0, 8005bf0 <_Bfree+0x20>
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <_Bfree+0x3c>)
 8005be8:	4809      	ldr	r0, [pc, #36]	; (8005c10 <_Bfree+0x40>)
 8005bea:	218a      	movs	r1, #138	; 0x8a
 8005bec:	f000 ff32 	bl	8006a54 <__assert_func>
 8005bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bf4:	6006      	str	r6, [r0, #0]
 8005bf6:	60c6      	str	r6, [r0, #12]
 8005bf8:	b13c      	cbz	r4, 8005c0a <_Bfree+0x3a>
 8005bfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bfc:	6862      	ldr	r2, [r4, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c04:	6021      	str	r1, [r4, #0]
 8005c06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	080083a8 	.word	0x080083a8
 8005c10:	080083bf 	.word	0x080083bf

08005c14 <__multadd>:
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	690d      	ldr	r5, [r1, #16]
 8005c1a:	4607      	mov	r7, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	461e      	mov	r6, r3
 8005c20:	f101 0c14 	add.w	ip, r1, #20
 8005c24:	2000      	movs	r0, #0
 8005c26:	f8dc 3000 	ldr.w	r3, [ip]
 8005c2a:	b299      	uxth	r1, r3
 8005c2c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c30:	0c1e      	lsrs	r6, r3, #16
 8005c32:	0c0b      	lsrs	r3, r1, #16
 8005c34:	fb02 3306 	mla	r3, r2, r6, r3
 8005c38:	b289      	uxth	r1, r1
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c40:	4285      	cmp	r5, r0
 8005c42:	f84c 1b04 	str.w	r1, [ip], #4
 8005c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c4a:	dcec      	bgt.n	8005c26 <__multadd+0x12>
 8005c4c:	b30e      	cbz	r6, 8005c92 <__multadd+0x7e>
 8005c4e:	68a3      	ldr	r3, [r4, #8]
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dc19      	bgt.n	8005c88 <__multadd+0x74>
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	4638      	mov	r0, r7
 8005c58:	3101      	adds	r1, #1
 8005c5a:	f7ff ff79 	bl	8005b50 <_Balloc>
 8005c5e:	4680      	mov	r8, r0
 8005c60:	b928      	cbnz	r0, 8005c6e <__multadd+0x5a>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <__multadd+0x84>)
 8005c66:	480d      	ldr	r0, [pc, #52]	; (8005c9c <__multadd+0x88>)
 8005c68:	21b5      	movs	r1, #181	; 0xb5
 8005c6a:	f000 fef3 	bl	8006a54 <__assert_func>
 8005c6e:	6922      	ldr	r2, [r4, #16]
 8005c70:	3202      	adds	r2, #2
 8005c72:	f104 010c 	add.w	r1, r4, #12
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	300c      	adds	r0, #12
 8005c7a:	f001 fd9d 	bl	80077b8 <memcpy>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ffa5 	bl	8005bd0 <_Bfree>
 8005c86:	4644      	mov	r4, r8
 8005c88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	615e      	str	r6, [r3, #20]
 8005c90:	6125      	str	r5, [r4, #16]
 8005c92:	4620      	mov	r0, r4
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	0800841b 	.word	0x0800841b
 8005c9c:	080083bf 	.word	0x080083bf

08005ca0 <__hi0bits>:
 8005ca0:	0c03      	lsrs	r3, r0, #16
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	b9d3      	cbnz	r3, 8005cdc <__hi0bits+0x3c>
 8005ca6:	0400      	lsls	r0, r0, #16
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005cae:	bf04      	itt	eq
 8005cb0:	0200      	lsleq	r0, r0, #8
 8005cb2:	3308      	addeq	r3, #8
 8005cb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005cb8:	bf04      	itt	eq
 8005cba:	0100      	lsleq	r0, r0, #4
 8005cbc:	3304      	addeq	r3, #4
 8005cbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cc2:	bf04      	itt	eq
 8005cc4:	0080      	lsleq	r0, r0, #2
 8005cc6:	3302      	addeq	r3, #2
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	db05      	blt.n	8005cd8 <__hi0bits+0x38>
 8005ccc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005cd0:	f103 0301 	add.w	r3, r3, #1
 8005cd4:	bf08      	it	eq
 8005cd6:	2320      	moveq	r3, #32
 8005cd8:	4618      	mov	r0, r3
 8005cda:	4770      	bx	lr
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e7e4      	b.n	8005caa <__hi0bits+0xa>

08005ce0 <__lo0bits>:
 8005ce0:	6803      	ldr	r3, [r0, #0]
 8005ce2:	f013 0207 	ands.w	r2, r3, #7
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	d00b      	beq.n	8005d02 <__lo0bits+0x22>
 8005cea:	07da      	lsls	r2, r3, #31
 8005cec:	d423      	bmi.n	8005d36 <__lo0bits+0x56>
 8005cee:	0798      	lsls	r0, r3, #30
 8005cf0:	bf49      	itett	mi
 8005cf2:	085b      	lsrmi	r3, r3, #1
 8005cf4:	089b      	lsrpl	r3, r3, #2
 8005cf6:	2001      	movmi	r0, #1
 8005cf8:	600b      	strmi	r3, [r1, #0]
 8005cfa:	bf5c      	itt	pl
 8005cfc:	600b      	strpl	r3, [r1, #0]
 8005cfe:	2002      	movpl	r0, #2
 8005d00:	4770      	bx	lr
 8005d02:	b298      	uxth	r0, r3
 8005d04:	b9a8      	cbnz	r0, 8005d32 <__lo0bits+0x52>
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	2010      	movs	r0, #16
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	b90a      	cbnz	r2, 8005d12 <__lo0bits+0x32>
 8005d0e:	3008      	adds	r0, #8
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	071a      	lsls	r2, r3, #28
 8005d14:	bf04      	itt	eq
 8005d16:	091b      	lsreq	r3, r3, #4
 8005d18:	3004      	addeq	r0, #4
 8005d1a:	079a      	lsls	r2, r3, #30
 8005d1c:	bf04      	itt	eq
 8005d1e:	089b      	lsreq	r3, r3, #2
 8005d20:	3002      	addeq	r0, #2
 8005d22:	07da      	lsls	r2, r3, #31
 8005d24:	d403      	bmi.n	8005d2e <__lo0bits+0x4e>
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	f100 0001 	add.w	r0, r0, #1
 8005d2c:	d005      	beq.n	8005d3a <__lo0bits+0x5a>
 8005d2e:	600b      	str	r3, [r1, #0]
 8005d30:	4770      	bx	lr
 8005d32:	4610      	mov	r0, r2
 8005d34:	e7e9      	b.n	8005d0a <__lo0bits+0x2a>
 8005d36:	2000      	movs	r0, #0
 8005d38:	4770      	bx	lr
 8005d3a:	2020      	movs	r0, #32
 8005d3c:	4770      	bx	lr
	...

08005d40 <__i2b>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	460c      	mov	r4, r1
 8005d44:	2101      	movs	r1, #1
 8005d46:	f7ff ff03 	bl	8005b50 <_Balloc>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	b928      	cbnz	r0, 8005d5a <__i2b+0x1a>
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <__i2b+0x24>)
 8005d50:	4805      	ldr	r0, [pc, #20]	; (8005d68 <__i2b+0x28>)
 8005d52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d56:	f000 fe7d 	bl	8006a54 <__assert_func>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	6144      	str	r4, [r0, #20]
 8005d5e:	6103      	str	r3, [r0, #16]
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	bf00      	nop
 8005d64:	0800841b 	.word	0x0800841b
 8005d68:	080083bf 	.word	0x080083bf

08005d6c <__multiply>:
 8005d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	4691      	mov	r9, r2
 8005d72:	690a      	ldr	r2, [r1, #16]
 8005d74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfb8      	it	lt
 8005d7c:	460b      	movlt	r3, r1
 8005d7e:	460c      	mov	r4, r1
 8005d80:	bfbc      	itt	lt
 8005d82:	464c      	movlt	r4, r9
 8005d84:	4699      	movlt	r9, r3
 8005d86:	6927      	ldr	r7, [r4, #16]
 8005d88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d8c:	68a3      	ldr	r3, [r4, #8]
 8005d8e:	6861      	ldr	r1, [r4, #4]
 8005d90:	eb07 060a 	add.w	r6, r7, sl
 8005d94:	42b3      	cmp	r3, r6
 8005d96:	b085      	sub	sp, #20
 8005d98:	bfb8      	it	lt
 8005d9a:	3101      	addlt	r1, #1
 8005d9c:	f7ff fed8 	bl	8005b50 <_Balloc>
 8005da0:	b930      	cbnz	r0, 8005db0 <__multiply+0x44>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <__multiply+0x14c>)
 8005da6:	4845      	ldr	r0, [pc, #276]	; (8005ebc <__multiply+0x150>)
 8005da8:	f240 115d 	movw	r1, #349	; 0x15d
 8005dac:	f000 fe52 	bl	8006a54 <__assert_func>
 8005db0:	f100 0514 	add.w	r5, r0, #20
 8005db4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005db8:	462b      	mov	r3, r5
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4543      	cmp	r3, r8
 8005dbe:	d321      	bcc.n	8005e04 <__multiply+0x98>
 8005dc0:	f104 0314 	add.w	r3, r4, #20
 8005dc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005dc8:	f109 0314 	add.w	r3, r9, #20
 8005dcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	1b3a      	subs	r2, r7, r4
 8005dd4:	3a15      	subs	r2, #21
 8005dd6:	f022 0203 	bic.w	r2, r2, #3
 8005dda:	3204      	adds	r2, #4
 8005ddc:	f104 0115 	add.w	r1, r4, #21
 8005de0:	428f      	cmp	r7, r1
 8005de2:	bf38      	it	cc
 8005de4:	2204      	movcc	r2, #4
 8005de6:	9201      	str	r2, [sp, #4]
 8005de8:	9a02      	ldr	r2, [sp, #8]
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d80c      	bhi.n	8005e0a <__multiply+0x9e>
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	dd03      	ble.n	8005dfc <__multiply+0x90>
 8005df4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d05a      	beq.n	8005eb2 <__multiply+0x146>
 8005dfc:	6106      	str	r6, [r0, #16]
 8005dfe:	b005      	add	sp, #20
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	f843 2b04 	str.w	r2, [r3], #4
 8005e08:	e7d8      	b.n	8005dbc <__multiply+0x50>
 8005e0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e0e:	f1ba 0f00 	cmp.w	sl, #0
 8005e12:	d024      	beq.n	8005e5e <__multiply+0xf2>
 8005e14:	f104 0e14 	add.w	lr, r4, #20
 8005e18:	46a9      	mov	r9, r5
 8005e1a:	f04f 0c00 	mov.w	ip, #0
 8005e1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e22:	f8d9 1000 	ldr.w	r1, [r9]
 8005e26:	fa1f fb82 	uxth.w	fp, r2
 8005e2a:	b289      	uxth	r1, r1
 8005e2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e34:	f8d9 2000 	ldr.w	r2, [r9]
 8005e38:	4461      	add	r1, ip
 8005e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e46:	b289      	uxth	r1, r1
 8005e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e4c:	4577      	cmp	r7, lr
 8005e4e:	f849 1b04 	str.w	r1, [r9], #4
 8005e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e56:	d8e2      	bhi.n	8005e1e <__multiply+0xb2>
 8005e58:	9a01      	ldr	r2, [sp, #4]
 8005e5a:	f845 c002 	str.w	ip, [r5, r2]
 8005e5e:	9a03      	ldr	r2, [sp, #12]
 8005e60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e64:	3304      	adds	r3, #4
 8005e66:	f1b9 0f00 	cmp.w	r9, #0
 8005e6a:	d020      	beq.n	8005eae <__multiply+0x142>
 8005e6c:	6829      	ldr	r1, [r5, #0]
 8005e6e:	f104 0c14 	add.w	ip, r4, #20
 8005e72:	46ae      	mov	lr, r5
 8005e74:	f04f 0a00 	mov.w	sl, #0
 8005e78:	f8bc b000 	ldrh.w	fp, [ip]
 8005e7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e80:	fb09 220b 	mla	r2, r9, fp, r2
 8005e84:	4492      	add	sl, r2
 8005e86:	b289      	uxth	r1, r1
 8005e88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e8c:	f84e 1b04 	str.w	r1, [lr], #4
 8005e90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e94:	f8be 1000 	ldrh.w	r1, [lr]
 8005e98:	0c12      	lsrs	r2, r2, #16
 8005e9a:	fb09 1102 	mla	r1, r9, r2, r1
 8005e9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ea2:	4567      	cmp	r7, ip
 8005ea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ea8:	d8e6      	bhi.n	8005e78 <__multiply+0x10c>
 8005eaa:	9a01      	ldr	r2, [sp, #4]
 8005eac:	50a9      	str	r1, [r5, r2]
 8005eae:	3504      	adds	r5, #4
 8005eb0:	e79a      	b.n	8005de8 <__multiply+0x7c>
 8005eb2:	3e01      	subs	r6, #1
 8005eb4:	e79c      	b.n	8005df0 <__multiply+0x84>
 8005eb6:	bf00      	nop
 8005eb8:	0800841b 	.word	0x0800841b
 8005ebc:	080083bf 	.word	0x080083bf

08005ec0 <__pow5mult>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	f012 0203 	ands.w	r2, r2, #3
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460f      	mov	r7, r1
 8005ece:	d007      	beq.n	8005ee0 <__pow5mult+0x20>
 8005ed0:	4c25      	ldr	r4, [pc, #148]	; (8005f68 <__pow5mult+0xa8>)
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eda:	f7ff fe9b 	bl	8005c14 <__multadd>
 8005ede:	4607      	mov	r7, r0
 8005ee0:	10ad      	asrs	r5, r5, #2
 8005ee2:	d03d      	beq.n	8005f60 <__pow5mult+0xa0>
 8005ee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ee6:	b97c      	cbnz	r4, 8005f08 <__pow5mult+0x48>
 8005ee8:	2010      	movs	r0, #16
 8005eea:	f001 fc5d 	bl	80077a8 <malloc>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ef2:	b928      	cbnz	r0, 8005f00 <__pow5mult+0x40>
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <__pow5mult+0xac>)
 8005ef6:	481e      	ldr	r0, [pc, #120]	; (8005f70 <__pow5mult+0xb0>)
 8005ef8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005efc:	f000 fdaa 	bl	8006a54 <__assert_func>
 8005f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f04:	6004      	str	r4, [r0, #0]
 8005f06:	60c4      	str	r4, [r0, #12]
 8005f08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f10:	b94c      	cbnz	r4, 8005f26 <__pow5mult+0x66>
 8005f12:	f240 2171 	movw	r1, #625	; 0x271
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff ff12 	bl	8005d40 <__i2b>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f22:	4604      	mov	r4, r0
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	f04f 0900 	mov.w	r9, #0
 8005f2a:	07eb      	lsls	r3, r5, #31
 8005f2c:	d50a      	bpl.n	8005f44 <__pow5mult+0x84>
 8005f2e:	4639      	mov	r1, r7
 8005f30:	4622      	mov	r2, r4
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff ff1a 	bl	8005d6c <__multiply>
 8005f38:	4639      	mov	r1, r7
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff fe47 	bl	8005bd0 <_Bfree>
 8005f42:	4647      	mov	r7, r8
 8005f44:	106d      	asrs	r5, r5, #1
 8005f46:	d00b      	beq.n	8005f60 <__pow5mult+0xa0>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	b938      	cbnz	r0, 8005f5c <__pow5mult+0x9c>
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff ff0b 	bl	8005d6c <__multiply>
 8005f56:	6020      	str	r0, [r4, #0]
 8005f58:	f8c0 9000 	str.w	r9, [r0]
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	e7e4      	b.n	8005f2a <__pow5mult+0x6a>
 8005f60:	4638      	mov	r0, r7
 8005f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f66:	bf00      	nop
 8005f68:	08008520 	.word	0x08008520
 8005f6c:	080083a8 	.word	0x080083a8
 8005f70:	080083bf 	.word	0x080083bf

08005f74 <__lshift>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	6849      	ldr	r1, [r1, #4]
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	4607      	mov	r7, r0
 8005f86:	4691      	mov	r9, r2
 8005f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f8c:	f108 0601 	add.w	r6, r8, #1
 8005f90:	42b3      	cmp	r3, r6
 8005f92:	db0b      	blt.n	8005fac <__lshift+0x38>
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff fddb 	bl	8005b50 <_Balloc>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	b948      	cbnz	r0, 8005fb2 <__lshift+0x3e>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	; (800604c <__lshift+0xd8>)
 8005fa2:	482b      	ldr	r0, [pc, #172]	; (8006050 <__lshift+0xdc>)
 8005fa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fa8:	f000 fd54 	bl	8006a54 <__assert_func>
 8005fac:	3101      	adds	r1, #1
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	e7ee      	b.n	8005f90 <__lshift+0x1c>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f100 0114 	add.w	r1, r0, #20
 8005fb8:	f100 0210 	add.w	r2, r0, #16
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	4553      	cmp	r3, sl
 8005fc0:	db37      	blt.n	8006032 <__lshift+0xbe>
 8005fc2:	6920      	ldr	r0, [r4, #16]
 8005fc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fc8:	f104 0314 	add.w	r3, r4, #20
 8005fcc:	f019 091f 	ands.w	r9, r9, #31
 8005fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fd8:	d02f      	beq.n	800603a <__lshift+0xc6>
 8005fda:	f1c9 0e20 	rsb	lr, r9, #32
 8005fde:	468a      	mov	sl, r1
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	fa02 f209 	lsl.w	r2, r2, r9
 8005fea:	ea42 020c 	orr.w	r2, r2, ip
 8005fee:	f84a 2b04 	str.w	r2, [sl], #4
 8005ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ffc:	d8f2      	bhi.n	8005fe4 <__lshift+0x70>
 8005ffe:	1b03      	subs	r3, r0, r4
 8006000:	3b15      	subs	r3, #21
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	3304      	adds	r3, #4
 8006008:	f104 0215 	add.w	r2, r4, #21
 800600c:	4290      	cmp	r0, r2
 800600e:	bf38      	it	cc
 8006010:	2304      	movcc	r3, #4
 8006012:	f841 c003 	str.w	ip, [r1, r3]
 8006016:	f1bc 0f00 	cmp.w	ip, #0
 800601a:	d001      	beq.n	8006020 <__lshift+0xac>
 800601c:	f108 0602 	add.w	r6, r8, #2
 8006020:	3e01      	subs	r6, #1
 8006022:	4638      	mov	r0, r7
 8006024:	612e      	str	r6, [r5, #16]
 8006026:	4621      	mov	r1, r4
 8006028:	f7ff fdd2 	bl	8005bd0 <_Bfree>
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006032:	f842 0f04 	str.w	r0, [r2, #4]!
 8006036:	3301      	adds	r3, #1
 8006038:	e7c1      	b.n	8005fbe <__lshift+0x4a>
 800603a:	3904      	subs	r1, #4
 800603c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006040:	f841 2f04 	str.w	r2, [r1, #4]!
 8006044:	4298      	cmp	r0, r3
 8006046:	d8f9      	bhi.n	800603c <__lshift+0xc8>
 8006048:	e7ea      	b.n	8006020 <__lshift+0xac>
 800604a:	bf00      	nop
 800604c:	0800841b 	.word	0x0800841b
 8006050:	080083bf 	.word	0x080083bf

08006054 <__mcmp>:
 8006054:	b530      	push	{r4, r5, lr}
 8006056:	6902      	ldr	r2, [r0, #16]
 8006058:	690c      	ldr	r4, [r1, #16]
 800605a:	1b12      	subs	r2, r2, r4
 800605c:	d10e      	bne.n	800607c <__mcmp+0x28>
 800605e:	f100 0314 	add.w	r3, r0, #20
 8006062:	3114      	adds	r1, #20
 8006064:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006068:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800606c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006070:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006074:	42a5      	cmp	r5, r4
 8006076:	d003      	beq.n	8006080 <__mcmp+0x2c>
 8006078:	d305      	bcc.n	8006086 <__mcmp+0x32>
 800607a:	2201      	movs	r2, #1
 800607c:	4610      	mov	r0, r2
 800607e:	bd30      	pop	{r4, r5, pc}
 8006080:	4283      	cmp	r3, r0
 8006082:	d3f3      	bcc.n	800606c <__mcmp+0x18>
 8006084:	e7fa      	b.n	800607c <__mcmp+0x28>
 8006086:	f04f 32ff 	mov.w	r2, #4294967295
 800608a:	e7f7      	b.n	800607c <__mcmp+0x28>

0800608c <__mdiff>:
 800608c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	4606      	mov	r6, r0
 8006094:	4611      	mov	r1, r2
 8006096:	4620      	mov	r0, r4
 8006098:	4690      	mov	r8, r2
 800609a:	f7ff ffdb 	bl	8006054 <__mcmp>
 800609e:	1e05      	subs	r5, r0, #0
 80060a0:	d110      	bne.n	80060c4 <__mdiff+0x38>
 80060a2:	4629      	mov	r1, r5
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff fd53 	bl	8005b50 <_Balloc>
 80060aa:	b930      	cbnz	r0, 80060ba <__mdiff+0x2e>
 80060ac:	4b3a      	ldr	r3, [pc, #232]	; (8006198 <__mdiff+0x10c>)
 80060ae:	4602      	mov	r2, r0
 80060b0:	f240 2132 	movw	r1, #562	; 0x232
 80060b4:	4839      	ldr	r0, [pc, #228]	; (800619c <__mdiff+0x110>)
 80060b6:	f000 fccd 	bl	8006a54 <__assert_func>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c4:	bfa4      	itt	ge
 80060c6:	4643      	movge	r3, r8
 80060c8:	46a0      	movge	r8, r4
 80060ca:	4630      	mov	r0, r6
 80060cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060d0:	bfa6      	itte	ge
 80060d2:	461c      	movge	r4, r3
 80060d4:	2500      	movge	r5, #0
 80060d6:	2501      	movlt	r5, #1
 80060d8:	f7ff fd3a 	bl	8005b50 <_Balloc>
 80060dc:	b920      	cbnz	r0, 80060e8 <__mdiff+0x5c>
 80060de:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <__mdiff+0x10c>)
 80060e0:	4602      	mov	r2, r0
 80060e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060e6:	e7e5      	b.n	80060b4 <__mdiff+0x28>
 80060e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060ec:	6926      	ldr	r6, [r4, #16]
 80060ee:	60c5      	str	r5, [r0, #12]
 80060f0:	f104 0914 	add.w	r9, r4, #20
 80060f4:	f108 0514 	add.w	r5, r8, #20
 80060f8:	f100 0e14 	add.w	lr, r0, #20
 80060fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006100:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006104:	f108 0210 	add.w	r2, r8, #16
 8006108:	46f2      	mov	sl, lr
 800610a:	2100      	movs	r1, #0
 800610c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006110:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006114:	fa1f f883 	uxth.w	r8, r3
 8006118:	fa11 f18b 	uxtah	r1, r1, fp
 800611c:	0c1b      	lsrs	r3, r3, #16
 800611e:	eba1 0808 	sub.w	r8, r1, r8
 8006122:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006126:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800612a:	fa1f f888 	uxth.w	r8, r8
 800612e:	1419      	asrs	r1, r3, #16
 8006130:	454e      	cmp	r6, r9
 8006132:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006136:	f84a 3b04 	str.w	r3, [sl], #4
 800613a:	d8e7      	bhi.n	800610c <__mdiff+0x80>
 800613c:	1b33      	subs	r3, r6, r4
 800613e:	3b15      	subs	r3, #21
 8006140:	f023 0303 	bic.w	r3, r3, #3
 8006144:	3304      	adds	r3, #4
 8006146:	3415      	adds	r4, #21
 8006148:	42a6      	cmp	r6, r4
 800614a:	bf38      	it	cc
 800614c:	2304      	movcc	r3, #4
 800614e:	441d      	add	r5, r3
 8006150:	4473      	add	r3, lr
 8006152:	469e      	mov	lr, r3
 8006154:	462e      	mov	r6, r5
 8006156:	4566      	cmp	r6, ip
 8006158:	d30e      	bcc.n	8006178 <__mdiff+0xec>
 800615a:	f10c 0203 	add.w	r2, ip, #3
 800615e:	1b52      	subs	r2, r2, r5
 8006160:	f022 0203 	bic.w	r2, r2, #3
 8006164:	3d03      	subs	r5, #3
 8006166:	45ac      	cmp	ip, r5
 8006168:	bf38      	it	cc
 800616a:	2200      	movcc	r2, #0
 800616c:	441a      	add	r2, r3
 800616e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006172:	b17b      	cbz	r3, 8006194 <__mdiff+0x108>
 8006174:	6107      	str	r7, [r0, #16]
 8006176:	e7a3      	b.n	80060c0 <__mdiff+0x34>
 8006178:	f856 8b04 	ldr.w	r8, [r6], #4
 800617c:	fa11 f288 	uxtah	r2, r1, r8
 8006180:	1414      	asrs	r4, r2, #16
 8006182:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006186:	b292      	uxth	r2, r2
 8006188:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800618c:	f84e 2b04 	str.w	r2, [lr], #4
 8006190:	1421      	asrs	r1, r4, #16
 8006192:	e7e0      	b.n	8006156 <__mdiff+0xca>
 8006194:	3f01      	subs	r7, #1
 8006196:	e7ea      	b.n	800616e <__mdiff+0xe2>
 8006198:	0800841b 	.word	0x0800841b
 800619c:	080083bf 	.word	0x080083bf

080061a0 <__d2b>:
 80061a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4689      	mov	r9, r1
 80061a6:	2101      	movs	r1, #1
 80061a8:	ec57 6b10 	vmov	r6, r7, d0
 80061ac:	4690      	mov	r8, r2
 80061ae:	f7ff fccf 	bl	8005b50 <_Balloc>
 80061b2:	4604      	mov	r4, r0
 80061b4:	b930      	cbnz	r0, 80061c4 <__d2b+0x24>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <__d2b+0xb0>)
 80061ba:	4826      	ldr	r0, [pc, #152]	; (8006254 <__d2b+0xb4>)
 80061bc:	f240 310a 	movw	r1, #778	; 0x30a
 80061c0:	f000 fc48 	bl	8006a54 <__assert_func>
 80061c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061cc:	bb35      	cbnz	r5, 800621c <__d2b+0x7c>
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	d028      	beq.n	8006226 <__d2b+0x86>
 80061d4:	4668      	mov	r0, sp
 80061d6:	9600      	str	r6, [sp, #0]
 80061d8:	f7ff fd82 	bl	8005ce0 <__lo0bits>
 80061dc:	9900      	ldr	r1, [sp, #0]
 80061de:	b300      	cbz	r0, 8006222 <__d2b+0x82>
 80061e0:	9a01      	ldr	r2, [sp, #4]
 80061e2:	f1c0 0320 	rsb	r3, r0, #32
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	430b      	orrs	r3, r1
 80061ec:	40c2      	lsrs	r2, r0
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	61a3      	str	r3, [r4, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2202      	movne	r2, #2
 80061fc:	2201      	moveq	r2, #1
 80061fe:	6122      	str	r2, [r4, #16]
 8006200:	b1d5      	cbz	r5, 8006238 <__d2b+0x98>
 8006202:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006206:	4405      	add	r5, r0
 8006208:	f8c9 5000 	str.w	r5, [r9]
 800620c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006210:	f8c8 0000 	str.w	r0, [r8]
 8006214:	4620      	mov	r0, r4
 8006216:	b003      	add	sp, #12
 8006218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800621c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006220:	e7d5      	b.n	80061ce <__d2b+0x2e>
 8006222:	6161      	str	r1, [r4, #20]
 8006224:	e7e5      	b.n	80061f2 <__d2b+0x52>
 8006226:	a801      	add	r0, sp, #4
 8006228:	f7ff fd5a 	bl	8005ce0 <__lo0bits>
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	6163      	str	r3, [r4, #20]
 8006230:	2201      	movs	r2, #1
 8006232:	6122      	str	r2, [r4, #16]
 8006234:	3020      	adds	r0, #32
 8006236:	e7e3      	b.n	8006200 <__d2b+0x60>
 8006238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800623c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006240:	f8c9 0000 	str.w	r0, [r9]
 8006244:	6918      	ldr	r0, [r3, #16]
 8006246:	f7ff fd2b 	bl	8005ca0 <__hi0bits>
 800624a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800624e:	e7df      	b.n	8006210 <__d2b+0x70>
 8006250:	0800841b 	.word	0x0800841b
 8006254:	080083bf 	.word	0x080083bf

08006258 <_mprec_log10>:
 8006258:	2817      	cmp	r0, #23
 800625a:	b5d0      	push	{r4, r6, r7, lr}
 800625c:	4604      	mov	r4, r0
 800625e:	dc07      	bgt.n	8006270 <_mprec_log10+0x18>
 8006260:	4809      	ldr	r0, [pc, #36]	; (8006288 <_mprec_log10+0x30>)
 8006262:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006266:	e9d4 0100 	ldrd	r0, r1, [r4]
 800626a:	ec41 0b10 	vmov	d0, r0, r1
 800626e:	bdd0      	pop	{r4, r6, r7, pc}
 8006270:	4906      	ldr	r1, [pc, #24]	; (800628c <_mprec_log10+0x34>)
 8006272:	4f07      	ldr	r7, [pc, #28]	; (8006290 <_mprec_log10+0x38>)
 8006274:	2000      	movs	r0, #0
 8006276:	2600      	movs	r6, #0
 8006278:	4632      	mov	r2, r6
 800627a:	463b      	mov	r3, r7
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	3c01      	subs	r4, #1
 8006282:	d1f9      	bne.n	8006278 <_mprec_log10+0x20>
 8006284:	e7f1      	b.n	800626a <_mprec_log10+0x12>
 8006286:	bf00      	nop
 8006288:	08008458 	.word	0x08008458
 800628c:	3ff00000 	.word	0x3ff00000
 8006290:	40240000 	.word	0x40240000

08006294 <_calloc_r>:
 8006294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006296:	fba1 2402 	umull	r2, r4, r1, r2
 800629a:	b94c      	cbnz	r4, 80062b0 <_calloc_r+0x1c>
 800629c:	4611      	mov	r1, r2
 800629e:	9201      	str	r2, [sp, #4]
 80062a0:	f000 f82e 	bl	8006300 <_malloc_r>
 80062a4:	9a01      	ldr	r2, [sp, #4]
 80062a6:	4605      	mov	r5, r0
 80062a8:	b930      	cbnz	r0, 80062b8 <_calloc_r+0x24>
 80062aa:	4628      	mov	r0, r5
 80062ac:	b003      	add	sp, #12
 80062ae:	bd30      	pop	{r4, r5, pc}
 80062b0:	220c      	movs	r2, #12
 80062b2:	6002      	str	r2, [r0, #0]
 80062b4:	2500      	movs	r5, #0
 80062b6:	e7f8      	b.n	80062aa <_calloc_r+0x16>
 80062b8:	4621      	mov	r1, r4
 80062ba:	f7ff fae9 	bl	8005890 <memset>
 80062be:	e7f4      	b.n	80062aa <_calloc_r+0x16>

080062c0 <sbrk_aligned>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4e0e      	ldr	r6, [pc, #56]	; (80062fc <sbrk_aligned+0x3c>)
 80062c4:	460c      	mov	r4, r1
 80062c6:	6831      	ldr	r1, [r6, #0]
 80062c8:	4605      	mov	r5, r0
 80062ca:	b911      	cbnz	r1, 80062d2 <sbrk_aligned+0x12>
 80062cc:	f000 fbaa 	bl	8006a24 <_sbrk_r>
 80062d0:	6030      	str	r0, [r6, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fba5 	bl	8006a24 <_sbrk_r>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d00a      	beq.n	80062f4 <sbrk_aligned+0x34>
 80062de:	1cc4      	adds	r4, r0, #3
 80062e0:	f024 0403 	bic.w	r4, r4, #3
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d007      	beq.n	80062f8 <sbrk_aligned+0x38>
 80062e8:	1a21      	subs	r1, r4, r0
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 fb9a 	bl	8006a24 <_sbrk_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d101      	bne.n	80062f8 <sbrk_aligned+0x38>
 80062f4:	f04f 34ff 	mov.w	r4, #4294967295
 80062f8:	4620      	mov	r0, r4
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	200007fc 	.word	0x200007fc

08006300 <_malloc_r>:
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	1ccd      	adds	r5, r1, #3
 8006306:	f025 0503 	bic.w	r5, r5, #3
 800630a:	3508      	adds	r5, #8
 800630c:	2d0c      	cmp	r5, #12
 800630e:	bf38      	it	cc
 8006310:	250c      	movcc	r5, #12
 8006312:	2d00      	cmp	r5, #0
 8006314:	4607      	mov	r7, r0
 8006316:	db01      	blt.n	800631c <_malloc_r+0x1c>
 8006318:	42a9      	cmp	r1, r5
 800631a:	d905      	bls.n	8006328 <_malloc_r+0x28>
 800631c:	230c      	movs	r3, #12
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	2600      	movs	r6, #0
 8006322:	4630      	mov	r0, r6
 8006324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006328:	4e2e      	ldr	r6, [pc, #184]	; (80063e4 <_malloc_r+0xe4>)
 800632a:	f001 fa6d 	bl	8007808 <__malloc_lock>
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	461c      	mov	r4, r3
 8006332:	bb34      	cbnz	r4, 8006382 <_malloc_r+0x82>
 8006334:	4629      	mov	r1, r5
 8006336:	4638      	mov	r0, r7
 8006338:	f7ff ffc2 	bl	80062c0 <sbrk_aligned>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	4604      	mov	r4, r0
 8006340:	d14d      	bne.n	80063de <_malloc_r+0xde>
 8006342:	6834      	ldr	r4, [r6, #0]
 8006344:	4626      	mov	r6, r4
 8006346:	2e00      	cmp	r6, #0
 8006348:	d140      	bne.n	80063cc <_malloc_r+0xcc>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	4631      	mov	r1, r6
 800634e:	4638      	mov	r0, r7
 8006350:	eb04 0803 	add.w	r8, r4, r3
 8006354:	f000 fb66 	bl	8006a24 <_sbrk_r>
 8006358:	4580      	cmp	r8, r0
 800635a:	d13a      	bne.n	80063d2 <_malloc_r+0xd2>
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	3503      	adds	r5, #3
 8006360:	1a6d      	subs	r5, r5, r1
 8006362:	f025 0503 	bic.w	r5, r5, #3
 8006366:	3508      	adds	r5, #8
 8006368:	2d0c      	cmp	r5, #12
 800636a:	bf38      	it	cc
 800636c:	250c      	movcc	r5, #12
 800636e:	4629      	mov	r1, r5
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff ffa5 	bl	80062c0 <sbrk_aligned>
 8006376:	3001      	adds	r0, #1
 8006378:	d02b      	beq.n	80063d2 <_malloc_r+0xd2>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	442b      	add	r3, r5
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	e00e      	b.n	80063a0 <_malloc_r+0xa0>
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	1b52      	subs	r2, r2, r5
 8006386:	d41e      	bmi.n	80063c6 <_malloc_r+0xc6>
 8006388:	2a0b      	cmp	r2, #11
 800638a:	d916      	bls.n	80063ba <_malloc_r+0xba>
 800638c:	1961      	adds	r1, r4, r5
 800638e:	42a3      	cmp	r3, r4
 8006390:	6025      	str	r5, [r4, #0]
 8006392:	bf18      	it	ne
 8006394:	6059      	strne	r1, [r3, #4]
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	bf08      	it	eq
 800639a:	6031      	streq	r1, [r6, #0]
 800639c:	5162      	str	r2, [r4, r5]
 800639e:	604b      	str	r3, [r1, #4]
 80063a0:	4638      	mov	r0, r7
 80063a2:	f104 060b 	add.w	r6, r4, #11
 80063a6:	f001 fa35 	bl	8007814 <__malloc_unlock>
 80063aa:	f026 0607 	bic.w	r6, r6, #7
 80063ae:	1d23      	adds	r3, r4, #4
 80063b0:	1af2      	subs	r2, r6, r3
 80063b2:	d0b6      	beq.n	8006322 <_malloc_r+0x22>
 80063b4:	1b9b      	subs	r3, r3, r6
 80063b6:	50a3      	str	r3, [r4, r2]
 80063b8:	e7b3      	b.n	8006322 <_malloc_r+0x22>
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	bf0c      	ite	eq
 80063c0:	6032      	streq	r2, [r6, #0]
 80063c2:	605a      	strne	r2, [r3, #4]
 80063c4:	e7ec      	b.n	80063a0 <_malloc_r+0xa0>
 80063c6:	4623      	mov	r3, r4
 80063c8:	6864      	ldr	r4, [r4, #4]
 80063ca:	e7b2      	b.n	8006332 <_malloc_r+0x32>
 80063cc:	4634      	mov	r4, r6
 80063ce:	6876      	ldr	r6, [r6, #4]
 80063d0:	e7b9      	b.n	8006346 <_malloc_r+0x46>
 80063d2:	230c      	movs	r3, #12
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4638      	mov	r0, r7
 80063d8:	f001 fa1c 	bl	8007814 <__malloc_unlock>
 80063dc:	e7a1      	b.n	8006322 <_malloc_r+0x22>
 80063de:	6025      	str	r5, [r4, #0]
 80063e0:	e7de      	b.n	80063a0 <_malloc_r+0xa0>
 80063e2:	bf00      	nop
 80063e4:	200007f8 	.word	0x200007f8

080063e8 <_realloc_r>:
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	4680      	mov	r8, r0
 80063ee:	4614      	mov	r4, r2
 80063f0:	460e      	mov	r6, r1
 80063f2:	b921      	cbnz	r1, 80063fe <_realloc_r+0x16>
 80063f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	4611      	mov	r1, r2
 80063fa:	f7ff bf81 	b.w	8006300 <_malloc_r>
 80063fe:	b92a      	cbnz	r2, 800640c <_realloc_r+0x24>
 8006400:	f001 fa0e 	bl	8007820 <_free_r>
 8006404:	4625      	mov	r5, r4
 8006406:	4628      	mov	r0, r5
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	f001 fa54 	bl	80078b8 <_malloc_usable_size_r>
 8006410:	4284      	cmp	r4, r0
 8006412:	4607      	mov	r7, r0
 8006414:	d802      	bhi.n	800641c <_realloc_r+0x34>
 8006416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800641a:	d812      	bhi.n	8006442 <_realloc_r+0x5a>
 800641c:	4621      	mov	r1, r4
 800641e:	4640      	mov	r0, r8
 8006420:	f7ff ff6e 	bl	8006300 <_malloc_r>
 8006424:	4605      	mov	r5, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	d0ed      	beq.n	8006406 <_realloc_r+0x1e>
 800642a:	42bc      	cmp	r4, r7
 800642c:	4622      	mov	r2, r4
 800642e:	4631      	mov	r1, r6
 8006430:	bf28      	it	cs
 8006432:	463a      	movcs	r2, r7
 8006434:	f001 f9c0 	bl	80077b8 <memcpy>
 8006438:	4631      	mov	r1, r6
 800643a:	4640      	mov	r0, r8
 800643c:	f001 f9f0 	bl	8007820 <_free_r>
 8006440:	e7e1      	b.n	8006406 <_realloc_r+0x1e>
 8006442:	4635      	mov	r5, r6
 8006444:	e7df      	b.n	8006406 <_realloc_r+0x1e>

08006446 <__ssputs_r>:
 8006446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800644a:	688e      	ldr	r6, [r1, #8]
 800644c:	429e      	cmp	r6, r3
 800644e:	4682      	mov	sl, r0
 8006450:	460c      	mov	r4, r1
 8006452:	4690      	mov	r8, r2
 8006454:	461f      	mov	r7, r3
 8006456:	d838      	bhi.n	80064ca <__ssputs_r+0x84>
 8006458:	898a      	ldrh	r2, [r1, #12]
 800645a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800645e:	d032      	beq.n	80064c6 <__ssputs_r+0x80>
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	6909      	ldr	r1, [r1, #16]
 8006464:	eba5 0901 	sub.w	r9, r5, r1
 8006468:	6965      	ldr	r5, [r4, #20]
 800646a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800646e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006472:	3301      	adds	r3, #1
 8006474:	444b      	add	r3, r9
 8006476:	106d      	asrs	r5, r5, #1
 8006478:	429d      	cmp	r5, r3
 800647a:	bf38      	it	cc
 800647c:	461d      	movcc	r5, r3
 800647e:	0553      	lsls	r3, r2, #21
 8006480:	d531      	bpl.n	80064e6 <__ssputs_r+0xa0>
 8006482:	4629      	mov	r1, r5
 8006484:	f7ff ff3c 	bl	8006300 <_malloc_r>
 8006488:	4606      	mov	r6, r0
 800648a:	b950      	cbnz	r0, 80064a2 <__ssputs_r+0x5c>
 800648c:	230c      	movs	r3, #12
 800648e:	f8ca 3000 	str.w	r3, [sl]
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006498:	81a3      	strh	r3, [r4, #12]
 800649a:	f04f 30ff 	mov.w	r0, #4294967295
 800649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a2:	6921      	ldr	r1, [r4, #16]
 80064a4:	464a      	mov	r2, r9
 80064a6:	f001 f987 	bl	80077b8 <memcpy>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	6126      	str	r6, [r4, #16]
 80064b8:	6165      	str	r5, [r4, #20]
 80064ba:	444e      	add	r6, r9
 80064bc:	eba5 0509 	sub.w	r5, r5, r9
 80064c0:	6026      	str	r6, [r4, #0]
 80064c2:	60a5      	str	r5, [r4, #8]
 80064c4:	463e      	mov	r6, r7
 80064c6:	42be      	cmp	r6, r7
 80064c8:	d900      	bls.n	80064cc <__ssputs_r+0x86>
 80064ca:	463e      	mov	r6, r7
 80064cc:	6820      	ldr	r0, [r4, #0]
 80064ce:	4632      	mov	r2, r6
 80064d0:	4641      	mov	r1, r8
 80064d2:	f001 f97f 	bl	80077d4 <memmove>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	1b9b      	subs	r3, r3, r6
 80064da:	60a3      	str	r3, [r4, #8]
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	4433      	add	r3, r6
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	2000      	movs	r0, #0
 80064e4:	e7db      	b.n	800649e <__ssputs_r+0x58>
 80064e6:	462a      	mov	r2, r5
 80064e8:	f7ff ff7e 	bl	80063e8 <_realloc_r>
 80064ec:	4606      	mov	r6, r0
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1e1      	bne.n	80064b6 <__ssputs_r+0x70>
 80064f2:	6921      	ldr	r1, [r4, #16]
 80064f4:	4650      	mov	r0, sl
 80064f6:	f001 f993 	bl	8007820 <_free_r>
 80064fa:	e7c7      	b.n	800648c <__ssputs_r+0x46>

080064fc <_svfiprintf_r>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	4698      	mov	r8, r3
 8006502:	898b      	ldrh	r3, [r1, #12]
 8006504:	061b      	lsls	r3, r3, #24
 8006506:	b09d      	sub	sp, #116	; 0x74
 8006508:	4607      	mov	r7, r0
 800650a:	460d      	mov	r5, r1
 800650c:	4614      	mov	r4, r2
 800650e:	d50e      	bpl.n	800652e <_svfiprintf_r+0x32>
 8006510:	690b      	ldr	r3, [r1, #16]
 8006512:	b963      	cbnz	r3, 800652e <_svfiprintf_r+0x32>
 8006514:	2140      	movs	r1, #64	; 0x40
 8006516:	f7ff fef3 	bl	8006300 <_malloc_r>
 800651a:	6028      	str	r0, [r5, #0]
 800651c:	6128      	str	r0, [r5, #16]
 800651e:	b920      	cbnz	r0, 800652a <_svfiprintf_r+0x2e>
 8006520:	230c      	movs	r3, #12
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e0d1      	b.n	80066ce <_svfiprintf_r+0x1d2>
 800652a:	2340      	movs	r3, #64	; 0x40
 800652c:	616b      	str	r3, [r5, #20]
 800652e:	2300      	movs	r3, #0
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	2320      	movs	r3, #32
 8006534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006538:	f8cd 800c 	str.w	r8, [sp, #12]
 800653c:	2330      	movs	r3, #48	; 0x30
 800653e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066e8 <_svfiprintf_r+0x1ec>
 8006542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006546:	f04f 0901 	mov.w	r9, #1
 800654a:	4623      	mov	r3, r4
 800654c:	469a      	mov	sl, r3
 800654e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006552:	b10a      	cbz	r2, 8006558 <_svfiprintf_r+0x5c>
 8006554:	2a25      	cmp	r2, #37	; 0x25
 8006556:	d1f9      	bne.n	800654c <_svfiprintf_r+0x50>
 8006558:	ebba 0b04 	subs.w	fp, sl, r4
 800655c:	d00b      	beq.n	8006576 <_svfiprintf_r+0x7a>
 800655e:	465b      	mov	r3, fp
 8006560:	4622      	mov	r2, r4
 8006562:	4629      	mov	r1, r5
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff ff6e 	bl	8006446 <__ssputs_r>
 800656a:	3001      	adds	r0, #1
 800656c:	f000 80aa 	beq.w	80066c4 <_svfiprintf_r+0x1c8>
 8006570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006572:	445a      	add	r2, fp
 8006574:	9209      	str	r2, [sp, #36]	; 0x24
 8006576:	f89a 3000 	ldrb.w	r3, [sl]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 80a2 	beq.w	80066c4 <_svfiprintf_r+0x1c8>
 8006580:	2300      	movs	r3, #0
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658a:	f10a 0a01 	add.w	sl, sl, #1
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	9307      	str	r3, [sp, #28]
 8006592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006596:	931a      	str	r3, [sp, #104]	; 0x68
 8006598:	4654      	mov	r4, sl
 800659a:	2205      	movs	r2, #5
 800659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a0:	4851      	ldr	r0, [pc, #324]	; (80066e8 <_svfiprintf_r+0x1ec>)
 80065a2:	f7f9 fe1d 	bl	80001e0 <memchr>
 80065a6:	9a04      	ldr	r2, [sp, #16]
 80065a8:	b9d8      	cbnz	r0, 80065e2 <_svfiprintf_r+0xe6>
 80065aa:	06d0      	lsls	r0, r2, #27
 80065ac:	bf44      	itt	mi
 80065ae:	2320      	movmi	r3, #32
 80065b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b4:	0711      	lsls	r1, r2, #28
 80065b6:	bf44      	itt	mi
 80065b8:	232b      	movmi	r3, #43	; 0x2b
 80065ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065be:	f89a 3000 	ldrb.w	r3, [sl]
 80065c2:	2b2a      	cmp	r3, #42	; 0x2a
 80065c4:	d015      	beq.n	80065f2 <_svfiprintf_r+0xf6>
 80065c6:	9a07      	ldr	r2, [sp, #28]
 80065c8:	4654      	mov	r4, sl
 80065ca:	2000      	movs	r0, #0
 80065cc:	f04f 0c0a 	mov.w	ip, #10
 80065d0:	4621      	mov	r1, r4
 80065d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d6:	3b30      	subs	r3, #48	; 0x30
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d94e      	bls.n	800667a <_svfiprintf_r+0x17e>
 80065dc:	b1b0      	cbz	r0, 800660c <_svfiprintf_r+0x110>
 80065de:	9207      	str	r2, [sp, #28]
 80065e0:	e014      	b.n	800660c <_svfiprintf_r+0x110>
 80065e2:	eba0 0308 	sub.w	r3, r0, r8
 80065e6:	fa09 f303 	lsl.w	r3, r9, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	46a2      	mov	sl, r4
 80065f0:	e7d2      	b.n	8006598 <_svfiprintf_r+0x9c>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	9103      	str	r1, [sp, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfbb      	ittet	lt
 80065fe:	425b      	neglt	r3, r3
 8006600:	f042 0202 	orrlt.w	r2, r2, #2
 8006604:	9307      	strge	r3, [sp, #28]
 8006606:	9307      	strlt	r3, [sp, #28]
 8006608:	bfb8      	it	lt
 800660a:	9204      	strlt	r2, [sp, #16]
 800660c:	7823      	ldrb	r3, [r4, #0]
 800660e:	2b2e      	cmp	r3, #46	; 0x2e
 8006610:	d10c      	bne.n	800662c <_svfiprintf_r+0x130>
 8006612:	7863      	ldrb	r3, [r4, #1]
 8006614:	2b2a      	cmp	r3, #42	; 0x2a
 8006616:	d135      	bne.n	8006684 <_svfiprintf_r+0x188>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	9203      	str	r2, [sp, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	bfb8      	it	lt
 8006624:	f04f 33ff 	movlt.w	r3, #4294967295
 8006628:	3402      	adds	r4, #2
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066f8 <_svfiprintf_r+0x1fc>
 8006630:	7821      	ldrb	r1, [r4, #0]
 8006632:	2203      	movs	r2, #3
 8006634:	4650      	mov	r0, sl
 8006636:	f7f9 fdd3 	bl	80001e0 <memchr>
 800663a:	b140      	cbz	r0, 800664e <_svfiprintf_r+0x152>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	eba0 000a 	sub.w	r0, r0, sl
 8006642:	fa03 f000 	lsl.w	r0, r3, r0
 8006646:	9b04      	ldr	r3, [sp, #16]
 8006648:	4303      	orrs	r3, r0
 800664a:	3401      	adds	r4, #1
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006652:	4826      	ldr	r0, [pc, #152]	; (80066ec <_svfiprintf_r+0x1f0>)
 8006654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006658:	2206      	movs	r2, #6
 800665a:	f7f9 fdc1 	bl	80001e0 <memchr>
 800665e:	2800      	cmp	r0, #0
 8006660:	d038      	beq.n	80066d4 <_svfiprintf_r+0x1d8>
 8006662:	4b23      	ldr	r3, [pc, #140]	; (80066f0 <_svfiprintf_r+0x1f4>)
 8006664:	bb1b      	cbnz	r3, 80066ae <_svfiprintf_r+0x1b2>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3307      	adds	r3, #7
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	3308      	adds	r3, #8
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	4433      	add	r3, r6
 8006676:	9309      	str	r3, [sp, #36]	; 0x24
 8006678:	e767      	b.n	800654a <_svfiprintf_r+0x4e>
 800667a:	fb0c 3202 	mla	r2, ip, r2, r3
 800667e:	460c      	mov	r4, r1
 8006680:	2001      	movs	r0, #1
 8006682:	e7a5      	b.n	80065d0 <_svfiprintf_r+0xd4>
 8006684:	2300      	movs	r3, #0
 8006686:	3401      	adds	r4, #1
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	4619      	mov	r1, r3
 800668c:	f04f 0c0a 	mov.w	ip, #10
 8006690:	4620      	mov	r0, r4
 8006692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006696:	3a30      	subs	r2, #48	; 0x30
 8006698:	2a09      	cmp	r2, #9
 800669a:	d903      	bls.n	80066a4 <_svfiprintf_r+0x1a8>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0c5      	beq.n	800662c <_svfiprintf_r+0x130>
 80066a0:	9105      	str	r1, [sp, #20]
 80066a2:	e7c3      	b.n	800662c <_svfiprintf_r+0x130>
 80066a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a8:	4604      	mov	r4, r0
 80066aa:	2301      	movs	r3, #1
 80066ac:	e7f0      	b.n	8006690 <_svfiprintf_r+0x194>
 80066ae:	ab03      	add	r3, sp, #12
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	462a      	mov	r2, r5
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <_svfiprintf_r+0x1f8>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	4638      	mov	r0, r7
 80066ba:	f3af 8000 	nop.w
 80066be:	1c42      	adds	r2, r0, #1
 80066c0:	4606      	mov	r6, r0
 80066c2:	d1d6      	bne.n	8006672 <_svfiprintf_r+0x176>
 80066c4:	89ab      	ldrh	r3, [r5, #12]
 80066c6:	065b      	lsls	r3, r3, #25
 80066c8:	f53f af2c 	bmi.w	8006524 <_svfiprintf_r+0x28>
 80066cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ce:	b01d      	add	sp, #116	; 0x74
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	ab03      	add	r3, sp, #12
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	462a      	mov	r2, r5
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <_svfiprintf_r+0x1f8>)
 80066dc:	a904      	add	r1, sp, #16
 80066de:	4638      	mov	r0, r7
 80066e0:	f000 f87a 	bl	80067d8 <_printf_i>
 80066e4:	e7eb      	b.n	80066be <_svfiprintf_r+0x1c2>
 80066e6:	bf00      	nop
 80066e8:	0800852c 	.word	0x0800852c
 80066ec:	08008536 	.word	0x08008536
 80066f0:	00000000 	.word	0x00000000
 80066f4:	08006447 	.word	0x08006447
 80066f8:	08008532 	.word	0x08008532

080066fc <_printf_common>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	4616      	mov	r6, r2
 8006702:	4699      	mov	r9, r3
 8006704:	688a      	ldr	r2, [r1, #8]
 8006706:	690b      	ldr	r3, [r1, #16]
 8006708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800670c:	4293      	cmp	r3, r2
 800670e:	bfb8      	it	lt
 8006710:	4613      	movlt	r3, r2
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006718:	4607      	mov	r7, r0
 800671a:	460c      	mov	r4, r1
 800671c:	b10a      	cbz	r2, 8006722 <_printf_common+0x26>
 800671e:	3301      	adds	r3, #1
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	0699      	lsls	r1, r3, #26
 8006726:	bf42      	ittt	mi
 8006728:	6833      	ldrmi	r3, [r6, #0]
 800672a:	3302      	addmi	r3, #2
 800672c:	6033      	strmi	r3, [r6, #0]
 800672e:	6825      	ldr	r5, [r4, #0]
 8006730:	f015 0506 	ands.w	r5, r5, #6
 8006734:	d106      	bne.n	8006744 <_printf_common+0x48>
 8006736:	f104 0a19 	add.w	sl, r4, #25
 800673a:	68e3      	ldr	r3, [r4, #12]
 800673c:	6832      	ldr	r2, [r6, #0]
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	42ab      	cmp	r3, r5
 8006742:	dc26      	bgt.n	8006792 <_printf_common+0x96>
 8006744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006748:	1e13      	subs	r3, r2, #0
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	bf18      	it	ne
 800674e:	2301      	movne	r3, #1
 8006750:	0692      	lsls	r2, r2, #26
 8006752:	d42b      	bmi.n	80067ac <_printf_common+0xb0>
 8006754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006758:	4649      	mov	r1, r9
 800675a:	4638      	mov	r0, r7
 800675c:	47c0      	blx	r8
 800675e:	3001      	adds	r0, #1
 8006760:	d01e      	beq.n	80067a0 <_printf_common+0xa4>
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	68e5      	ldr	r5, [r4, #12]
 8006766:	6832      	ldr	r2, [r6, #0]
 8006768:	f003 0306 	and.w	r3, r3, #6
 800676c:	2b04      	cmp	r3, #4
 800676e:	bf08      	it	eq
 8006770:	1aad      	subeq	r5, r5, r2
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	6922      	ldr	r2, [r4, #16]
 8006776:	bf0c      	ite	eq
 8006778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800677c:	2500      	movne	r5, #0
 800677e:	4293      	cmp	r3, r2
 8006780:	bfc4      	itt	gt
 8006782:	1a9b      	subgt	r3, r3, r2
 8006784:	18ed      	addgt	r5, r5, r3
 8006786:	2600      	movs	r6, #0
 8006788:	341a      	adds	r4, #26
 800678a:	42b5      	cmp	r5, r6
 800678c:	d11a      	bne.n	80067c4 <_printf_common+0xc8>
 800678e:	2000      	movs	r0, #0
 8006790:	e008      	b.n	80067a4 <_printf_common+0xa8>
 8006792:	2301      	movs	r3, #1
 8006794:	4652      	mov	r2, sl
 8006796:	4649      	mov	r1, r9
 8006798:	4638      	mov	r0, r7
 800679a:	47c0      	blx	r8
 800679c:	3001      	adds	r0, #1
 800679e:	d103      	bne.n	80067a8 <_printf_common+0xac>
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	3501      	adds	r5, #1
 80067aa:	e7c6      	b.n	800673a <_printf_common+0x3e>
 80067ac:	18e1      	adds	r1, r4, r3
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	2030      	movs	r0, #48	; 0x30
 80067b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b6:	4422      	add	r2, r4
 80067b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c0:	3302      	adds	r3, #2
 80067c2:	e7c7      	b.n	8006754 <_printf_common+0x58>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4622      	mov	r2, r4
 80067c8:	4649      	mov	r1, r9
 80067ca:	4638      	mov	r0, r7
 80067cc:	47c0      	blx	r8
 80067ce:	3001      	adds	r0, #1
 80067d0:	d0e6      	beq.n	80067a0 <_printf_common+0xa4>
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7d9      	b.n	800678a <_printf_common+0x8e>
	...

080067d8 <_printf_i>:
 80067d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	7e0f      	ldrb	r7, [r1, #24]
 80067de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e0:	2f78      	cmp	r7, #120	; 0x78
 80067e2:	4691      	mov	r9, r2
 80067e4:	4680      	mov	r8, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	469a      	mov	sl, r3
 80067ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ee:	d807      	bhi.n	8006800 <_printf_i+0x28>
 80067f0:	2f62      	cmp	r7, #98	; 0x62
 80067f2:	d80a      	bhi.n	800680a <_printf_i+0x32>
 80067f4:	2f00      	cmp	r7, #0
 80067f6:	f000 80d8 	beq.w	80069aa <_printf_i+0x1d2>
 80067fa:	2f58      	cmp	r7, #88	; 0x58
 80067fc:	f000 80a3 	beq.w	8006946 <_printf_i+0x16e>
 8006800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006808:	e03a      	b.n	8006880 <_printf_i+0xa8>
 800680a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800680e:	2b15      	cmp	r3, #21
 8006810:	d8f6      	bhi.n	8006800 <_printf_i+0x28>
 8006812:	a101      	add	r1, pc, #4	; (adr r1, 8006818 <_printf_i+0x40>)
 8006814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006818:	08006871 	.word	0x08006871
 800681c:	08006885 	.word	0x08006885
 8006820:	08006801 	.word	0x08006801
 8006824:	08006801 	.word	0x08006801
 8006828:	08006801 	.word	0x08006801
 800682c:	08006801 	.word	0x08006801
 8006830:	08006885 	.word	0x08006885
 8006834:	08006801 	.word	0x08006801
 8006838:	08006801 	.word	0x08006801
 800683c:	08006801 	.word	0x08006801
 8006840:	08006801 	.word	0x08006801
 8006844:	08006991 	.word	0x08006991
 8006848:	080068b5 	.word	0x080068b5
 800684c:	08006973 	.word	0x08006973
 8006850:	08006801 	.word	0x08006801
 8006854:	08006801 	.word	0x08006801
 8006858:	080069b3 	.word	0x080069b3
 800685c:	08006801 	.word	0x08006801
 8006860:	080068b5 	.word	0x080068b5
 8006864:	08006801 	.word	0x08006801
 8006868:	08006801 	.word	0x08006801
 800686c:	0800697b 	.word	0x0800697b
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	1d1a      	adds	r2, r3, #4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800687c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006880:	2301      	movs	r3, #1
 8006882:	e0a3      	b.n	80069cc <_printf_i+0x1f4>
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	6829      	ldr	r1, [r5, #0]
 8006888:	0606      	lsls	r6, r0, #24
 800688a:	f101 0304 	add.w	r3, r1, #4
 800688e:	d50a      	bpl.n	80068a6 <_printf_i+0xce>
 8006890:	680e      	ldr	r6, [r1, #0]
 8006892:	602b      	str	r3, [r5, #0]
 8006894:	2e00      	cmp	r6, #0
 8006896:	da03      	bge.n	80068a0 <_printf_i+0xc8>
 8006898:	232d      	movs	r3, #45	; 0x2d
 800689a:	4276      	negs	r6, r6
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	485e      	ldr	r0, [pc, #376]	; (8006a1c <_printf_i+0x244>)
 80068a2:	230a      	movs	r3, #10
 80068a4:	e019      	b.n	80068da <_printf_i+0x102>
 80068a6:	680e      	ldr	r6, [r1, #0]
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068ae:	bf18      	it	ne
 80068b0:	b236      	sxthne	r6, r6
 80068b2:	e7ef      	b.n	8006894 <_printf_i+0xbc>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	6820      	ldr	r0, [r4, #0]
 80068b8:	1d19      	adds	r1, r3, #4
 80068ba:	6029      	str	r1, [r5, #0]
 80068bc:	0601      	lsls	r1, r0, #24
 80068be:	d501      	bpl.n	80068c4 <_printf_i+0xec>
 80068c0:	681e      	ldr	r6, [r3, #0]
 80068c2:	e002      	b.n	80068ca <_printf_i+0xf2>
 80068c4:	0646      	lsls	r6, r0, #25
 80068c6:	d5fb      	bpl.n	80068c0 <_printf_i+0xe8>
 80068c8:	881e      	ldrh	r6, [r3, #0]
 80068ca:	4854      	ldr	r0, [pc, #336]	; (8006a1c <_printf_i+0x244>)
 80068cc:	2f6f      	cmp	r7, #111	; 0x6f
 80068ce:	bf0c      	ite	eq
 80068d0:	2308      	moveq	r3, #8
 80068d2:	230a      	movne	r3, #10
 80068d4:	2100      	movs	r1, #0
 80068d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068da:	6865      	ldr	r5, [r4, #4]
 80068dc:	60a5      	str	r5, [r4, #8]
 80068de:	2d00      	cmp	r5, #0
 80068e0:	bfa2      	ittt	ge
 80068e2:	6821      	ldrge	r1, [r4, #0]
 80068e4:	f021 0104 	bicge.w	r1, r1, #4
 80068e8:	6021      	strge	r1, [r4, #0]
 80068ea:	b90e      	cbnz	r6, 80068f0 <_printf_i+0x118>
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	d04d      	beq.n	800698c <_printf_i+0x1b4>
 80068f0:	4615      	mov	r5, r2
 80068f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80068f6:	fb03 6711 	mls	r7, r3, r1, r6
 80068fa:	5dc7      	ldrb	r7, [r0, r7]
 80068fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006900:	4637      	mov	r7, r6
 8006902:	42bb      	cmp	r3, r7
 8006904:	460e      	mov	r6, r1
 8006906:	d9f4      	bls.n	80068f2 <_printf_i+0x11a>
 8006908:	2b08      	cmp	r3, #8
 800690a:	d10b      	bne.n	8006924 <_printf_i+0x14c>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07de      	lsls	r6, r3, #31
 8006910:	d508      	bpl.n	8006924 <_printf_i+0x14c>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6861      	ldr	r1, [r4, #4]
 8006916:	4299      	cmp	r1, r3
 8006918:	bfde      	ittt	le
 800691a:	2330      	movle	r3, #48	; 0x30
 800691c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006924:	1b52      	subs	r2, r2, r5
 8006926:	6122      	str	r2, [r4, #16]
 8006928:	f8cd a000 	str.w	sl, [sp]
 800692c:	464b      	mov	r3, r9
 800692e:	aa03      	add	r2, sp, #12
 8006930:	4621      	mov	r1, r4
 8006932:	4640      	mov	r0, r8
 8006934:	f7ff fee2 	bl	80066fc <_printf_common>
 8006938:	3001      	adds	r0, #1
 800693a:	d14c      	bne.n	80069d6 <_printf_i+0x1fe>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	b004      	add	sp, #16
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	4835      	ldr	r0, [pc, #212]	; (8006a1c <_printf_i+0x244>)
 8006948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800694c:	6829      	ldr	r1, [r5, #0]
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f851 6b04 	ldr.w	r6, [r1], #4
 8006954:	6029      	str	r1, [r5, #0]
 8006956:	061d      	lsls	r5, r3, #24
 8006958:	d514      	bpl.n	8006984 <_printf_i+0x1ac>
 800695a:	07df      	lsls	r7, r3, #31
 800695c:	bf44      	itt	mi
 800695e:	f043 0320 	orrmi.w	r3, r3, #32
 8006962:	6023      	strmi	r3, [r4, #0]
 8006964:	b91e      	cbnz	r6, 800696e <_printf_i+0x196>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	f023 0320 	bic.w	r3, r3, #32
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	2310      	movs	r3, #16
 8006970:	e7b0      	b.n	80068d4 <_printf_i+0xfc>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	2378      	movs	r3, #120	; 0x78
 800697c:	4828      	ldr	r0, [pc, #160]	; (8006a20 <_printf_i+0x248>)
 800697e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006982:	e7e3      	b.n	800694c <_printf_i+0x174>
 8006984:	0659      	lsls	r1, r3, #25
 8006986:	bf48      	it	mi
 8006988:	b2b6      	uxthmi	r6, r6
 800698a:	e7e6      	b.n	800695a <_printf_i+0x182>
 800698c:	4615      	mov	r5, r2
 800698e:	e7bb      	b.n	8006908 <_printf_i+0x130>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	6826      	ldr	r6, [r4, #0]
 8006994:	6961      	ldr	r1, [r4, #20]
 8006996:	1d18      	adds	r0, r3, #4
 8006998:	6028      	str	r0, [r5, #0]
 800699a:	0635      	lsls	r5, r6, #24
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0x1cc>
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0x1d2>
 80069a4:	0670      	lsls	r0, r6, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0x1c8>
 80069a8:	8019      	strh	r1, [r3, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	4615      	mov	r5, r2
 80069b0:	e7ba      	b.n	8006928 <_printf_i+0x150>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	602a      	str	r2, [r5, #0]
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	4628      	mov	r0, r5
 80069c0:	f7f9 fc0e 	bl	80001e0 <memchr>
 80069c4:	b108      	cbz	r0, 80069ca <_printf_i+0x1f2>
 80069c6:	1b40      	subs	r0, r0, r5
 80069c8:	6060      	str	r0, [r4, #4]
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	2300      	movs	r3, #0
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d4:	e7a8      	b.n	8006928 <_printf_i+0x150>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	462a      	mov	r2, r5
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	47d0      	blx	sl
 80069e0:	3001      	adds	r0, #1
 80069e2:	d0ab      	beq.n	800693c <_printf_i+0x164>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	079b      	lsls	r3, r3, #30
 80069e8:	d413      	bmi.n	8006a12 <_printf_i+0x23a>
 80069ea:	68e0      	ldr	r0, [r4, #12]
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	4298      	cmp	r0, r3
 80069f0:	bfb8      	it	lt
 80069f2:	4618      	movlt	r0, r3
 80069f4:	e7a4      	b.n	8006940 <_printf_i+0x168>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4632      	mov	r2, r6
 80069fa:	4649      	mov	r1, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	47d0      	blx	sl
 8006a00:	3001      	adds	r0, #1
 8006a02:	d09b      	beq.n	800693c <_printf_i+0x164>
 8006a04:	3501      	adds	r5, #1
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	9903      	ldr	r1, [sp, #12]
 8006a0a:	1a5b      	subs	r3, r3, r1
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dcf2      	bgt.n	80069f6 <_printf_i+0x21e>
 8006a10:	e7eb      	b.n	80069ea <_printf_i+0x212>
 8006a12:	2500      	movs	r5, #0
 8006a14:	f104 0619 	add.w	r6, r4, #25
 8006a18:	e7f5      	b.n	8006a06 <_printf_i+0x22e>
 8006a1a:	bf00      	nop
 8006a1c:	0800853d 	.word	0x0800853d
 8006a20:	0800854e 	.word	0x0800854e

08006a24 <_sbrk_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d06      	ldr	r5, [pc, #24]	; (8006a40 <_sbrk_r+0x1c>)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fb f948 	bl	8001cc4 <_sbrk>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_sbrk_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_sbrk_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000800 	.word	0x20000800

08006a44 <strcpy>:
 8006a44:	4603      	mov	r3, r0
 8006a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a4a:	f803 2b01 	strb.w	r2, [r3], #1
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d1f9      	bne.n	8006a46 <strcpy+0x2>
 8006a52:	4770      	bx	lr

08006a54 <__assert_func>:
 8006a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a56:	4614      	mov	r4, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <__assert_func+0x2c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4605      	mov	r5, r0
 8006a60:	68d8      	ldr	r0, [r3, #12]
 8006a62:	b14c      	cbz	r4, 8006a78 <__assert_func+0x24>
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <__assert_func+0x30>)
 8006a66:	9100      	str	r1, [sp, #0]
 8006a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a6c:	4906      	ldr	r1, [pc, #24]	; (8006a88 <__assert_func+0x34>)
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f000 fe88 	bl	8007784 <fiprintf>
 8006a74:	f001 f942 	bl	8007cfc <abort>
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <__assert_func+0x38>)
 8006a7a:	461c      	mov	r4, r3
 8006a7c:	e7f3      	b.n	8006a66 <__assert_func+0x12>
 8006a7e:	bf00      	nop
 8006a80:	2000000c 	.word	0x2000000c
 8006a84:	0800855f 	.word	0x0800855f
 8006a88:	0800856c 	.word	0x0800856c
 8006a8c:	0800859a 	.word	0x0800859a

08006a90 <quorem>:
 8006a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	6903      	ldr	r3, [r0, #16]
 8006a96:	690c      	ldr	r4, [r1, #16]
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	f2c0 8081 	blt.w	8006ba2 <quorem+0x112>
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	f101 0814 	add.w	r8, r1, #20
 8006aa6:	f100 0514 	add.w	r5, r0, #20
 8006aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	429a      	cmp	r2, r3
 8006abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ac8:	d331      	bcc.n	8006b2e <quorem+0x9e>
 8006aca:	f04f 0e00 	mov.w	lr, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	46ac      	mov	ip, r5
 8006ad2:	46f2      	mov	sl, lr
 8006ad4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ad8:	b293      	uxth	r3, r2
 8006ada:	fb06 e303 	mla	r3, r6, r3, lr
 8006ade:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ae8:	f8dc a000 	ldr.w	sl, [ip]
 8006aec:	0c12      	lsrs	r2, r2, #16
 8006aee:	fa13 f38a 	uxtah	r3, r3, sl
 8006af2:	fb06 e202 	mla	r2, r6, r2, lr
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	9b00      	ldr	r3, [sp, #0]
 8006afa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006afe:	b292      	uxth	r2, r2
 8006b00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b08:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b12:	f84c 3b04 	str.w	r3, [ip], #4
 8006b16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b1a:	d2db      	bcs.n	8006ad4 <quorem+0x44>
 8006b1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b20:	b92b      	cbnz	r3, 8006b2e <quorem+0x9e>
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	429d      	cmp	r5, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	d32e      	bcc.n	8006b8a <quorem+0xfa>
 8006b2c:	613c      	str	r4, [r7, #16]
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f7ff fa90 	bl	8006054 <__mcmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db24      	blt.n	8006b82 <quorem+0xf2>
 8006b38:	3601      	adds	r6, #1
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b44:	f8d0 e000 	ldr.w	lr, [r0]
 8006b48:	b293      	uxth	r3, r2
 8006b4a:	ebac 0303 	sub.w	r3, ip, r3
 8006b4e:	0c12      	lsrs	r2, r2, #16
 8006b50:	fa13 f38e 	uxtah	r3, r3, lr
 8006b54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b62:	45c1      	cmp	r9, r8
 8006b64:	f840 3b04 	str.w	r3, [r0], #4
 8006b68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b6c:	d2e8      	bcs.n	8006b40 <quorem+0xb0>
 8006b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b76:	b922      	cbnz	r2, 8006b82 <quorem+0xf2>
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	429d      	cmp	r5, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	d30a      	bcc.n	8006b96 <quorem+0x106>
 8006b80:	613c      	str	r4, [r7, #16]
 8006b82:	4630      	mov	r0, r6
 8006b84:	b003      	add	sp, #12
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d1cc      	bne.n	8006b2c <quorem+0x9c>
 8006b92:	3c01      	subs	r4, #1
 8006b94:	e7c7      	b.n	8006b26 <quorem+0x96>
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d1f0      	bne.n	8006b80 <quorem+0xf0>
 8006b9e:	3c01      	subs	r4, #1
 8006ba0:	e7eb      	b.n	8006b7a <quorem+0xea>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e7ee      	b.n	8006b84 <quorem+0xf4>
	...

08006ba8 <_dtoa_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	ed2d 8b04 	vpush	{d8-d9}
 8006bb0:	ec57 6b10 	vmov	r6, r7, d0
 8006bb4:	b093      	sub	sp, #76	; 0x4c
 8006bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bbc:	9106      	str	r1, [sp, #24]
 8006bbe:	ee10 aa10 	vmov	sl, s0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc8:	46bb      	mov	fp, r7
 8006bca:	b975      	cbnz	r5, 8006bea <_dtoa_r+0x42>
 8006bcc:	2010      	movs	r0, #16
 8006bce:	f000 fdeb 	bl	80077a8 <malloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd6:	b920      	cbnz	r0, 8006be2 <_dtoa_r+0x3a>
 8006bd8:	4ba7      	ldr	r3, [pc, #668]	; (8006e78 <_dtoa_r+0x2d0>)
 8006bda:	21ea      	movs	r1, #234	; 0xea
 8006bdc:	48a7      	ldr	r0, [pc, #668]	; (8006e7c <_dtoa_r+0x2d4>)
 8006bde:	f7ff ff39 	bl	8006a54 <__assert_func>
 8006be2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006be6:	6005      	str	r5, [r0, #0]
 8006be8:	60c5      	str	r5, [r0, #12]
 8006bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	b151      	cbz	r1, 8006c06 <_dtoa_r+0x5e>
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	604a      	str	r2, [r1, #4]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4093      	lsls	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7fe ffe8 	bl	8005bd0 <_Bfree>
 8006c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	1e3b      	subs	r3, r7, #0
 8006c08:	bfaa      	itet	ge
 8006c0a:	2300      	movge	r3, #0
 8006c0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006c10:	f8c8 3000 	strge.w	r3, [r8]
 8006c14:	4b9a      	ldr	r3, [pc, #616]	; (8006e80 <_dtoa_r+0x2d8>)
 8006c16:	bfbc      	itt	lt
 8006c18:	2201      	movlt	r2, #1
 8006c1a:	f8c8 2000 	strlt.w	r2, [r8]
 8006c1e:	ea33 030b 	bics.w	r3, r3, fp
 8006c22:	d11b      	bne.n	8006c5c <_dtoa_r+0xb4>
 8006c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c26:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c30:	4333      	orrs	r3, r6
 8006c32:	f000 8592 	beq.w	800775a <_dtoa_r+0xbb2>
 8006c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c38:	b963      	cbnz	r3, 8006c54 <_dtoa_r+0xac>
 8006c3a:	4b92      	ldr	r3, [pc, #584]	; (8006e84 <_dtoa_r+0x2dc>)
 8006c3c:	e022      	b.n	8006c84 <_dtoa_r+0xdc>
 8006c3e:	4b92      	ldr	r3, [pc, #584]	; (8006e88 <_dtoa_r+0x2e0>)
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	3308      	adds	r3, #8
 8006c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	b013      	add	sp, #76	; 0x4c
 8006c4c:	ecbd 8b04 	vpop	{d8-d9}
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	4b8b      	ldr	r3, [pc, #556]	; (8006e84 <_dtoa_r+0x2dc>)
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	e7f3      	b.n	8006c44 <_dtoa_r+0x9c>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 ff30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c68:	ec4b ab19 	vmov	d9, sl, fp
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	b158      	cbz	r0, 8006c88 <_dtoa_r+0xe0>
 8006c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c72:	2301      	movs	r3, #1
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 856b 	beq.w	8007754 <_dtoa_r+0xbac>
 8006c7e:	4883      	ldr	r0, [pc, #524]	; (8006e8c <_dtoa_r+0x2e4>)
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	1e43      	subs	r3, r0, #1
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	e7df      	b.n	8006c48 <_dtoa_r+0xa0>
 8006c88:	ec4b ab10 	vmov	d0, sl, fp
 8006c8c:	aa10      	add	r2, sp, #64	; 0x40
 8006c8e:	a911      	add	r1, sp, #68	; 0x44
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff fa85 	bl	80061a0 <__d2b>
 8006c96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c9a:	ee08 0a10 	vmov	s16, r0
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	f000 8084 	beq.w	8006dac <_dtoa_r+0x204>
 8006ca4:	ee19 3a90 	vmov	r3, s19
 8006ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cb0:	4656      	mov	r6, sl
 8006cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006cbe:	4b74      	ldr	r3, [pc, #464]	; (8006e90 <_dtoa_r+0x2e8>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	f7f9 fadf 	bl	8000288 <__aeabi_dsub>
 8006cca:	a365      	add	r3, pc, #404	; (adr r3, 8006e60 <_dtoa_r+0x2b8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fc92 	bl	80005f8 <__aeabi_dmul>
 8006cd4:	a364      	add	r3, pc, #400	; (adr r3, 8006e68 <_dtoa_r+0x2c0>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fad7 	bl	800028c <__adddf3>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	f7f9 fc1e 	bl	8000524 <__aeabi_i2d>
 8006ce8:	a361      	add	r3, pc, #388	; (adr r3, 8006e70 <_dtoa_r+0x2c8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc83 	bl	80005f8 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 fac7 	bl	800028c <__adddf3>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 ff13 	bl	8000b2c <__aeabi_d2iz>
 8006d06:	2200      	movs	r2, #0
 8006d08:	9000      	str	r0, [sp, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fee4 	bl	8000adc <__aeabi_dcmplt>
 8006d14:	b150      	cbz	r0, 8006d2c <_dtoa_r+0x184>
 8006d16:	9800      	ldr	r0, [sp, #0]
 8006d18:	f7f9 fc04 	bl	8000524 <__aeabi_i2d>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	f7f9 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d24:	b910      	cbnz	r0, 8006d2c <_dtoa_r+0x184>
 8006d26:	9b00      	ldr	r3, [sp, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	2b16      	cmp	r3, #22
 8006d30:	d85a      	bhi.n	8006de8 <_dtoa_r+0x240>
 8006d32:	9a00      	ldr	r2, [sp, #0]
 8006d34:	4b57      	ldr	r3, [pc, #348]	; (8006e94 <_dtoa_r+0x2ec>)
 8006d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	ec51 0b19 	vmov	r0, r1, d9
 8006d42:	f7f9 fecb 	bl	8000adc <__aeabi_dcmplt>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d050      	beq.n	8006dec <_dtoa_r+0x244>
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d56:	1b5d      	subs	r5, r3, r5
 8006d58:	1e6b      	subs	r3, r5, #1
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	bf45      	ittet	mi
 8006d5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d62:	9304      	strmi	r3, [sp, #16]
 8006d64:	2300      	movpl	r3, #0
 8006d66:	2300      	movmi	r3, #0
 8006d68:	bf4c      	ite	mi
 8006d6a:	9305      	strmi	r3, [sp, #20]
 8006d6c:	9304      	strpl	r3, [sp, #16]
 8006d6e:	9b00      	ldr	r3, [sp, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db3d      	blt.n	8006df0 <_dtoa_r+0x248>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	9a00      	ldr	r2, [sp, #0]
 8006d78:	920a      	str	r2, [sp, #40]	; 0x28
 8006d7a:	4413      	add	r3, r2
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	f200 8089 	bhi.w	8006e9c <_dtoa_r+0x2f4>
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	bfc4      	itt	gt
 8006d8e:	3b04      	subgt	r3, #4
 8006d90:	9306      	strgt	r3, [sp, #24]
 8006d92:	9b06      	ldr	r3, [sp, #24]
 8006d94:	f1a3 0302 	sub.w	r3, r3, #2
 8006d98:	bfcc      	ite	gt
 8006d9a:	2500      	movgt	r5, #0
 8006d9c:	2501      	movle	r5, #1
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	f200 8087 	bhi.w	8006eb2 <_dtoa_r+0x30a>
 8006da4:	e8df f003 	tbb	[pc, r3]
 8006da8:	59383a2d 	.word	0x59383a2d
 8006dac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006db0:	441d      	add	r5, r3
 8006db2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	bfc1      	itttt	gt
 8006dba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dca:	bfda      	itte	le
 8006dcc:	f1c3 0320 	rsble	r3, r3, #32
 8006dd0:	fa06 f003 	lslle.w	r0, r6, r3
 8006dd4:	4318      	orrgt	r0, r3
 8006dd6:	f7f9 fb95 	bl	8000504 <__aeabi_ui2d>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4606      	mov	r6, r0
 8006dde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006de2:	3d01      	subs	r5, #1
 8006de4:	930e      	str	r3, [sp, #56]	; 0x38
 8006de6:	e76a      	b.n	8006cbe <_dtoa_r+0x116>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7b2      	b.n	8006d52 <_dtoa_r+0x1aa>
 8006dec:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dee:	e7b1      	b.n	8006d54 <_dtoa_r+0x1ac>
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	9a00      	ldr	r2, [sp, #0]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	4253      	negs	r3, r2
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006e00:	e7bf      	b.n	8006d82 <_dtoa_r+0x1da>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9308      	str	r3, [sp, #32]
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc55      	bgt.n	8006eb8 <_dtoa_r+0x310>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e12:	461a      	mov	r2, r3
 8006e14:	9209      	str	r2, [sp, #36]	; 0x24
 8006e16:	e00c      	b.n	8006e32 <_dtoa_r+0x28a>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e7f3      	b.n	8006e04 <_dtoa_r+0x25c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e20:	9308      	str	r3, [sp, #32]
 8006e22:	9b00      	ldr	r3, [sp, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	9302      	str	r3, [sp, #8]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	9303      	str	r3, [sp, #12]
 8006e2e:	bfb8      	it	lt
 8006e30:	2301      	movlt	r3, #1
 8006e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e34:	2200      	movs	r2, #0
 8006e36:	6042      	str	r2, [r0, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	f102 0614 	add.w	r6, r2, #20
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	6841      	ldr	r1, [r0, #4]
 8006e42:	d93d      	bls.n	8006ec0 <_dtoa_r+0x318>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7fe fe83 	bl	8005b50 <_Balloc>
 8006e4a:	9001      	str	r0, [sp, #4]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d13b      	bne.n	8006ec8 <_dtoa_r+0x320>
 8006e50:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <_dtoa_r+0x2f0>)
 8006e52:	4602      	mov	r2, r0
 8006e54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e58:	e6c0      	b.n	8006bdc <_dtoa_r+0x34>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e7df      	b.n	8006e1e <_dtoa_r+0x276>
 8006e5e:	bf00      	nop
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	080083a8 	.word	0x080083a8
 8006e7c:	080085aa 	.word	0x080085aa
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	080085a4 	.word	0x080085a4
 8006e88:	0800859b 	.word	0x0800859b
 8006e8c:	080085a9 	.word	0x080085a9
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	08008458 	.word	0x08008458
 8006e98:	0800841b 	.word	0x0800841b
 8006e9c:	2501      	movs	r5, #1
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9306      	str	r3, [sp, #24]
 8006ea2:	9508      	str	r5, [sp, #32]
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	2312      	movs	r3, #18
 8006eb0:	e7b0      	b.n	8006e14 <_dtoa_r+0x26c>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	e7f5      	b.n	8006ea4 <_dtoa_r+0x2fc>
 8006eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ebe:	e7b8      	b.n	8006e32 <_dtoa_r+0x28a>
 8006ec0:	3101      	adds	r1, #1
 8006ec2:	6041      	str	r1, [r0, #4]
 8006ec4:	0052      	lsls	r2, r2, #1
 8006ec6:	e7b8      	b.n	8006e3a <_dtoa_r+0x292>
 8006ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	2b0e      	cmp	r3, #14
 8006ed2:	f200 809d 	bhi.w	8007010 <_dtoa_r+0x468>
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	f000 809a 	beq.w	8007010 <_dtoa_r+0x468>
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd32      	ble.n	8006f48 <_dtoa_r+0x3a0>
 8006ee2:	4ab7      	ldr	r2, [pc, #732]	; (80071c0 <_dtoa_r+0x618>)
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ef0:	9b00      	ldr	r3, [sp, #0]
 8006ef2:	05d8      	lsls	r0, r3, #23
 8006ef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ef8:	d516      	bpl.n	8006f28 <_dtoa_r+0x380>
 8006efa:	4bb2      	ldr	r3, [pc, #712]	; (80071c4 <_dtoa_r+0x61c>)
 8006efc:	ec51 0b19 	vmov	r0, r1, d9
 8006f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f04:	f7f9 fca2 	bl	800084c <__aeabi_ddiv>
 8006f08:	f007 070f 	and.w	r7, r7, #15
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	468b      	mov	fp, r1
 8006f10:	2503      	movs	r5, #3
 8006f12:	4eac      	ldr	r6, [pc, #688]	; (80071c4 <_dtoa_r+0x61c>)
 8006f14:	b957      	cbnz	r7, 8006f2c <_dtoa_r+0x384>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 fc95 	bl	800084c <__aeabi_ddiv>
 8006f22:	4682      	mov	sl, r0
 8006f24:	468b      	mov	fp, r1
 8006f26:	e028      	b.n	8006f7a <_dtoa_r+0x3d2>
 8006f28:	2502      	movs	r5, #2
 8006f2a:	e7f2      	b.n	8006f12 <_dtoa_r+0x36a>
 8006f2c:	07f9      	lsls	r1, r7, #31
 8006f2e:	d508      	bpl.n	8006f42 <_dtoa_r+0x39a>
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4689      	mov	r9, r1
 8006f42:	107f      	asrs	r7, r7, #1
 8006f44:	3608      	adds	r6, #8
 8006f46:	e7e5      	b.n	8006f14 <_dtoa_r+0x36c>
 8006f48:	f000 809b 	beq.w	8007082 <_dtoa_r+0x4da>
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	4f9d      	ldr	r7, [pc, #628]	; (80071c4 <_dtoa_r+0x61c>)
 8006f50:	425e      	negs	r6, r3
 8006f52:	4b9b      	ldr	r3, [pc, #620]	; (80071c0 <_dtoa_r+0x618>)
 8006f54:	f006 020f 	and.w	r2, r6, #15
 8006f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	ec51 0b19 	vmov	r0, r1, d9
 8006f64:	f7f9 fb48 	bl	80005f8 <__aeabi_dmul>
 8006f68:	1136      	asrs	r6, r6, #4
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2502      	movs	r5, #2
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d17a      	bne.n	800706c <_dtoa_r+0x4c4>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1d3      	bne.n	8006f22 <_dtoa_r+0x37a>
 8006f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8082 	beq.w	8007086 <_dtoa_r+0x4de>
 8006f82:	4b91      	ldr	r3, [pc, #580]	; (80071c8 <_dtoa_r+0x620>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	4650      	mov	r0, sl
 8006f88:	4659      	mov	r1, fp
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d079      	beq.n	8007086 <_dtoa_r+0x4de>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d076      	beq.n	8007086 <_dtoa_r+0x4de>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd36      	ble.n	800700c <_dtoa_r+0x464>
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	1e5f      	subs	r7, r3, #1
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4b88      	ldr	r3, [pc, #544]	; (80071cc <_dtoa_r+0x624>)
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	9e02      	ldr	r6, [sp, #8]
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7f9 fab4 	bl	8000524 <__aeabi_i2d>
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	465b      	mov	r3, fp
 8006fc0:	f7f9 fb1a 	bl	80005f8 <__aeabi_dmul>
 8006fc4:	4b82      	ldr	r3, [pc, #520]	; (80071d0 <_dtoa_r+0x628>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f7f9 f960 	bl	800028c <__adddf3>
 8006fcc:	46d0      	mov	r8, sl
 8006fce:	46d9      	mov	r9, fp
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	d158      	bne.n	800708c <_dtoa_r+0x4e4>
 8006fda:	4b7e      	ldr	r3, [pc, #504]	; (80071d4 <_dtoa_r+0x62c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 f951 	bl	8000288 <__aeabi_dsub>
 8006fe6:	4652      	mov	r2, sl
 8006fe8:	465b      	mov	r3, fp
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	f7f9 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f040 8295 	bne.w	8007522 <_dtoa_r+0x97a>
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	f040 8289 	bne.w	800751e <_dtoa_r+0x976>
 800700c:	ec5b ab19 	vmov	sl, fp, d9
 8007010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007012:	2b00      	cmp	r3, #0
 8007014:	f2c0 8148 	blt.w	80072a8 <_dtoa_r+0x700>
 8007018:	9a00      	ldr	r2, [sp, #0]
 800701a:	2a0e      	cmp	r2, #14
 800701c:	f300 8144 	bgt.w	80072a8 <_dtoa_r+0x700>
 8007020:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <_dtoa_r+0x618>)
 8007022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	f280 80d5 	bge.w	80071dc <_dtoa_r+0x634>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f300 80d1 	bgt.w	80071dc <_dtoa_r+0x634>
 800703a:	f040 826f 	bne.w	800751c <_dtoa_r+0x974>
 800703e:	4b65      	ldr	r3, [pc, #404]	; (80071d4 <_dtoa_r+0x62c>)
 8007040:	2200      	movs	r2, #0
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	f7f9 fad7 	bl	80005f8 <__aeabi_dmul>
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	f7f9 fd59 	bl	8000b04 <__aeabi_dcmpge>
 8007052:	9e03      	ldr	r6, [sp, #12]
 8007054:	4637      	mov	r7, r6
 8007056:	2800      	cmp	r0, #0
 8007058:	f040 8245 	bne.w	80074e6 <_dtoa_r+0x93e>
 800705c:	9d01      	ldr	r5, [sp, #4]
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	f805 3b01 	strb.w	r3, [r5], #1
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	e240      	b.n	80074ee <_dtoa_r+0x946>
 800706c:	07f2      	lsls	r2, r6, #31
 800706e:	d505      	bpl.n	800707c <_dtoa_r+0x4d4>
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_dmul>
 8007078:	3501      	adds	r5, #1
 800707a:	2301      	movs	r3, #1
 800707c:	1076      	asrs	r6, r6, #1
 800707e:	3708      	adds	r7, #8
 8007080:	e777      	b.n	8006f72 <_dtoa_r+0x3ca>
 8007082:	2502      	movs	r5, #2
 8007084:	e779      	b.n	8006f7a <_dtoa_r+0x3d2>
 8007086:	9f00      	ldr	r7, [sp, #0]
 8007088:	9e03      	ldr	r6, [sp, #12]
 800708a:	e794      	b.n	8006fb6 <_dtoa_r+0x40e>
 800708c:	9901      	ldr	r1, [sp, #4]
 800708e:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <_dtoa_r+0x618>)
 8007090:	4431      	add	r1, r6
 8007092:	910d      	str	r1, [sp, #52]	; 0x34
 8007094:	9908      	ldr	r1, [sp, #32]
 8007096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800709a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d043      	beq.n	800712a <_dtoa_r+0x582>
 80070a2:	494d      	ldr	r1, [pc, #308]	; (80071d8 <_dtoa_r+0x630>)
 80070a4:	2000      	movs	r0, #0
 80070a6:	f7f9 fbd1 	bl	800084c <__aeabi_ddiv>
 80070aa:	4652      	mov	r2, sl
 80070ac:	465b      	mov	r3, fp
 80070ae:	f7f9 f8eb 	bl	8000288 <__aeabi_dsub>
 80070b2:	9d01      	ldr	r5, [sp, #4]
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	4649      	mov	r1, r9
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7f9 fd36 	bl	8000b2c <__aeabi_d2iz>
 80070c0:	4606      	mov	r6, r0
 80070c2:	f7f9 fa2f 	bl	8000524 <__aeabi_i2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4640      	mov	r0, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	f7f9 f8db 	bl	8000288 <__aeabi_dsub>
 80070d2:	3630      	adds	r6, #48	; 0x30
 80070d4:	f805 6b01 	strb.w	r6, [r5], #1
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	4680      	mov	r8, r0
 80070de:	4689      	mov	r9, r1
 80070e0:	f7f9 fcfc 	bl	8000adc <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d163      	bne.n	80071b0 <_dtoa_r+0x608>
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4936      	ldr	r1, [pc, #216]	; (80071c8 <_dtoa_r+0x620>)
 80070ee:	2000      	movs	r0, #0
 80070f0:	f7f9 f8ca 	bl	8000288 <__aeabi_dsub>
 80070f4:	4652      	mov	r2, sl
 80070f6:	465b      	mov	r3, fp
 80070f8:	f7f9 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f040 80b5 	bne.w	800726c <_dtoa_r+0x6c4>
 8007102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007104:	429d      	cmp	r5, r3
 8007106:	d081      	beq.n	800700c <_dtoa_r+0x464>
 8007108:	4b30      	ldr	r3, [pc, #192]	; (80071cc <_dtoa_r+0x624>)
 800710a:	2200      	movs	r2, #0
 800710c:	4650      	mov	r0, sl
 800710e:	4659      	mov	r1, fp
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <_dtoa_r+0x624>)
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	4640      	mov	r0, r8
 800711c:	4649      	mov	r1, r9
 800711e:	2200      	movs	r2, #0
 8007120:	f7f9 fa6a 	bl	80005f8 <__aeabi_dmul>
 8007124:	4680      	mov	r8, r0
 8007126:	4689      	mov	r9, r1
 8007128:	e7c6      	b.n	80070b8 <_dtoa_r+0x510>
 800712a:	4650      	mov	r0, sl
 800712c:	4659      	mov	r1, fp
 800712e:	f7f9 fa63 	bl	80005f8 <__aeabi_dmul>
 8007132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007134:	9d01      	ldr	r5, [sp, #4]
 8007136:	930f      	str	r3, [sp, #60]	; 0x3c
 8007138:	4682      	mov	sl, r0
 800713a:	468b      	mov	fp, r1
 800713c:	4649      	mov	r1, r9
 800713e:	4640      	mov	r0, r8
 8007140:	f7f9 fcf4 	bl	8000b2c <__aeabi_d2iz>
 8007144:	4606      	mov	r6, r0
 8007146:	f7f9 f9ed 	bl	8000524 <__aeabi_i2d>
 800714a:	3630      	adds	r6, #48	; 0x30
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 f898 	bl	8000288 <__aeabi_dsub>
 8007158:	f805 6b01 	strb.w	r6, [r5], #1
 800715c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715e:	429d      	cmp	r5, r3
 8007160:	4680      	mov	r8, r0
 8007162:	4689      	mov	r9, r1
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	d124      	bne.n	80071b4 <_dtoa_r+0x60c>
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <_dtoa_r+0x630>)
 800716c:	4650      	mov	r0, sl
 800716e:	4659      	mov	r1, fp
 8007170:	f7f9 f88c 	bl	800028c <__adddf3>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8007180:	2800      	cmp	r0, #0
 8007182:	d173      	bne.n	800726c <_dtoa_r+0x6c4>
 8007184:	4652      	mov	r2, sl
 8007186:	465b      	mov	r3, fp
 8007188:	4913      	ldr	r1, [pc, #76]	; (80071d8 <_dtoa_r+0x630>)
 800718a:	2000      	movs	r0, #0
 800718c:	f7f9 f87c 	bl	8000288 <__aeabi_dsub>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 fca0 	bl	8000adc <__aeabi_dcmplt>
 800719c:	2800      	cmp	r0, #0
 800719e:	f43f af35 	beq.w	800700c <_dtoa_r+0x464>
 80071a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071a4:	1e6b      	subs	r3, r5, #1
 80071a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	d0f8      	beq.n	80071a2 <_dtoa_r+0x5fa>
 80071b0:	9700      	str	r7, [sp, #0]
 80071b2:	e049      	b.n	8007248 <_dtoa_r+0x6a0>
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <_dtoa_r+0x624>)
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	4680      	mov	r8, r0
 80071bc:	4689      	mov	r9, r1
 80071be:	e7bd      	b.n	800713c <_dtoa_r+0x594>
 80071c0:	08008458 	.word	0x08008458
 80071c4:	08008430 	.word	0x08008430
 80071c8:	3ff00000 	.word	0x3ff00000
 80071cc:	40240000 	.word	0x40240000
 80071d0:	401c0000 	.word	0x401c0000
 80071d4:	40140000 	.word	0x40140000
 80071d8:	3fe00000 	.word	0x3fe00000
 80071dc:	9d01      	ldr	r5, [sp, #4]
 80071de:	4656      	mov	r6, sl
 80071e0:	465f      	mov	r7, fp
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fb2f 	bl	800084c <__aeabi_ddiv>
 80071ee:	f7f9 fc9d 	bl	8000b2c <__aeabi_d2iz>
 80071f2:	4682      	mov	sl, r0
 80071f4:	f7f9 f996 	bl	8000524 <__aeabi_i2d>
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800720c:	f7f9 f83c 	bl	8000288 <__aeabi_dsub>
 8007210:	f805 6b01 	strb.w	r6, [r5], #1
 8007214:	9e01      	ldr	r6, [sp, #4]
 8007216:	9f03      	ldr	r7, [sp, #12]
 8007218:	1bae      	subs	r6, r5, r6
 800721a:	42b7      	cmp	r7, r6
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	d135      	bne.n	800728e <_dtoa_r+0x6e6>
 8007222:	f7f9 f833 	bl	800028c <__adddf3>
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	f7f9 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8007232:	b9d0      	cbnz	r0, 800726a <_dtoa_r+0x6c2>
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007240:	b110      	cbz	r0, 8007248 <_dtoa_r+0x6a0>
 8007242:	f01a 0f01 	tst.w	sl, #1
 8007246:	d110      	bne.n	800726a <_dtoa_r+0x6c2>
 8007248:	4620      	mov	r0, r4
 800724a:	ee18 1a10 	vmov	r1, s16
 800724e:	f7fe fcbf 	bl	8005bd0 <_Bfree>
 8007252:	2300      	movs	r3, #0
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	702b      	strb	r3, [r5, #0]
 8007258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800725a:	3001      	adds	r0, #1
 800725c:	6018      	str	r0, [r3, #0]
 800725e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007260:	2b00      	cmp	r3, #0
 8007262:	f43f acf1 	beq.w	8006c48 <_dtoa_r+0xa0>
 8007266:	601d      	str	r5, [r3, #0]
 8007268:	e4ee      	b.n	8006c48 <_dtoa_r+0xa0>
 800726a:	9f00      	ldr	r7, [sp, #0]
 800726c:	462b      	mov	r3, r5
 800726e:	461d      	mov	r5, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a39      	cmp	r2, #57	; 0x39
 8007276:	d106      	bne.n	8007286 <_dtoa_r+0x6de>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d1f7      	bne.n	800726e <_dtoa_r+0x6c6>
 800727e:	9901      	ldr	r1, [sp, #4]
 8007280:	2230      	movs	r2, #48	; 0x30
 8007282:	3701      	adds	r7, #1
 8007284:	700a      	strb	r2, [r1, #0]
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	3201      	adds	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	e790      	b.n	80071b0 <_dtoa_r+0x608>
 800728e:	4ba6      	ldr	r3, [pc, #664]	; (8007528 <_dtoa_r+0x980>)
 8007290:	2200      	movs	r2, #0
 8007292:	f7f9 f9b1 	bl	80005f8 <__aeabi_dmul>
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f7f9 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d09d      	beq.n	80071e2 <_dtoa_r+0x63a>
 80072a6:	e7cf      	b.n	8007248 <_dtoa_r+0x6a0>
 80072a8:	9a08      	ldr	r2, [sp, #32]
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	f000 80d7 	beq.w	800745e <_dtoa_r+0x8b6>
 80072b0:	9a06      	ldr	r2, [sp, #24]
 80072b2:	2a01      	cmp	r2, #1
 80072b4:	f300 80ba 	bgt.w	800742c <_dtoa_r+0x884>
 80072b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	f000 80b2 	beq.w	8007424 <_dtoa_r+0x87c>
 80072c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072c4:	9e07      	ldr	r6, [sp, #28]
 80072c6:	9d04      	ldr	r5, [sp, #16]
 80072c8:	9a04      	ldr	r2, [sp, #16]
 80072ca:	441a      	add	r2, r3
 80072cc:	9204      	str	r2, [sp, #16]
 80072ce:	9a05      	ldr	r2, [sp, #20]
 80072d0:	2101      	movs	r1, #1
 80072d2:	441a      	add	r2, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	9205      	str	r2, [sp, #20]
 80072d8:	f7fe fd32 	bl	8005d40 <__i2b>
 80072dc:	4607      	mov	r7, r0
 80072de:	2d00      	cmp	r5, #0
 80072e0:	dd0c      	ble.n	80072fc <_dtoa_r+0x754>
 80072e2:	9b05      	ldr	r3, [sp, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd09      	ble.n	80072fc <_dtoa_r+0x754>
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	bfa8      	it	ge
 80072ee:	462b      	movge	r3, r5
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	9204      	str	r2, [sp, #16]
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	1aed      	subs	r5, r5, r3
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	b31b      	cbz	r3, 8007348 <_dtoa_r+0x7a0>
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80af 	beq.w	8007466 <_dtoa_r+0x8be>
 8007308:	2e00      	cmp	r6, #0
 800730a:	dd13      	ble.n	8007334 <_dtoa_r+0x78c>
 800730c:	4639      	mov	r1, r7
 800730e:	4632      	mov	r2, r6
 8007310:	4620      	mov	r0, r4
 8007312:	f7fe fdd5 	bl	8005ec0 <__pow5mult>
 8007316:	ee18 2a10 	vmov	r2, s16
 800731a:	4601      	mov	r1, r0
 800731c:	4607      	mov	r7, r0
 800731e:	4620      	mov	r0, r4
 8007320:	f7fe fd24 	bl	8005d6c <__multiply>
 8007324:	ee18 1a10 	vmov	r1, s16
 8007328:	4680      	mov	r8, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f7fe fc50 	bl	8005bd0 <_Bfree>
 8007330:	ee08 8a10 	vmov	s16, r8
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	1b9a      	subs	r2, r3, r6
 8007338:	d006      	beq.n	8007348 <_dtoa_r+0x7a0>
 800733a:	ee18 1a10 	vmov	r1, s16
 800733e:	4620      	mov	r0, r4
 8007340:	f7fe fdbe 	bl	8005ec0 <__pow5mult>
 8007344:	ee08 0a10 	vmov	s16, r0
 8007348:	2101      	movs	r1, #1
 800734a:	4620      	mov	r0, r4
 800734c:	f7fe fcf8 	bl	8005d40 <__i2b>
 8007350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	4606      	mov	r6, r0
 8007356:	f340 8088 	ble.w	800746a <_dtoa_r+0x8c2>
 800735a:	461a      	mov	r2, r3
 800735c:	4601      	mov	r1, r0
 800735e:	4620      	mov	r0, r4
 8007360:	f7fe fdae 	bl	8005ec0 <__pow5mult>
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	2b01      	cmp	r3, #1
 8007368:	4606      	mov	r6, r0
 800736a:	f340 8081 	ble.w	8007470 <_dtoa_r+0x8c8>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	6933      	ldr	r3, [r6, #16]
 8007374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007378:	6918      	ldr	r0, [r3, #16]
 800737a:	f7fe fc91 	bl	8005ca0 <__hi0bits>
 800737e:	f1c0 0020 	rsb	r0, r0, #32
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	4418      	add	r0, r3
 8007386:	f010 001f 	ands.w	r0, r0, #31
 800738a:	f000 8092 	beq.w	80074b2 <_dtoa_r+0x90a>
 800738e:	f1c0 0320 	rsb	r3, r0, #32
 8007392:	2b04      	cmp	r3, #4
 8007394:	f340 808a 	ble.w	80074ac <_dtoa_r+0x904>
 8007398:	f1c0 001c 	rsb	r0, r0, #28
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	4403      	add	r3, r0
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	4403      	add	r3, r0
 80073a6:	4405      	add	r5, r0
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd07      	ble.n	80073c0 <_dtoa_r+0x818>
 80073b0:	ee18 1a10 	vmov	r1, s16
 80073b4:	461a      	mov	r2, r3
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7fe fddc 	bl	8005f74 <__lshift>
 80073bc:	ee08 0a10 	vmov	s16, r0
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd05      	ble.n	80073d2 <_dtoa_r+0x82a>
 80073c6:	4631      	mov	r1, r6
 80073c8:	461a      	mov	r2, r3
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7fe fdd2 	bl	8005f74 <__lshift>
 80073d0:	4606      	mov	r6, r0
 80073d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d06e      	beq.n	80074b6 <_dtoa_r+0x90e>
 80073d8:	ee18 0a10 	vmov	r0, s16
 80073dc:	4631      	mov	r1, r6
 80073de:	f7fe fe39 	bl	8006054 <__mcmp>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	da67      	bge.n	80074b6 <_dtoa_r+0x90e>
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	ee18 1a10 	vmov	r1, s16
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	220a      	movs	r2, #10
 80073f2:	2300      	movs	r3, #0
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7fe fc0d 	bl	8005c14 <__multadd>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	ee08 0a10 	vmov	s16, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 81b1 	beq.w	8007768 <_dtoa_r+0xbc0>
 8007406:	2300      	movs	r3, #0
 8007408:	4639      	mov	r1, r7
 800740a:	220a      	movs	r2, #10
 800740c:	4620      	mov	r0, r4
 800740e:	f7fe fc01 	bl	8005c14 <__multadd>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	4607      	mov	r7, r0
 8007418:	f300 808e 	bgt.w	8007538 <_dtoa_r+0x990>
 800741c:	9b06      	ldr	r3, [sp, #24]
 800741e:	2b02      	cmp	r3, #2
 8007420:	dc51      	bgt.n	80074c6 <_dtoa_r+0x91e>
 8007422:	e089      	b.n	8007538 <_dtoa_r+0x990>
 8007424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800742a:	e74b      	b.n	80072c4 <_dtoa_r+0x71c>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	1e5e      	subs	r6, r3, #1
 8007430:	9b07      	ldr	r3, [sp, #28]
 8007432:	42b3      	cmp	r3, r6
 8007434:	bfbf      	itttt	lt
 8007436:	9b07      	ldrlt	r3, [sp, #28]
 8007438:	9607      	strlt	r6, [sp, #28]
 800743a:	1af2      	sublt	r2, r6, r3
 800743c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800743e:	bfb6      	itet	lt
 8007440:	189b      	addlt	r3, r3, r2
 8007442:	1b9e      	subge	r6, r3, r6
 8007444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	bfb8      	it	lt
 800744a:	2600      	movlt	r6, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	bfb7      	itett	lt
 8007450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007458:	1a9d      	sublt	r5, r3, r2
 800745a:	2300      	movlt	r3, #0
 800745c:	e734      	b.n	80072c8 <_dtoa_r+0x720>
 800745e:	9e07      	ldr	r6, [sp, #28]
 8007460:	9d04      	ldr	r5, [sp, #16]
 8007462:	9f08      	ldr	r7, [sp, #32]
 8007464:	e73b      	b.n	80072de <_dtoa_r+0x736>
 8007466:	9a07      	ldr	r2, [sp, #28]
 8007468:	e767      	b.n	800733a <_dtoa_r+0x792>
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	dc18      	bgt.n	80074a2 <_dtoa_r+0x8fa>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d115      	bne.n	80074a2 <_dtoa_r+0x8fa>
 8007476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800747a:	b993      	cbnz	r3, 80074a2 <_dtoa_r+0x8fa>
 800747c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007480:	0d1b      	lsrs	r3, r3, #20
 8007482:	051b      	lsls	r3, r3, #20
 8007484:	b183      	cbz	r3, 80074a8 <_dtoa_r+0x900>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	9b05      	ldr	r3, [sp, #20]
 800748e:	3301      	adds	r3, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	f04f 0801 	mov.w	r8, #1
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f af6a 	bne.w	8007372 <_dtoa_r+0x7ca>
 800749e:	2001      	movs	r0, #1
 80074a0:	e76f      	b.n	8007382 <_dtoa_r+0x7da>
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	e7f6      	b.n	8007496 <_dtoa_r+0x8ee>
 80074a8:	4698      	mov	r8, r3
 80074aa:	e7f4      	b.n	8007496 <_dtoa_r+0x8ee>
 80074ac:	f43f af7d 	beq.w	80073aa <_dtoa_r+0x802>
 80074b0:	4618      	mov	r0, r3
 80074b2:	301c      	adds	r0, #28
 80074b4:	e772      	b.n	800739c <_dtoa_r+0x7f4>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc37      	bgt.n	800752c <_dtoa_r+0x984>
 80074bc:	9b06      	ldr	r3, [sp, #24]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dd34      	ble.n	800752c <_dtoa_r+0x984>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	9b02      	ldr	r3, [sp, #8]
 80074c8:	b96b      	cbnz	r3, 80074e6 <_dtoa_r+0x93e>
 80074ca:	4631      	mov	r1, r6
 80074cc:	2205      	movs	r2, #5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7fe fba0 	bl	8005c14 <__multadd>
 80074d4:	4601      	mov	r1, r0
 80074d6:	4606      	mov	r6, r0
 80074d8:	ee18 0a10 	vmov	r0, s16
 80074dc:	f7fe fdba 	bl	8006054 <__mcmp>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	f73f adbb 	bgt.w	800705c <_dtoa_r+0x4b4>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	9d01      	ldr	r5, [sp, #4]
 80074ea:	43db      	mvns	r3, r3
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	4631      	mov	r1, r6
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7fe fb6b 	bl	8005bd0 <_Bfree>
 80074fa:	2f00      	cmp	r7, #0
 80074fc:	f43f aea4 	beq.w	8007248 <_dtoa_r+0x6a0>
 8007500:	f1b8 0f00 	cmp.w	r8, #0
 8007504:	d005      	beq.n	8007512 <_dtoa_r+0x96a>
 8007506:	45b8      	cmp	r8, r7
 8007508:	d003      	beq.n	8007512 <_dtoa_r+0x96a>
 800750a:	4641      	mov	r1, r8
 800750c:	4620      	mov	r0, r4
 800750e:	f7fe fb5f 	bl	8005bd0 <_Bfree>
 8007512:	4639      	mov	r1, r7
 8007514:	4620      	mov	r0, r4
 8007516:	f7fe fb5b 	bl	8005bd0 <_Bfree>
 800751a:	e695      	b.n	8007248 <_dtoa_r+0x6a0>
 800751c:	2600      	movs	r6, #0
 800751e:	4637      	mov	r7, r6
 8007520:	e7e1      	b.n	80074e6 <_dtoa_r+0x93e>
 8007522:	9700      	str	r7, [sp, #0]
 8007524:	4637      	mov	r7, r6
 8007526:	e599      	b.n	800705c <_dtoa_r+0x4b4>
 8007528:	40240000 	.word	0x40240000
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80ca 	beq.w	80076c8 <_dtoa_r+0xb20>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	2d00      	cmp	r5, #0
 800753a:	dd05      	ble.n	8007548 <_dtoa_r+0x9a0>
 800753c:	4639      	mov	r1, r7
 800753e:	462a      	mov	r2, r5
 8007540:	4620      	mov	r0, r4
 8007542:	f7fe fd17 	bl	8005f74 <__lshift>
 8007546:	4607      	mov	r7, r0
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	d05b      	beq.n	8007606 <_dtoa_r+0xa5e>
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4620      	mov	r0, r4
 8007552:	f7fe fafd 	bl	8005b50 <_Balloc>
 8007556:	4605      	mov	r5, r0
 8007558:	b928      	cbnz	r0, 8007566 <_dtoa_r+0x9be>
 800755a:	4b87      	ldr	r3, [pc, #540]	; (8007778 <_dtoa_r+0xbd0>)
 800755c:	4602      	mov	r2, r0
 800755e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007562:	f7ff bb3b 	b.w	8006bdc <_dtoa_r+0x34>
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	3202      	adds	r2, #2
 800756a:	0092      	lsls	r2, r2, #2
 800756c:	f107 010c 	add.w	r1, r7, #12
 8007570:	300c      	adds	r0, #12
 8007572:	f000 f921 	bl	80077b8 <memcpy>
 8007576:	2201      	movs	r2, #1
 8007578:	4629      	mov	r1, r5
 800757a:	4620      	mov	r0, r4
 800757c:	f7fe fcfa 	bl	8005f74 <__lshift>
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f103 0901 	add.w	r9, r3, #1
 8007586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800758a:	4413      	add	r3, r2
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	f00a 0301 	and.w	r3, sl, #1
 8007592:	46b8      	mov	r8, r7
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	4607      	mov	r7, r0
 8007598:	4631      	mov	r1, r6
 800759a:	ee18 0a10 	vmov	r0, s16
 800759e:	f7ff fa77 	bl	8006a90 <quorem>
 80075a2:	4641      	mov	r1, r8
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075aa:	ee18 0a10 	vmov	r0, s16
 80075ae:	f7fe fd51 	bl	8006054 <__mcmp>
 80075b2:	463a      	mov	r2, r7
 80075b4:	9003      	str	r0, [sp, #12]
 80075b6:	4631      	mov	r1, r6
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7fe fd67 	bl	800608c <__mdiff>
 80075be:	68c2      	ldr	r2, [r0, #12]
 80075c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80075c4:	4605      	mov	r5, r0
 80075c6:	bb02      	cbnz	r2, 800760a <_dtoa_r+0xa62>
 80075c8:	4601      	mov	r1, r0
 80075ca:	ee18 0a10 	vmov	r0, s16
 80075ce:	f7fe fd41 	bl	8006054 <__mcmp>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	9207      	str	r2, [sp, #28]
 80075da:	f7fe faf9 	bl	8005bd0 <_Bfree>
 80075de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075e2:	ea43 0102 	orr.w	r1, r3, r2
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	430b      	orrs	r3, r1
 80075ea:	464d      	mov	r5, r9
 80075ec:	d10f      	bne.n	800760e <_dtoa_r+0xa66>
 80075ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075f2:	d02a      	beq.n	800764a <_dtoa_r+0xaa2>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dd02      	ble.n	8007600 <_dtoa_r+0xa58>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007600:	f88b a000 	strb.w	sl, [fp]
 8007604:	e775      	b.n	80074f2 <_dtoa_r+0x94a>
 8007606:	4638      	mov	r0, r7
 8007608:	e7ba      	b.n	8007580 <_dtoa_r+0x9d8>
 800760a:	2201      	movs	r2, #1
 800760c:	e7e2      	b.n	80075d4 <_dtoa_r+0xa2c>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db04      	blt.n	800761e <_dtoa_r+0xa76>
 8007614:	9906      	ldr	r1, [sp, #24]
 8007616:	430b      	orrs	r3, r1
 8007618:	9904      	ldr	r1, [sp, #16]
 800761a:	430b      	orrs	r3, r1
 800761c:	d122      	bne.n	8007664 <_dtoa_r+0xabc>
 800761e:	2a00      	cmp	r2, #0
 8007620:	ddee      	ble.n	8007600 <_dtoa_r+0xa58>
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2201      	movs	r2, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f7fe fca3 	bl	8005f74 <__lshift>
 800762e:	4631      	mov	r1, r6
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	f7fe fd0e 	bl	8006054 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dc03      	bgt.n	8007644 <_dtoa_r+0xa9c>
 800763c:	d1e0      	bne.n	8007600 <_dtoa_r+0xa58>
 800763e:	f01a 0f01 	tst.w	sl, #1
 8007642:	d0dd      	beq.n	8007600 <_dtoa_r+0xa58>
 8007644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007648:	d1d7      	bne.n	80075fa <_dtoa_r+0xa52>
 800764a:	2339      	movs	r3, #57	; 0x39
 800764c:	f88b 3000 	strb.w	r3, [fp]
 8007650:	462b      	mov	r3, r5
 8007652:	461d      	mov	r5, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800765a:	2a39      	cmp	r2, #57	; 0x39
 800765c:	d071      	beq.n	8007742 <_dtoa_r+0xb9a>
 800765e:	3201      	adds	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e746      	b.n	80074f2 <_dtoa_r+0x94a>
 8007664:	2a00      	cmp	r2, #0
 8007666:	dd07      	ble.n	8007678 <_dtoa_r+0xad0>
 8007668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800766c:	d0ed      	beq.n	800764a <_dtoa_r+0xaa2>
 800766e:	f10a 0301 	add.w	r3, sl, #1
 8007672:	f88b 3000 	strb.w	r3, [fp]
 8007676:	e73c      	b.n	80074f2 <_dtoa_r+0x94a>
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800767e:	4599      	cmp	r9, r3
 8007680:	d047      	beq.n	8007712 <_dtoa_r+0xb6a>
 8007682:	ee18 1a10 	vmov	r1, s16
 8007686:	2300      	movs	r3, #0
 8007688:	220a      	movs	r2, #10
 800768a:	4620      	mov	r0, r4
 800768c:	f7fe fac2 	bl	8005c14 <__multadd>
 8007690:	45b8      	cmp	r8, r7
 8007692:	ee08 0a10 	vmov	s16, r0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	f04f 020a 	mov.w	r2, #10
 800769e:	4641      	mov	r1, r8
 80076a0:	4620      	mov	r0, r4
 80076a2:	d106      	bne.n	80076b2 <_dtoa_r+0xb0a>
 80076a4:	f7fe fab6 	bl	8005c14 <__multadd>
 80076a8:	4680      	mov	r8, r0
 80076aa:	4607      	mov	r7, r0
 80076ac:	f109 0901 	add.w	r9, r9, #1
 80076b0:	e772      	b.n	8007598 <_dtoa_r+0x9f0>
 80076b2:	f7fe faaf 	bl	8005c14 <__multadd>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4680      	mov	r8, r0
 80076ba:	2300      	movs	r3, #0
 80076bc:	220a      	movs	r2, #10
 80076be:	4620      	mov	r0, r4
 80076c0:	f7fe faa8 	bl	8005c14 <__multadd>
 80076c4:	4607      	mov	r7, r0
 80076c6:	e7f1      	b.n	80076ac <_dtoa_r+0xb04>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	9302      	str	r3, [sp, #8]
 80076cc:	9d01      	ldr	r5, [sp, #4]
 80076ce:	ee18 0a10 	vmov	r0, s16
 80076d2:	4631      	mov	r1, r6
 80076d4:	f7ff f9dc 	bl	8006a90 <quorem>
 80076d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	f805 ab01 	strb.w	sl, [r5], #1
 80076e2:	1aea      	subs	r2, r5, r3
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	dd09      	ble.n	80076fe <_dtoa_r+0xb56>
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2300      	movs	r3, #0
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7fe fa8e 	bl	8005c14 <__multadd>
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	e7e7      	b.n	80076ce <_dtoa_r+0xb26>
 80076fe:	9b02      	ldr	r3, [sp, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfc8      	it	gt
 8007704:	461d      	movgt	r5, r3
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	bfd8      	it	le
 800770a:	2501      	movle	r5, #1
 800770c:	441d      	add	r5, r3
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	2201      	movs	r2, #1
 8007718:	4620      	mov	r0, r4
 800771a:	f7fe fc2b 	bl	8005f74 <__lshift>
 800771e:	4631      	mov	r1, r6
 8007720:	ee08 0a10 	vmov	s16, r0
 8007724:	f7fe fc96 	bl	8006054 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	dc91      	bgt.n	8007650 <_dtoa_r+0xaa8>
 800772c:	d102      	bne.n	8007734 <_dtoa_r+0xb8c>
 800772e:	f01a 0f01 	tst.w	sl, #1
 8007732:	d18d      	bne.n	8007650 <_dtoa_r+0xaa8>
 8007734:	462b      	mov	r3, r5
 8007736:	461d      	mov	r5, r3
 8007738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800773c:	2a30      	cmp	r2, #48	; 0x30
 800773e:	d0fa      	beq.n	8007736 <_dtoa_r+0xb8e>
 8007740:	e6d7      	b.n	80074f2 <_dtoa_r+0x94a>
 8007742:	9a01      	ldr	r2, [sp, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d184      	bne.n	8007652 <_dtoa_r+0xaaa>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	2331      	movs	r3, #49	; 0x31
 8007750:	7013      	strb	r3, [r2, #0]
 8007752:	e6ce      	b.n	80074f2 <_dtoa_r+0x94a>
 8007754:	4b09      	ldr	r3, [pc, #36]	; (800777c <_dtoa_r+0xbd4>)
 8007756:	f7ff ba95 	b.w	8006c84 <_dtoa_r+0xdc>
 800775a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f aa6e 	bne.w	8006c3e <_dtoa_r+0x96>
 8007762:	4b07      	ldr	r3, [pc, #28]	; (8007780 <_dtoa_r+0xbd8>)
 8007764:	f7ff ba8e 	b.w	8006c84 <_dtoa_r+0xdc>
 8007768:	9b02      	ldr	r3, [sp, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dcae      	bgt.n	80076cc <_dtoa_r+0xb24>
 800776e:	9b06      	ldr	r3, [sp, #24]
 8007770:	2b02      	cmp	r3, #2
 8007772:	f73f aea8 	bgt.w	80074c6 <_dtoa_r+0x91e>
 8007776:	e7a9      	b.n	80076cc <_dtoa_r+0xb24>
 8007778:	0800841b 	.word	0x0800841b
 800777c:	080085a8 	.word	0x080085a8
 8007780:	0800859b 	.word	0x0800859b

08007784 <fiprintf>:
 8007784:	b40e      	push	{r1, r2, r3}
 8007786:	b503      	push	{r0, r1, lr}
 8007788:	4601      	mov	r1, r0
 800778a:	ab03      	add	r3, sp, #12
 800778c:	4805      	ldr	r0, [pc, #20]	; (80077a4 <fiprintf+0x20>)
 800778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	f000 f8c1 	bl	800791c <_vfiprintf_r>
 800779a:	b002      	add	sp, #8
 800779c:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a0:	b003      	add	sp, #12
 80077a2:	4770      	bx	lr
 80077a4:	2000000c 	.word	0x2000000c

080077a8 <malloc>:
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <malloc+0xc>)
 80077aa:	4601      	mov	r1, r0
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f7fe bda7 	b.w	8006300 <_malloc_r>
 80077b2:	bf00      	nop
 80077b4:	2000000c 	.word	0x2000000c

080077b8 <memcpy>:
 80077b8:	440a      	add	r2, r1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	4770      	bx	lr
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ce:	4291      	cmp	r1, r2
 80077d0:	d1f9      	bne.n	80077c6 <memcpy+0xe>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <memmove>:
 80077d4:	4288      	cmp	r0, r1
 80077d6:	b510      	push	{r4, lr}
 80077d8:	eb01 0402 	add.w	r4, r1, r2
 80077dc:	d902      	bls.n	80077e4 <memmove+0x10>
 80077de:	4284      	cmp	r4, r0
 80077e0:	4623      	mov	r3, r4
 80077e2:	d807      	bhi.n	80077f4 <memmove+0x20>
 80077e4:	1e43      	subs	r3, r0, #1
 80077e6:	42a1      	cmp	r1, r4
 80077e8:	d008      	beq.n	80077fc <memmove+0x28>
 80077ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077f2:	e7f8      	b.n	80077e6 <memmove+0x12>
 80077f4:	4402      	add	r2, r0
 80077f6:	4601      	mov	r1, r0
 80077f8:	428a      	cmp	r2, r1
 80077fa:	d100      	bne.n	80077fe <memmove+0x2a>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007806:	e7f7      	b.n	80077f8 <memmove+0x24>

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_lock+0x8>)
 800780a:	f000 bc37 	b.w	800807c <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20000804 	.word	0x20000804

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_unlock+0x8>)
 8007816:	f000 bc32 	b.w	800807e <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20000804 	.word	0x20000804

08007820 <_free_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d044      	beq.n	80078b0 <_free_r+0x90>
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f1a1 0404 	sub.w	r4, r1, #4
 8007832:	bfb8      	it	lt
 8007834:	18e4      	addlt	r4, r4, r3
 8007836:	f7ff ffe7 	bl	8007808 <__malloc_lock>
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <_free_r+0x94>)
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	b933      	cbnz	r3, 8007850 <_free_r+0x30>
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800784c:	f7ff bfe2 	b.w	8007814 <__malloc_unlock>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d908      	bls.n	8007866 <_free_r+0x46>
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	1961      	adds	r1, r4, r5
 8007858:	428b      	cmp	r3, r1
 800785a:	bf01      	itttt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	e7ed      	b.n	8007842 <_free_r+0x22>
 8007866:	461a      	mov	r2, r3
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b10b      	cbz	r3, 8007870 <_free_r+0x50>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d9fa      	bls.n	8007866 <_free_r+0x46>
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	1855      	adds	r5, r2, r1
 8007874:	42a5      	cmp	r5, r4
 8007876:	d10b      	bne.n	8007890 <_free_r+0x70>
 8007878:	6824      	ldr	r4, [r4, #0]
 800787a:	4421      	add	r1, r4
 800787c:	1854      	adds	r4, r2, r1
 800787e:	42a3      	cmp	r3, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	d1e0      	bne.n	8007846 <_free_r+0x26>
 8007884:	681c      	ldr	r4, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	4421      	add	r1, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	e7da      	b.n	8007846 <_free_r+0x26>
 8007890:	d902      	bls.n	8007898 <_free_r+0x78>
 8007892:	230c      	movs	r3, #12
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	e7d6      	b.n	8007846 <_free_r+0x26>
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	1961      	adds	r1, r4, r5
 800789c:	428b      	cmp	r3, r1
 800789e:	bf04      	itt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	bf04      	itt	eq
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	6054      	str	r4, [r2, #4]
 80078ae:	e7ca      	b.n	8007846 <_free_r+0x26>
 80078b0:	b003      	add	sp, #12
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	200007f8 	.word	0x200007f8

080078b8 <_malloc_usable_size_r>:
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f18      	subs	r0, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbc      	itt	lt
 80078c2:	580b      	ldrlt	r3, [r1, r0]
 80078c4:	18c0      	addlt	r0, r0, r3
 80078c6:	4770      	bx	lr

080078c8 <__sfputc_r>:
 80078c8:	6893      	ldr	r3, [r2, #8]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	b410      	push	{r4}
 80078d0:	6093      	str	r3, [r2, #8]
 80078d2:	da08      	bge.n	80078e6 <__sfputc_r+0x1e>
 80078d4:	6994      	ldr	r4, [r2, #24]
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	db01      	blt.n	80078de <__sfputc_r+0x16>
 80078da:	290a      	cmp	r1, #10
 80078dc:	d103      	bne.n	80078e6 <__sfputc_r+0x1e>
 80078de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e2:	f000 b94b 	b.w	8007b7c <__swbuf_r>
 80078e6:	6813      	ldr	r3, [r2, #0]
 80078e8:	1c58      	adds	r0, r3, #1
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	7019      	strb	r1, [r3, #0]
 80078ee:	4608      	mov	r0, r1
 80078f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <__sfputs_r>:
 80078f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f8:	4606      	mov	r6, r0
 80078fa:	460f      	mov	r7, r1
 80078fc:	4614      	mov	r4, r2
 80078fe:	18d5      	adds	r5, r2, r3
 8007900:	42ac      	cmp	r4, r5
 8007902:	d101      	bne.n	8007908 <__sfputs_r+0x12>
 8007904:	2000      	movs	r0, #0
 8007906:	e007      	b.n	8007918 <__sfputs_r+0x22>
 8007908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790c:	463a      	mov	r2, r7
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff ffda 	bl	80078c8 <__sfputc_r>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d1f3      	bne.n	8007900 <__sfputs_r+0xa>
 8007918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800791c <_vfiprintf_r>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	460d      	mov	r5, r1
 8007922:	b09d      	sub	sp, #116	; 0x74
 8007924:	4614      	mov	r4, r2
 8007926:	4698      	mov	r8, r3
 8007928:	4606      	mov	r6, r0
 800792a:	b118      	cbz	r0, 8007934 <_vfiprintf_r+0x18>
 800792c:	6983      	ldr	r3, [r0, #24]
 800792e:	b90b      	cbnz	r3, 8007934 <_vfiprintf_r+0x18>
 8007930:	f000 fb06 	bl	8007f40 <__sinit>
 8007934:	4b89      	ldr	r3, [pc, #548]	; (8007b5c <_vfiprintf_r+0x240>)
 8007936:	429d      	cmp	r5, r3
 8007938:	d11b      	bne.n	8007972 <_vfiprintf_r+0x56>
 800793a:	6875      	ldr	r5, [r6, #4]
 800793c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800793e:	07d9      	lsls	r1, r3, #31
 8007940:	d405      	bmi.n	800794e <_vfiprintf_r+0x32>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	059a      	lsls	r2, r3, #22
 8007946:	d402      	bmi.n	800794e <_vfiprintf_r+0x32>
 8007948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794a:	f000 fb97 	bl	800807c <__retarget_lock_acquire_recursive>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	071b      	lsls	r3, r3, #28
 8007952:	d501      	bpl.n	8007958 <_vfiprintf_r+0x3c>
 8007954:	692b      	ldr	r3, [r5, #16]
 8007956:	b9eb      	cbnz	r3, 8007994 <_vfiprintf_r+0x78>
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f960 	bl	8007c20 <__swsetup_r>
 8007960:	b1c0      	cbz	r0, 8007994 <_vfiprintf_r+0x78>
 8007962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007964:	07dc      	lsls	r4, r3, #31
 8007966:	d50e      	bpl.n	8007986 <_vfiprintf_r+0x6a>
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	b01d      	add	sp, #116	; 0x74
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	4b7b      	ldr	r3, [pc, #492]	; (8007b60 <_vfiprintf_r+0x244>)
 8007974:	429d      	cmp	r5, r3
 8007976:	d101      	bne.n	800797c <_vfiprintf_r+0x60>
 8007978:	68b5      	ldr	r5, [r6, #8]
 800797a:	e7df      	b.n	800793c <_vfiprintf_r+0x20>
 800797c:	4b79      	ldr	r3, [pc, #484]	; (8007b64 <_vfiprintf_r+0x248>)
 800797e:	429d      	cmp	r5, r3
 8007980:	bf08      	it	eq
 8007982:	68f5      	ldreq	r5, [r6, #12]
 8007984:	e7da      	b.n	800793c <_vfiprintf_r+0x20>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	0598      	lsls	r0, r3, #22
 800798a:	d4ed      	bmi.n	8007968 <_vfiprintf_r+0x4c>
 800798c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800798e:	f000 fb76 	bl	800807e <__retarget_lock_release_recursive>
 8007992:	e7e9      	b.n	8007968 <_vfiprintf_r+0x4c>
 8007994:	2300      	movs	r3, #0
 8007996:	9309      	str	r3, [sp, #36]	; 0x24
 8007998:	2320      	movs	r3, #32
 800799a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799e:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a2:	2330      	movs	r3, #48	; 0x30
 80079a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b68 <_vfiprintf_r+0x24c>
 80079a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ac:	f04f 0901 	mov.w	r9, #1
 80079b0:	4623      	mov	r3, r4
 80079b2:	469a      	mov	sl, r3
 80079b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b8:	b10a      	cbz	r2, 80079be <_vfiprintf_r+0xa2>
 80079ba:	2a25      	cmp	r2, #37	; 0x25
 80079bc:	d1f9      	bne.n	80079b2 <_vfiprintf_r+0x96>
 80079be:	ebba 0b04 	subs.w	fp, sl, r4
 80079c2:	d00b      	beq.n	80079dc <_vfiprintf_r+0xc0>
 80079c4:	465b      	mov	r3, fp
 80079c6:	4622      	mov	r2, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff ff93 	bl	80078f6 <__sfputs_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	f000 80aa 	beq.w	8007b2a <_vfiprintf_r+0x20e>
 80079d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d8:	445a      	add	r2, fp
 80079da:	9209      	str	r2, [sp, #36]	; 0x24
 80079dc:	f89a 3000 	ldrb.w	r3, [sl]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a2 	beq.w	8007b2a <_vfiprintf_r+0x20e>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f0:	f10a 0a01 	add.w	sl, sl, #1
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079fc:	931a      	str	r3, [sp, #104]	; 0x68
 80079fe:	4654      	mov	r4, sl
 8007a00:	2205      	movs	r2, #5
 8007a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a06:	4858      	ldr	r0, [pc, #352]	; (8007b68 <_vfiprintf_r+0x24c>)
 8007a08:	f7f8 fbea 	bl	80001e0 <memchr>
 8007a0c:	9a04      	ldr	r2, [sp, #16]
 8007a0e:	b9d8      	cbnz	r0, 8007a48 <_vfiprintf_r+0x12c>
 8007a10:	06d1      	lsls	r1, r2, #27
 8007a12:	bf44      	itt	mi
 8007a14:	2320      	movmi	r3, #32
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1a:	0713      	lsls	r3, r2, #28
 8007a1c:	bf44      	itt	mi
 8007a1e:	232b      	movmi	r3, #43	; 0x2b
 8007a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a24:	f89a 3000 	ldrb.w	r3, [sl]
 8007a28:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2a:	d015      	beq.n	8007a58 <_vfiprintf_r+0x13c>
 8007a2c:	9a07      	ldr	r2, [sp, #28]
 8007a2e:	4654      	mov	r4, sl
 8007a30:	2000      	movs	r0, #0
 8007a32:	f04f 0c0a 	mov.w	ip, #10
 8007a36:	4621      	mov	r1, r4
 8007a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3c:	3b30      	subs	r3, #48	; 0x30
 8007a3e:	2b09      	cmp	r3, #9
 8007a40:	d94e      	bls.n	8007ae0 <_vfiprintf_r+0x1c4>
 8007a42:	b1b0      	cbz	r0, 8007a72 <_vfiprintf_r+0x156>
 8007a44:	9207      	str	r2, [sp, #28]
 8007a46:	e014      	b.n	8007a72 <_vfiprintf_r+0x156>
 8007a48:	eba0 0308 	sub.w	r3, r0, r8
 8007a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a50:	4313      	orrs	r3, r2
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	46a2      	mov	sl, r4
 8007a56:	e7d2      	b.n	80079fe <_vfiprintf_r+0xe2>
 8007a58:	9b03      	ldr	r3, [sp, #12]
 8007a5a:	1d19      	adds	r1, r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	9103      	str	r1, [sp, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	bfbb      	ittet	lt
 8007a64:	425b      	neglt	r3, r3
 8007a66:	f042 0202 	orrlt.w	r2, r2, #2
 8007a6a:	9307      	strge	r3, [sp, #28]
 8007a6c:	9307      	strlt	r3, [sp, #28]
 8007a6e:	bfb8      	it	lt
 8007a70:	9204      	strlt	r2, [sp, #16]
 8007a72:	7823      	ldrb	r3, [r4, #0]
 8007a74:	2b2e      	cmp	r3, #46	; 0x2e
 8007a76:	d10c      	bne.n	8007a92 <_vfiprintf_r+0x176>
 8007a78:	7863      	ldrb	r3, [r4, #1]
 8007a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7c:	d135      	bne.n	8007aea <_vfiprintf_r+0x1ce>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	1d1a      	adds	r2, r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	9203      	str	r2, [sp, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfb8      	it	lt
 8007a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a8e:	3402      	adds	r4, #2
 8007a90:	9305      	str	r3, [sp, #20]
 8007a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b78 <_vfiprintf_r+0x25c>
 8007a96:	7821      	ldrb	r1, [r4, #0]
 8007a98:	2203      	movs	r2, #3
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	f7f8 fba0 	bl	80001e0 <memchr>
 8007aa0:	b140      	cbz	r0, 8007ab4 <_vfiprintf_r+0x198>
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	eba0 000a 	sub.w	r0, r0, sl
 8007aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8007aac:	9b04      	ldr	r3, [sp, #16]
 8007aae:	4303      	orrs	r3, r0
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab8:	482c      	ldr	r0, [pc, #176]	; (8007b6c <_vfiprintf_r+0x250>)
 8007aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007abe:	2206      	movs	r2, #6
 8007ac0:	f7f8 fb8e 	bl	80001e0 <memchr>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d03f      	beq.n	8007b48 <_vfiprintf_r+0x22c>
 8007ac8:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <_vfiprintf_r+0x254>)
 8007aca:	bb1b      	cbnz	r3, 8007b14 <_vfiprintf_r+0x1f8>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	3307      	adds	r3, #7
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	9303      	str	r3, [sp, #12]
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	443b      	add	r3, r7
 8007adc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ade:	e767      	b.n	80079b0 <_vfiprintf_r+0x94>
 8007ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	e7a5      	b.n	8007a36 <_vfiprintf_r+0x11a>
 8007aea:	2300      	movs	r3, #0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	4619      	mov	r1, r3
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4620      	mov	r0, r4
 8007af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afc:	3a30      	subs	r2, #48	; 0x30
 8007afe:	2a09      	cmp	r2, #9
 8007b00:	d903      	bls.n	8007b0a <_vfiprintf_r+0x1ee>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c5      	beq.n	8007a92 <_vfiprintf_r+0x176>
 8007b06:	9105      	str	r1, [sp, #20]
 8007b08:	e7c3      	b.n	8007a92 <_vfiprintf_r+0x176>
 8007b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0e:	4604      	mov	r4, r0
 8007b10:	2301      	movs	r3, #1
 8007b12:	e7f0      	b.n	8007af6 <_vfiprintf_r+0x1da>
 8007b14:	ab03      	add	r3, sp, #12
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <_vfiprintf_r+0x258>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f3af 8000 	nop.w
 8007b24:	4607      	mov	r7, r0
 8007b26:	1c78      	adds	r0, r7, #1
 8007b28:	d1d6      	bne.n	8007ad8 <_vfiprintf_r+0x1bc>
 8007b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b2c:	07d9      	lsls	r1, r3, #31
 8007b2e:	d405      	bmi.n	8007b3c <_vfiprintf_r+0x220>
 8007b30:	89ab      	ldrh	r3, [r5, #12]
 8007b32:	059a      	lsls	r2, r3, #22
 8007b34:	d402      	bmi.n	8007b3c <_vfiprintf_r+0x220>
 8007b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b38:	f000 faa1 	bl	800807e <__retarget_lock_release_recursive>
 8007b3c:	89ab      	ldrh	r3, [r5, #12]
 8007b3e:	065b      	lsls	r3, r3, #25
 8007b40:	f53f af12 	bmi.w	8007968 <_vfiprintf_r+0x4c>
 8007b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b46:	e711      	b.n	800796c <_vfiprintf_r+0x50>
 8007b48:	ab03      	add	r3, sp, #12
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	462a      	mov	r2, r5
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <_vfiprintf_r+0x258>)
 8007b50:	a904      	add	r1, sp, #16
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7fe fe40 	bl	80067d8 <_printf_i>
 8007b58:	e7e4      	b.n	8007b24 <_vfiprintf_r+0x208>
 8007b5a:	bf00      	nop
 8007b5c:	08008628 	.word	0x08008628
 8007b60:	08008648 	.word	0x08008648
 8007b64:	08008608 	.word	0x08008608
 8007b68:	0800852c 	.word	0x0800852c
 8007b6c:	08008536 	.word	0x08008536
 8007b70:	00000000 	.word	0x00000000
 8007b74:	080078f7 	.word	0x080078f7
 8007b78:	08008532 	.word	0x08008532

08007b7c <__swbuf_r>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	460e      	mov	r6, r1
 8007b80:	4614      	mov	r4, r2
 8007b82:	4605      	mov	r5, r0
 8007b84:	b118      	cbz	r0, 8007b8e <__swbuf_r+0x12>
 8007b86:	6983      	ldr	r3, [r0, #24]
 8007b88:	b90b      	cbnz	r3, 8007b8e <__swbuf_r+0x12>
 8007b8a:	f000 f9d9 	bl	8007f40 <__sinit>
 8007b8e:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <__swbuf_r+0x98>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	d12b      	bne.n	8007bec <__swbuf_r+0x70>
 8007b94:	686c      	ldr	r4, [r5, #4]
 8007b96:	69a3      	ldr	r3, [r4, #24]
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	071a      	lsls	r2, r3, #28
 8007b9e:	d52f      	bpl.n	8007c00 <__swbuf_r+0x84>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	b36b      	cbz	r3, 8007c00 <__swbuf_r+0x84>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	1ac0      	subs	r0, r0, r3
 8007baa:	6963      	ldr	r3, [r4, #20]
 8007bac:	b2f6      	uxtb	r6, r6
 8007bae:	4283      	cmp	r3, r0
 8007bb0:	4637      	mov	r7, r6
 8007bb2:	dc04      	bgt.n	8007bbe <__swbuf_r+0x42>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f92e 	bl	8007e18 <_fflush_r>
 8007bbc:	bb30      	cbnz	r0, 8007c0c <__swbuf_r+0x90>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	701e      	strb	r6, [r3, #0]
 8007bcc:	6963      	ldr	r3, [r4, #20]
 8007bce:	3001      	adds	r0, #1
 8007bd0:	4283      	cmp	r3, r0
 8007bd2:	d004      	beq.n	8007bde <__swbuf_r+0x62>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	07db      	lsls	r3, r3, #31
 8007bd8:	d506      	bpl.n	8007be8 <__swbuf_r+0x6c>
 8007bda:	2e0a      	cmp	r6, #10
 8007bdc:	d104      	bne.n	8007be8 <__swbuf_r+0x6c>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f919 	bl	8007e18 <_fflush_r>
 8007be6:	b988      	cbnz	r0, 8007c0c <__swbuf_r+0x90>
 8007be8:	4638      	mov	r0, r7
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <__swbuf_r+0x9c>)
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d101      	bne.n	8007bf6 <__swbuf_r+0x7a>
 8007bf2:	68ac      	ldr	r4, [r5, #8]
 8007bf4:	e7cf      	b.n	8007b96 <__swbuf_r+0x1a>
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <__swbuf_r+0xa0>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	bf08      	it	eq
 8007bfc:	68ec      	ldreq	r4, [r5, #12]
 8007bfe:	e7ca      	b.n	8007b96 <__swbuf_r+0x1a>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f80c 	bl	8007c20 <__swsetup_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d0cb      	beq.n	8007ba4 <__swbuf_r+0x28>
 8007c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c10:	e7ea      	b.n	8007be8 <__swbuf_r+0x6c>
 8007c12:	bf00      	nop
 8007c14:	08008628 	.word	0x08008628
 8007c18:	08008648 	.word	0x08008648
 8007c1c:	08008608 	.word	0x08008608

08007c20 <__swsetup_r>:
 8007c20:	4b32      	ldr	r3, [pc, #200]	; (8007cec <__swsetup_r+0xcc>)
 8007c22:	b570      	push	{r4, r5, r6, lr}
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	4606      	mov	r6, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	b125      	cbz	r5, 8007c36 <__swsetup_r+0x16>
 8007c2c:	69ab      	ldr	r3, [r5, #24]
 8007c2e:	b913      	cbnz	r3, 8007c36 <__swsetup_r+0x16>
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 f985 	bl	8007f40 <__sinit>
 8007c36:	4b2e      	ldr	r3, [pc, #184]	; (8007cf0 <__swsetup_r+0xd0>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d10f      	bne.n	8007c5c <__swsetup_r+0x3c>
 8007c3c:	686c      	ldr	r4, [r5, #4]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c44:	0719      	lsls	r1, r3, #28
 8007c46:	d42c      	bmi.n	8007ca2 <__swsetup_r+0x82>
 8007c48:	06dd      	lsls	r5, r3, #27
 8007c4a:	d411      	bmi.n	8007c70 <__swsetup_r+0x50>
 8007c4c:	2309      	movs	r3, #9
 8007c4e:	6033      	str	r3, [r6, #0]
 8007c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5a:	e03e      	b.n	8007cda <__swsetup_r+0xba>
 8007c5c:	4b25      	ldr	r3, [pc, #148]	; (8007cf4 <__swsetup_r+0xd4>)
 8007c5e:	429c      	cmp	r4, r3
 8007c60:	d101      	bne.n	8007c66 <__swsetup_r+0x46>
 8007c62:	68ac      	ldr	r4, [r5, #8]
 8007c64:	e7eb      	b.n	8007c3e <__swsetup_r+0x1e>
 8007c66:	4b24      	ldr	r3, [pc, #144]	; (8007cf8 <__swsetup_r+0xd8>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	bf08      	it	eq
 8007c6c:	68ec      	ldreq	r4, [r5, #12]
 8007c6e:	e7e6      	b.n	8007c3e <__swsetup_r+0x1e>
 8007c70:	0758      	lsls	r0, r3, #29
 8007c72:	d512      	bpl.n	8007c9a <__swsetup_r+0x7a>
 8007c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c76:	b141      	cbz	r1, 8007c8a <__swsetup_r+0x6a>
 8007c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7c:	4299      	cmp	r1, r3
 8007c7e:	d002      	beq.n	8007c86 <__swsetup_r+0x66>
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff fdcd 	bl	8007820 <_free_r>
 8007c86:	2300      	movs	r3, #0
 8007c88:	6363      	str	r3, [r4, #52]	; 0x34
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	2300      	movs	r3, #0
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f043 0308 	orr.w	r3, r3, #8
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	b94b      	cbnz	r3, 8007cba <__swsetup_r+0x9a>
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d003      	beq.n	8007cba <__swsetup_r+0x9a>
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 fa09 	bl	80080cc <__smakebuf_r>
 8007cba:	89a0      	ldrh	r0, [r4, #12]
 8007cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc0:	f010 0301 	ands.w	r3, r0, #1
 8007cc4:	d00a      	beq.n	8007cdc <__swsetup_r+0xbc>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60a3      	str	r3, [r4, #8]
 8007cca:	6963      	ldr	r3, [r4, #20]
 8007ccc:	425b      	negs	r3, r3
 8007cce:	61a3      	str	r3, [r4, #24]
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	b943      	cbnz	r3, 8007ce6 <__swsetup_r+0xc6>
 8007cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cd8:	d1ba      	bne.n	8007c50 <__swsetup_r+0x30>
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	0781      	lsls	r1, r0, #30
 8007cde:	bf58      	it	pl
 8007ce0:	6963      	ldrpl	r3, [r4, #20]
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	e7f4      	b.n	8007cd0 <__swsetup_r+0xb0>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e7f7      	b.n	8007cda <__swsetup_r+0xba>
 8007cea:	bf00      	nop
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	08008628 	.word	0x08008628
 8007cf4:	08008648 	.word	0x08008648
 8007cf8:	08008608 	.word	0x08008608

08007cfc <abort>:
 8007cfc:	b508      	push	{r3, lr}
 8007cfe:	2006      	movs	r0, #6
 8007d00:	f000 fa4c 	bl	800819c <raise>
 8007d04:	2001      	movs	r0, #1
 8007d06:	f7f9 ff65 	bl	8001bd4 <_exit>
	...

08007d0c <__sflush_r>:
 8007d0c:	898a      	ldrh	r2, [r1, #12]
 8007d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	0710      	lsls	r0, r2, #28
 8007d16:	460c      	mov	r4, r1
 8007d18:	d458      	bmi.n	8007dcc <__sflush_r+0xc0>
 8007d1a:	684b      	ldr	r3, [r1, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc05      	bgt.n	8007d2c <__sflush_r+0x20>
 8007d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dc02      	bgt.n	8007d2c <__sflush_r+0x20>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	d0f9      	beq.n	8007d26 <__sflush_r+0x1a>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d38:	682f      	ldr	r7, [r5, #0]
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	d032      	beq.n	8007da4 <__sflush_r+0x98>
 8007d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	075a      	lsls	r2, r3, #29
 8007d44:	d505      	bpl.n	8007d52 <__sflush_r+0x46>
 8007d46:	6863      	ldr	r3, [r4, #4]
 8007d48:	1ac0      	subs	r0, r0, r3
 8007d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d4c:	b10b      	cbz	r3, 8007d52 <__sflush_r+0x46>
 8007d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d50:	1ac0      	subs	r0, r0, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	4602      	mov	r2, r0
 8007d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d58:	6a21      	ldr	r1, [r4, #32]
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b0      	blx	r6
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	d106      	bne.n	8007d72 <__sflush_r+0x66>
 8007d64:	6829      	ldr	r1, [r5, #0]
 8007d66:	291d      	cmp	r1, #29
 8007d68:	d82c      	bhi.n	8007dc4 <__sflush_r+0xb8>
 8007d6a:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <__sflush_r+0x108>)
 8007d6c:	40ca      	lsrs	r2, r1
 8007d6e:	07d6      	lsls	r6, r2, #31
 8007d70:	d528      	bpl.n	8007dc4 <__sflush_r+0xb8>
 8007d72:	2200      	movs	r2, #0
 8007d74:	6062      	str	r2, [r4, #4]
 8007d76:	04d9      	lsls	r1, r3, #19
 8007d78:	6922      	ldr	r2, [r4, #16]
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	d504      	bpl.n	8007d88 <__sflush_r+0x7c>
 8007d7e:	1c42      	adds	r2, r0, #1
 8007d80:	d101      	bne.n	8007d86 <__sflush_r+0x7a>
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	b903      	cbnz	r3, 8007d88 <__sflush_r+0x7c>
 8007d86:	6560      	str	r0, [r4, #84]	; 0x54
 8007d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8a:	602f      	str	r7, [r5, #0]
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d0ca      	beq.n	8007d26 <__sflush_r+0x1a>
 8007d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d94:	4299      	cmp	r1, r3
 8007d96:	d002      	beq.n	8007d9e <__sflush_r+0x92>
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff fd41 	bl	8007820 <_free_r>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	6360      	str	r0, [r4, #52]	; 0x34
 8007da2:	e7c1      	b.n	8007d28 <__sflush_r+0x1c>
 8007da4:	6a21      	ldr	r1, [r4, #32]
 8007da6:	2301      	movs	r3, #1
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b0      	blx	r6
 8007dac:	1c41      	adds	r1, r0, #1
 8007dae:	d1c7      	bne.n	8007d40 <__sflush_r+0x34>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0c4      	beq.n	8007d40 <__sflush_r+0x34>
 8007db6:	2b1d      	cmp	r3, #29
 8007db8:	d001      	beq.n	8007dbe <__sflush_r+0xb2>
 8007dba:	2b16      	cmp	r3, #22
 8007dbc:	d101      	bne.n	8007dc2 <__sflush_r+0xb6>
 8007dbe:	602f      	str	r7, [r5, #0]
 8007dc0:	e7b1      	b.n	8007d26 <__sflush_r+0x1a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	e7ad      	b.n	8007d28 <__sflush_r+0x1c>
 8007dcc:	690f      	ldr	r7, [r1, #16]
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	d0a9      	beq.n	8007d26 <__sflush_r+0x1a>
 8007dd2:	0793      	lsls	r3, r2, #30
 8007dd4:	680e      	ldr	r6, [r1, #0]
 8007dd6:	bf08      	it	eq
 8007dd8:	694b      	ldreq	r3, [r1, #20]
 8007dda:	600f      	str	r7, [r1, #0]
 8007ddc:	bf18      	it	ne
 8007dde:	2300      	movne	r3, #0
 8007de0:	eba6 0807 	sub.w	r8, r6, r7
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	f1b8 0f00 	cmp.w	r8, #0
 8007dea:	dd9c      	ble.n	8007d26 <__sflush_r+0x1a>
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007df0:	4643      	mov	r3, r8
 8007df2:	463a      	mov	r2, r7
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b0      	blx	r6
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	dc06      	bgt.n	8007e0a <__sflush_r+0xfe>
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	e78e      	b.n	8007d28 <__sflush_r+0x1c>
 8007e0a:	4407      	add	r7, r0
 8007e0c:	eba8 0800 	sub.w	r8, r8, r0
 8007e10:	e7e9      	b.n	8007de6 <__sflush_r+0xda>
 8007e12:	bf00      	nop
 8007e14:	20400001 	.word	0x20400001

08007e18 <_fflush_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	690b      	ldr	r3, [r1, #16]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	b913      	cbnz	r3, 8007e28 <_fflush_r+0x10>
 8007e22:	2500      	movs	r5, #0
 8007e24:	4628      	mov	r0, r5
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	b118      	cbz	r0, 8007e32 <_fflush_r+0x1a>
 8007e2a:	6983      	ldr	r3, [r0, #24]
 8007e2c:	b90b      	cbnz	r3, 8007e32 <_fflush_r+0x1a>
 8007e2e:	f000 f887 	bl	8007f40 <__sinit>
 8007e32:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <_fflush_r+0x6c>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	d11b      	bne.n	8007e70 <_fflush_r+0x58>
 8007e38:	686c      	ldr	r4, [r5, #4]
 8007e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ef      	beq.n	8007e22 <_fflush_r+0xa>
 8007e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e44:	07d0      	lsls	r0, r2, #31
 8007e46:	d404      	bmi.n	8007e52 <_fflush_r+0x3a>
 8007e48:	0599      	lsls	r1, r3, #22
 8007e4a:	d402      	bmi.n	8007e52 <_fflush_r+0x3a>
 8007e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e4e:	f000 f915 	bl	800807c <__retarget_lock_acquire_recursive>
 8007e52:	4628      	mov	r0, r5
 8007e54:	4621      	mov	r1, r4
 8007e56:	f7ff ff59 	bl	8007d0c <__sflush_r>
 8007e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e5c:	07da      	lsls	r2, r3, #31
 8007e5e:	4605      	mov	r5, r0
 8007e60:	d4e0      	bmi.n	8007e24 <_fflush_r+0xc>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	059b      	lsls	r3, r3, #22
 8007e66:	d4dd      	bmi.n	8007e24 <_fflush_r+0xc>
 8007e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6a:	f000 f908 	bl	800807e <__retarget_lock_release_recursive>
 8007e6e:	e7d9      	b.n	8007e24 <_fflush_r+0xc>
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <_fflush_r+0x70>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d101      	bne.n	8007e7a <_fflush_r+0x62>
 8007e76:	68ac      	ldr	r4, [r5, #8]
 8007e78:	e7df      	b.n	8007e3a <_fflush_r+0x22>
 8007e7a:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <_fflush_r+0x74>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	bf08      	it	eq
 8007e80:	68ec      	ldreq	r4, [r5, #12]
 8007e82:	e7da      	b.n	8007e3a <_fflush_r+0x22>
 8007e84:	08008628 	.word	0x08008628
 8007e88:	08008648 	.word	0x08008648
 8007e8c:	08008608 	.word	0x08008608

08007e90 <std>:
 8007e90:	2300      	movs	r3, #0
 8007e92:	b510      	push	{r4, lr}
 8007e94:	4604      	mov	r4, r0
 8007e96:	e9c0 3300 	strd	r3, r3, [r0]
 8007e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e9e:	6083      	str	r3, [r0, #8]
 8007ea0:	8181      	strh	r1, [r0, #12]
 8007ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ea4:	81c2      	strh	r2, [r0, #14]
 8007ea6:	6183      	str	r3, [r0, #24]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	2208      	movs	r2, #8
 8007eac:	305c      	adds	r0, #92	; 0x5c
 8007eae:	f7fd fcef 	bl	8005890 <memset>
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <std+0x38>)
 8007eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <std+0x3c>)
 8007eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <std+0x40>)
 8007ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ebe:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <std+0x44>)
 8007ec0:	6224      	str	r4, [r4, #32]
 8007ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	080081d5 	.word	0x080081d5
 8007ecc:	080081f7 	.word	0x080081f7
 8007ed0:	0800822f 	.word	0x0800822f
 8007ed4:	08008253 	.word	0x08008253

08007ed8 <_cleanup_r>:
 8007ed8:	4901      	ldr	r1, [pc, #4]	; (8007ee0 <_cleanup_r+0x8>)
 8007eda:	f000 b8af 	b.w	800803c <_fwalk_reent>
 8007ede:	bf00      	nop
 8007ee0:	08007e19 	.word	0x08007e19

08007ee4 <__sfmoreglue>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	2268      	movs	r2, #104	; 0x68
 8007ee8:	1e4d      	subs	r5, r1, #1
 8007eea:	4355      	muls	r5, r2
 8007eec:	460e      	mov	r6, r1
 8007eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ef2:	f7fe fa05 	bl	8006300 <_malloc_r>
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	b140      	cbz	r0, 8007f0c <__sfmoreglue+0x28>
 8007efa:	2100      	movs	r1, #0
 8007efc:	e9c0 1600 	strd	r1, r6, [r0]
 8007f00:	300c      	adds	r0, #12
 8007f02:	60a0      	str	r0, [r4, #8]
 8007f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f08:	f7fd fcc2 	bl	8005890 <memset>
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}

08007f10 <__sfp_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sfp_lock_acquire+0x8>)
 8007f12:	f000 b8b3 	b.w	800807c <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20000805 	.word	0x20000805

08007f1c <__sfp_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sfp_lock_release+0x8>)
 8007f1e:	f000 b8ae 	b.w	800807e <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20000805 	.word	0x20000805

08007f28 <__sinit_lock_acquire>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__sinit_lock_acquire+0x8>)
 8007f2a:	f000 b8a7 	b.w	800807c <__retarget_lock_acquire_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20000806 	.word	0x20000806

08007f34 <__sinit_lock_release>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__sinit_lock_release+0x8>)
 8007f36:	f000 b8a2 	b.w	800807e <__retarget_lock_release_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20000806 	.word	0x20000806

08007f40 <__sinit>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	f7ff fff0 	bl	8007f28 <__sinit_lock_acquire>
 8007f48:	69a3      	ldr	r3, [r4, #24]
 8007f4a:	b11b      	cbz	r3, 8007f54 <__sinit+0x14>
 8007f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f50:	f7ff bff0 	b.w	8007f34 <__sinit_lock_release>
 8007f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f58:	6523      	str	r3, [r4, #80]	; 0x50
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <__sinit+0x68>)
 8007f5c:	4a13      	ldr	r2, [pc, #76]	; (8007fac <__sinit+0x6c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	bf04      	itt	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	61a3      	streq	r3, [r4, #24]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 f820 	bl	8007fb0 <__sfp>
 8007f70:	6060      	str	r0, [r4, #4]
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 f81c 	bl	8007fb0 <__sfp>
 8007f78:	60a0      	str	r0, [r4, #8]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f818 	bl	8007fb0 <__sfp>
 8007f80:	2200      	movs	r2, #0
 8007f82:	60e0      	str	r0, [r4, #12]
 8007f84:	2104      	movs	r1, #4
 8007f86:	6860      	ldr	r0, [r4, #4]
 8007f88:	f7ff ff82 	bl	8007e90 <std>
 8007f8c:	68a0      	ldr	r0, [r4, #8]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	2109      	movs	r1, #9
 8007f92:	f7ff ff7d 	bl	8007e90 <std>
 8007f96:	68e0      	ldr	r0, [r4, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	2112      	movs	r1, #18
 8007f9c:	f7ff ff78 	bl	8007e90 <std>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	61a3      	str	r3, [r4, #24]
 8007fa4:	e7d2      	b.n	8007f4c <__sinit+0xc>
 8007fa6:	bf00      	nop
 8007fa8:	080083a4 	.word	0x080083a4
 8007fac:	08007ed9 	.word	0x08007ed9

08007fb0 <__sfp>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	f7ff ffac 	bl	8007f10 <__sfp_lock_acquire>
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <__sfp+0x84>)
 8007fba:	681e      	ldr	r6, [r3, #0]
 8007fbc:	69b3      	ldr	r3, [r6, #24]
 8007fbe:	b913      	cbnz	r3, 8007fc6 <__sfp+0x16>
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ffbd 	bl	8007f40 <__sinit>
 8007fc6:	3648      	adds	r6, #72	; 0x48
 8007fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	d503      	bpl.n	8007fd8 <__sfp+0x28>
 8007fd0:	6833      	ldr	r3, [r6, #0]
 8007fd2:	b30b      	cbz	r3, 8008018 <__sfp+0x68>
 8007fd4:	6836      	ldr	r6, [r6, #0]
 8007fd6:	e7f7      	b.n	8007fc8 <__sfp+0x18>
 8007fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fdc:	b9d5      	cbnz	r5, 8008014 <__sfp+0x64>
 8007fde:	4b16      	ldr	r3, [pc, #88]	; (8008038 <__sfp+0x88>)
 8007fe0:	60e3      	str	r3, [r4, #12]
 8007fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8007fe8:	f000 f847 	bl	800807a <__retarget_lock_init_recursive>
 8007fec:	f7ff ff96 	bl	8007f1c <__sfp_lock_release>
 8007ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ff8:	6025      	str	r5, [r4, #0]
 8007ffa:	61a5      	str	r5, [r4, #24]
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	4629      	mov	r1, r5
 8008000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008004:	f7fd fc44 	bl	8005890 <memset>
 8008008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800800c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008010:	4620      	mov	r0, r4
 8008012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008014:	3468      	adds	r4, #104	; 0x68
 8008016:	e7d9      	b.n	8007fcc <__sfp+0x1c>
 8008018:	2104      	movs	r1, #4
 800801a:	4638      	mov	r0, r7
 800801c:	f7ff ff62 	bl	8007ee4 <__sfmoreglue>
 8008020:	4604      	mov	r4, r0
 8008022:	6030      	str	r0, [r6, #0]
 8008024:	2800      	cmp	r0, #0
 8008026:	d1d5      	bne.n	8007fd4 <__sfp+0x24>
 8008028:	f7ff ff78 	bl	8007f1c <__sfp_lock_release>
 800802c:	230c      	movs	r3, #12
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	e7ee      	b.n	8008010 <__sfp+0x60>
 8008032:	bf00      	nop
 8008034:	080083a4 	.word	0x080083a4
 8008038:	ffff0001 	.word	0xffff0001

0800803c <_fwalk_reent>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4606      	mov	r6, r0
 8008042:	4688      	mov	r8, r1
 8008044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008048:	2700      	movs	r7, #0
 800804a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800804e:	f1b9 0901 	subs.w	r9, r9, #1
 8008052:	d505      	bpl.n	8008060 <_fwalk_reent+0x24>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	2c00      	cmp	r4, #0
 8008058:	d1f7      	bne.n	800804a <_fwalk_reent+0xe>
 800805a:	4638      	mov	r0, r7
 800805c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008060:	89ab      	ldrh	r3, [r5, #12]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d907      	bls.n	8008076 <_fwalk_reent+0x3a>
 8008066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800806a:	3301      	adds	r3, #1
 800806c:	d003      	beq.n	8008076 <_fwalk_reent+0x3a>
 800806e:	4629      	mov	r1, r5
 8008070:	4630      	mov	r0, r6
 8008072:	47c0      	blx	r8
 8008074:	4307      	orrs	r7, r0
 8008076:	3568      	adds	r5, #104	; 0x68
 8008078:	e7e9      	b.n	800804e <_fwalk_reent+0x12>

0800807a <__retarget_lock_init_recursive>:
 800807a:	4770      	bx	lr

0800807c <__retarget_lock_acquire_recursive>:
 800807c:	4770      	bx	lr

0800807e <__retarget_lock_release_recursive>:
 800807e:	4770      	bx	lr

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460e      	mov	r6, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	; 0x58
 800808c:	4614      	mov	r4, r2
 800808e:	461d      	mov	r5, r3
 8008090:	da08      	bge.n	80080a4 <__swhatbuf_r+0x24>
 8008092:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	061a      	lsls	r2, r3, #24
 800809c:	d410      	bmi.n	80080c0 <__swhatbuf_r+0x40>
 800809e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a2:	e00e      	b.n	80080c2 <__swhatbuf_r+0x42>
 80080a4:	466a      	mov	r2, sp
 80080a6:	f000 f8fb 	bl	80082a0 <_fstat_r>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	dbf1      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080ae:	9a01      	ldr	r2, [sp, #4]
 80080b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b8:	425a      	negs	r2, r3
 80080ba:	415a      	adcs	r2, r3
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	e7ee      	b.n	800809e <__swhatbuf_r+0x1e>
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	2000      	movs	r0, #0
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	b016      	add	sp, #88	; 0x58
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080080cc <__smakebuf_r>:
 80080cc:	898b      	ldrh	r3, [r1, #12]
 80080ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080d0:	079d      	lsls	r5, r3, #30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	d507      	bpl.n	80080e8 <__smakebuf_r+0x1c>
 80080d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2301      	movs	r3, #1
 80080e2:	6163      	str	r3, [r4, #20]
 80080e4:	b002      	add	sp, #8
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	ab01      	add	r3, sp, #4
 80080ea:	466a      	mov	r2, sp
 80080ec:	f7ff ffc8 	bl	8008080 <__swhatbuf_r>
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	4605      	mov	r5, r0
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7fe f903 	bl	8006300 <_malloc_r>
 80080fa:	b948      	cbnz	r0, 8008110 <__smakebuf_r+0x44>
 80080fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008100:	059a      	lsls	r2, r3, #22
 8008102:	d4ef      	bmi.n	80080e4 <__smakebuf_r+0x18>
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	e7e3      	b.n	80080d8 <__smakebuf_r+0xc>
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <__smakebuf_r+0x7c>)
 8008112:	62b3      	str	r3, [r6, #40]	; 0x28
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	6163      	str	r3, [r4, #20]
 8008122:	9b01      	ldr	r3, [sp, #4]
 8008124:	6120      	str	r0, [r4, #16]
 8008126:	b15b      	cbz	r3, 8008140 <__smakebuf_r+0x74>
 8008128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f8c9 	bl	80082c4 <_isatty_r>
 8008132:	b128      	cbz	r0, 8008140 <__smakebuf_r+0x74>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	89a0      	ldrh	r0, [r4, #12]
 8008142:	4305      	orrs	r5, r0
 8008144:	81a5      	strh	r5, [r4, #12]
 8008146:	e7cd      	b.n	80080e4 <__smakebuf_r+0x18>
 8008148:	08007ed9 	.word	0x08007ed9

0800814c <_raise_r>:
 800814c:	291f      	cmp	r1, #31
 800814e:	b538      	push	{r3, r4, r5, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	460d      	mov	r5, r1
 8008154:	d904      	bls.n	8008160 <_raise_r+0x14>
 8008156:	2316      	movs	r3, #22
 8008158:	6003      	str	r3, [r0, #0]
 800815a:	f04f 30ff 	mov.w	r0, #4294967295
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008162:	b112      	cbz	r2, 800816a <_raise_r+0x1e>
 8008164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008168:	b94b      	cbnz	r3, 800817e <_raise_r+0x32>
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f830 	bl	80081d0 <_getpid_r>
 8008170:	462a      	mov	r2, r5
 8008172:	4601      	mov	r1, r0
 8008174:	4620      	mov	r0, r4
 8008176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800817a:	f000 b817 	b.w	80081ac <_kill_r>
 800817e:	2b01      	cmp	r3, #1
 8008180:	d00a      	beq.n	8008198 <_raise_r+0x4c>
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	d103      	bne.n	800818e <_raise_r+0x42>
 8008186:	2316      	movs	r3, #22
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	2001      	movs	r0, #1
 800818c:	e7e7      	b.n	800815e <_raise_r+0x12>
 800818e:	2400      	movs	r4, #0
 8008190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008194:	4628      	mov	r0, r5
 8008196:	4798      	blx	r3
 8008198:	2000      	movs	r0, #0
 800819a:	e7e0      	b.n	800815e <_raise_r+0x12>

0800819c <raise>:
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <raise+0xc>)
 800819e:	4601      	mov	r1, r0
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	f7ff bfd3 	b.w	800814c <_raise_r>
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c

080081ac <_kill_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_kill_r+0x20>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	f7f9 fcfb 	bl	8001bb4 <_kill>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d102      	bne.n	80081c8 <_kill_r+0x1c>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b103      	cbz	r3, 80081c8 <_kill_r+0x1c>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	20000800 	.word	0x20000800

080081d0 <_getpid_r>:
 80081d0:	f7f9 bce8 	b.w	8001ba4 <_getpid>

080081d4 <__sread>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	460c      	mov	r4, r1
 80081d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081dc:	f000 f894 	bl	8008308 <_read_r>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	bfab      	itete	ge
 80081e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081e6:	89a3      	ldrhlt	r3, [r4, #12]
 80081e8:	181b      	addge	r3, r3, r0
 80081ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081ee:	bfac      	ite	ge
 80081f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081f2:	81a3      	strhlt	r3, [r4, #12]
 80081f4:	bd10      	pop	{r4, pc}

080081f6 <__swrite>:
 80081f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	461f      	mov	r7, r3
 80081fc:	898b      	ldrh	r3, [r1, #12]
 80081fe:	05db      	lsls	r3, r3, #23
 8008200:	4605      	mov	r5, r0
 8008202:	460c      	mov	r4, r1
 8008204:	4616      	mov	r6, r2
 8008206:	d505      	bpl.n	8008214 <__swrite+0x1e>
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	2302      	movs	r3, #2
 800820e:	2200      	movs	r2, #0
 8008210:	f000 f868 	bl	80082e4 <_lseek_r>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800821a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	4632      	mov	r2, r6
 8008222:	463b      	mov	r3, r7
 8008224:	4628      	mov	r0, r5
 8008226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800822a:	f000 b817 	b.w	800825c <_write_r>

0800822e <__sseek>:
 800822e:	b510      	push	{r4, lr}
 8008230:	460c      	mov	r4, r1
 8008232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008236:	f000 f855 	bl	80082e4 <_lseek_r>
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	bf15      	itete	ne
 8008240:	6560      	strne	r0, [r4, #84]	; 0x54
 8008242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800824a:	81a3      	strheq	r3, [r4, #12]
 800824c:	bf18      	it	ne
 800824e:	81a3      	strhne	r3, [r4, #12]
 8008250:	bd10      	pop	{r4, pc}

08008252 <__sclose>:
 8008252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008256:	f000 b813 	b.w	8008280 <_close_r>
	...

0800825c <_write_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d07      	ldr	r5, [pc, #28]	; (800827c <_write_r+0x20>)
 8008260:	4604      	mov	r4, r0
 8008262:	4608      	mov	r0, r1
 8008264:	4611      	mov	r1, r2
 8008266:	2200      	movs	r2, #0
 8008268:	602a      	str	r2, [r5, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	f7f9 fcd9 	bl	8001c22 <_write>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_write_r+0x1e>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_write_r+0x1e>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	20000800 	.word	0x20000800

08008280 <_close_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	; (800829c <_close_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7f9 fce5 	bl	8001c5a <_close>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_close_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_close_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000800 	.word	0x20000800

080082a0 <_fstat_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	; (80082c0 <_fstat_r+0x20>)
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	f7f9 fce0 	bl	8001c72 <_fstat>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d102      	bne.n	80082bc <_fstat_r+0x1c>
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	b103      	cbz	r3, 80082bc <_fstat_r+0x1c>
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	bf00      	nop
 80082c0:	20000800 	.word	0x20000800

080082c4 <_isatty_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_isatty_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7f9 fcdf 	bl	8001c92 <_isatty>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_isatty_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_isatty_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000800 	.word	0x20000800

080082e4 <_lseek_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	; (8008304 <_lseek_r+0x20>)
 80082e8:	4604      	mov	r4, r0
 80082ea:	4608      	mov	r0, r1
 80082ec:	4611      	mov	r1, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	602a      	str	r2, [r5, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f7f9 fcd8 	bl	8001ca8 <_lseek>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_lseek_r+0x1e>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_lseek_r+0x1e>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20000800 	.word	0x20000800

08008308 <_read_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_read_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7f9 fc66 	bl	8001be8 <_read>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_read_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_read_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20000800 	.word	0x20000800

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
