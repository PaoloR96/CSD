
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003540  08003540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003540  08003540  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003540  08003540  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a20d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b6  00000000  00000000  0002a249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e8  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c671  00000000  00000000  0002cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6a6  00000000  00000000  000492f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae35b  00000000  00000000  0005499f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102cfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027c0  00000000  00000000  00102d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034f8 	.word	0x080034f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080034f8 	.word	0x080034f8

080001c8 <HAL_TIM_PeriodElapsedCallback>:
  * @retval int
  */

int flag=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(flag==0){
 80001d0:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d109      	bne.n	80001ec <HAL_TIM_PeriodElapsedCallback+0x24>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001e0:	f000 fde6 	bl	8000db0 <HAL_GPIO_WritePin>
			flag=1;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]
	}else if(flag==1){
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
				flag=0;

	}
}
 80001ea:	e00c      	b.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x3e>
	}else if(flag==1){
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d108      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x3e>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001fc:	f000 fdd8 	bl	8000db0 <HAL_GPIO_WritePin>
				flag=0;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	200000c0 	.word	0x200000c0
 8000214:	48001000 	.word	0x48001000

08000218 <main>:



int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fad6 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f972 	bl	800050c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f85a 	bl	80002e0 <MX_TIM2_Init>
  MX_TIM8_Init();
 800022c:	f000 f8e0 	bl	80003f0 <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <main+0x20>)
 8000232:	f002 fa01 	bl	8002638 <HAL_TIM_Base_Start_IT>
  while (1)
 8000236:	e7fe      	b.n	8000236 <main+0x1e>
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b09e      	sub	sp, #120	; 0x78
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 f94c 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	223c      	movs	r2, #60	; 0x3c
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 f93e 	bl	80034e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	2300      	movs	r3, #0
 800027a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fdad 	bl	8000de0 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800028c:	f000 f98a 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000294:	2300      	movs	r3, #0
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fdd6 	bl	8001e5c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002b6:	f000 f975 	bl	80005a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM8;
 80002ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002be:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80002c0:	2300      	movs	r3, #0
 80002c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 ffae 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d2:	f000 f967 	bl	80005a4 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3778      	adds	r7, #120	; 0x78
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b090      	sub	sp, #64	; 0x40
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002f4:	f107 031c 	add.w	r3, r7, #28
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <MX_TIM2_Init+0x10c>)
 800031e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000324:	4b31      	ldr	r3, [pc, #196]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032a:	4b30      	ldr	r3, [pc, #192]	; (80003ec <MX_TIM2_Init+0x10c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 47999;
 8000330:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000332:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <MX_TIM2_Init+0x10c>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800033e:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000346:	f002 f91f 	bl	8002588 <HAL_TIM_Base_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000350:	f000 f928 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000358:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035e:	4619      	mov	r1, r3
 8000360:	4822      	ldr	r0, [pc, #136]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000362:	f002 fbef 	bl	8002b44 <HAL_TIM_ConfigClockSource>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 f91a 	bl	80005a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000370:	481e      	ldr	r0, [pc, #120]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000372:	f002 f9cb 	bl	800270c <HAL_TIM_IC_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800037c:	f000 f912 	bl	80005a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	4619      	mov	r1, r3
 800038e:	4817      	ldr	r0, [pc, #92]	; (80003ec <MX_TIM2_Init+0x10c>)
 8000390:	f002 fca1 	bl	8002cd6 <HAL_TIM_SlaveConfigSynchro>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800039a:	f000 f903 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <MX_TIM2_Init+0x10c>)
 80003ae:	f002 ffd9 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80003b8:	f000 f8f4 	bl	80005a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003bc:	2300      	movs	r3, #0
 80003be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003c0:	2301      	movs	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_TIM2_Init+0x10c>)
 80003d4:	f002 fb1a 	bl	8002a0c <HAL_TIM_IC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80003de:	f000 f8e1 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028

080003f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	; 0x40
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800042c:	4b35      	ldr	r3, [pc, #212]	; (8000504 <MX_TIM8_Init+0x114>)
 800042e:	4a36      	ldr	r2, [pc, #216]	; (8000508 <MX_TIM8_Init+0x118>)
 8000430:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000432:	4b34      	ldr	r3, [pc, #208]	; (8000504 <MX_TIM8_Init+0x114>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b32      	ldr	r3, [pc, #200]	; (8000504 <MX_TIM8_Init+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800043e:	4b31      	ldr	r3, [pc, #196]	; (8000504 <MX_TIM8_Init+0x114>)
 8000440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000444:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <MX_TIM8_Init+0x114>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <MX_TIM8_Init+0x114>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <MX_TIM8_Init+0x114>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000458:	482a      	ldr	r0, [pc, #168]	; (8000504 <MX_TIM8_Init+0x114>)
 800045a:	f002 f895 	bl	8002588 <HAL_TIM_Base_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000464:	f000 f89e 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800046e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000472:	4619      	mov	r1, r3
 8000474:	4823      	ldr	r0, [pc, #140]	; (8000504 <MX_TIM8_Init+0x114>)
 8000476:	f002 fb65 	bl	8002b44 <HAL_TIM_ConfigClockSource>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000480:	f000 f890 	bl	80005a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000484:	481f      	ldr	r0, [pc, #124]	; (8000504 <MX_TIM8_Init+0x114>)
 8000486:	f002 f941 	bl	800270c <HAL_TIM_IC_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000490:	f000 f888 	bl	80005a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000494:	2306      	movs	r3, #6
 8000496:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000498:	2300      	movs	r3, #0
 800049a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4818      	ldr	r0, [pc, #96]	; (8000504 <MX_TIM8_Init+0x114>)
 80004a4:	f002 fc17 	bl	8002cd6 <HAL_TIM_SlaveConfigSynchro>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80004ae:	f000 f879 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	480f      	ldr	r0, [pc, #60]	; (8000504 <MX_TIM8_Init+0x114>)
 80004c6:	f002 ff4d 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 80004d0:	f000 f868 	bl	80005a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004d4:	2300      	movs	r3, #0
 80004d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004d8:	2301      	movs	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	4619      	mov	r1, r3
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <MX_TIM8_Init+0x114>)
 80004ec:	f002 fa8e 	bl	8002a0c <HAL_TIM_IC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 80004f6:	f000 f855 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	3740      	adds	r7, #64	; 0x40
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000074 	.word	0x20000074
 8000508:	40013400 	.word	0x40013400

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0x90>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a1d      	ldr	r2, [pc, #116]	; (800059c <MX_GPIO_Init+0x90>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0x90>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0x90>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a17      	ldr	r2, [pc, #92]	; (800059c <MX_GPIO_Init+0x90>)
 8000540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_GPIO_Init+0x90>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_GPIO_Init+0x90>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <MX_GPIO_Init+0x90>)
 8000558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x90>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000572:	f000 fc1d 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000590:	f000 fa94 	bl	8000abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	48001000 	.word	0x48001000

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <HAL_MspInit+0x44>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_MspInit+0x44>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d131      	bne.n	800067e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800064a:	2301      	movs	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800065a:	2301      	movs	r3, #1
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fa28 	bl	8000abc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	201c      	movs	r0, #28
 8000672:	f000 f9ec 	bl	8000a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000676:	201c      	movs	r0, #28
 8000678:	f000 fa05 	bl	8000a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800067c:	e02c      	b.n	80006d8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_TIM_Base_MspInit+0xec>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d127      	bne.n	80006d8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 800068e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 80006a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_TIM_Base_MspInit+0xe8>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80006c8:	2304      	movs	r3, #4
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_TIM_Base_MspInit+0xf0>)
 80006d4:	f000 f9f2 	bl	8000abc <HAL_GPIO_Init>
}
 80006d8:	bf00      	nop
 80006da:	3730      	adds	r7, #48	; 0x30
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40013400 	.word	0x40013400
 80006e8:	48000800 	.word	0x48000800

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <MemManage_Handler+0x4>

080006fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler+0x4>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <UsageFault_Handler+0x4>

0800070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f88e 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM2_IRQHandler+0x10>)
 8000746:	f002 f842 	bl	80027ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800077c:	f7ff ffea 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a6:	f002 fe7b 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007aa:	f7ff fd35 	bl	8000218 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007bc:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c4:	200000c8 	.word	0x200000c8

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
	...

080007cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f92b 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	200f      	movs	r0, #15
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff fee2 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f943 	bl	8000aa2 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f90b 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	200000c4 	.word	0x200000c4

08000880 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;  
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000c4 	.word	0x200000c4

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <__NVIC_EnableIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff29 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff3e 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e154      	b.n	8000d76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 8146 	beq.w	8000d70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d005      	beq.n	8000afc <HAL_GPIO_Init+0x40>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	f003 0201 	and.w	r2, r3, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d017      	beq.n	8000b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d123      	bne.n	8000bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	6939      	ldr	r1, [r7, #16]
 8000bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0203 	and.w	r2, r3, #3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80a0 	beq.w	8000d70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b58      	ldr	r3, [pc, #352]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c48:	4a53      	ldr	r2, [pc, #332]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c72:	d019      	beq.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a49      	ldr	r2, [pc, #292]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2e4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1e0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_GPIO_Init+0x2ec>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1dc>
 8000c94:	2304      	movs	r3, #4
 8000c96:	e008      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cba:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cec:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f aea3 	bne.w	8000acc <HAL_GPIO_Init+0x10>
  }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	48001000 	.word	0x48001000
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f001 b823 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 817d 	beq.w	8001116 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1c:	4bbc      	ldr	r3, [pc, #752]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d00c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e28:	4bb9      	ldr	r3, [pc, #740]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d15c      	bne.n	8000eee <HAL_RCC_OscConfig+0x10e>
 8000e34:	4bb6      	ldr	r3, [pc, #728]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e40:	d155      	bne.n	8000eee <HAL_RCC_OscConfig+0x10e>
 8000e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d102      	bne.n	8000e74 <HAL_RCC_OscConfig+0x94>
 8000e6e:	4ba8      	ldr	r3, [pc, #672]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	e015      	b.n	8000ea0 <HAL_RCC_OscConfig+0xc0>
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e9c:	4b9c      	ldr	r3, [pc, #624]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ea8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eac:	fa92 f2a2 	rbit	r2, r2
 8000eb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	f042 0220 	orr.w	r2, r2, #32
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	f002 021f 	and.w	r2, r2, #31
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 811f 	beq.w	8001114 <HAL_RCC_OscConfig+0x334>
 8000ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 8116 	bne.w	8001114 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f000 bfaf 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x12e>
 8000f00:	4b83      	ldr	r3, [pc, #524]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a82      	ldr	r2, [pc, #520]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e036      	b.n	8000f7c <HAL_RCC_OscConfig+0x19c>
 8000f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x158>
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7b      	ldr	r2, [pc, #492]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b79      	ldr	r3, [pc, #484]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a78      	ldr	r2, [pc, #480]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e021      	b.n	8000f7c <HAL_RCC_OscConfig+0x19c>
 8000f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x184>
 8000f4a:	4b71      	ldr	r3, [pc, #452]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a70      	ldr	r2, [pc, #448]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6d      	ldr	r2, [pc, #436]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e00b      	b.n	8000f7c <HAL_RCC_OscConfig+0x19c>
 8000f64:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a69      	ldr	r2, [pc, #420]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b67      	ldr	r3, [pc, #412]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a66      	ldr	r2, [pc, #408]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f7c:	4b64      	ldr	r3, [pc, #400]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	f023 020f 	bic.w	r2, r3, #15
 8000f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	495f      	ldr	r1, [pc, #380]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d059      	beq.n	800105a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc6b 	bl	8000880 <HAL_GetTick>
 8000faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e00a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fc66 	bl	8000880 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d902      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f000 bf43 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x218>
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	e015      	b.n	8001024 <HAL_RCC_OscConfig+0x244>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001014:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001028:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800102c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001030:	fa92 f2a2 	rbit	r2, r2
 8001034:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001038:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800103c:	fab2 f282 	clz	r2, r2
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f042 0220 	orr.w	r2, r2, #32
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	f002 021f 	and.w	r2, r2, #31
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ab      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x1d0>
 8001058:	e05d      	b.n	8001116 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fc11 	bl	8000880 <HAL_GetTick>
 800105e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e00a      	b.n	800107a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fc0c 	bl	8000880 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b64      	cmp	r3, #100	; 0x64
 8001072:	d902      	bls.n	800107a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	f000 bee9 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 800107a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800108e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x2cc>
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e015      	b.n	80010d8 <HAL_RCC_OscConfig+0x2f8>
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010e4:	fa92 f2a2 	rbit	r2, r2
 80010e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f002 021f 	and.w	r2, r2, #31
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ab      	bne.n	8001064 <HAL_RCC_OscConfig+0x284>
 800110c:	e003      	b.n	8001116 <HAL_RCC_OscConfig+0x336>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 817d 	beq.w	8001426 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800112c:	4ba6      	ldr	r3, [pc, #664]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001138:	4ba3      	ldr	r3, [pc, #652]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d172      	bne.n	800122a <HAL_RCC_OscConfig+0x44a>
 8001144:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d16c      	bne.n	800122a <HAL_RCC_OscConfig+0x44a>
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001162:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	fab3 f383 	clz	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d102      	bne.n	8001180 <HAL_RCC_OscConfig+0x3a0>
 800117a:	4b93      	ldr	r3, [pc, #588]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	e013      	b.n	80011a8 <HAL_RCC_OscConfig+0x3c8>
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001198:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011a4:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2202      	movs	r2, #2
 80011aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011b2:	fa92 f2a2 	rbit	r2, r2
 80011b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	f002 021f 	and.w	r2, r2, #31
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <HAL_RCC_OscConfig+0x410>
 80011da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d002      	beq.n	80011f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f000 be2e 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	21f8      	movs	r1, #248	; 0xf8
 8001206:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800120e:	fa91 f1a1 	rbit	r1, r1
 8001212:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001216:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800121a:	fab1 f181 	clz	r1, r1
 800121e:	b2c9      	uxtb	r1, r1
 8001220:	408b      	lsls	r3, r1
 8001222:	4969      	ldr	r1, [pc, #420]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001228:	e0fd      	b.n	8001426 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8088 	beq.w	800134c <HAL_RCC_OscConfig+0x56c>
 800123c:	2301      	movs	r3, #1
 800123e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800124e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800125c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	2301      	movs	r3, #1
 8001266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb0a 	bl	8000880 <HAL_GetTick>
 800126c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fb05 	bl	8000880 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 bde2 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800129a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4d8>
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	e013      	b.n	80012e0 <HAL_RCC_OscConfig+0x500>
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012dc:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	2202      	movs	r2, #2
 80012e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ea:	fa92 f2a2 	rbit	r2, r2
 80012ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f002 021f 	and.w	r2, r2, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0af      	beq.n	8001272 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	21f8      	movs	r1, #248	; 0xf8
 8001328:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001330:	fa91 f1a1 	rbit	r1, r1
 8001334:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001338:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800133c:	fab1 f181 	clz	r1, r1
 8001340:	b2c9      	uxtb	r1, r1
 8001342:	408b      	lsls	r3, r1
 8001344:	4920      	ldr	r1, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
 800134a:	e06c      	b.n	8001426 <HAL_RCC_OscConfig+0x646>
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800135e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800136c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	461a      	mov	r2, r3
 8001374:	2300      	movs	r3, #0
 8001376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fa82 	bl	8000880 <HAL_GetTick>
 800137c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fa7d 	bl	8000880 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d902      	bls.n	8001398 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	f000 bd5a 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d104      	bne.n	80013cc <HAL_RCC_OscConfig+0x5ec>
 80013c2:	4b01      	ldr	r3, [pc, #4]	; (80013c8 <HAL_RCC_OscConfig+0x5e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	e015      	b.n	80013f4 <HAL_RCC_OscConfig+0x614>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013f0:	4bc8      	ldr	r3, [pc, #800]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2202      	movs	r2, #2
 80013f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001406:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	f002 021f 	and.w	r2, r2, #31
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ad      	bne.n	8001382 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8110 	beq.w	800165c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d079      	beq.n	8001540 <HAL_RCC_OscConfig+0x760>
 800144c:	2301      	movs	r3, #1
 800144e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800145e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4bab      	ldr	r3, [pc, #684]	; (8001718 <HAL_RCC_OscConfig+0x938>)
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	461a      	mov	r2, r3
 8001472:	2301      	movs	r3, #1
 8001474:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fa03 	bl	8000880 <HAL_GetTick>
 800147a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f9fe 	bl	8000880 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d902      	bls.n	8001496 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	f000 bcdb 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014d4:	2202      	movs	r2, #2
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f2a3 	rbit	r2, r3
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014fc:	2102      	movs	r1, #2
 80014fe:	6019      	str	r1, [r3, #0]
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f1a3 	rbit	r1, r3
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001516:	6019      	str	r1, [r3, #0]
  return result;
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0a0      	beq.n	8001480 <HAL_RCC_OscConfig+0x6a0>
 800153e:	e08d      	b.n	800165c <HAL_RCC_OscConfig+0x87c>
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001562:	601a      	str	r2, [r3, #0]
  return result;
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800156c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x938>)
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	461a      	mov	r2, r3
 800157e:	2300      	movs	r3, #0
 8001580:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f97d 	bl	8000880 <HAL_GetTick>
 8001586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff f978 	bl	8000880 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d902      	bls.n	80015a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	f000 bc55 	b.w	8001e4c <HAL_RCC_OscConfig+0x106c>
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015aa:	2202      	movs	r2, #2
 80015ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	fa93 f2a3 	rbit	r2, r3
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800160c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800161a:	2102      	movs	r1, #2
 800161c:	6019      	str	r1, [r3, #0]
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f1a3 	rbit	r1, r3
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001634:	6019      	str	r1, [r3, #0]
  return result;
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fab3 f383 	clz	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d197      	bne.n	800158c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 81a1 	beq.w	80019b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d116      	bne.n	80016b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	61d3      	str	r3, [r2, #28]
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x93c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d11a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x93c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_RCC_OscConfig+0x93c>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff f8d9 	bl	8000880 <HAL_GetTick>
 80016ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	e009      	b.n	80016e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d4:	f7ff f8d4 	bl	8000880 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e3b1      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_RCC_OscConfig+0x93c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x940>
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <HAL_RCC_OscConfig+0x934>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	e03c      	b.n	800178c <HAL_RCC_OscConfig+0x9ac>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	10908120 	.word	0x10908120
 800171c:	40007000 	.word	0x40007000
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x96a>
 8001730:	4bc1      	ldr	r3, [pc, #772]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4ac0      	ldr	r2, [pc, #768]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	4bbe      	ldr	r3, [pc, #760]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4abd      	ldr	r2, [pc, #756]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e020      	b.n	800178c <HAL_RCC_OscConfig+0x9ac>
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x994>
 800175a:	4bb7      	ldr	r3, [pc, #732]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4ab6      	ldr	r2, [pc, #728]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	4bb4      	ldr	r3, [pc, #720]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4ab3      	ldr	r2, [pc, #716]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x9ac>
 8001774:	4bb0      	ldr	r3, [pc, #704]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4aaf      	ldr	r2, [pc, #700]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4bad      	ldr	r3, [pc, #692]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4aac      	ldr	r2, [pc, #688]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8081 	beq.w	80018a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f86f 	bl	8000880 <HAL_GetTick>
 80017a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff f86a 	bl	8000880 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e345      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001806:	601a      	str	r2, [r3, #0]
  return result;
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001810:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0xa4c>
 8001826:	4b84      	ldr	r3, [pc, #528]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0xa74>
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001834:	2202      	movs	r2, #2
 8001836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001858:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800185c:	2102      	movs	r1, #2
 800185e:	6011      	str	r1, [r2, #0]
 8001860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001864:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	fa92 f1a2 	rbit	r1, r2
 800186e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001872:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001876:	6011      	str	r1, [r2, #0]
  return result;
 8001878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800187c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f002 021f 	and.w	r2, r2, #31
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d084      	beq.n	80017a8 <HAL_RCC_OscConfig+0x9c8>
 800189e:	e07f      	b.n	80019a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7fe ffee 	bl	8000880 <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7fe ffe9 	bl	8000880 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2c4      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001908:	601a      	str	r2, [r3, #0]
  return result;
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001912:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d102      	bne.n	800192e <HAL_RCC_OscConfig+0xb4e>
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	e013      	b.n	8001956 <HAL_RCC_OscConfig+0xb76>
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800195e:	2102      	movs	r1, #2
 8001960:	6011      	str	r1, [r2, #0]
 8001962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001966:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	fa92 f1a2 	rbit	r1, r2
 8001970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001974:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001978:	6011      	str	r1, [r2, #0]
  return result;
 800197a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800197e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d184      	bne.n	80018aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8242 	beq.w	8001e4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_RCC_OscConfig+0xc58>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	f000 8213 	beq.w	8001dfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	f040 8162 	bne.w	8001caa <HAL_RCC_OscConfig+0xeca>
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a0a:	601a      	str	r2, [r3, #0]
  return result;
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe ff28 	bl	8000880 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e00c      	b.n	8001a50 <HAL_RCC_OscConfig+0xc70>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7fe ff20 	bl	8000880 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1fd      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a74:	601a      	str	r2, [r3, #0]
  return result;
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0xcba>
 8001a94:	4bb0      	ldr	r3, [pc, #704]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e027      	b.n	8001aea <HAL_RCC_OscConfig+0xd0a>
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001af2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af6:	6011      	str	r1, [r2, #0]
 8001af8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	fa92 f1a2 	rbit	r1, r2
 8001b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b0e:	6011      	str	r1, [r2, #0]
  return result;
 8001b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d182      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b36:	4b88      	ldr	r3, [pc, #544]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	430b      	orrs	r3, r1
 8001b58:	497f      	ldr	r1, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b82:	601a      	str	r2, [r3, #0]
  return result;
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe fe6c 	bl	8000880 <HAL_GetTick>
 8001ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe fe67 	bl	8000880 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e144      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_OscConfig+0xe2c>
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e027      	b.n	8001c5c <HAL_RCC_OscConfig+0xe7c>
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c80:	6011      	str	r1, [r2, #0]
  return result;
 8001c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d082      	beq.n	8001bae <HAL_RCC_OscConfig+0xdce>
 8001ca8:	e0cf      	b.n	8001e4a <HAL_RCC_OscConfig+0x106a>
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cce:	601a      	str	r2, [r3, #0]
  return result;
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fdc6 	bl	8000880 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe fdc1 	bl	8000880 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e09e      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d32:	601a      	str	r2, [r3, #0]
  return result;
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d104      	bne.n	8001d5c <HAL_RCC_OscConfig+0xf7c>
 8001d52:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <HAL_RCC_OscConfig+0xf78>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e029      	b.n	8001dac <HAL_RCC_OscConfig+0xfcc>
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x1078>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	fa92 f1a2 	rbit	r1, r2
 8001dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dd0:	6011      	str	r1, [r2, #0]
  return result;
 8001dd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f042 0220 	orr.w	r2, r2, #32
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f002 021f 	and.w	r2, r2, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d180      	bne.n	8001cfa <HAL_RCC_OscConfig+0xf1a>
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e01e      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_OscConfig+0x1078>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d10b      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b09e      	sub	sp, #120	; 0x78
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e162      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	498b      	ldr	r1, [pc, #556]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e14a      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	497f      	ldr	r1, [pc, #508]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80dc 	beq.w	8002088 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d13c      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xf6>
 8001ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xa6>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e00f      	b.n	8001f22 <HAL_RCC_ClockConfig+0xc6>
 8001f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	663b      	str	r3, [r7, #96]	; 0x60
 8001f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f26:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d17b      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0f3      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d13c      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x178>
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x128>
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
 8001f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fac:	fa92 f2a2 	rbit	r2, r2
 8001fb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13a      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b2      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x1a0>
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	e00d      	b.n	8002018 <HAL_RCC_ClockConfig+0x1bc>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	2302      	movs	r3, #2
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2202      	movs	r2, #2
 800201a:	61ba      	str	r2, [r7, #24]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	617a      	str	r2, [r7, #20]
  return result;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f002 021f 	and.w	r2, r2, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e079      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	491a      	ldr	r1, [pc, #104]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe fc12 	bl	8000880 <HAL_GetTick>
 800205c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe fc0e 	bl	8000880 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e061      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d214      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4906      	ldr	r1, [pc, #24]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4912      	ldr	r1, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020fe:	f000 f829 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210c:	22f0      	movs	r2, #240	; 0xf0
 800210e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	60fa      	str	r2, [r7, #12]
  return result;
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	40d3      	lsrs	r3, r2
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x2ec>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	fa21 f303 	lsr.w	r3, r1, r3
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_RCC_ClockConfig+0x2f0>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x2f4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb60 	bl	80007f8 <HAL_InitTick>
  
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3778      	adds	r7, #120	; 0x78
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08003510 	.word	0x08003510
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b08b      	sub	sp, #44	; 0x2c
 8002158:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e03c      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002186:	623b      	str	r3, [r7, #32]
      break;
 8002188:	e03c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002190:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002194:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	607a      	str	r2, [r7, #4]
  return result;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	40d3      	lsrs	r3, r2
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_RCC_GetSysClockFreq+0xc8>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	220f      	movs	r2, #15
 80021b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	60fa      	str	r2, [r7, #12]
  return result;
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	e004      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002200:	623b      	str	r3, [r7, #32]
      break;
 8002202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002204:	6a3b      	ldr	r3, [r7, #32]
}
 8002206:	4618      	mov	r0, r3
 8002208:	372c      	adds	r7, #44	; 0x2c
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	007a1200 	.word	0x007a1200
 800221c:	08003520 	.word	0x08003520
 8002220:	08003530 	.word	0x08003530
 8002224:	003d0900 	.word	0x003d0900

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b092      	sub	sp, #72	; 0x48
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80d4 	beq.w	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224c:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10e      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	61d3      	str	r3, [r2, #28]
 8002264:	4b48      	ldr	r3, [pc, #288]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b42      	ldr	r3, [pc, #264]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe faf7 	bl	8000880 <HAL_GetTick>
 8002292:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe faf3 	bl	8000880 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e169      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8084 	beq.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d07c      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	2301      	movs	r3, #1
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2300      	movs	r3, #0
 8002324:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d04b      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe faa3 	bl	8000880 <HAL_GetTick>
 800233a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fa9f 	bl	8000880 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e113      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002354:	2302      	movs	r3, #2
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	61fb      	str	r3, [r7, #28]
  return result;
 800236c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d108      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002382:	4b01      	ldr	r3, [pc, #4]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	e00d      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	10908100 	.word	0x10908100
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	4b78      	ldr	r3, [pc, #480]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2202      	movs	r2, #2
 80023a6:	613a      	str	r2, [r7, #16]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	60fa      	str	r2, [r7, #12]
  return result;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0b7      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ce:	4b6d      	ldr	r3, [pc, #436]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	496a      	ldr	r1, [pc, #424]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002400:	4b60      	ldr	r3, [pc, #384]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f023 0203 	bic.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	495d      	ldr	r1, [pc, #372]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4956      	ldr	r1, [pc, #344]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243c:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	494e      	ldr	r1, [pc, #312]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f023 0210 	bic.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4947      	ldr	r1, [pc, #284]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002468:	4313      	orrs	r3, r2
 800246a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	493f      	ldr	r1, [pc, #252]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f023 0220 	bic.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4938      	ldr	r1, [pc, #224]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4930      	ldr	r1, [pc, #192]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	4929      	ldr	r1, [pc, #164]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	4921      	ldr	r1, [pc, #132]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	491a      	ldr	r1, [pc, #104]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	490b      	ldr	r1, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3748      	adds	r7, #72	; 0x48
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e049      	b.n	800262e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe f822 	bl	80005f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fbf0 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d001      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04a      	b.n	80026e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d018      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d013      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x6c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <HAL_TIM_Base_Start_IT+0xc4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_TIM_Base_Start_IT+0xc8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x6c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d115      	bne.n	80026d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_TIM_Base_Start_IT+0xd0>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d015      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0xaa>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d011      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	e008      	b.n	80026e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e000      	b.n	80026e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40000800 	.word	0x40000800
 8002700:	40013400 	.word	0x40013400
 8002704:	40014000 	.word	0x40014000
 8002708:	00010007 	.word	0x00010007

0800270c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e049      	b.n	80027b2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f841 	bl	80027ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fb2e 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d122      	bne.n	800282a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d11b      	bne.n	800282a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0202 	mvn.w	r2, #2
 80027fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 faac 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002816:	e005      	b.n	8002824 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fa9e 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 faaf 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d122      	bne.n	800287e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d11b      	bne.n	800287e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0204 	mvn.w	r2, #4
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fa82 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 800286a:	e005      	b.n	8002878 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fa74 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa85 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d122      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11b      	bne.n	80028d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0208 	mvn.w	r2, #8
 80028a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2204      	movs	r2, #4
 80028a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fa58 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 80028be:	e005      	b.n	80028cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa4a 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa5b 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d122      	bne.n	8002926 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d11b      	bne.n	8002926 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f06f 0210 	mvn.w	r2, #16
 80028f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2208      	movs	r2, #8
 80028fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa2e 	bl	8002d6e <HAL_TIM_IC_CaptureCallback>
 8002912:	e005      	b.n	8002920 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fa20 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa31 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10e      	bne.n	8002952 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f06f 0201 	mvn.w	r2, #1
 800294a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fd fc3b 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d10e      	bne.n	800297e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d107      	bne.n	800297e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fd7d 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fd70 	bl	800348c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9df 	bl	8002d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0220 	mvn.w	r2, #32
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fd30 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e088      	b.n	8002b3c <HAL_TIM_IC_ConfigChannel+0x130>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f000 fad4 	bl	8002ff4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020c 	bic.w	r2, r2, #12
 8002a5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6999      	ldr	r1, [r3, #24]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	619a      	str	r2, [r3, #24]
 8002a6e:	e060      	b.n	8002b32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d11c      	bne.n	8002ab0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f000 fb4c 	bl	8003122 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6999      	ldr	r1, [r3, #24]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	619a      	str	r2, [r3, #24]
 8002aae:	e040      	b.n	8002b32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f000 fb99 	bl	80031fc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 020c 	bic.w	r2, r2, #12
 8002ad8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69d9      	ldr	r1, [r3, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	e021      	b.n	8002b32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d11c      	bne.n	8002b2e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f000 fbb6 	bl	8003274 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69d9      	ldr	r1, [r3, #28]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
 8002b2c:	e001      	b.n	8002b32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIM_ConfigClockSource+0x1c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0b6      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x18a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d03e      	beq.n	8002c1c <HAL_TIM_ConfigClockSource+0xd8>
 8002b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba2:	f200 8087 	bhi.w	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	f000 8086 	beq.w	8002cba <HAL_TIM_ConfigClockSource+0x176>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	d87f      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bb4:	2b70      	cmp	r3, #112	; 0x70
 8002bb6:	d01a      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0xaa>
 8002bb8:	2b70      	cmp	r3, #112	; 0x70
 8002bba:	d87b      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d050      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x11e>
 8002bc0:	2b60      	cmp	r3, #96	; 0x60
 8002bc2:	d877      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bc4:	2b50      	cmp	r3, #80	; 0x50
 8002bc6:	d03c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0xfe>
 8002bc8:	2b50      	cmp	r3, #80	; 0x50
 8002bca:	d873      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d058      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x13e>
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d86f      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bd4:	2b30      	cmp	r3, #48	; 0x30
 8002bd6:	d064      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8002bd8:	2b30      	cmp	r3, #48	; 0x30
 8002bda:	d86b      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d060      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d867      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05c      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d05a      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8002bec:	e062      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f000 fb91 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	609a      	str	r2, [r3, #8]
      break;
 8002c1a:	e04f      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f000 fb7a 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3e:	609a      	str	r2, [r3, #8]
      break;
 8002c40:	e03c      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f000 fa38 	bl	80030c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2150      	movs	r1, #80	; 0x50
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fb47 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002c60:	e02c      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f000 fa94 	bl	800319c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2160      	movs	r1, #96	; 0x60
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fb37 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002c80:	e01c      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fa18 	bl	80030c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2140      	movs	r1, #64	; 0x40
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fb27 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e00c      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f000 fb1e 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002cb2:	e003      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	e000      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_SlaveConfigSynchro+0x18>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e031      	b.n	8002d52 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8e3 	bl	8002ecc <TIM_SlaveTimer_SetConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e018      	b.n	8002d52 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d3e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <TIM_Base_SetConfig+0x104>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00f      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d00b      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a39      	ldr	r2, [pc, #228]	; (8002eb4 <TIM_Base_SetConfig+0x108>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <TIM_Base_SetConfig+0x10c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a37      	ldr	r2, [pc, #220]	; (8002ebc <TIM_Base_SetConfig+0x110>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <TIM_Base_SetConfig+0x104>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01b      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d017      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <TIM_Base_SetConfig+0x108>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <TIM_Base_SetConfig+0x10c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00f      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <TIM_Base_SetConfig+0x110>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <TIM_Base_SetConfig+0x114>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <TIM_Base_SetConfig+0x118>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d108      	bne.n	8002e48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <TIM_Base_SetConfig+0x104>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0xe8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <TIM_Base_SetConfig+0x110>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0xe8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <TIM_Base_SetConfig+0x114>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0xe8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <TIM_Base_SetConfig+0x118>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0xe8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <TIM_Base_SetConfig+0x11c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d103      	bne.n	8002e9c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	615a      	str	r2, [r3, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40013400 	.word	0x40013400
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800

08002ecc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	f023 0307 	bic.w	r3, r3, #7
 8002efe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b70      	cmp	r3, #112	; 0x70
 8002f18:	d01a      	beq.n	8002f50 <TIM_SlaveTimer_SetConfig+0x84>
 8002f1a:	2b70      	cmp	r3, #112	; 0x70
 8002f1c:	d860      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f1e:	2b60      	cmp	r3, #96	; 0x60
 8002f20:	d054      	beq.n	8002fcc <TIM_SlaveTimer_SetConfig+0x100>
 8002f22:	2b60      	cmp	r3, #96	; 0x60
 8002f24:	d85c      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f26:	2b50      	cmp	r3, #80	; 0x50
 8002f28:	d046      	beq.n	8002fb8 <TIM_SlaveTimer_SetConfig+0xec>
 8002f2a:	2b50      	cmp	r3, #80	; 0x50
 8002f2c:	d858      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d019      	beq.n	8002f66 <TIM_SlaveTimer_SetConfig+0x9a>
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d854      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f36:	2b30      	cmp	r3, #48	; 0x30
 8002f38:	d055      	beq.n	8002fe6 <TIM_SlaveTimer_SetConfig+0x11a>
 8002f3a:	2b30      	cmp	r3, #48	; 0x30
 8002f3c:	d850      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d051      	beq.n	8002fe6 <TIM_SlaveTimer_SetConfig+0x11a>
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d84c      	bhi.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04d      	beq.n	8002fe6 <TIM_SlaveTimer_SetConfig+0x11a>
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d04b      	beq.n	8002fe6 <TIM_SlaveTimer_SetConfig+0x11a>
 8002f4e:	e047      	b.n	8002fe0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68d9      	ldr	r1, [r3, #12]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f000 f9e0 	bl	8003324 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002f64:	e040      	b.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d101      	bne.n	8002f72 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e03b      	b.n	8002fea <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f98:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
      break;
 8002fb6:	e017      	b.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f000 f87d 	bl	80030c4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002fca:	e00d      	b.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f000 f8df 	bl	800319c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002fde:	e003      	b.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e000      	b.n	8002fe8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8002fe6:	bf00      	nop
  }

  return status;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <TIM_TI1_SetConfig+0xbc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <TIM_TI1_SetConfig+0x56>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d00f      	beq.n	800304a <TIM_TI1_SetConfig+0x56>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <TIM_TI1_SetConfig+0xc0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_TI1_SetConfig+0x56>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <TIM_TI1_SetConfig+0xc4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <TIM_TI1_SetConfig+0x56>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <TIM_TI1_SetConfig+0xc8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_TI1_SetConfig+0x56>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <TIM_TI1_SetConfig+0xcc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <TIM_TI1_SetConfig+0x5a>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <TIM_TI1_SetConfig+0x5c>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e003      	b.n	800306e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	b2db      	uxtb	r3, r3
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f023 030a 	bic.w	r3, r3, #10
 8003088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 030a 	and.w	r3, r3, #10
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40014000 	.word	0x40014000

080030c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f023 0201 	bic.w	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 030a 	bic.w	r3, r3, #10
 8003100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	b29b      	uxth	r3, r3
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003174:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f023 0210 	bic.w	r2, r3, #16
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	031b      	lsls	r3, r3, #12
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0303 	bic.w	r3, r3, #3
 8003228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003238:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	b2db      	uxtb	r3, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800324c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	031b      	lsls	r3, r3, #12
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80032c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	031b      	lsls	r3, r3, #12
 80032cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e063      	b.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d013      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a17      	ldr	r2, [pc, #92]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a13      	ldr	r2, [pc, #76]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10c      	bne.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4313      	orrs	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40013400 	.word	0x40013400
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40014000 	.word	0x40014000

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f000 f820 	bl	80034f8 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	08003540 	.word	0x08003540
 80034dc:	08003540 	.word	0x08003540
 80034e0:	08003540 	.word	0x08003540
 80034e4:	08003544 	.word	0x08003544

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
