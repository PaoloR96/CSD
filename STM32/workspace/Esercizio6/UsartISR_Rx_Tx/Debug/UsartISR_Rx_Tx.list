
UsartISR_Rx_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd4  08003cd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003cd4  08003cd4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cd4  08003cd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aeb4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a15  00000000  00000000  0002aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c49b  00000000  00000000  0002d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7c4  00000000  00000000  00049bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9945  00000000  00000000  000543b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdcfc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf0  00000000  00000000  000fdd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c84 	.word	0x08003c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003c84 	.word	0x08003c84

080001c8 <HAL_GPIO_EXTI_Callback>:
  */
char msgRx;
char msgTx='P';
int flag=0;
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit_IT(&huart4,&msgTx, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	4903      	ldr	r1, [pc, #12]	; (80001e4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80001d6:	4804      	ldr	r0, [pc, #16]	; (80001e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80001d8:	f002 fa34 	bl	8002644 <HAL_UART_Transmit_IT>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	2000002c 	.word	0x2000002c

080001ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart4, &msgRx, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	4917      	ldr	r1, [pc, #92]	; (8000254 <HAL_UART_RxCpltCallback+0x68>)
 80001f8:	4817      	ldr	r0, [pc, #92]	; (8000258 <HAL_UART_RxCpltCallback+0x6c>)
 80001fa:	f002 fa81 	bl	8002700 <HAL_UART_Receive_IT>
	  if(msgRx==msgTx&& flag==0){
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <HAL_UART_RxCpltCallback+0x68>)
 8000200:	781a      	ldrb	r2, [r3, #0]
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <HAL_UART_RxCpltCallback+0x70>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	429a      	cmp	r2, r3
 8000208:	d10d      	bne.n	8000226 <HAL_UART_RxCpltCallback+0x3a>
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <HAL_UART_RxCpltCallback+0x74>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d109      	bne.n	8000226 <HAL_UART_RxCpltCallback+0x3a>
		  	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <HAL_UART_RxCpltCallback+0x78>)
 800021a:	f000 fd71 	bl	8000d00 <HAL_GPIO_WritePin>
		  	  	  flag=1;
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <HAL_UART_RxCpltCallback+0x74>)
 8000220:	2201      	movs	r2, #1
 8000222:	601a      	str	r2, [r3, #0]
	  }
	  else if(msgRx==msgTx && flag==1){
	  		  	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
	  	  	  	  	  flag=0;
	  	  }
}
 8000224:	e012      	b.n	800024c <HAL_UART_RxCpltCallback+0x60>
	  else if(msgRx==msgTx && flag==1){
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <HAL_UART_RxCpltCallback+0x68>)
 8000228:	781a      	ldrb	r2, [r3, #0]
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <HAL_UART_RxCpltCallback+0x70>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d10c      	bne.n	800024c <HAL_UART_RxCpltCallback+0x60>
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <HAL_UART_RxCpltCallback+0x74>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d108      	bne.n	800024c <HAL_UART_RxCpltCallback+0x60>
	  		  	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000240:	4808      	ldr	r0, [pc, #32]	; (8000264 <HAL_UART_RxCpltCallback+0x78>)
 8000242:	f000 fd5d 	bl	8000d00 <HAL_GPIO_WritePin>
	  	  	  	  	  flag=0;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <HAL_UART_RxCpltCallback+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000b4 	.word	0x200000b4
 8000258:	2000002c 	.word	0x2000002c
 800025c:	20000000 	.word	0x20000000
 8000260:	200000b8 	.word	0x200000b8
 8000264:	48001000 	.word	0x48001000

08000268 <main>:




int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 f9e0 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f80e 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f88c 	bl	8000390 <MX_GPIO_Init>
  MX_UART4_Init();
 8000278:	f000 f85a 	bl	8000330 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart4, &msgRx, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	4902      	ldr	r1, [pc, #8]	; (8000288 <main+0x20>)
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x24>)
 8000282:	f002 fa3d 	bl	8002700 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000286:	e7fe      	b.n	8000286 <main+0x1e>
 8000288:	200000b4 	.word	0x200000b4
 800028c:	2000002c 	.word	0x2000002c

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09e      	sub	sp, #120	; 0x78
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fce8 	bl	8003c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	223c      	movs	r2, #60	; 0x3c
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fcda 	bl	8003c74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	2310      	movs	r3, #16
 80002ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fd43 	bl	8000d60 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002e0:	f000 f8b8 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	2300      	movs	r3, #0
 80002ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fd6c 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800030a:	f000 f8a3 	bl	8000454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800030e:	2308      	movs	r3, #8
 8000310:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ff95 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000324:	f000 f896 	bl	8000454 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3778      	adds	r7, #120	; 0x78
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_UART4_Init+0x58>)
 8000336:	4a15      	ldr	r2, [pc, #84]	; (800038c <MX_UART4_Init+0x5c>)
 8000338:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_UART4_Init+0x58>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_UART4_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_UART4_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_UART4_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_UART4_Init+0x58>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_UART4_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_UART4_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_UART4_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_UART4_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_UART4_Init+0x58>)
 8000374:	f002 f918 	bl	80025a8 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800037e:	f000 f869 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000002c 	.word	0x2000002c
 800038c:	40004c00 	.word	0x40004c00

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xbc>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a28      	ldr	r2, [pc, #160]	; (800044c <MX_GPIO_Init+0xbc>)
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b26      	ldr	r3, [pc, #152]	; (800044c <MX_GPIO_Init+0xbc>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003be:	4b23      	ldr	r3, [pc, #140]	; (800044c <MX_GPIO_Init+0xbc>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a22      	ldr	r2, [pc, #136]	; (800044c <MX_GPIO_Init+0xbc>)
 80003c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b20      	ldr	r3, [pc, #128]	; (800044c <MX_GPIO_Init+0xbc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_GPIO_Init+0xbc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_GPIO_Init+0xbc>)
 80003dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xbc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_GPIO_Init+0xc0>)
 80003f6:	f000 fc83 	bl	8000d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fafb 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	4808      	ldr	r0, [pc, #32]	; (8000450 <MX_GPIO_Init+0xc0>)
 8000430:	f000 faec 	bl	8000a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2006      	movs	r0, #6
 800043a:	f000 fa3a 	bl	80008b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800043e:	2006      	movs	r0, #6
 8000440:	f000 fa53 	bl	80008ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	48001000 	.word	0x48001000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <HAL_MspInit+0x44>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_MspInit+0x44>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <HAL_UART_MspInit+0x8c>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d130      	bne.n	800052c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80004ca:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800050c:	2305      	movs	r3, #5
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <HAL_UART_MspInit+0x94>)
 8000518:	f000 fa78 	bl	8000a0c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2034      	movs	r0, #52	; 0x34
 8000522:	f000 f9c6 	bl	80008b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000526:	2034      	movs	r0, #52	; 0x34
 8000528:	f000 f9df 	bl	80008ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3728      	adds	r7, #40	; 0x28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40004c00 	.word	0x40004c00
 8000538:	40021000 	.word	0x40021000
 800053c:	48000800 	.word	0x48000800

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058c:	f000 f896 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fbc9 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <UART4_IRQHandler+0x10>)
 80005aa:	f002 f8ed 	bl	8002788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff ffea 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f003 fb0f 	bl	8003c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff fe2b 	bl	8000268 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000614:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000620:	08003cdc 	.word	0x08003cdc
  ldr r2, =_sbss
 8000624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000628:	200000c0 	.word	0x200000c0

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f92b 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff08 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f943 	bl	8000906 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f90b 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000004 	.word	0x20000004
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000008 	.word	0x20000008

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	200000bc 	.word	0x200000bc

080006e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000bc 	.word	0x200000bc

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <__NVIC_EnableIRQ+0x38>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff29 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff3e 	bl	8000744 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff31 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffa2 	bl	8000858 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800092c:	2b02      	cmp	r3, #2
 800092e:	d008      	beq.n	8000942 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2204      	movs	r2, #4
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e020      	b.n	8000984 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 020e 	bic.w	r2, r2, #14
 8000950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0201 	bic.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d005      	beq.n	80009b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2204      	movs	r2, #4
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e027      	b.n	8000a02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f022 020e 	bic.w	r2, r2, #14
 80009c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f022 0201 	bic.w	r2, r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	4798      	blx	r3
    } 
  }
  return status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e154      	b.n	8000cc6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8146 	beq.w	8000cc0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d017      	beq.n	8000aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d123      	bne.n	8000b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	08da      	lsrs	r2, r3, #3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3208      	adds	r2, #8
 8000afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	08da      	lsrs	r2, r3, #3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3208      	adds	r2, #8
 8000b38:	6939      	ldr	r1, [r7, #16]
 8000b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0203 	and.w	r2, r3, #3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80a0 	beq.w	8000cc0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b80:	4b58      	ldr	r3, [pc, #352]	; (8000ce4 <HAL_GPIO_Init+0x2d8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <HAL_GPIO_Init+0x2d8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <HAL_GPIO_Init+0x2d8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b98:	4a53      	ldr	r2, [pc, #332]	; (8000ce8 <HAL_GPIO_Init+0x2dc>)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc2:	d019      	beq.n	8000bf8 <HAL_GPIO_Init+0x1ec>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a49      	ldr	r2, [pc, #292]	; (8000cec <HAL_GPIO_Init+0x2e0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_GPIO_Init+0x2e4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <HAL_GPIO_Init+0x2e8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1e0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a46      	ldr	r2, [pc, #280]	; (8000cf8 <HAL_GPIO_Init+0x2ec>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1dc>
 8000be4:	2304      	movs	r3, #4
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000be8:	2305      	movs	r3, #5
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0a:	4937      	ldr	r1, [pc, #220]	; (8000ce8 <HAL_GPIO_Init+0x2dc>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c90:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_GPIO_Init+0x2f0>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f47f aea3 	bne.w	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fa3a 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f001 b823 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 817d 	beq.w	8001096 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9c:	4bbc      	ldr	r3, [pc, #752]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	4bb9      	ldr	r3, [pc, #740]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d15c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000db4:	4bb6      	ldr	r3, [pc, #728]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d155      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	095b      	lsrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x94>
 8000dee:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	e015      	b.n	8000e20 <HAL_RCC_OscConfig+0xc0>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e2c:	fa92 f2a2 	rbit	r2, r2
 8000e30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 811f 	beq.w	8001094 <HAL_RCC_OscConfig+0x334>
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8116 	bne.w	8001094 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f000 bfaf 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12e>
 8000e80:	4b83      	ldr	r3, [pc, #524]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a82      	ldr	r2, [pc, #520]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e036      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x158>
 8000e9e:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7b      	ldr	r2, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b79      	ldr	r3, [pc, #484]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a78      	ldr	r2, [pc, #480]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e021      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x184>
 8000eca:	4b71      	ldr	r3, [pc, #452]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a70      	ldr	r2, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a69      	ldr	r2, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b67      	ldr	r3, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a66      	ldr	r2, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efc:	4b64      	ldr	r3, [pc, #400]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	f023 020f 	bic.w	r2, r3, #15
 8000f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	495f      	ldr	r1, [pc, #380]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d059      	beq.n	8000fda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fbdd 	bl	80006e4 <HAL_GetTick>
 8000f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	e00a      	b.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fbd8 	bl	80006e4 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d902      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f000 bf43 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x218>
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e015      	b.n	8000fa4 <HAL_RCC_OscConfig+0x244>
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fb0:	fa92 f2a2 	rbit	r2, r2
 8000fb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fbc:	fab2 f282 	clz	r2, r2
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f002 021f 	and.w	r2, r2, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ab      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1d0>
 8000fd8:	e05d      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb83 	bl	80006e4 <HAL_GetTick>
 8000fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fb7e 	bl	80006e4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d902      	bls.n	8000ffa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f000 bee9 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800100e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x2cc>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x2f8>
 800102c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001030:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001048:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001060:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800106c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ab      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x284>
 800108c:	e003      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 817d 	beq.w	80013a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ac:	4ba6      	ldr	r3, [pc, #664]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b8:	4ba3      	ldr	r3, [pc, #652]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d172      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010c4:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d16c      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x3a0>
 80010fa:	4b93      	ldr	r3, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e013      	b.n	8001128 <HAL_RCC_OscConfig+0x3c8>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001118:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800112e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800113a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f002 021f 	and.w	r2, r2, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 be2e 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	21f8      	movs	r1, #248	; 0xf8
 8001186:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118e:	fa91 f1a1 	rbit	r1, r1
 8001192:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001196:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800119a:	fab1 f181 	clz	r1, r1
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	408b      	lsls	r3, r1
 80011a2:	4969      	ldr	r1, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	e0fd      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8088 	beq.w	80012cc <HAL_RCC_OscConfig+0x56c>
 80011bc:	2301      	movs	r3, #1
 80011be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	2301      	movs	r3, #1
 80011e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa7c 	bl	80006e4 <HAL_GetTick>
 80011ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fa77 	bl	80006e4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d902      	bls.n	8001208 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	f000 bde2 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800121a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d8>
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x500>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001250:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001266:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001272:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0af      	beq.n	80011f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	21f8      	movs	r1, #248	; 0xf8
 80012a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012b0:	fa91 f1a1 	rbit	r1, r1
 80012b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012bc:	fab1 f181 	clz	r1, r1
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	408b      	lsls	r3, r1
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
 80012ca:	e06c      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9f4 	bl	80006e4 <HAL_GetTick>
 80012fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff f9ef 	bl	80006e4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 bd5a 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800132a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	095b      	lsrs	r3, r3, #5
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <HAL_RCC_OscConfig+0x5ec>
 8001342:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
 8001348:	40021000 	.word	0x40021000
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001370:	4bc8      	ldr	r3, [pc, #800]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2202      	movs	r2, #2
 8001376:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800137a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001386:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ad      	bne.n	8001302 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8110 	beq.w	80015dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d079      	beq.n	80014c0 <HAL_RCC_OscConfig+0x760>
 80013cc:	2301      	movs	r3, #1
 80013ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4bab      	ldr	r3, [pc, #684]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	2301      	movs	r3, #1
 80013f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f975 	bl	80006e4 <HAL_GetTick>
 80013fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f970 	bl	80006e4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d902      	bls.n	8001416 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	f000 bcdb 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001430:	2202      	movs	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f2a3 	rbit	r2, r3
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800146e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800147c:	2102      	movs	r1, #2
 800147e:	6019      	str	r1, [r3, #0]
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f1a3 	rbit	r1, r3
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001496:	6019      	str	r1, [r3, #0]
  return result;
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0a0      	beq.n	8001400 <HAL_RCC_OscConfig+0x6a0>
 80014be:	e08d      	b.n	80015dc <HAL_RCC_OscConfig+0x87c>
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014e2:	601a      	str	r2, [r3, #0]
  return result;
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	461a      	mov	r2, r3
 80014fe:	2300      	movs	r3, #0
 8001500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff f8ef 	bl	80006e4 <HAL_GetTick>
 8001506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff f8ea 	bl	80006e4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d902      	bls.n	8001522 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	f000 bc55 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800154e:	2202      	movs	r2, #2
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800158c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800159a:	2102      	movs	r1, #2
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f1a3 	rbit	r1, r3
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b4:	6019      	str	r1, [r3, #0]
  return result;
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d197      	bne.n	800150c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 81a1 	beq.w	8001934 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	61d3      	str	r3, [r2, #28]
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800162a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11a      	bne.n	8001674 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff f84b 	bl	80006e4 <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	e009      	b.n	8001668 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f846 	bl	80006e4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e3b1      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x940>
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e03c      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	10908120 	.word	0x10908120
 800169c:	40007000 	.word	0x40007000
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x96a>
 80016b0:	4bc1      	ldr	r3, [pc, #772]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4ac0      	ldr	r2, [pc, #768]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4bbe      	ldr	r3, [pc, #760]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4abd      	ldr	r2, [pc, #756]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e020      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x994>
 80016da:	4bb7      	ldr	r3, [pc, #732]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4ab6      	ldr	r2, [pc, #728]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4bb4      	ldr	r3, [pc, #720]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4ab3      	ldr	r2, [pc, #716]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4aaf      	ldr	r2, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4aac      	ldr	r2, [pc, #688]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8081 	beq.w	8001820 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7fe ffe1 	bl	80006e4 <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7fe ffdc 	bl	80006e4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e345      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001786:	601a      	str	r2, [r3, #0]
  return result;
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001790:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0xa4c>
 80017a6:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0xa74>
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017dc:	2102      	movs	r1, #2
 80017de:	6011      	str	r1, [r2, #0]
 80017e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fa92 f1a2 	rbit	r1, r2
 80017ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f6:	6011      	str	r1, [r2, #0]
  return result;
 80017f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d084      	beq.n	8001728 <HAL_RCC_OscConfig+0x9c8>
 800181e:	e07f      	b.n	8001920 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7fe ff60 	bl	80006e4 <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ff5b 	bl	80006e4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2c4      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001892:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0xb4e>
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	e013      	b.n	80018d6 <HAL_RCC_OscConfig+0xb76>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018de:	2102      	movs	r1, #2
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fa92 f1a2 	rbit	r1, r2
 80018f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d184      	bne.n	800182a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001920:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8242 	beq.w	8001dca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	f000 8213 	beq.w	8001d7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8162 	bne.w	8001c2a <HAL_RCC_OscConfig+0xeca>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800196e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001994:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe fe9a 	bl	80006e4 <HAL_GetTick>
 80019b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_OscConfig+0xc70>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe fe92 	bl	80006e4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xcba>
 8001a14:	4bb0      	ldr	r3, [pc, #704]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e027      	b.n	8001a6a <HAL_RCC_OscConfig+0xd0a>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a76:	6011      	str	r1, [r2, #0]
 8001a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fa92 f1a2 	rbit	r1, r2
 8001a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a8e:	6011      	str	r1, [r2, #0]
  return result;
 8001a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d182      	bne.n	80019bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	497f      	ldr	r1, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2301      	movs	r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7fe fdde 	bl	80006e4 <HAL_GetTick>
 8001b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	e009      	b.n	8001b42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7fe fdd9 	bl	80006e4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e144      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0xe2c>
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e027      	b.n	8001bdc <HAL_RCC_OscConfig+0xe7c>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fa92 f1a2 	rbit	r1, r2
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c00:	6011      	str	r1, [r2, #0]
  return result;
 8001c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d082      	beq.n	8001b2e <HAL_RCC_OscConfig+0xdce>
 8001c28:	e0cf      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fd38 	bl	80006e4 <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fd33 	bl	80006e4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e09e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_RCC_OscConfig+0xf7c>
 8001cd2:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0xfcc>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fa92 f1a2 	rbit	r1, r2
 8001d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d50:	6011      	str	r1, [r2, #0]
  return result;
 8001d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d180      	bne.n	8001c7a <HAL_RCC_OscConfig+0xf1a>
 8001d78:	e027      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09e      	sub	sp, #120	; 0x78
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e162      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	498b      	ldr	r1, [pc, #556]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e14a      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	497f      	ldr	r1, [pc, #508]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80dc 	beq.w	8002008 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d13c      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xf6>
 8001e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa6>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e00f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xc6>
 8001e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
 8001e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001eb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d17b      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0f3      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d13c      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x178>
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x128>
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_RCC_ClockConfig+0x148>
 8001f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
 8001f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
 8001f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b2      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e00d      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1bc>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	61ba      	str	r2, [r7, #24]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	fa92 f2a2 	rbit	r2, r2
 8001fa2:	617a      	str	r2, [r7, #20]
  return result;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e079      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fb84 	bl	80006e4 <HAL_GetTick>
 8001fdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fb80 	bl	80006e4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e061      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d214      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e040      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4912      	ldr	r1, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207e:	f000 f829 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fa92 f2a2 	rbit	r2, r2
 8002096:	60fa      	str	r2, [r7, #12]
  return result;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	40d3      	lsrs	r3, r2
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x2ec>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	fa21 f303 	lsr.w	r3, r1, r3
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_RCC_ClockConfig+0x2f0>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_ClockConfig+0x2f4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fad2 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3778      	adds	r7, #120	; 0x78
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08003c9c 	.word	0x08003c9c
 80020cc:	20000004 	.word	0x20000004
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	; 0x2c
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x30>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x36>
 8002102:	e03c      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	e03c      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002110:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002114:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	607a      	str	r2, [r7, #4]
  return result;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_RCC_GetSysClockFreq+0xc8>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	220f      	movs	r2, #15
 8002138:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	60fa      	str	r2, [r7, #12]
  return result;
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	40d3      	lsrs	r3, r2
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002180:	623b      	str	r3, [r7, #32]
      break;
 8002182:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002184:	6a3b      	ldr	r3, [r7, #32]
}
 8002186:	4618      	mov	r0, r3
 8002188:	372c      	adds	r7, #44	; 0x2c
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	08003cb4 	.word	0x08003cb4
 80021a0:	08003cc4 	.word	0x08003cc4
 80021a4:	003d0900 	.word	0x003d0900

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021c6:	f7ff ffef 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	603a      	str	r2, [r7, #0]
  return result;
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08003cac 	.word	0x08003cac

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800220a:	f7ff ffcd 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 800220e:	4601      	mov	r1, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002218:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800221c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	603a      	str	r2, [r7, #0]
  return result;
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08003cac 	.word	0x08003cac

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b092      	sub	sp, #72	; 0x48
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80d4 	beq.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226c:	4b4e      	ldr	r3, [pc, #312]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10e      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a41      	ldr	r2, [pc, #260]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fa19 	bl	80006e4 <HAL_GetTick>
 80022b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe fa15 	bl	80006e4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e169      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d4:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8084 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d07c      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe f9c5 	bl	80006e4 <HAL_GetTick>
 800235a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe f9c1 	bl	80006e4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e113      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	61fb      	str	r3, [r7, #28]
  return result;
 800238c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d108      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023a2:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	e00d      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	10908100 	.word	0x10908100
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	613a      	str	r2, [r7, #16]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	60fa      	str	r2, [r7, #12]
  return result;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0b7      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	496a      	ldr	r1, [pc, #424]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f023 0203 	bic.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	495d      	ldr	r1, [pc, #372]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4956      	ldr	r1, [pc, #344]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	494e      	ldr	r1, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f023 0210 	bic.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4947      	ldr	r1, [pc, #284]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	493f      	ldr	r1, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f023 0220 	bic.w	r2, r3, #32
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	4930      	ldr	r1, [pc, #192]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4921      	ldr	r1, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	4912      	ldr	r1, [pc, #72]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3748      	adds	r7, #72	; 0x48
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e040      	b.n	800263c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fd ff6c 	bl	80004a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fbd4 	bl	8002d94 <UART_SetConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fd9c 	bl	800313c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fe23 	bl	8003280 <UART_CheckIdleState>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002644:	b480      	push	{r7}
 8002646:	b08b      	sub	sp, #44	; 0x2c
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002656:	2b20      	cmp	r3, #32
 8002658:	d147      	bne.n	80026ea <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_Transmit_IT+0x22>
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e040      	b.n	80026ec <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2221      	movs	r2, #33	; 0x21
 8002692:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	d107      	bne.n	80026ae <HAL_UART_Transmit_IT+0x6a>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_UART_Transmit_IT+0xb4>)
 80026aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80026ac:	e002      	b.n	80026b4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_UART_Transmit_IT+0xb8>)
 80026b2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	613b      	str	r3, [r7, #16]
   return(result);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d6:	69f9      	ldr	r1, [r7, #28]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	61bb      	str	r3, [r7, #24]
   return(result);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e6      	bne.n	80026b4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	372c      	adds	r7, #44	; 0x2c
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	080037b5 	.word	0x080037b5
 80026fc:	080036fd 	.word	0x080036fd

08002700 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002714:	2b20      	cmp	r3, #32
 8002716:	d132      	bne.n	800277e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Receive_IT+0x24>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e02b      	b.n	8002780 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d018      	beq.n	800276e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	613b      	str	r3, [r7, #16]
   return(result);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	69f9      	ldr	r1, [r7, #28]
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	61bb      	str	r3, [r7, #24]
   return(result);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e6      	bne.n	800273c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	461a      	mov	r2, r3
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fe93 	bl	80034a0 <UART_Start_Receive_IT>
 800277a:	4603      	mov	r3, r0
 800277c:	e000      	b.n	8002780 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0ba      	sub	sp, #232	; 0xe8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80027b6:	4013      	ands	r3, r2
 80027b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d115      	bne.n	80027f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00f      	beq.n	80027f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 82ab 	beq.w	8002d3c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
      }
      return;
 80027ee:	e2a5      	b.n	8002d3c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8117 	beq.w	8002a28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_UART_IRQHandler+0x298>)
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 810a 	beq.w	8002a28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d011      	beq.n	8002844 <HAL_UART_IRQHandler+0xbc>
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d011      	beq.n	8002874 <HAL_UART_IRQHandler+0xec>
 8002850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d011      	beq.n	80028a4 <HAL_UART_IRQHandler+0x11c>
 8002880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289a:	f043 0202 	orr.w	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2208      	movs	r2, #8
 80028ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	f043 0208 	orr.w	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <HAL_UART_IRQHandler+0x18a>
 80028ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00c      	beq.n	8002912 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8211 	beq.w	8002d40 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d005      	beq.n	800296a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800295e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002962:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04f      	beq.n	8002a0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fe4c 	bl	8003608 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d141      	bne.n	8002a02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3308      	adds	r3, #8
 8002984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3308      	adds	r3, #8
 80029a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1d9      	bne.n	800297e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d013      	beq.n	80029fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <HAL_UART_IRQHandler+0x29c>)
 80029d8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd ffd6 	bl	8000990 <HAL_DMA_Abort_IT>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029f4:	4610      	mov	r0, r2
 80029f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	e00f      	b.n	8002a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9b4 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	e00b      	b.n	8002a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9b0 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a08:	e007      	b.n	8002a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f9ac 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a18:	e192      	b.n	8002d40 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	bf00      	nop
    return;
 8002a1c:	e190      	b.n	8002d40 <HAL_UART_IRQHandler+0x5b8>
 8002a1e:	bf00      	nop
 8002a20:	04000120 	.word	0x04000120
 8002a24:	080036d1 	.word	0x080036d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 814b 	bne.w	8002cc8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8144 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 813d 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2210      	movs	r2, #16
 8002a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	f040 80b5 	bne.w	8002bd0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8164 	beq.w	8002d44 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f080 815c 	bcs.w	8002d44 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ad0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ad8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1da      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b1c:	e841 2300 	strex	r3, r2, [r1]
 8002b20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e1      	bne.n	8002aec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3308      	adds	r3, #8
 8002b48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e3      	bne.n	8002b28 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e4      	bne.n	8002b6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd feb8 	bl	800091e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8d7 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bce:	e0b9      	b.n	8002d44 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80ab 	beq.w	8002d48 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80a6 	beq.w	8002d48 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e4      	bne.n	8002bfc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3308      	adds	r3, #8
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	623b      	str	r3, [r7, #32]
   return(result);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3308      	adds	r3, #8
 8002c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c56:	633a      	str	r2, [r7, #48]	; 0x30
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e3      	bne.n	8002c32 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	617b      	str	r3, [r7, #20]
   return(result);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e4      	bne.n	8002c7e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f85b 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cc6:	e03f      	b.n	8002d48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x56a>
 8002cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 ff94 	bl	8003c18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf0:	e02d      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
    }
    return;
 8002d1a:	e017      	b.n	8002d4c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fd9d 	bl	8003874 <UART_EndTransmit_IT>
    return;
 8002d3a:	e008      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d3c:	bf00      	nop
 8002d3e:	e006      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d40:	bf00      	nop
 8002d42:	e004      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d44:	bf00      	nop
 8002d46:	e002      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d4c:	bf00      	nop
  }

}
 8002d4e:	37e8      	adds	r7, #232	; 0xe8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dc2:	f023 030c 	bic.w	r3, r3, #12
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	6979      	ldr	r1, [r7, #20]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4aa7      	ldr	r2, [pc, #668]	; (80030ac <UART_SetConfig+0x318>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d120      	bne.n	8002e56 <UART_SetConfig+0xc2>
 8002e14:	4ba6      	ldr	r3, [pc, #664]	; (80030b0 <UART_SetConfig+0x31c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d817      	bhi.n	8002e50 <UART_SetConfig+0xbc>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0x94>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e4b 	.word	0x08002e4b
 8002e34:	08002e3f 	.word	0x08002e3f
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e0b5      	b.n	8002faa <UART_SetConfig+0x216>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e0b2      	b.n	8002faa <UART_SetConfig+0x216>
 8002e44:	2304      	movs	r3, #4
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e0af      	b.n	8002faa <UART_SetConfig+0x216>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e0ac      	b.n	8002faa <UART_SetConfig+0x216>
 8002e50:	2310      	movs	r3, #16
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e0a9      	b.n	8002faa <UART_SetConfig+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a96      	ldr	r2, [pc, #600]	; (80030b4 <UART_SetConfig+0x320>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d124      	bne.n	8002eaa <UART_SetConfig+0x116>
 8002e60:	4b93      	ldr	r3, [pc, #588]	; (80030b0 <UART_SetConfig+0x31c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e6c:	d011      	beq.n	8002e92 <UART_SetConfig+0xfe>
 8002e6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e72:	d817      	bhi.n	8002ea4 <UART_SetConfig+0x110>
 8002e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e78:	d011      	beq.n	8002e9e <UART_SetConfig+0x10a>
 8002e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e7e:	d811      	bhi.n	8002ea4 <UART_SetConfig+0x110>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <UART_SetConfig+0xf8>
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d006      	beq.n	8002e98 <UART_SetConfig+0x104>
 8002e8a:	e00b      	b.n	8002ea4 <UART_SetConfig+0x110>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e08b      	b.n	8002faa <UART_SetConfig+0x216>
 8002e92:	2302      	movs	r3, #2
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e088      	b.n	8002faa <UART_SetConfig+0x216>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e085      	b.n	8002faa <UART_SetConfig+0x216>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e082      	b.n	8002faa <UART_SetConfig+0x216>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e07f      	b.n	8002faa <UART_SetConfig+0x216>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a82      	ldr	r2, [pc, #520]	; (80030b8 <UART_SetConfig+0x324>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d124      	bne.n	8002efe <UART_SetConfig+0x16a>
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <UART_SetConfig+0x31c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ebc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ec0:	d011      	beq.n	8002ee6 <UART_SetConfig+0x152>
 8002ec2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0x164>
 8002ec8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ecc:	d011      	beq.n	8002ef2 <UART_SetConfig+0x15e>
 8002ece:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ed2:	d811      	bhi.n	8002ef8 <UART_SetConfig+0x164>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x14c>
 8002ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002edc:	d006      	beq.n	8002eec <UART_SetConfig+0x158>
 8002ede:	e00b      	b.n	8002ef8 <UART_SetConfig+0x164>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e061      	b.n	8002faa <UART_SetConfig+0x216>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e05e      	b.n	8002faa <UART_SetConfig+0x216>
 8002eec:	2304      	movs	r3, #4
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e05b      	b.n	8002faa <UART_SetConfig+0x216>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e058      	b.n	8002faa <UART_SetConfig+0x216>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e055      	b.n	8002faa <UART_SetConfig+0x216>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <UART_SetConfig+0x328>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d124      	bne.n	8002f52 <UART_SetConfig+0x1be>
 8002f08:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <UART_SetConfig+0x31c>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f14:	d011      	beq.n	8002f3a <UART_SetConfig+0x1a6>
 8002f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f1a:	d817      	bhi.n	8002f4c <UART_SetConfig+0x1b8>
 8002f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f20:	d011      	beq.n	8002f46 <UART_SetConfig+0x1b2>
 8002f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f26:	d811      	bhi.n	8002f4c <UART_SetConfig+0x1b8>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0x1a0>
 8002f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f30:	d006      	beq.n	8002f40 <UART_SetConfig+0x1ac>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x1b8>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e037      	b.n	8002faa <UART_SetConfig+0x216>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e034      	b.n	8002faa <UART_SetConfig+0x216>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e031      	b.n	8002faa <UART_SetConfig+0x216>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e02e      	b.n	8002faa <UART_SetConfig+0x216>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e02b      	b.n	8002faa <UART_SetConfig+0x216>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5a      	ldr	r2, [pc, #360]	; (80030c0 <UART_SetConfig+0x32c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d124      	bne.n	8002fa6 <UART_SetConfig+0x212>
 8002f5c:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <UART_SetConfig+0x31c>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002f64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f68:	d011      	beq.n	8002f8e <UART_SetConfig+0x1fa>
 8002f6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f6e:	d817      	bhi.n	8002fa0 <UART_SetConfig+0x20c>
 8002f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f74:	d011      	beq.n	8002f9a <UART_SetConfig+0x206>
 8002f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f7a:	d811      	bhi.n	8002fa0 <UART_SetConfig+0x20c>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <UART_SetConfig+0x1f4>
 8002f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f84:	d006      	beq.n	8002f94 <UART_SetConfig+0x200>
 8002f86:	e00b      	b.n	8002fa0 <UART_SetConfig+0x20c>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e00d      	b.n	8002faa <UART_SetConfig+0x216>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e00a      	b.n	8002faa <UART_SetConfig+0x216>
 8002f94:	2304      	movs	r3, #4
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e007      	b.n	8002faa <UART_SetConfig+0x216>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e004      	b.n	8002faa <UART_SetConfig+0x216>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e001      	b.n	8002faa <UART_SetConfig+0x216>
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d15b      	bne.n	800306c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d827      	bhi.n	800300a <UART_SetConfig+0x276>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0x22c>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fe5 	.word	0x08002fe5
 8002fc4:	08002fed 	.word	0x08002fed
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	0800300b 	.word	0x0800300b
 8002fd0:	08002ffb 	.word	0x08002ffb
 8002fd4:	0800300b 	.word	0x0800300b
 8002fd8:	0800300b 	.word	0x0800300b
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	08003003 	.word	0x08003003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7ff f8ec 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	61b8      	str	r0, [r7, #24]
        break;
 8002fea:	e013      	b.n	8003014 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7ff f90a 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	61b8      	str	r0, [r7, #24]
        break;
 8002ff2:	e00f      	b.n	8003014 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <UART_SetConfig+0x330>)
 8002ff6:	61bb      	str	r3, [r7, #24]
        break;
 8002ff8:	e00c      	b.n	8003014 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7ff f86b 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002ffe:	61b8      	str	r0, [r7, #24]
        break;
 8003000:	e008      	b.n	8003014 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003006:	61bb      	str	r3, [r7, #24]
        break;
 8003008:	e004      	b.n	8003014 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	77bb      	strb	r3, [r7, #30]
        break;
 8003012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8082 	beq.w	8003120 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	005a      	lsls	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d916      	bls.n	8003066 <UART_SetConfig+0x2d2>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303e:	d212      	bcs.n	8003066 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	b29b      	uxth	r3, r3
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	b29a      	uxth	r2, r3
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	4313      	orrs	r3, r2
 800305a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	89fa      	ldrh	r2, [r7, #14]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	e05c      	b.n	8003120 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	77bb      	strb	r3, [r7, #30]
 800306a:	e059      	b.n	8003120 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	2b08      	cmp	r3, #8
 8003070:	d835      	bhi.n	80030de <UART_SetConfig+0x34a>
 8003072:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <UART_SetConfig+0x2e4>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	0800309d 	.word	0x0800309d
 800307c:	080030a5 	.word	0x080030a5
 8003080:	080030c9 	.word	0x080030c9
 8003084:	080030df 	.word	0x080030df
 8003088:	080030cf 	.word	0x080030cf
 800308c:	080030df 	.word	0x080030df
 8003090:	080030df 	.word	0x080030df
 8003094:	080030df 	.word	0x080030df
 8003098:	080030d7 	.word	0x080030d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7ff f890 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 80030a0:	61b8      	str	r0, [r7, #24]
        break;
 80030a2:	e021      	b.n	80030e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7ff f8ae 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 80030a8:	61b8      	str	r0, [r7, #24]
        break;
 80030aa:	e01d      	b.n	80030e8 <UART_SetConfig+0x354>
 80030ac:	40013800 	.word	0x40013800
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40004400 	.word	0x40004400
 80030b8:	40004800 	.word	0x40004800
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	40005000 	.word	0x40005000
 80030c4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <UART_SetConfig+0x3a4>)
 80030ca:	61bb      	str	r3, [r7, #24]
        break;
 80030cc:	e00c      	b.n	80030e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7ff f801 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 80030d2:	61b8      	str	r0, [r7, #24]
        break;
 80030d4:	e008      	b.n	80030e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e004      	b.n	80030e8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77bb      	strb	r3, [r7, #30]
        break;
 80030e6:	bf00      	nop
    }

    if (pclk != 0U)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085a      	lsrs	r2, r3, #1
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d909      	bls.n	800311c <UART_SetConfig+0x388>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d205      	bcs.n	800311c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e001      	b.n	8003120 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800312c:	7fbb      	ldrb	r3, [r7, #30]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	007a1200 	.word	0x007a1200

0800313c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01a      	beq.n	8003252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d10a      	bne.n	8003252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b098      	sub	sp, #96	; 0x60
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003290:	f7fd fa28 	bl	80006e4 <HAL_GetTick>
 8003294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d12e      	bne.n	8003302 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f88c 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d021      	beq.n	8003302 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d2:	653b      	str	r3, [r7, #80]	; 0x50
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
 80032de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e6      	bne.n	80032be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e062      	b.n	80033c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d149      	bne.n	80033a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f856 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03c      	beq.n	80033a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	623b      	str	r3, [r7, #32]
   return(result);
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
 800334a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800334e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e6      	bne.n	800332a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3308      	adds	r3, #8
 8003362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	60fb      	str	r3, [r7, #12]
   return(result);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	61fa      	str	r2, [r7, #28]
 800337e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	617b      	str	r3, [r7, #20]
   return(result);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e011      	b.n	80033c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3758      	adds	r7, #88	; 0x58
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e0:	e049      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d045      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fd f97b 	bl	80006e4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e048      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d031      	beq.n	8003476 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b08      	cmp	r3, #8
 800341e:	d110      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2208      	movs	r2, #8
 8003426:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f8ed 	bl	8003608 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2208      	movs	r2, #8
 8003432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e029      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003450:	d111      	bne.n	8003476 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800345a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f8d3 	bl	8003608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e00f      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	429a      	cmp	r2, r3
 8003492:	d0a6      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b097      	sub	sp, #92	; 0x5c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d10e      	bne.n	80034f2 <UART_Start_Receive_IT+0x52>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <UART_Start_Receive_IT+0x48>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034e6:	e01a      	b.n	800351e <UART_Start_Receive_IT+0x7e>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034f0:	e015      	b.n	800351e <UART_Start_Receive_IT+0x7e>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <UART_Start_Receive_IT+0x76>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <UART_Start_Receive_IT+0x6c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800350a:	e008      	b.n	800351e <UART_Start_Receive_IT+0x7e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	227f      	movs	r2, #127	; 0x7f
 8003510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003514:	e003      	b.n	800351e <UART_Start_Receive_IT+0x7e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2222      	movs	r2, #34	; 0x22
 800352a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	657b      	str	r3, [r7, #84]	; 0x54
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800354e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d107      	bne.n	800357c <UART_Start_Receive_IT+0xdc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <UART_Start_Receive_IT+0x160>)
 8003578:	669a      	str	r2, [r3, #104]	; 0x68
 800357a:	e002      	b.n	8003582 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a21      	ldr	r2, [pc, #132]	; (8003604 <UART_Start_Receive_IT+0x164>)
 8003580:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d019      	beq.n	80035be <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <UART_Start_Receive_IT+0xea>
 80035bc:	e018      	b.n	80035f0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	613b      	str	r3, [r7, #16]
   return(result);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e6      	bne.n	80035be <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	375c      	adds	r7, #92	; 0x5c
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	08003a71 	.word	0x08003a71
 8003604:	080038c9 	.word	0x080038c9

08003608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b095      	sub	sp, #84	; 0x54
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362e:	643b      	str	r3, [r7, #64]	; 0x40
 8003630:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e6      	bne.n	8003610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3308      	adds	r3, #8
 8003648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	61fb      	str	r3, [r7, #28]
   return(result);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	64bb      	str	r3, [r7, #72]	; 0x48
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e5      	bne.n	8003642 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	2b01      	cmp	r3, #1
 800367c:	d118      	bne.n	80036b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	60bb      	str	r3, [r7, #8]
   return(result);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 0310 	bic.w	r3, r3, #16
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6979      	ldr	r1, [r7, #20]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	613b      	str	r3, [r7, #16]
   return(result);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e6      	bne.n	800367e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036c4:	bf00      	nop
 80036c6:	3754      	adds	r7, #84	; 0x54
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff fb3a 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b08f      	sub	sp, #60	; 0x3c
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	2b21      	cmp	r3, #33	; 0x21
 800370a:	d14d      	bne.n	80037a8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d132      	bne.n	800377e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	61fb      	str	r3, [r7, #28]
   return(result);
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003738:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800373c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e6      	bne.n	8003718 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60bb      	str	r3, [r7, #8]
   return(result);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	613b      	str	r3, [r7, #16]
   return(result);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800377c:	e014      	b.n	80037a8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	b292      	uxth	r2, r2
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80037a8:	bf00      	nop
 80037aa:	373c      	adds	r7, #60	; 0x3c
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b091      	sub	sp, #68	; 0x44
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c0:	2b21      	cmp	r3, #33	; 0x21
 80037c2:	d151      	bne.n	8003868 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d132      	bne.n	8003836 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	623b      	str	r3, [r7, #32]
   return(result);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
 80037f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	617b      	str	r3, [r7, #20]
   return(result);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003834:	e018      	b.n	8003868 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	b292      	uxth	r2, r2
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003868:	bf00      	nop
 800386a:	3744      	adds	r7, #68	; 0x44
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	60bb      	str	r3, [r7, #8]
   return(result);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	613b      	str	r3, [r7, #16]
   return(result);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fa4a 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c0:	bf00      	nop
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b09c      	sub	sp, #112	; 0x70
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e0:	2b22      	cmp	r3, #34	; 0x22
 80038e2:	f040 80b9 	bne.w	8003a58 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038f4:	b2d9      	uxtb	r1, r3
 80038f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	400a      	ands	r2, r1
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 809c 	bne.w	8003a68 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003944:	66bb      	str	r3, [r7, #104]	; 0x68
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003950:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e6      	bne.n	8003930 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	667b      	str	r3, [r7, #100]	; 0x64
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003982:	647a      	str	r2, [r7, #68]	; 0x44
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d018      	beq.n	80039ea <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	623b      	str	r3, [r7, #32]
   return(result);
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039cc:	663b      	str	r3, [r7, #96]	; 0x60
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
 80039d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d12e      	bne.n	8003a50 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	617b      	str	r3, [r7, #20]
   return(result);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d103      	bne.n	8003a40 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff f997 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a4e:	e00b      	b.n	8003a68 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fc fbcb 	bl	80001ec <HAL_UART_RxCpltCallback>
}
 8003a56:	e007      	b.n	8003a68 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	619a      	str	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	3770      	adds	r7, #112	; 0x70
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b09c      	sub	sp, #112	; 0x70
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a88:	2b22      	cmp	r3, #34	; 0x22
 8003a8a:	f040 80b9 	bne.w	8003c00 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 809c 	bne.w	8003c10 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aec:	667b      	str	r3, [r7, #100]	; 0x64
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
 8003af8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e6      	bne.n	8003ad8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b2a:	643a      	str	r2, [r7, #64]	; 0x40
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d018      	beq.n	8003b92 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e6      	bne.n	8003b60 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d12e      	bne.n	8003bf8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f023 0310 	bic.w	r3, r3, #16
 8003bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	613b      	str	r3, [r7, #16]
   return(result);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d103      	bne.n	8003be8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2210      	movs	r2, #16
 8003be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff f8c3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bf6:	e00b      	b.n	8003c10 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7fc faf7 	bl	80001ec <HAL_UART_RxCpltCallback>
}
 8003bfe:	e007      	b.n	8003c10 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0208 	orr.w	r2, r2, #8
 8003c0e:	619a      	str	r2, [r3, #24]
}
 8003c10:	bf00      	nop
 8003c12:	3770      	adds	r7, #112	; 0x70
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <__libc_init_array>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4d0d      	ldr	r5, [pc, #52]	; (8003c64 <__libc_init_array+0x38>)
 8003c30:	4c0d      	ldr	r4, [pc, #52]	; (8003c68 <__libc_init_array+0x3c>)
 8003c32:	1b64      	subs	r4, r4, r5
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	2600      	movs	r6, #0
 8003c38:	42a6      	cmp	r6, r4
 8003c3a:	d109      	bne.n	8003c50 <__libc_init_array+0x24>
 8003c3c:	4d0b      	ldr	r5, [pc, #44]	; (8003c6c <__libc_init_array+0x40>)
 8003c3e:	4c0c      	ldr	r4, [pc, #48]	; (8003c70 <__libc_init_array+0x44>)
 8003c40:	f000 f820 	bl	8003c84 <_init>
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	2600      	movs	r6, #0
 8003c4a:	42a6      	cmp	r6, r4
 8003c4c:	d105      	bne.n	8003c5a <__libc_init_array+0x2e>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c54:	4798      	blx	r3
 8003c56:	3601      	adds	r6, #1
 8003c58:	e7ee      	b.n	8003c38 <__libc_init_array+0xc>
 8003c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5e:	4798      	blx	r3
 8003c60:	3601      	adds	r6, #1
 8003c62:	e7f2      	b.n	8003c4a <__libc_init_array+0x1e>
 8003c64:	08003cd4 	.word	0x08003cd4
 8003c68:	08003cd4 	.word	0x08003cd4
 8003c6c:	08003cd4 	.word	0x08003cd4
 8003c70:	08003cd8 	.word	0x08003cd8

08003c74 <memset>:
 8003c74:	4402      	add	r2, r0
 8003c76:	4603      	mov	r3, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
