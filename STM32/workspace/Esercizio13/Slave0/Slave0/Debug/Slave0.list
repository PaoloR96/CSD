
Slave0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003be8  08003be8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be8  08003be8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af33  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a04  00000000  00000000  0002af73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c378  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6cb  00000000  00000000  00049b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9620  00000000  00000000  00054203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd823  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf0  00000000  00000000  000fd874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b98 	.word	0x08003b98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003b98 	.word	0x08003b98

080001c8 <HAL_GPIO_EXTI_Callback>:
char MsgTx3[50] = "Slave0:Pin13_Acceso \n";
char MsgTx4[50] = "Slave0:Pin13_Spento \n";
uint8_t RX_BUFFER[BUFFER_LEN] = {0};
int flag=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
						if(flag==0){
 80001d2:	4b15      	ldr	r3, [pc, #84]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10f      	bne.n	80001fa <HAL_GPIO_EXTI_Callback+0x32>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4812      	ldr	r0, [pc, #72]	; (800022c <HAL_GPIO_EXTI_Callback+0x64>)
 80001e2:	f000 fda7 	bl	8000d34 <HAL_GPIO_WritePin>
							//HAL_UART_Transmit(&huart1, &MsgTx1, sizeof(MsgTx1), 20);
							HAL_UART_Transmit(&huart1,&MsgT,sizeof(MsgT), 15);
 80001e6:	230f      	movs	r3, #15
 80001e8:	2201      	movs	r2, #1
 80001ea:	4911      	ldr	r1, [pc, #68]	; (8000230 <HAL_GPIO_EXTI_Callback+0x68>)
 80001ec:	4811      	ldr	r0, [pc, #68]	; (8000234 <HAL_GPIO_EXTI_Callback+0x6c>)
 80001ee:	f002 fa43 	bl	8002678 <HAL_UART_Transmit>
							flag=1;
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	601a      	str	r2, [r3, #0]
						   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
						//HAL_UART_Transmit(&huart1, &MsgTx2, sizeof(MsgTx2), 20);
						   HAL_UART_Transmit(&huart1,&MsgT1,sizeof(MsgT1), 15);
						flag=0;
						}
}
 80001f8:	e012      	b.n	8000220 <HAL_GPIO_EXTI_Callback+0x58>
						}else if(flag==1){
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10e      	bne.n	8000220 <HAL_GPIO_EXTI_Callback+0x58>
						   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000208:	4808      	ldr	r0, [pc, #32]	; (800022c <HAL_GPIO_EXTI_Callback+0x64>)
 800020a:	f000 fd93 	bl	8000d34 <HAL_GPIO_WritePin>
						   HAL_UART_Transmit(&huart1,&MsgT1,sizeof(MsgT1), 15);
 800020e:	230f      	movs	r3, #15
 8000210:	2201      	movs	r2, #1
 8000212:	4909      	ldr	r1, [pc, #36]	; (8000238 <HAL_GPIO_EXTI_Callback+0x70>)
 8000214:	4807      	ldr	r0, [pc, #28]	; (8000234 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000216:	f002 fa2f 	bl	8002678 <HAL_UART_Transmit>
						flag=0;
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200000b8 	.word	0x200000b8
 800022c:	48001000 	.word	0x48001000
 8000230:	20000000 	.word	0x20000000
 8000234:	2000002c 	.word	0x2000002c
 8000238:	20000001 	.word	0x20000001

0800023c <HAL_UART_RxCpltCallback>:

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <HAL_UART_RxCpltCallback+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	429a      	cmp	r2, r3
 800024e:	d104      	bne.n	800025a <HAL_UART_RxCpltCallback+0x1e>
    	HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000250:	2201      	movs	r2, #1
 8000252:	4905      	ldr	r1, [pc, #20]	; (8000268 <HAL_UART_RxCpltCallback+0x2c>)
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <HAL_UART_RxCpltCallback+0x28>)
 8000256:	f002 fa99 	bl	800278c <HAL_UART_Receive_IT>
    }

}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000002c 	.word	0x2000002c
 8000268:	200000b4 	.word	0x200000b4

0800026c <main>:




int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 f9f8 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f826 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f8a4 	bl	80003c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800027c:	f000 f872 	bl	8000364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000280:	2201      	movs	r2, #1
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <main+0x4c>)
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <main+0x50>)
 8000286:	f002 fa81 	bl	800278c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(RX_BUFFER[0] == val_one){
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0x4c>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b31      	cmp	r3, #49	; 0x31
 8000290:	d106      	bne.n	80002a0 <main+0x34>
	 		  	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000298:	4809      	ldr	r0, [pc, #36]	; (80002c0 <main+0x54>)
 800029a:	f000 fd4b 	bl	8000d34 <HAL_GPIO_WritePin>
 800029e:	e7f4      	b.n	800028a <main+0x1e>
	 		  	 //HAL_UART_Transmit(&huart1, &MsgTx3, sizeof(MsgTx3), 20);
	 	  }else if(RX_BUFFER[0] ==val_zero){
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x4c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b30      	cmp	r3, #48	; 0x30
 80002a6:	d1f0      	bne.n	800028a <main+0x1e>
	 	        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <main+0x54>)
 80002b0:	f000 fd40 	bl	8000d34 <HAL_GPIO_WritePin>
	  if(RX_BUFFER[0] == val_one){
 80002b4:	e7e9      	b.n	800028a <main+0x1e>
 80002b6:	bf00      	nop
 80002b8:	200000b4 	.word	0x200000b4
 80002bc:	2000002c 	.word	0x2000002c
 80002c0:	48001000 	.word	0x48001000

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09e      	sub	sp, #120	; 0x78
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fc58 	bl	8003b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	223c      	movs	r2, #60	; 0x3c
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fc4a 	bl	8003b88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fd43 	bl	8000d94 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000314:	f000 f8b8 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2300      	movs	r3, #0
 800031e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fd6c 	bl	8001e10 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800033e:	f000 f8a3 	bl	8000488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000342:	2301      	movs	r3, #1
 8000344:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f001 ff95 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000358:	f000 f896 	bl	8000488 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3778      	adds	r7, #120	; 0x78
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <MX_USART1_UART_Init+0x5c>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a8:	f002 f918 	bl	80025dc <HAL_UART_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003b2:	f000 f869 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2000002c 	.word	0x2000002c
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_GPIO_Init+0xbc>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a28      	ldr	r2, [pc, #160]	; (8000480 <MX_GPIO_Init+0xbc>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_GPIO_Init+0xbc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0xbc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <MX_GPIO_Init+0xbc>)
 80003f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b20      	ldr	r3, [pc, #128]	; (8000480 <MX_GPIO_Init+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_GPIO_Init+0xbc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_GPIO_Init+0xbc>)
 8000410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_GPIO_Init+0xbc>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <MX_GPIO_Init+0xc0>)
 800042a:	f000 fc83 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800042e:	2301      	movs	r3, #1
 8000430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000432:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 fafb 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800044a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800044e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4619      	mov	r1, r3
 8000462:	4808      	ldr	r0, [pc, #32]	; (8000484 <MX_GPIO_Init+0xc0>)
 8000464:	f000 faec 	bl	8000a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	2006      	movs	r0, #6
 800046e:	f000 fa3a 	bl	80008e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000472:	2006      	movs	r0, #6
 8000474:	f000 fa53 	bl	800091e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	48001000 	.word	0x48001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_MspInit+0x44>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <HAL_UART_MspInit+0x8c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d12f      	bne.n	800055e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <HAL_UART_MspInit+0x90>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a1a      	ldr	r2, [pc, #104]	; (800056c <HAL_UART_MspInit+0x90>)
 8000504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_UART_MspInit+0x90>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_UART_MspInit+0x90>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_UART_MspInit+0x90>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_UART_MspInit+0x90>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800052e:	2330      	movs	r3, #48	; 0x30
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800053e:	2307      	movs	r3, #7
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <HAL_UART_MspInit+0x94>)
 800054a:	f000 fa79 	bl	8000a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2025      	movs	r0, #37	; 0x25
 8000554:	f000 f9c7 	bl	80008e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000558:	2025      	movs	r0, #37	; 0x25
 800055a:	f000 f9e0 	bl	800091e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40013800 	.word	0x40013800
 800056c:	40021000 	.word	0x40021000
 8000570:	48000800 	.word	0x48000800

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c0:	f000 f896 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fbc9 	bl	8000d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <USART1_IRQHandler+0x10>)
 80005de:	f002 f919 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000002c 	.word	0x2000002c

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff ffea 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f003 fa7f 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff fe13 	bl	800026c <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000648:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000654:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8000658:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800065c:	200000c0 	.word	0x200000c0

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f92b 	bl	80008d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff ff08 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f943 	bl	800093a <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f90b 	bl	80008e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000008 	.word	0x20000008

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x20>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_IncTick+0x24>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_IncTick+0x24>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2000000c 	.word	0x2000000c
 8000714:	200000bc 	.word	0x200000bc

08000718 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;  
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_GetTick+0x14>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000bc 	.word	0x200000bc

08000730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800075c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	60d3      	str	r3, [r2, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__NVIC_GetPriorityGrouping+0x18>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	f003 0307 	and.w	r3, r3, #7
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db0b      	blt.n	80007be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 021f 	and.w	r2, r3, #31
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <__NVIC_EnableIRQ+0x38>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	095b      	lsrs	r3, r3, #5
 80007b4:	2001      	movs	r0, #1
 80007b6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800089c:	d301      	bcc.n	80008a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089e:	2301      	movs	r3, #1
 80008a0:	e00f      	b.n	80008c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <SysTick_Config+0x40>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f7ff ff8e 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_Config+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SysTick_Config+0x40>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff29 	bl	8000730 <__NVIC_SetPriorityGrouping>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff3e 	bl	8000778 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff8e 	bl	8000824 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5d 	bl	80007d0 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff31 	bl	8000794 <__NVIC_EnableIRQ>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffa2 	bl	800088c <SysTick_Config>
 8000948:	4603      	mov	r3, r0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000960:	2b02      	cmp	r3, #2
 8000962:	d008      	beq.n	8000976 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2204      	movs	r2, #4
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e020      	b.n	80009b8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 020e 	bic.w	r2, r2, #14
 8000984:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d005      	beq.n	80009e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2204      	movs	r2, #4
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e027      	b.n	8000a36 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 020e 	bic.w	r2, r2, #14
 80009f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 0201 	bic.w	r2, r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	4798      	blx	r3
    } 
  }
  return status;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e154      	b.n	8000cfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 8146 	beq.w	8000cf4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80a0 	beq.w	8000cf4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a57      	ldr	r2, [pc, #348]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_GPIO_Init+0x2d8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	4a53      	ldr	r2, [pc, #332]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf6:	d019      	beq.n	8000c2c <HAL_GPIO_Init+0x1ec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a49      	ldr	r2, [pc, #292]	; (8000d20 <HAL_GPIO_Init+0x2e0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d013      	beq.n	8000c28 <HAL_GPIO_Init+0x1e8>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00d      	beq.n	8000c24 <HAL_GPIO_Init+0x1e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x1e0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <HAL_GPIO_Init+0x2ec>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <HAL_GPIO_Init+0x1dc>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e008      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c20:	2303      	movs	r3, #3
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f aea3 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa20 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f001 b823 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 817d 	beq.w	80010ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd0:	4bbc      	ldr	r3, [pc, #752]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d00c      	beq.n	8000df6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ddc:	4bb9      	ldr	r3, [pc, #740]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d15c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x10e>
 8000de8:	4bb6      	ldr	r3, [pc, #728]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df4:	d155      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x10e>
 8000df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0e:	fab3 f383 	clz	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	095b      	lsrs	r3, r3, #5
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d102      	bne.n	8000e28 <HAL_RCC_OscConfig+0x94>
 8000e22:	4ba8      	ldr	r3, [pc, #672]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	e015      	b.n	8000e54 <HAL_RCC_OscConfig+0xc0>
 8000e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e50:	4b9c      	ldr	r3, [pc, #624]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e60:	fa92 f2a2 	rbit	r2, r2
 8000e64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e6c:	fab2 f282 	clz	r2, r2
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	f002 021f 	and.w	r2, r2, #31
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 811f 	beq.w	80010c8 <HAL_RCC_OscConfig+0x334>
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 8116 	bne.w	80010c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f000 bfaf 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb2:	d106      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
 8000eb4:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a82      	ldr	r2, [pc, #520]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e036      	b.n	8000f30 <HAL_RCC_OscConfig+0x19c>
 8000ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x158>
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a7b      	ldr	r2, [pc, #492]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b79      	ldr	r3, [pc, #484]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a78      	ldr	r2, [pc, #480]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e021      	b.n	8000f30 <HAL_RCC_OscConfig+0x19c>
 8000eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x184>
 8000efe:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a70      	ldr	r2, [pc, #448]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b6e      	ldr	r3, [pc, #440]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a6d      	ldr	r2, [pc, #436]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0x19c>
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a69      	ldr	r2, [pc, #420]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f30:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	f023 020f 	bic.w	r2, r3, #15
 8000f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	495f      	ldr	r1, [pc, #380]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d059      	beq.n	800100e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fbdd 	bl	8000718 <HAL_GetTick>
 8000f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	e00a      	b.n	8000f7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fbd8 	bl	8000718 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b64      	cmp	r3, #100	; 0x64
 8000f72:	d902      	bls.n	8000f7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f000 bf43 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 8000f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	095b      	lsrs	r3, r3, #5
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <HAL_RCC_OscConfig+0x218>
 8000fa6:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	e015      	b.n	8000fd8 <HAL_RCC_OscConfig+0x244>
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fe0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fe4:	fa92 f2a2 	rbit	r2, r2
 8000fe8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ff0:	fab2 f282 	clz	r2, r2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f002 021f 	and.w	r2, r2, #31
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ab      	beq.n	8000f64 <HAL_RCC_OscConfig+0x1d0>
 800100c:	e05d      	b.n	80010ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb83 	bl	8000718 <HAL_GetTick>
 8001012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	e00a      	b.n	800102e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fb7e 	bl	8000718 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b64      	cmp	r3, #100	; 0x64
 8001026:	d902      	bls.n	800102e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	f000 bee9 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 800102e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001032:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <HAL_RCC_OscConfig+0x2cc>
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e015      	b.n	800108c <HAL_RCC_OscConfig+0x2f8>
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800107c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_RCC_OscConfig+0x330>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001090:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001094:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001098:	fa92 f2a2 	rbit	r2, r2
 800109c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010a4:	fab2 f282 	clz	r2, r2
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	f042 0220 	orr.w	r2, r2, #32
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f002 021f 	and.w	r2, r2, #31
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ab      	bne.n	8001018 <HAL_RCC_OscConfig+0x284>
 80010c0:	e003      	b.n	80010ca <HAL_RCC_OscConfig+0x336>
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 817d 	beq.w	80013da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e0:	4ba6      	ldr	r3, [pc, #664]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ec:	4ba3      	ldr	r3, [pc, #652]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d172      	bne.n	80011de <HAL_RCC_OscConfig+0x44a>
 80010f8:	4ba0      	ldr	r3, [pc, #640]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d16c      	bne.n	80011de <HAL_RCC_OscConfig+0x44a>
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001116:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x3a0>
 800112e:	4b93      	ldr	r3, [pc, #588]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e013      	b.n	800115c <HAL_RCC_OscConfig+0x3c8>
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800114c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001158:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	2202      	movs	r2, #2
 800115e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001162:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001166:	fa92 f2a2 	rbit	r2, r2
 800116a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800116e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001172:	fab2 f282 	clz	r2, r2
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f042 0220 	orr.w	r2, r2, #32
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f002 021f 	and.w	r2, r2, #31
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <HAL_RCC_OscConfig+0x410>
 800118e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d002      	beq.n	80011a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f000 be2e 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	21f8      	movs	r1, #248	; 0xf8
 80011ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011c2:	fa91 f1a1 	rbit	r1, r1
 80011c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011ce:	fab1 f181 	clz	r1, r1
 80011d2:	b2c9      	uxtb	r1, r1
 80011d4:	408b      	lsls	r3, r1
 80011d6:	4969      	ldr	r1, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011dc:	e0fd      	b.n	80013da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8088 	beq.w	8001300 <HAL_RCC_OscConfig+0x56c>
 80011f0:	2301      	movs	r3, #1
 80011f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	461a      	mov	r2, r3
 8001218:	2301      	movs	r3, #1
 800121a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fa7c 	bl	8000718 <HAL_GetTick>
 8001220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fa77 	bl	8000718 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d902      	bls.n	800123c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	f000 bde2 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800124e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x4d8>
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e013      	b.n	8001294 <HAL_RCC_OscConfig+0x500>
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001290:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800129a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0af      	beq.n	8001226 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	21f8      	movs	r1, #248	; 0xf8
 80012dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012e4:	fa91 f1a1 	rbit	r1, r1
 80012e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012f0:	fab1 f181 	clz	r1, r1
 80012f4:	b2c9      	uxtb	r1, r1
 80012f6:	408b      	lsls	r3, r1
 80012f8:	4920      	ldr	r1, [pc, #128]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
 80012fe:	e06c      	b.n	80013da <HAL_RCC_OscConfig+0x646>
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	461a      	mov	r2, r3
 8001328:	2300      	movs	r3, #0
 800132a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff f9f4 	bl	8000718 <HAL_GetTick>
 8001330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff f9ef 	bl	8000718 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d902      	bls.n	800134c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	f000 bd5a 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800135e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d104      	bne.n	8001380 <HAL_RCC_OscConfig+0x5ec>
 8001376:	4b01      	ldr	r3, [pc, #4]	; (800137c <HAL_RCC_OscConfig+0x5e8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	e015      	b.n	80013a8 <HAL_RCC_OscConfig+0x614>
 800137c:	40021000 	.word	0x40021000
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013a4:	4bc8      	ldr	r3, [pc, #800]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2202      	movs	r2, #2
 80013aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013b2:	fa92 f2a2 	rbit	r2, r2
 80013b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013be:	fab2 f282 	clz	r2, r2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	f002 021f 	and.w	r2, r2, #31
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ad      	bne.n	8001336 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8110 	beq.w	8001610 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d079      	beq.n	80014f4 <HAL_RCC_OscConfig+0x760>
 8001400:	2301      	movs	r3, #1
 8001402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4bab      	ldr	r3, [pc, #684]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	461a      	mov	r2, r3
 8001426:	2301      	movs	r3, #1
 8001428:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff f975 	bl	8000718 <HAL_GetTick>
 800142e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff f970 	bl	8000718 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 bcdb 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001488:	2202      	movs	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a4:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 80014a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014b0:	2102      	movs	r1, #2
 80014b2:	6019      	str	r1, [r3, #0]
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f1a3 	rbit	r1, r3
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ca:	6019      	str	r1, [r3, #0]
  return result;
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0a0      	beq.n	8001434 <HAL_RCC_OscConfig+0x6a0>
 80014f2:	e08d      	b.n	8001610 <HAL_RCC_OscConfig+0x87c>
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001516:	601a      	str	r2, [r3, #0]
  return result;
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001520:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x938>)
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	461a      	mov	r2, r3
 8001532:	2300      	movs	r3, #0
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff f8ef 	bl	8000718 <HAL_GetTick>
 800153a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff f8ea 	bl	8000718 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d902      	bls.n	8001556 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	f000 bc55 	b.w	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800155e:	2202      	movs	r2, #2
 8001560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001582:	2202      	movs	r2, #2
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fa93 f2a3 	rbit	r2, r3
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fa93 f2a3 	rbit	r2, r3
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 80015c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ce:	2102      	movs	r1, #2
 80015d0:	6019      	str	r1, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f1a3 	rbit	r1, r3
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015e8:	6019      	str	r1, [r3, #0]
  return result;
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d197      	bne.n	8001540 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 81a1 	beq.w	8001968 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d116      	bne.n	8001666 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	61d3      	str	r3, [r2, #28]
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800165e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x93c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_RCC_OscConfig+0x93c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_RCC_OscConfig+0x93c>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff f84b 	bl	8000718 <HAL_GetTick>
 8001682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	e009      	b.n	800169c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001688:	f7ff f846 	bl	8000718 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e3b1      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x93c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10d      	bne.n	80016d4 <HAL_RCC_OscConfig+0x940>
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <HAL_RCC_OscConfig+0x934>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e03c      	b.n	8001740 <HAL_RCC_OscConfig+0x9ac>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	10908120 	.word	0x10908120
 80016d0:	40007000 	.word	0x40007000
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10c      	bne.n	80016fe <HAL_RCC_OscConfig+0x96a>
 80016e4:	4bc1      	ldr	r3, [pc, #772]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4ac0      	ldr	r2, [pc, #768]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	4bbe      	ldr	r3, [pc, #760]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4abd      	ldr	r2, [pc, #756]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	e020      	b.n	8001740 <HAL_RCC_OscConfig+0x9ac>
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x994>
 800170e:	4bb7      	ldr	r3, [pc, #732]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4ab6      	ldr	r2, [pc, #728]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	4bb4      	ldr	r3, [pc, #720]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4ab3      	ldr	r2, [pc, #716]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x9ac>
 8001728:	4bb0      	ldr	r3, [pc, #704]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4aaf      	ldr	r2, [pc, #700]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	4bad      	ldr	r3, [pc, #692]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4aac      	ldr	r2, [pc, #688]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8081 	beq.w	8001854 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7fe ffe1 	bl	8000718 <HAL_GetTick>
 8001756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7fe ffdc 	bl	8000718 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e345      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a0:	2202      	movs	r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ba:	601a      	str	r2, [r3, #0]
  return result;
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0xa4c>
 80017da:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	e013      	b.n	8001808 <HAL_RCC_OscConfig+0xa74>
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001810:	2102      	movs	r1, #2
 8001812:	6011      	str	r1, [r2, #0]
 8001814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001818:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	fa92 f1a2 	rbit	r1, r2
 8001822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800182a:	6011      	str	r1, [r2, #0]
  return result;
 800182c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001830:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d084      	beq.n	800175c <HAL_RCC_OscConfig+0x9c8>
 8001852:	e07f      	b.n	8001954 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7fe ff60 	bl	8000718 <HAL_GetTick>
 8001858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7fe ff5b 	bl	8000718 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2c4      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018bc:	601a      	str	r2, [r3, #0]
  return result;
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0xb4e>
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	e013      	b.n	800190a <HAL_RCC_OscConfig+0xb76>
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001912:	2102      	movs	r1, #2
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800191a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fa92 f1a2 	rbit	r1, r2
 8001924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800192c:	6011      	str	r1, [r2, #0]
  return result;
 800192e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001932:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d184      	bne.n	800185e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001954:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8242 	beq.w	8001dfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_RCC_OscConfig+0xc58>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	f000 8213 	beq.w	8001dae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b02      	cmp	r3, #2
 8001996:	f040 8162 	bne.w	8001c5e <HAL_RCC_OscConfig+0xeca>
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019be:	601a      	str	r2, [r3, #0]
  return result;
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	461a      	mov	r2, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe fe9a 	bl	8000718 <HAL_GetTick>
 80019e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e00c      	b.n	8001a04 <HAL_RCC_OscConfig+0xc70>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7fe fe92 	bl	8000718 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1fd      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a28:	601a      	str	r2, [r3, #0]
  return result;
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0xcba>
 8001a48:	4bb0      	ldr	r3, [pc, #704]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e027      	b.n	8001a9e <HAL_RCC_OscConfig+0xd0a>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	4b9c      	ldr	r3, [pc, #624]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001aa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aaa:	6011      	str	r1, [r2, #0]
 8001aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ab0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	fa92 f1a2 	rbit	r1, r2
 8001aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ac2:	6011      	str	r1, [r2, #0]
  return result;
 8001ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0220 	orr.w	r2, r2, #32
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d182      	bne.n	80019f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	497f      	ldr	r1, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b36:	601a      	str	r2, [r3, #0]
  return result;
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	2301      	movs	r3, #1
 8001b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fdde 	bl	8000718 <HAL_GetTick>
 8001b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe fdd9 	bl	8000718 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e144      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b9a:	601a      	str	r2, [r3, #0]
  return result;
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ba4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xe2c>
 8001bba:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e027      	b.n	8001c10 <HAL_RCC_OscConfig+0xe7c>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fa92 f1a2 	rbit	r1, r2
 8001c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c34:	6011      	str	r1, [r2, #0]
  return result;
 8001c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d082      	beq.n	8001b62 <HAL_RCC_OscConfig+0xdce>
 8001c5c:	e0cf      	b.n	8001dfe <HAL_RCC_OscConfig+0x106a>
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fd38 	bl	8000718 <HAL_GetTick>
 8001ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe fd33 	bl	8000718 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e09e      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d104      	bne.n	8001d10 <HAL_RCC_OscConfig+0xf7c>
 8001d06:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_OscConfig+0xf78>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e029      	b.n	8001d60 <HAL_RCC_OscConfig+0xfcc>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x1078>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d6c:	6011      	str	r1, [r2, #0]
 8001d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fa92 f1a2 	rbit	r1, r2
 8001d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d84:	6011      	str	r1, [r2, #0]
  return result;
 8001d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d180      	bne.n	8001cae <HAL_RCC_OscConfig+0xf1a>
 8001dac:	e027      	b.n	8001dfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e01e      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x1078>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001de2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b09e      	sub	sp, #120	; 0x78
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e162      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b90      	ldr	r3, [pc, #576]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	498b      	ldr	r1, [pc, #556]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e14a      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	497f      	ldr	r1, [pc, #508]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80dc 	beq.w	800203c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d13c      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xf6>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xa6>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e00f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0xc6>
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8001edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d17b      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0f3      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d13c      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x178>
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x128>
 8001f32:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_ClockConfig+0x148>
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	647b      	str	r3, [r7, #68]	; 0x44
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13a      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b2      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1a0>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e00d      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1bc>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2202      	movs	r2, #2
 8001fce:	61ba      	str	r2, [r7, #24]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	617a      	str	r2, [r7, #20]
  return result;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f002 021f 	and.w	r2, r2, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e079      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	491a      	ldr	r1, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7fe fb84 	bl	8000718 <HAL_GetTick>
 8002010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fb80 	bl	8000718 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e061      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d214      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e040      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	491a      	ldr	r1, [pc, #104]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b2:	f000 f829 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	60fa      	str	r2, [r7, #12]
  return result;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x2ec>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_RCC_ClockConfig+0x2f0>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x2f4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fad2 	bl	8000690 <HAL_InitTick>
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3778      	adds	r7, #120	; 0x78
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08003bb0 	.word	0x08003bb0
 8002100:	20000004 	.word	0x20000004
 8002104:	20000008 	.word	0x20000008

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	; 0x2c
 800210c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x30>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x36>
 8002136:	e03c      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	e03c      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002144:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002148:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	607a      	str	r2, [r7, #4]
  return result;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	220f      	movs	r2, #15
 800216c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	60fa      	str	r2, [r7, #12]
  return result;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	40d3      	lsrs	r3, r2
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	e004      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	623b      	str	r3, [r7, #32]
      break;
 80021b0:	e002      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b4:	623b      	str	r3, [r7, #32]
      break;
 80021b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	372c      	adds	r7, #44	; 0x2c
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	08003bc8 	.word	0x08003bc8
 80021d4:	08003bd8 	.word	0x08003bd8
 80021d8:	003d0900 	.word	0x003d0900

080021dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021fa:	f7ff ffef 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002208:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800220c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	603a      	str	r2, [r7, #0]
  return result;
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	40d3      	lsrs	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08003bc0 	.word	0x08003bc0

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800223e:	f7ff ffcd 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002242:	4601      	mov	r1, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800224c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002250:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	603a      	str	r2, [r7, #0]
  return result;
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	08003bc0 	.word	0x08003bc0

0800227c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b092      	sub	sp, #72	; 0x48
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80d4 	beq.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10e      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	61d3      	str	r3, [r2, #28]
 80022b8:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fa19 	bl	8000718 <HAL_GetTick>
 80022e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe fa15 	bl	8000718 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e169      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8084 	beq.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002324:	429a      	cmp	r2, r3
 8002326:	d07c      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	461a      	mov	r2, r3
 8002352:	2301      	movs	r3, #1
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	461a      	mov	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04b      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe f9c5 	bl	8000718 <HAL_GetTick>
 800238e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe f9c1 	bl	8000718 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e113      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61fb      	str	r3, [r7, #28]
  return result;
 80023c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d108      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	e00d      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	10908100 	.word	0x10908100
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2202      	movs	r2, #2
 80023fa:	613a      	str	r2, [r7, #16]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	60fa      	str	r2, [r7, #12]
  return result;
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0b7      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002422:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	496a      	ldr	r1, [pc, #424]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a65      	ldr	r2, [pc, #404]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f023 0203 	bic.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	495d      	ldr	r1, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4956      	ldr	r1, [pc, #344]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	494e      	ldr	r1, [pc, #312]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f023 0210 	bic.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4947      	ldr	r1, [pc, #284]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024cc:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	493f      	ldr	r1, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f023 0220 	bic.w	r2, r3, #32
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4938      	ldr	r1, [pc, #224]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	4930      	ldr	r1, [pc, #192]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4929      	ldr	r1, [pc, #164]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	4921      	ldr	r1, [pc, #132]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	491a      	ldr	r1, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	490b      	ldr	r1, [pc, #44]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3748      	adds	r7, #72	; 0x48
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e040      	b.n	8002670 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fd ff6c 	bl	80004dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fc00 	bl	8002e20 <UART_SetConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e022      	b.n	8002670 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fdc8 	bl	80031c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fe4f 	bl	800330c <UART_CheckIdleState>
 800266e:	4603      	mov	r3, r0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800268c:	2b20      	cmp	r3, #32
 800268e:	d178      	bne.n	8002782 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_UART_Transmit+0x24>
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e071      	b.n	8002784 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2221      	movs	r2, #33	; 0x21
 80026ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ae:	f7fe f833 	bl	8000718 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	d108      	bne.n	80026e0 <HAL_UART_Transmit+0x68>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e003      	b.n	80026e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e8:	e030      	b.n	800274c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 feb1 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e03c      	b.n	8002784 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	881a      	ldrh	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800271c:	b292      	uxth	r2, r2
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	3302      	adds	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e008      	b.n	800273a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b292      	uxth	r2, r2
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1c8      	bne.n	80026ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2200      	movs	r2, #0
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fe7a 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e005      	b.n	8002784 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d132      	bne.n	800280a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_Receive_IT+0x24>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e02b      	b.n	800280c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d018      	beq.n	80027fa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	69f9      	ldr	r1, [r7, #28]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e6      	bne.n	80027c8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	461a      	mov	r2, r3
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fe93 	bl	800352c <UART_Start_Receive_IT>
 8002806:	4603      	mov	r3, r0
 8002808:	e000      	b.n	800280c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0ba      	sub	sp, #232	; 0xe8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800283a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800283e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002842:	4013      	ands	r3, r2
 8002844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00f      	beq.n	800287c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 82ab 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
      }
      return;
 800287a:	e2a5      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800287c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8117 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002892:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002896:	4b85      	ldr	r3, [pc, #532]	; (8002aac <HAL_UART_IRQHandler+0x298>)
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 810a 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_UART_IRQHandler+0xbc>
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d011      	beq.n	8002900 <HAL_UART_IRQHandler+0xec>
 80028dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d011      	beq.n	8002930 <HAL_UART_IRQHandler+0x11c>
 800290c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800294c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002962:	f043 0208 	orr.w	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800296c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <HAL_UART_IRQHandler+0x18a>
 8002978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00c      	beq.n	800299e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8211 	beq.w	8002dcc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d005      	beq.n	80029f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04f      	beq.n	8002a96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fe4c 	bl	8003694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d141      	bne.n	8002a8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3308      	adds	r3, #8
 8002a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3308      	adds	r3, #8
 8002a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1d9      	bne.n	8002a0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d013      	beq.n	8002a86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_UART_IRQHandler+0x29c>)
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd ffaa 	bl	80009c4 <HAL_DMA_Abort_IT>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a80:	4610      	mov	r0, r2
 8002a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	e00f      	b.n	8002aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9b4 	bl	8002df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	e00b      	b.n	8002aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9b0 	bl	8002df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	e007      	b.n	8002aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9ac 	bl	8002df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002aa4:	e192      	b.n	8002dcc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa6:	bf00      	nop
    return;
 8002aa8:	e190      	b.n	8002dcc <HAL_UART_IRQHandler+0x5b8>
 8002aaa:	bf00      	nop
 8002aac:	04000120 	.word	0x04000120
 8002ab0:	0800375d 	.word	0x0800375d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 814b 	bne.w	8002d54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8144 	beq.w	8002d54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 813d 	beq.w	8002d54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	f040 80b5 	bne.w	8002c5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8164 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f080 815c 	bcs.w	8002dd0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	f000 8086 	beq.w	8002c3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1da      	bne.n	8002b2e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3308      	adds	r3, #8
 8002b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e1      	bne.n	8002b78 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3308      	adds	r3, #8
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e3      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e4      	bne.n	8002bfa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fe8c 	bl	8000952 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8d7 	bl	8002e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c5a:	e0b9      	b.n	8002dd0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80ab 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80a6 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
 8002cac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e4      	bne.n	8002c88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e3      	bne.n	8002cbe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0310 	bic.w	r3, r3, #16
 8002d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	617b      	str	r3, [r7, #20]
   return(result);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e4      	bne.n	8002d0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f85b 	bl	8002e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d52:	e03f      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <HAL_UART_IRQHandler+0x56a>
 8002d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fed8 	bl	8003b2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d7c:	e02d      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00e      	beq.n	8002da8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    }
    return;
 8002da6:	e017      	b.n	8002dd8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_UART_IRQHandler+0x5c6>
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fce1 	bl	8003788 <UART_EndTransmit_IT>
    return;
 8002dc6:	e008      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dc8:	bf00      	nop
 8002dca:	e006      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
    return;
 8002dcc:	bf00      	nop
 8002dce:	e004      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dd0:	bf00      	nop
 8002dd2:	e002      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_UART_IRQHandler+0x5c6>
    return;
 8002dd8:	bf00      	nop
  }

}
 8002dda:	37e8      	adds	r7, #232	; 0xe8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e4e:	f023 030c 	bic.w	r3, r3, #12
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4aa7      	ldr	r2, [pc, #668]	; (8003138 <UART_SetConfig+0x318>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d120      	bne.n	8002ee2 <UART_SetConfig+0xc2>
 8002ea0:	4ba6      	ldr	r3, [pc, #664]	; (800313c <UART_SetConfig+0x31c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d817      	bhi.n	8002edc <UART_SetConfig+0xbc>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0x94>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ed7 	.word	0x08002ed7
 8002ec0:	08002ecb 	.word	0x08002ecb
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e0b5      	b.n	8003036 <UART_SetConfig+0x216>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e0b2      	b.n	8003036 <UART_SetConfig+0x216>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e0af      	b.n	8003036 <UART_SetConfig+0x216>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e0ac      	b.n	8003036 <UART_SetConfig+0x216>
 8002edc:	2310      	movs	r3, #16
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e0a9      	b.n	8003036 <UART_SetConfig+0x216>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a96      	ldr	r2, [pc, #600]	; (8003140 <UART_SetConfig+0x320>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d124      	bne.n	8002f36 <UART_SetConfig+0x116>
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <UART_SetConfig+0x31c>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ef8:	d011      	beq.n	8002f1e <UART_SetConfig+0xfe>
 8002efa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002efe:	d817      	bhi.n	8002f30 <UART_SetConfig+0x110>
 8002f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f04:	d011      	beq.n	8002f2a <UART_SetConfig+0x10a>
 8002f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f0a:	d811      	bhi.n	8002f30 <UART_SetConfig+0x110>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <UART_SetConfig+0xf8>
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d006      	beq.n	8002f24 <UART_SetConfig+0x104>
 8002f16:	e00b      	b.n	8002f30 <UART_SetConfig+0x110>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e08b      	b.n	8003036 <UART_SetConfig+0x216>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e088      	b.n	8003036 <UART_SetConfig+0x216>
 8002f24:	2304      	movs	r3, #4
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e085      	b.n	8003036 <UART_SetConfig+0x216>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e082      	b.n	8003036 <UART_SetConfig+0x216>
 8002f30:	2310      	movs	r3, #16
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e07f      	b.n	8003036 <UART_SetConfig+0x216>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a82      	ldr	r2, [pc, #520]	; (8003144 <UART_SetConfig+0x324>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d124      	bne.n	8002f8a <UART_SetConfig+0x16a>
 8002f40:	4b7e      	ldr	r3, [pc, #504]	; (800313c <UART_SetConfig+0x31c>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f4c:	d011      	beq.n	8002f72 <UART_SetConfig+0x152>
 8002f4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f52:	d817      	bhi.n	8002f84 <UART_SetConfig+0x164>
 8002f54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f58:	d011      	beq.n	8002f7e <UART_SetConfig+0x15e>
 8002f5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f5e:	d811      	bhi.n	8002f84 <UART_SetConfig+0x164>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <UART_SetConfig+0x14c>
 8002f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f68:	d006      	beq.n	8002f78 <UART_SetConfig+0x158>
 8002f6a:	e00b      	b.n	8002f84 <UART_SetConfig+0x164>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e061      	b.n	8003036 <UART_SetConfig+0x216>
 8002f72:	2302      	movs	r3, #2
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e05e      	b.n	8003036 <UART_SetConfig+0x216>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e05b      	b.n	8003036 <UART_SetConfig+0x216>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e058      	b.n	8003036 <UART_SetConfig+0x216>
 8002f84:	2310      	movs	r3, #16
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e055      	b.n	8003036 <UART_SetConfig+0x216>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <UART_SetConfig+0x328>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d124      	bne.n	8002fde <UART_SetConfig+0x1be>
 8002f94:	4b69      	ldr	r3, [pc, #420]	; (800313c <UART_SetConfig+0x31c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa0:	d011      	beq.n	8002fc6 <UART_SetConfig+0x1a6>
 8002fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa6:	d817      	bhi.n	8002fd8 <UART_SetConfig+0x1b8>
 8002fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fac:	d011      	beq.n	8002fd2 <UART_SetConfig+0x1b2>
 8002fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb2:	d811      	bhi.n	8002fd8 <UART_SetConfig+0x1b8>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <UART_SetConfig+0x1a0>
 8002fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbc:	d006      	beq.n	8002fcc <UART_SetConfig+0x1ac>
 8002fbe:	e00b      	b.n	8002fd8 <UART_SetConfig+0x1b8>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e037      	b.n	8003036 <UART_SetConfig+0x216>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e034      	b.n	8003036 <UART_SetConfig+0x216>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e031      	b.n	8003036 <UART_SetConfig+0x216>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e02e      	b.n	8003036 <UART_SetConfig+0x216>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e02b      	b.n	8003036 <UART_SetConfig+0x216>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5a      	ldr	r2, [pc, #360]	; (800314c <UART_SetConfig+0x32c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d124      	bne.n	8003032 <UART_SetConfig+0x212>
 8002fe8:	4b54      	ldr	r3, [pc, #336]	; (800313c <UART_SetConfig+0x31c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0x1fa>
 8002ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ffa:	d817      	bhi.n	800302c <UART_SetConfig+0x20c>
 8002ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003000:	d011      	beq.n	8003026 <UART_SetConfig+0x206>
 8003002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003006:	d811      	bhi.n	800302c <UART_SetConfig+0x20c>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <UART_SetConfig+0x1f4>
 800300c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x200>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x20c>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e00d      	b.n	8003036 <UART_SetConfig+0x216>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e00a      	b.n	8003036 <UART_SetConfig+0x216>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e007      	b.n	8003036 <UART_SetConfig+0x216>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e004      	b.n	8003036 <UART_SetConfig+0x216>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e001      	b.n	8003036 <UART_SetConfig+0x216>
 8003032:	2310      	movs	r3, #16
 8003034:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d15b      	bne.n	80030f8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003040:	7ffb      	ldrb	r3, [r7, #31]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d827      	bhi.n	8003096 <UART_SetConfig+0x276>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0x22c>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	08003097 	.word	0x08003097
 800305c:	08003087 	.word	0x08003087
 8003060:	08003097 	.word	0x08003097
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7ff f8c0 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8003074:	61b8      	str	r0, [r7, #24]
        break;
 8003076:	e013      	b.n	80030a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7ff f8de 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 800307c:	61b8      	str	r0, [r7, #24]
        break;
 800307e:	e00f      	b.n	80030a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <UART_SetConfig+0x330>)
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e00c      	b.n	80030a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7ff f83f 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 800308a:	61b8      	str	r0, [r7, #24]
        break;
 800308c:	e008      	b.n	80030a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003092:	61bb      	str	r3, [r7, #24]
        break;
 8003094:	e004      	b.n	80030a0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	77bb      	strb	r3, [r7, #30]
        break;
 800309e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8082 	beq.w	80031ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d916      	bls.n	80030f2 <UART_SetConfig+0x2d2>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d212      	bcs.n	80030f2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f023 030f 	bic.w	r3, r3, #15
 80030d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	89fb      	ldrh	r3, [r7, #14]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	89fa      	ldrh	r2, [r7, #14]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	e05c      	b.n	80031ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77bb      	strb	r3, [r7, #30]
 80030f6:	e059      	b.n	80031ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d835      	bhi.n	800316a <UART_SetConfig+0x34a>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0x2e4>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003129 	.word	0x08003129
 8003108:	08003131 	.word	0x08003131
 800310c:	08003155 	.word	0x08003155
 8003110:	0800316b 	.word	0x0800316b
 8003114:	0800315b 	.word	0x0800315b
 8003118:	0800316b 	.word	0x0800316b
 800311c:	0800316b 	.word	0x0800316b
 8003120:	0800316b 	.word	0x0800316b
 8003124:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003128:	f7ff f864 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 800312c:	61b8      	str	r0, [r7, #24]
        break;
 800312e:	e021      	b.n	8003174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003130:	f7ff f882 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003134:	61b8      	str	r0, [r7, #24]
        break;
 8003136:	e01d      	b.n	8003174 <UART_SetConfig+0x354>
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	40004400 	.word	0x40004400
 8003144:	40004800 	.word	0x40004800
 8003148:	40004c00 	.word	0x40004c00
 800314c:	40005000 	.word	0x40005000
 8003150:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <UART_SetConfig+0x3a4>)
 8003156:	61bb      	str	r3, [r7, #24]
        break;
 8003158:	e00c      	b.n	8003174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7fe ffd5 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 800315e:	61b8      	str	r0, [r7, #24]
        break;
 8003160:	e008      	b.n	8003174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e004      	b.n	8003174 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	77bb      	strb	r3, [r7, #30]
        break;
 8003172:	bf00      	nop
    }

    if (pclk != 0U)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d018      	beq.n	80031ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	085a      	lsrs	r2, r3, #1
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d909      	bls.n	80031a8 <UART_SetConfig+0x388>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d205      	bcs.n	80031a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e001      	b.n	80031ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c6:	d10a      	bne.n	80032de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b098      	sub	sp, #96	; 0x60
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800331c:	f7fd f9fc 	bl	8000718 <HAL_GetTick>
 8003320:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d12e      	bne.n	800338e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f88c 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d021      	beq.n	800338e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	e853 3f00 	ldrex	r3, [r3]
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
 800336a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800336e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e6      	bne.n	800334a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e062      	b.n	8003454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d149      	bne.n	8003430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f856 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d03c      	beq.n	8003430 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	623b      	str	r3, [r7, #32]
   return(result);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
 80033d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e6      	bne.n	80033b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003408:	61fa      	str	r2, [r7, #28]
 800340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	617b      	str	r3, [r7, #20]
   return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e011      	b.n	8003454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3758      	adds	r7, #88	; 0x58
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346c:	e049      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d045      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fd f94f 	bl	8000718 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <UART_WaitOnFlagUntilTimeout+0x30>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e048      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d031      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d110      	bne.n	80034ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2208      	movs	r2, #8
 80034b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8ed 	bl	8003694 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2208      	movs	r2, #8
 80034be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e029      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034dc:	d111      	bne.n	8003502 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8d3 	bl	8003694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e00f      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d0a6      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800352c:	b480      	push	{r7}
 800352e:	b097      	sub	sp, #92	; 0x5c
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355e:	d10e      	bne.n	800357e <UART_Start_Receive_IT+0x52>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <UART_Start_Receive_IT+0x48>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800356e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003572:	e01a      	b.n	80035aa <UART_Start_Receive_IT+0x7e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800357c:	e015      	b.n	80035aa <UART_Start_Receive_IT+0x7e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <UART_Start_Receive_IT+0x76>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <UART_Start_Receive_IT+0x6c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003596:	e008      	b.n	80035aa <UART_Start_Receive_IT+0x7e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	227f      	movs	r2, #127	; 0x7f
 800359c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a0:	e003      	b.n	80035aa <UART_Start_Receive_IT+0x7e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2222      	movs	r2, #34	; 0x22
 80035b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3308      	adds	r3, #8
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	657b      	str	r3, [r7, #84]	; 0x54
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3308      	adds	r3, #8
 80035d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035da:	64ba      	str	r2, [r7, #72]	; 0x48
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e5      	bne.n	80035ba <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	d107      	bne.n	8003608 <UART_Start_Receive_IT+0xdc>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <UART_Start_Receive_IT+0x160>)
 8003604:	669a      	str	r2, [r3, #104]	; 0x68
 8003606:	e002      	b.n	800360e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <UART_Start_Receive_IT+0x164>)
 800360c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d019      	beq.n	800364a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
 8003636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e6      	bne.n	8003616 <UART_Start_Receive_IT+0xea>
 8003648:	e018      	b.n	800367c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	613b      	str	r3, [r7, #16]
   return(result);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69f9      	ldr	r1, [r7, #28]
 800366e:	6a3a      	ldr	r2, [r7, #32]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	61bb      	str	r3, [r7, #24]
   return(result);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e6      	bne.n	800364a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	375c      	adds	r7, #92	; 0x5c
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	08003985 	.word	0x08003985
 8003690:	080037dd 	.word	0x080037dd

08003694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b095      	sub	sp, #84	; 0x54
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40
 80036bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e6      	bne.n	800369c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	2b01      	cmp	r3, #1
 8003708:	d118      	bne.n	800373c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	60bb      	str	r3, [r7, #8]
   return(result);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0310 	bic.w	r3, r3, #16
 800371e:	647b      	str	r3, [r7, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e6      	bne.n	800370a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003750:	bf00      	nop
 8003752:	3754      	adds	r7, #84	; 0x54
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fb3a 	bl	8002df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	60bb      	str	r3, [r7, #8]
   return(result);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6979      	ldr	r1, [r7, #20]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	613b      	str	r3, [r7, #16]
   return(result);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e6      	bne.n	8003790 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fb06 	bl	8002de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d4:	bf00      	nop
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b09c      	sub	sp, #112	; 0x70
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f4:	2b22      	cmp	r3, #34	; 0x22
 80037f6:	f040 80b9 	bne.w	800396c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003800:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003808:	b2d9      	uxtb	r1, r3
 800380a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	400a      	ands	r2, r1
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 809c 	bne.w	800397c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003858:	66bb      	str	r3, [r7, #104]	; 0x68
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	65bb      	str	r3, [r7, #88]	; 0x58
 8003864:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e6      	bne.n	8003844 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	667b      	str	r3, [r7, #100]	; 0x64
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003896:	647a      	str	r2, [r7, #68]	; 0x44
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800389c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	623b      	str	r3, [r7, #32]
   return(result);
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038e0:	663b      	str	r3, [r7, #96]	; 0x60
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
 80038ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	2b01      	cmp	r3, #1
 8003904:	d12e      	bne.n	8003964 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	60fb      	str	r3, [r7, #12]
   return(result);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f023 0310 	bic.w	r3, r3, #16
 8003920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	617b      	str	r3, [r7, #20]
   return(result);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e6      	bne.n	800390c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b10      	cmp	r3, #16
 800394a:	d103      	bne.n	8003954 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fa53 	bl	8002e08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003962:	e00b      	b.n	800397c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fc fc69 	bl	800023c <HAL_UART_RxCpltCallback>
}
 800396a:	e007      	b.n	800397c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	619a      	str	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	3770      	adds	r7, #112	; 0x70
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b09c      	sub	sp, #112	; 0x70
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003992:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399c:	2b22      	cmp	r3, #34	; 0x22
 800399e:	f040 80b9 	bne.w	8003b14 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80039b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80039ba:	4013      	ands	r3, r2
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 809c 	bne.w	8003b24 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80039fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a00:	667b      	str	r3, [r7, #100]	; 0x64
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a0c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e6      	bne.n	80039ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	663b      	str	r3, [r7, #96]	; 0x60
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a3e:	643a      	str	r2, [r7, #64]	; 0x40
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d018      	beq.n	8003aa6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d12e      	bne.n	8003b0c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0310 	bic.w	r3, r3, #16
 8003ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e6      	bne.n	8003ab4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d103      	bne.n	8003afc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2210      	movs	r2, #16
 8003afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff f97f 	bl	8002e08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b0a:	e00b      	b.n	8003b24 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fc fb95 	bl	800023c <HAL_UART_RxCpltCallback>
}
 8003b12:	e007      	b.n	8003b24 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	619a      	str	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	3770      	adds	r7, #112	; 0x70
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	; (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	; (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	; (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 f820 	bl	8003b98 <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08003be8 	.word	0x08003be8
 8003b7c:	08003be8 	.word	0x08003be8
 8003b80:	08003be8 	.word	0x08003be8
 8003b84:	08003bec 	.word	0x08003bec

08003b88 <memset>:
 8003b88:	4402      	add	r2, r0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memset+0xa>
 8003b90:	4770      	bx	lr
 8003b92:	f803 1b01 	strb.w	r1, [r3], #1
 8003b96:	e7f9      	b.n	8003b8c <memset+0x4>

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
