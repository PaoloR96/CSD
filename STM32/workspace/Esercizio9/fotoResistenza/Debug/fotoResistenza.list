
fotoResistenza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000463c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b986  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000194e  00000000  00000000  0002b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a48  00000000  00000000  0002de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3b8  00000000  00000000  0002e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e006  00000000  00000000  0004bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6ef6  00000000  00000000  00059c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110b1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e38  00000000  00000000  00110b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047ac 	.word	0x080047ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080047ac 	.word	0x080047ac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb02 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f84c 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f986 	bl	80004e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f89e 	bl	8000318 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f90c 	bl	80003f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	481d      	ldr	r0, [pc, #116]	; (8000258 <main+0x90>)
 80001e4:	f003 fb32 	bl	800384c <HAL_TIM_PWM_Start>
     // Calibrate The ADC On Power-Up For Better Accuracy


     // Read The Sensor Once To Get The Ambient Level
     // & Calculate The DutyCycle Multiplier
     HAL_ADC_Start(&hadc1);
 80001e8:	481c      	ldr	r0, [pc, #112]	; (800025c <main+0x94>)
 80001ea:	f000 fd5d 	bl	8000ca8 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1, 1);
 80001ee:	2101      	movs	r1, #1
 80001f0:	481a      	ldr	r0, [pc, #104]	; (800025c <main+0x94>)
 80001f2:	f000 fe6f 	bl	8000ed4 <HAL_ADC_PollForConversion>
     Vamb = HAL_ADC_GetValue(&hadc1);
 80001f6:	4819      	ldr	r0, [pc, #100]	; (800025c <main+0x94>)
 80001f8:	f000 ff6e 	bl	80010d8 <HAL_ADC_GetValue>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <main+0x98>)
 8000202:	801a      	strh	r2, [r3, #0]
     DC_Multiplier = 65535/(4096-Vamb);
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x98>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800020c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000210:	fb92 f3f3 	sdiv	r3, r2, r3
 8000214:	b29a      	uxth	r2, r3
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <main+0x9c>)
 8000218:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Start ADC Conversion
	        HAL_ADC_Start(&hadc1);
 800021a:	4810      	ldr	r0, [pc, #64]	; (800025c <main+0x94>)
 800021c:	f000 fd44 	bl	8000ca8 <HAL_ADC_Start>
	       // Poll ADC1 Perihperal & TimeOut = 1mSec
	        HAL_ADC_PollForConversion(&hadc1, 1);
 8000220:	2101      	movs	r1, #1
 8000222:	480e      	ldr	r0, [pc, #56]	; (800025c <main+0x94>)
 8000224:	f000 fe56 	bl	8000ed4 <HAL_ADC_PollForConversion>
	       // Read The ADC Conversion Result & Map It To PWM DutyCycle
	        AD_RES = HAL_ADC_GetValue(&hadc1);
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <main+0x94>)
 800022a:	f000 ff55 	bl	80010d8 <HAL_ADC_GetValue>
 800022e:	4603      	mov	r3, r0
 8000230:	b29a      	uxth	r2, r3
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <main+0xa0>)
 8000234:	801a      	strh	r2, [r3, #0]
	        TIM2->CCR1 = (AD_RES-Vamb)*DC_Multiplier;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0xa0>)
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <main+0x98>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0x9c>)
 8000244:	8812      	ldrh	r2, [r2, #0]
 8000246:	fb03 f202 	mul.w	r2, r3, r2
 800024a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
	        HAL_Delay(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fb25 	bl	80008a0 <HAL_Delay>
	        HAL_ADC_Start(&hadc1);
 8000256:	e7e0      	b.n	800021a <main+0x52>
 8000258:	20000078 	.word	0x20000078
 800025c:	20000028 	.word	0x20000028
 8000260:	200000c6 	.word	0x200000c6
 8000264:	200000c8 	.word	0x200000c8
 8000268:	200000c4 	.word	0x200000c4

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b09e      	sub	sp, #120	; 0x78
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f004 fa8e 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	463b      	mov	r3, r7
 8000292:	223c      	movs	r2, #60	; 0x3c
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fa80 	bl	800479c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	2302      	movs	r3, #2
 800029e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ac:	2300      	movs	r3, #0
 80002ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fe3a 	bl	8001f34 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002c6:	f000 f965 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fe63 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002f0:	f000 f950 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	4618      	mov	r0, r3
 8000302:	f003 f83b 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800030c:	f000 f942 	bl	8000594 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3778      	adds	r7, #120	; 0x78
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800031e:	f107 031c 	add.w	r3, r7, #28
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
 8000338:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033a:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800033c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000340:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000342:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034e:	4b29      	ldr	r3, [pc, #164]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000356:	2200      	movs	r2, #0
 8000358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035a:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800036a:	2201      	movs	r2, #1
 800036c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036e:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000376:	2201      	movs	r2, #1
 8000378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800037c:	2200      	movs	r2, #0
 800037e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000384:	2204      	movs	r2, #4
 8000386:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_ADC1_Init+0xdc>)
 800038a:	2200      	movs	r2, #0
 800038c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000394:	4817      	ldr	r0, [pc, #92]	; (80003f4 <MX_ADC1_Init+0xdc>)
 8000396:	f000 faa7 	bl	80008e8 <HAL_ADC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003a0:	f000 f8f8 	bl	8000594 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a8:	f107 031c 	add.w	r3, r7, #28
 80003ac:	4619      	mov	r1, r3
 80003ae:	4811      	ldr	r0, [pc, #68]	; (80003f4 <MX_ADC1_Init+0xdc>)
 80003b0:	f001 f98c 	bl	80016cc <HAL_ADCEx_MultiModeConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ba:	f000 f8eb 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003be:	2307      	movs	r3, #7
 80003c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <MX_ADC1_Init+0xdc>)
 80003dc:	f000 fe8a 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003e6:	f000 f8d5 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	3728      	adds	r7, #40	; 0x28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000028 	.word	0x20000028

080003f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08e      	sub	sp, #56	; 0x38
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040c:	f107 031c 	add.w	r3, r7, #28
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <MX_TIM2_Init+0xe8>)
 800042c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000430:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_TIM2_Init+0xe8>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_TIM2_Init+0xe8>)
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000452:	4823      	ldr	r0, [pc, #140]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000454:	f003 f942 	bl	80036dc <HAL_TIM_Base_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800045e:	f000 f899 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4619      	mov	r1, r3
 800046e:	481c      	ldr	r0, [pc, #112]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000470:	f003 fc00 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800047a:	f000 f88b 	bl	8000594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800047e:	4818      	ldr	r0, [pc, #96]	; (80004e0 <MX_TIM2_Init+0xe8>)
 8000480:	f003 f983 	bl	800378a <HAL_TIM_PWM_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800048a:	f000 f883 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	4619      	mov	r1, r3
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <MX_TIM2_Init+0xe8>)
 800049e:	f004 f8d9 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004a8:	f000 f874 	bl	8000594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ac:	2360      	movs	r3, #96	; 0x60
 80004ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	4619      	mov	r1, r3
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <MX_TIM2_Init+0xe8>)
 80004c4:	f003 fac2 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80004ce:	f000 f861 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <MX_TIM2_Init+0xe8>)
 80004d4:	f000 f8e4 	bl	80006a0 <HAL_TIM_MspPostInit>

}
 80004d8:	bf00      	nop
 80004da:	3738      	adds	r7, #56	; 0x38
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000078 	.word	0x20000078

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_GPIO_Init+0xa8>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <MX_GPIO_Init+0xa8>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0xa8>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xa8>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a1d      	ldr	r2, [pc, #116]	; (800058c <MX_GPIO_Init+0xa8>)
 8000518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_GPIO_Init+0xa8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_GPIO_Init+0xa8>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a17      	ldr	r2, [pc, #92]	; (800058c <MX_GPIO_Init+0xa8>)
 8000530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <MX_GPIO_Init+0xa8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_GPIO_Init+0xa8>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a11      	ldr	r2, [pc, #68]	; (800058c <MX_GPIO_Init+0xa8>)
 8000548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_GPIO_Init+0xa8>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <MX_GPIO_Init+0xac>)
 8000562:	f001 fccf 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0xac>)
 8000580:	f001 fb46 	bl	8001c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	48001000 	.word	0x48001000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_MspInit+0x44>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000608:	d123      	bne.n	8000652 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_ADC_MspInit+0x74>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_ADC_MspInit+0x74>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063e:	2303      	movs	r3, #3
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <HAL_ADC_MspInit+0x78>)
 800064e:	f001 fadf 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000674:	d10b      	bne.n	800068e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c0:	d11c      	bne.n	80006fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_TIM_MspPostInit+0x64>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <HAL_TIM_MspPostInit+0x64>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_TIM_MspPostInit+0x64>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f001 fa8a 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f884 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff ffea 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f003 ffd1 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff fd09 	bl	80001c8 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c4:	080047fc 	.word	0x080047fc
  ldr r2, =_sbss
 80007c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007cc:	200000d0 	.word	0x200000d0

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_Init+0x28>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_Init+0x28>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f001 f9df 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff fed6 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f001 f9e9 	bl	8001bf6 <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f001 f9bf 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	200000cc 	.word	0x200000cc

08000888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;  
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	200000cc 	.word	0x200000cc

080008a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff ffee 	bl	8000888 <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffde 	bl	8000888 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008

080008e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09a      	sub	sp, #104	; 0x68
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	e1c9      	b.n	8000c9c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	2b00      	cmp	r3, #0
 8000918:	d176      	bne.n	8000a08 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	2b00      	cmp	r3, #0
 8000920:	d152      	bne.n	80009c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe53 	bl	80005e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d13b      	bne.n	80009c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f001 f811 	bl	8001978 <ADC_Disable>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d12f      	bne.n	80009c8 <HAL_ADC_Init+0xe0>
 8000968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800096c:	2b00      	cmp	r3, #0
 800096e:	d12b      	bne.n	80009c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000978:	f023 0302 	bic.w	r3, r3, #2
 800097c:	f043 0202 	orr.w	r2, r3, #2
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000992:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009a4:	4b86      	ldr	r3, [pc, #536]	; (8000bc0 <HAL_ADC_Init+0x2d8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a86      	ldr	r2, [pc, #536]	; (8000bc4 <HAL_ADC_Init+0x2dc>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	0c9a      	lsrs	r2, r3, #18
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009ba:	e002      	b.n	80009c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f9      	bne.n	80009bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009e4:	d110      	bne.n	8000a08 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f023 0312 	bic.w	r3, r3, #18
 80009ee:	f043 0210 	orr.w	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f043 0201 	orr.w	r2, r3, #1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 8136 	bne.w	8000c82 <HAL_ADC_Init+0x39a>
 8000a16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 8131 	bne.w	8000c82 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f040 8129 	bne.w	8000c82 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a38:	f043 0202 	orr.w	r2, r3, #2
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a48:	d004      	beq.n	8000a54 <HAL_ADC_Init+0x16c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <HAL_ADC_Init+0x2e0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <HAL_ADC_Init+0x170>
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_ADC_Init+0x2e4>)
 8000a56:	e000      	b.n	8000a5a <HAL_ADC_Init+0x172>
 8000a58:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <HAL_ADC_Init+0x2e8>)
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a64:	d102      	bne.n	8000a6c <HAL_ADC_Init+0x184>
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_ADC_Init+0x2e0>)
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e01a      	b.n	8000aa2 <HAL_ADC_Init+0x1ba>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a55      	ldr	r2, [pc, #340]	; (8000bc8 <HAL_ADC_Init+0x2e0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d103      	bne.n	8000a7e <HAL_ADC_Init+0x196>
 8000a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e011      	b.n	8000aa2 <HAL_ADC_Init+0x1ba>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a54      	ldr	r2, [pc, #336]	; (8000bd4 <HAL_ADC_Init+0x2ec>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d102      	bne.n	8000a8e <HAL_ADC_Init+0x1a6>
 8000a88:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <HAL_ADC_Init+0x2f0>)
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e009      	b.n	8000aa2 <HAL_ADC_Init+0x1ba>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <HAL_ADC_Init+0x2f0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d102      	bne.n	8000a9e <HAL_ADC_Init+0x1b6>
 8000a98:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <HAL_ADC_Init+0x2ec>)
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e001      	b.n	8000aa2 <HAL_ADC_Init+0x1ba>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_ADC_Init+0x1da>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d101      	bne.n	8000ac2 <HAL_ADC_Init+0x1da>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <HAL_ADC_Init+0x1dc>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d11c      	bne.n	8000b02 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d010      	beq.n	8000af0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d107      	bne.n	8000aea <HAL_ADC_Init+0x202>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_Init+0x202>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <HAL_ADC_Init+0x204>
 8000aea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d108      	bne.n	8000b02 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7e5b      	ldrb	r3, [r3, #25]
 8000b06:	035b      	lsls	r3, r3, #13
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d002      	beq.n	8000b16 <HAL_ADC_Init+0x22e>
 8000b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b14:	e000      	b.n	8000b18 <HAL_ADC_Init+0x230>
 8000b16:	2200      	movs	r2, #0
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d11b      	bne.n	8000b6e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7e5b      	ldrb	r3, [r3, #25]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d109      	bne.n	8000b52 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	3b01      	subs	r3, #1
 8000b44:	045a      	lsls	r2, r3, #17
 8000b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8000b50:	e00d      	b.n	8000b6e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b5a:	f043 0220 	orr.w	r2, r3, #32
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f043 0201 	orr.w	r2, r3, #1
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d03a      	beq.n	8000bec <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_ADC_Init+0x2ec>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d004      	beq.n	8000b8a <HAL_ADC_Init+0x2a2>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_ADC_Init+0x2f0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d128      	bne.n	8000bdc <HAL_ADC_Init+0x2f4>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000b92:	d012      	beq.n	8000bba <HAL_ADC_Init+0x2d2>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_ADC_Init+0x2cc>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ba6:	d002      	beq.n	8000bae <HAL_ADC_Init+0x2c6>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	e018      	b.n	8000be0 <HAL_ADC_Init+0x2f8>
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	e015      	b.n	8000be0 <HAL_ADC_Init+0x2f8>
 8000bb4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bb8:	e012      	b.n	8000be0 <HAL_ADC_Init+0x2f8>
 8000bba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bbe:	e00f      	b.n	8000be0 <HAL_ADC_Init+0x2f8>
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	50000100 	.word	0x50000100
 8000bcc:	50000300 	.word	0x50000300
 8000bd0:	50000700 	.word	0x50000700
 8000bd4:	50000400 	.word	0x50000400
 8000bd8:	50000500 	.word	0x50000500
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000be8:	4313      	orrs	r3, r2
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d114      	bne.n	8000c24 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c08:	f023 0302 	bic.w	r3, r3, #2
 8000c0c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7e1b      	ldrb	r3, [r3, #24]
 8000c12:	039a      	lsls	r2, r3, #14
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c20:	4313      	orrs	r3, r2
 8000c22:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_ADC_Init+0x3bc>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c34:	430b      	orrs	r3, r1
 8000c36:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d10c      	bne.n	8000c5a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f023 010f 	bic.w	r1, r3, #15
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
 8000c58:	e007      	b.n	8000c6a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 020f 	bic.w	r2, r2, #15
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	f043 0201 	orr.w	r2, r3, #1
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c80:	e00a      	b.n	8000c98 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f023 0312 	bic.w	r3, r3, #18
 8000c8a:	f043 0210 	orr.w	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3768      	adds	r7, #104	; 0x68
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	fff0c007 	.word	0xfff0c007

08000ca8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80f9 	bne.w	8000eb6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start+0x2a>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e0f4      	b.n	8000ebc <HAL_ADC_Start+0x214>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 fde8 	bl	80018b0 <ADC_Enable>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 80e0 	bne.w	8000eac <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d08:	d004      	beq.n	8000d14 <HAL_ADC_Start+0x6c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a6d      	ldr	r2, [pc, #436]	; (8000ec4 <HAL_ADC_Start+0x21c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d106      	bne.n	8000d22 <HAL_ADC_Start+0x7a>
 8000d14:	4b6c      	ldr	r3, [pc, #432]	; (8000ec8 <HAL_ADC_Start+0x220>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 031f 	and.w	r3, r3, #31
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d010      	beq.n	8000d42 <HAL_ADC_Start+0x9a>
 8000d20:	e005      	b.n	8000d2e <HAL_ADC_Start+0x86>
 8000d22:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_ADC_Start+0x224>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <HAL_ADC_Start+0x9a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d36:	d004      	beq.n	8000d42 <HAL_ADC_Start+0x9a>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a64      	ldr	r2, [pc, #400]	; (8000ed0 <HAL_ADC_Start+0x228>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d115      	bne.n	8000d6e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d036      	beq.n	8000dca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d6c:	e02d      	b.n	8000dca <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d82:	d004      	beq.n	8000d8e <HAL_ADC_Start+0xe6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_ADC_Start+0x21c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10a      	bne.n	8000da4 <HAL_ADC_Start+0xfc>
 8000d8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2301      	movne	r3, #1
 8000d9e:	2300      	moveq	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	e008      	b.n	8000db6 <HAL_ADC_Start+0x10e>
 8000da4:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <HAL_ADC_Start+0x228>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dd6:	d106      	bne.n	8000de6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	f023 0206 	bic.w	r2, r3, #6
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	645a      	str	r2, [r3, #68]	; 0x44
 8000de4:	e002      	b.n	8000dec <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	221c      	movs	r2, #28
 8000dfa:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e04:	d004      	beq.n	8000e10 <HAL_ADC_Start+0x168>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <HAL_ADC_Start+0x21c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d106      	bne.n	8000e1e <HAL_ADC_Start+0x176>
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_ADC_Start+0x220>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d03e      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e1c:	e005      	b.n	8000e2a <HAL_ADC_Start+0x182>
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_ADC_Start+0x224>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d037      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e32:	d004      	beq.n	8000e3e <HAL_ADC_Start+0x196>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_ADC_Start+0x21c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d106      	bne.n	8000e4c <HAL_ADC_Start+0x1a4>
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_ADC_Start+0x220>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d027      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e4a:	e005      	b.n	8000e58 <HAL_ADC_Start+0x1b0>
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_ADC_Start+0x224>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d020      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e60:	d004      	beq.n	8000e6c <HAL_ADC_Start+0x1c4>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_ADC_Start+0x21c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d106      	bne.n	8000e7a <HAL_ADC_Start+0x1d2>
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_ADC_Start+0x220>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d010      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e78:	e005      	b.n	8000e86 <HAL_ADC_Start+0x1de>
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_ADC_Start+0x224>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	2b09      	cmp	r3, #9
 8000e84:	d009      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8e:	d004      	beq.n	8000e9a <HAL_ADC_Start+0x1f2>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_ADC_Start+0x228>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10f      	bne.n	8000eba <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0204 	orr.w	r2, r2, #4
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	e006      	b.n	8000eba <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000eb4:	e001      	b.n	8000eba <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	50000100 	.word	0x50000100
 8000ec8:	50000300 	.word	0x50000300
 8000ecc:	50000700 	.word	0x50000700
 8000ed0:	50000400 	.word	0x50000400

08000ed4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d102      	bne.n	8000ef0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000eea:	2308      	movs	r3, #8
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e03a      	b.n	8000f66 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef8:	d004      	beq.n	8000f04 <HAL_ADC_PollForConversion+0x30>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_ADC_PollForConversion+0x1f4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_PollForConversion+0x34>
 8000f04:	4b71      	ldr	r3, [pc, #452]	; (80010cc <HAL_ADC_PollForConversion+0x1f8>)
 8000f06:	e000      	b.n	8000f0a <HAL_ADC_PollForConversion+0x36>
 8000f08:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <HAL_ADC_PollForConversion+0x1fc>)
 8000f0a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d112      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d11d      	bne.n	8000f62 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f043 0220 	orr.w	r2, r3, #32
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0bf      	b.n	80010be <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00b      	beq.n	8000f62 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f043 0220 	orr.w	r2, r3, #32
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0ad      	b.n	80010be <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f62:	230c      	movs	r3, #12
 8000f64:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6e:	d004      	beq.n	8000f7a <HAL_ADC_PollForConversion+0xa6>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a54      	ldr	r2, [pc, #336]	; (80010c8 <HAL_ADC_PollForConversion+0x1f4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d106      	bne.n	8000f88 <HAL_ADC_PollForConversion+0xb4>
 8000f7a:	4b54      	ldr	r3, [pc, #336]	; (80010cc <HAL_ADC_PollForConversion+0x1f8>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d010      	beq.n	8000fa8 <HAL_ADC_PollForConversion+0xd4>
 8000f86:	e005      	b.n	8000f94 <HAL_ADC_PollForConversion+0xc0>
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_ADC_PollForConversion+0x1fc>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <HAL_ADC_PollForConversion+0xd4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9c:	d004      	beq.n	8000fa8 <HAL_ADC_PollForConversion+0xd4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_ADC_PollForConversion+0x200>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d104      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e00f      	b.n	8000fd2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fba:	d004      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0xf2>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <HAL_ADC_PollForConversion+0x1f4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d102      	bne.n	8000fcc <HAL_ADC_PollForConversion+0xf8>
 8000fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fca:	e000      	b.n	8000fce <HAL_ADC_PollForConversion+0xfa>
 8000fcc:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_ADC_PollForConversion+0x200>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000fd2:	f7ff fc59 	bl	8000888 <HAL_GetTick>
 8000fd6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fd8:	e021      	b.n	800101e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d01d      	beq.n	800101e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_PollForConversion+0x124>
 8000fe8:	f7ff fc4e 	bl	8000888 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d212      	bcs.n	800101e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f043 0204 	orr.w	r2, r3, #4
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e04f      	b.n	80010be <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0d6      	beq.n	8000fda <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001042:	2b00      	cmp	r3, #0
 8001044:	d131      	bne.n	80010aa <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12c      	bne.n	80010aa <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b08      	cmp	r3, #8
 800105c:	d125      	bne.n	80010aa <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d112      	bne.n	8001092 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d112      	bne.n	80010aa <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
 8001090:	e00b      	b.n	80010aa <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0220 	orr.w	r2, r3, #32
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	50000100 	.word	0x50000100
 80010cc:	50000300 	.word	0x50000300
 80010d0:	50000700 	.word	0x50000700
 80010d4:	50000400 	.word	0x50000400

080010d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b09b      	sub	sp, #108	; 0x6c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x22>
 8001112:	2302      	movs	r3, #2
 8001114:	e2ca      	b.n	80016ac <HAL_ADC_ConfigChannel+0x5b8>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 82ae 	bne.w	800168a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b04      	cmp	r3, #4
 8001134:	d81c      	bhi.n	8001170 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	461a      	mov	r2, r3
 800114a:	231f      	movs	r3, #31
 800114c:	4093      	lsls	r3, r2
 800114e:	43db      	mvns	r3, r3
 8001150:	4019      	ands	r1, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
 800116e:	e063      	b.n	8001238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d81e      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	3b1e      	subs	r3, #30
 800118c:	221f      	movs	r2, #31
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	4019      	ands	r1, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	e040      	b.n	8001238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b0e      	cmp	r3, #14
 80011bc:	d81e      	bhi.n	80011fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	3b3c      	subs	r3, #60	; 0x3c
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3b3c      	subs	r3, #60	; 0x3c
 80011ee:	fa00 f203 	lsl.w	r2, r0, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
 80011fa:	e01d      	b.n	8001238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	3b5a      	subs	r3, #90	; 0x5a
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	4019      	ands	r1, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	3b5a      	subs	r3, #90	; 0x5a
 800122c:	fa00 f203 	lsl.w	r2, r0, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 80e5 	bne.w	8001412 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d91c      	bls.n	800128a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6999      	ldr	r1, [r3, #24]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	3b1e      	subs	r3, #30
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	3b1e      	subs	r3, #30
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	e019      	b.n	80012be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6959      	ldr	r1, [r3, #20]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4019      	ands	r1, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6898      	ldr	r0, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	fa00 f203 	lsl.w	r2, r0, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d84f      	bhi.n	8001380 <HAL_ADC_ConfigChannel+0x28c>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	0800131b 	.word	0x0800131b
 80012f0:	0800133d 	.word	0x0800133d
 80012f4:	0800135f 	.word	0x0800135f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012fe:	4b9a      	ldr	r3, [pc, #616]	; (8001568 <HAL_ADC_ConfigChannel+0x474>)
 8001300:	4013      	ands	r3, r2
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	0691      	lsls	r1, r2, #26
 8001308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130a:	430a      	orrs	r2, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001316:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001318:	e07e      	b.n	8001418 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001320:	4b91      	ldr	r3, [pc, #580]	; (8001568 <HAL_ADC_ConfigChannel+0x474>)
 8001322:	4013      	ands	r3, r2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	0691      	lsls	r1, r2, #26
 800132a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800132c:	430a      	orrs	r2, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001338:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800133a:	e06d      	b.n	8001418 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_ADC_ConfigChannel+0x474>)
 8001344:	4013      	ands	r3, r2
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	0691      	lsls	r1, r2, #26
 800134c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800134e:	430a      	orrs	r2, r1
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800135a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800135c:	e05c      	b.n	8001418 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001364:	4b80      	ldr	r3, [pc, #512]	; (8001568 <HAL_ADC_ConfigChannel+0x474>)
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	0691      	lsls	r1, r2, #26
 800136e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001370:	430a      	orrs	r2, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800137c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800137e:	e04b      	b.n	8001418 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	069b      	lsls	r3, r3, #26
 8001390:	429a      	cmp	r2, r3
 8001392:	d107      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	069b      	lsls	r3, r3, #26
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d107      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	069b      	lsls	r3, r3, #26
 80013d8:	429a      	cmp	r2, r3
 80013da:	d107      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	069b      	lsls	r3, r3, #26
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d10a      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001410:	e001      	b.n	8001416 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001412:	bf00      	nop
 8001414:	e000      	b.n	8001418 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001416:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d108      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x344>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x344>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_ADC_ConfigChannel+0x346>
 8001438:	2300      	movs	r3, #0
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 8130 	bne.w	80016a0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d00f      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001466:	e049      	b.n	80014fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b09      	cmp	r3, #9
 8001488:	d91c      	bls.n	80014c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6999      	ldr	r1, [r3, #24]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3b1b      	subs	r3, #27
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4019      	ands	r1, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6898      	ldr	r0, [r3, #8]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	3b1b      	subs	r3, #27
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	619a      	str	r2, [r3, #24]
 80014c2:	e01b      	b.n	80014fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6959      	ldr	r1, [r3, #20]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	4019      	ands	r1, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6898      	ldr	r0, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	fa00 f203 	lsl.w	r2, r0, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001504:	d004      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x41c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_ADC_ConfigChannel+0x478>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x420>
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_ADC_ConfigChannel+0x47c>)
 8001512:	e000      	b.n	8001516 <HAL_ADC_ConfigChannel+0x422>
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_ADC_ConfigChannel+0x480>)
 8001516:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b10      	cmp	r3, #16
 800151e:	d105      	bne.n	800152c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001530:	2b11      	cmp	r3, #17
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001544:	2b12      	cmp	r3, #18
 8001546:	f040 80ab 	bne.w	80016a0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800154a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80a4 	bne.w	80016a0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001560:	d10a      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x484>
 8001562:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_ADC_ConfigChannel+0x478>)
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e022      	b.n	80015ae <HAL_ADC_ConfigChannel+0x4ba>
 8001568:	83fff000 	.word	0x83fff000
 800156c:	50000100 	.word	0x50000100
 8001570:	50000300 	.word	0x50000300
 8001574:	50000700 	.word	0x50000700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_ADC_ConfigChannel+0x5c4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <HAL_ADC_ConfigChannel+0x496>
 8001582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e011      	b.n	80015ae <HAL_ADC_ConfigChannel+0x4ba>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_ADC_ConfigChannel+0x5c8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <HAL_ADC_ConfigChannel+0x4a6>
 8001594:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e009      	b.n	80015ae <HAL_ADC_ConfigChannel+0x4ba>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_ADC_ConfigChannel+0x5cc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d102      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x4b6>
 80015a4:	4b45      	ldr	r3, [pc, #276]	; (80016bc <HAL_ADC_ConfigChannel+0x5c8>)
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e001      	b.n	80015ae <HAL_ADC_ConfigChannel+0x4ba>
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4da>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4da>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x4dc>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d150      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x502>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x502>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x504>
 80015f6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d13c      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b10      	cmp	r3, #16
 8001602:	d11d      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x54c>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800160c:	d118      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001618:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2a      	ldr	r2, [pc, #168]	; (80016c8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9a      	lsrs	r2, r3, #18
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800163e:	e02e      	b.n	800169e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b11      	cmp	r3, #17
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x56c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001650:	d106      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800165a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800165e:	e01e      	b.n	800169e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d11a      	bne.n	800169e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001672:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001674:	e013      	b.n	800169e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f043 0220 	orr.w	r2, r3, #32
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001688:	e00a      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800169c:	e000      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800169e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	376c      	adds	r7, #108	; 0x6c
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	50000100 	.word	0x50000100
 80016bc:	50000400 	.word	0x50000400
 80016c0:	50000500 	.word	0x50000500
 80016c4:	20000000 	.word	0x20000000
 80016c8:	431bde83 	.word	0x431bde83

080016cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b099      	sub	sp, #100	; 0x64
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e4:	d102      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016e6:	4b6d      	ldr	r3, [pc, #436]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	e01a      	b.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d103      	bne.n	80016fe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80016f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	e011      	b.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d102      	bne.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	e009      	b.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001718:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	e001      	b.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b0      	b.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001736:	2302      	movs	r3, #2
 8001738:	e0a9      	b.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 808d 	bne.w	800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 8086 	bne.w	800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001768:	d004      	beq.n	8001774 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001776:	e000      	b.n	800177a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800177a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d040      	beq.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001796:	035b      	lsls	r3, r3, #13
 8001798:	430b      	orrs	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800179e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d15c      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80017e2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d14b      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017f0:	f023 030f 	bic.w	r3, r3, #15
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6892      	ldr	r2, [r2, #8]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001802:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001804:	e03c      	b.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001810:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001832:	2300      	movs	r3, #0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d123      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001854:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d112      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800185a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001862:	f023 030f 	bic.w	r3, r3, #15
 8001866:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001868:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800186a:	e009      	b.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f043 0220 	orr.w	r2, r3, #32
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800187e:	e000      	b.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001880:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800188a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800188e:	4618      	mov	r0, r3
 8001890:	3764      	adds	r7, #100	; 0x64
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	50000100 	.word	0x50000100
 80018a0:	50000400 	.word	0x50000400
 80018a4:	50000500 	.word	0x50000500
 80018a8:	50000300 	.word	0x50000300
 80018ac:	50000700 	.word	0x50000700

080018b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <ADC_Enable+0x2c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <ADC_Enable+0x2c>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <ADC_Enable+0x2e>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d143      	bne.n	800196a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <ADC_Enable+0xc4>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00d      	beq.n	800190c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e02f      	b.n	800196c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800191c:	f7fe ffb4 	bl	8000888 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001922:	e01b      	b.n	800195c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001924:	f7fe ffb0 	bl	8000888 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d914      	bls.n	800195c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d00d      	beq.n	800195c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d1dc      	bne.n	8001924 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	8000003f 	.word	0x8000003f

08001978 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <ADC_Disable+0x2c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <ADC_Disable+0x2c>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <ADC_Disable+0x2e>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d047      	beq.n	8001a3a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030d 	and.w	r3, r3, #13
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10f      	bne.n	80019d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0202 	orr.w	r2, r2, #2
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2203      	movs	r2, #3
 80019ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019d0:	f7fe ff5a 	bl	8000888 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019d6:	e029      	b.n	8001a2c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f043 0210 	orr.w	r2, r3, #16
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e023      	b.n	8001a3c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019f4:	f7fe ff48 	bl	8000888 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d914      	bls.n	8001a2c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10d      	bne.n	8001a2c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e007      	b.n	8001a3c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d0dc      	beq.n	80019f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff47 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff5c 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffb0 	bl	8001b64 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e154      	b.n	8001eca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8146 	beq.w	8001ec4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d005      	beq.n	8001c50 <HAL_GPIO_Init+0x40>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d130      	bne.n	8001cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c86:	2201      	movs	r2, #1
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 0201 	and.w	r2, r3, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d017      	beq.n	8001cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d123      	bne.n	8001d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	6939      	ldr	r1, [r7, #16]
 8001d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0203 	and.w	r2, r3, #3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a0 	beq.w	8001ec4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_GPIO_Init+0x2d8>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_GPIO_Init+0x2d8>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_GPIO_Init+0x2d8>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9c:	4a53      	ldr	r2, [pc, #332]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc6:	d019      	beq.n	8001dfc <HAL_GPIO_Init+0x1ec>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <HAL_GPIO_Init+0x2e0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1e8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_GPIO_Init+0x2e4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1e0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <HAL_GPIO_Init+0x2ec>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1dc>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e008      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e004      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	f002 0203 	and.w	r2, r2, #3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4093      	lsls	r3, r2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0e:	4937      	ldr	r1, [pc, #220]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e40:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e94:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f aea3 	bne.w	8001c20 <HAL_GPIO_Init+0x10>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	48000c00 	.word	0x48000c00
 8001efc:	48001000 	.word	0x48001000
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f001 b823 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 817d 	beq.w	800226a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f70:	4bbc      	ldr	r3, [pc, #752]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4bb9      	ldr	r3, [pc, #740]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d15c      	bne.n	8002042 <HAL_RCC_OscConfig+0x10e>
 8001f88:	4bb6      	ldr	r3, [pc, #728]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d155      	bne.n	8002042 <HAL_RCC_OscConfig+0x10e>
 8001f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001faa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x94>
 8001fc2:	4ba8      	ldr	r3, [pc, #672]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e015      	b.n	8001ff4 <HAL_RCC_OscConfig+0xc0>
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fe4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ffc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002000:	fa92 f2a2 	rbit	r2, r2
 8002004:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002008:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 811f 	beq.w	8002268 <HAL_RCC_OscConfig+0x334>
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8116 	bne.w	8002268 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f000 bfaf 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x12e>
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a82      	ldr	r2, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e036      	b.n	80020d0 <HAL_RCC_OscConfig+0x19c>
 8002062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x158>
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7b      	ldr	r2, [pc, #492]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b79      	ldr	r3, [pc, #484]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a78      	ldr	r2, [pc, #480]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e021      	b.n	80020d0 <HAL_RCC_OscConfig+0x19c>
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x184>
 800209e:	4b71      	ldr	r3, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a70      	ldr	r2, [pc, #448]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6e      	ldr	r3, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6d      	ldr	r2, [pc, #436]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0x19c>
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d0:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f023 020f 	bic.w	r2, r3, #15
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	495f      	ldr	r1, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d059      	beq.n	80021ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fbc5 	bl	8000888 <HAL_GetTick>
 80020fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe fbc0 	bl	8000888 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d902      	bls.n	800211a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	f000 bf43 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 800211a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800212e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0x218>
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	e015      	b.n	8002178 <HAL_RCC_OscConfig+0x244>
 800214c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002150:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002164:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002168:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800217c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002180:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800218c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ab      	beq.n	8002104 <HAL_RCC_OscConfig+0x1d0>
 80021ac:	e05d      	b.n	800226a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fb6b 	bl	8000888 <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fb66 	bl	8000888 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bee9 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x2cc>
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x2f8>
 8002200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002204:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002218:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800221c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002230:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002234:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002238:	fa92 f2a2 	rbit	r2, r2
 800223c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002240:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ab      	bne.n	80021b8 <HAL_RCC_OscConfig+0x284>
 8002260:	e003      	b.n	800226a <HAL_RCC_OscConfig+0x336>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 817d 	beq.w	800257a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002280:	4ba6      	ldr	r3, [pc, #664]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d172      	bne.n	800237e <HAL_RCC_OscConfig+0x44a>
 8002298:	4ba0      	ldr	r3, [pc, #640]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d16c      	bne.n	800237e <HAL_RCC_OscConfig+0x44a>
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3a0>
 80022ce:	4b93      	ldr	r3, [pc, #588]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x3c8>
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2202      	movs	r2, #2
 80022fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002302:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002306:	fa92 f2a2 	rbit	r2, r2
 800230a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800230e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002312:	fab2 f282 	clz	r2, r2
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f042 0220 	orr.w	r2, r2, #32
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f002 021f 	and.w	r2, r2, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCC_OscConfig+0x410>
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d002      	beq.n	8002344 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	f000 be2e 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b75      	ldr	r3, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	21f8      	movs	r1, #248	; 0xf8
 800235a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002362:	fa91 f1a1 	rbit	r1, r1
 8002366:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800236a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800236e:	fab1 f181 	clz	r1, r1
 8002372:	b2c9      	uxtb	r1, r1
 8002374:	408b      	lsls	r3, r1
 8002376:	4969      	ldr	r1, [pc, #420]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237c:	e0fd      	b.n	800257a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8088 	beq.w	80024a0 <HAL_RCC_OscConfig+0x56c>
 8002390:	2301      	movs	r3, #1
 8002392:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	461a      	mov	r2, r3
 80023b8:	2301      	movs	r3, #1
 80023ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fa64 	bl	8000888 <HAL_GetTick>
 80023c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fa5f 	bl	8000888 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d902      	bls.n	80023dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	f000 bde2 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x4d8>
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x500>
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002424:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002430:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2202      	movs	r2, #2
 8002436:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800243a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002446:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800244a:	fab2 f282 	clz	r2, r2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f042 0220 	orr.w	r2, r2, #32
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f002 021f 	and.w	r2, r2, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f202 	lsl.w	r2, r1, r2
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0af      	beq.n	80023c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	21f8      	movs	r1, #248	; 0xf8
 800247c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002484:	fa91 f1a1 	rbit	r1, r1
 8002488:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800248c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002490:	fab1 f181 	clz	r1, r1
 8002494:	b2c9      	uxtb	r1, r1
 8002496:	408b      	lsls	r3, r1
 8002498:	4920      	ldr	r1, [pc, #128]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
 800249e:	e06c      	b.n	800257a <HAL_RCC_OscConfig+0x646>
 80024a0:	2301      	movs	r3, #1
 80024a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe f9dc 	bl	8000888 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d6:	f7fe f9d7 	bl	8000888 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f000 bd5a 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80024fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d104      	bne.n	8002520 <HAL_RCC_OscConfig+0x5ec>
 8002516:	4b01      	ldr	r3, [pc, #4]	; (800251c <HAL_RCC_OscConfig+0x5e8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
 800251c:	40021000 	.word	0x40021000
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002532:	2302      	movs	r3, #2
 8002534:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002544:	4bc8      	ldr	r3, [pc, #800]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	2202      	movs	r2, #2
 800254a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800254e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002552:	fa92 f2a2 	rbit	r2, r2
 8002556:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800255a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800255e:	fab2 f282 	clz	r2, r2
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f042 0220 	orr.w	r2, r2, #32
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f002 021f 	and.w	r2, r2, #31
 800256e:	2101      	movs	r1, #1
 8002570:	fa01 f202 	lsl.w	r2, r1, r2
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1ad      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8110 	beq.w	80027b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d079      	beq.n	8002694 <HAL_RCC_OscConfig+0x760>
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	4bab      	ldr	r3, [pc, #684]	; (800286c <HAL_RCC_OscConfig+0x938>)
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	461a      	mov	r2, r3
 80025c6:	2301      	movs	r3, #1
 80025c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe f95d 	bl	8000888 <HAL_GetTick>
 80025ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe f958 	bl	8000888 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d902      	bls.n	80025ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	f000 bcdb 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 80025ea:	2302      	movs	r3, #2
 80025ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002604:	2202      	movs	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 8002646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002650:	2102      	movs	r1, #2
 8002652:	6019      	str	r1, [r3, #0]
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f1a3 	rbit	r1, r3
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800266a:	6019      	str	r1, [r3, #0]
  return result;
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0a0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x6a0>
 8002692:	e08d      	b.n	80027b0 <HAL_RCC_OscConfig+0x87c>
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b68      	ldr	r3, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x938>)
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7fe f8d7 	bl	8000888 <HAL_GetTick>
 80026da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe f8d2 	bl	8000888 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d902      	bls.n	80026f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f000 bc55 	b.w	8002fa0 <HAL_RCC_OscConfig+0x106c>
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026fe:	2202      	movs	r2, #2
 8002700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002760:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 8002764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800276e:	2102      	movs	r1, #2
 8002770:	6019      	str	r1, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f1a3 	rbit	r1, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002788:	6019      	str	r1, [r3, #0]
  return result;
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d197      	bne.n	80026e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 81a1 	beq.w	8002b08 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d116      	bne.n	8002806 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	61d3      	str	r3, [r2, #28]
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x93c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11a      	bne.n	8002848 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x93c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_RCC_OscConfig+0x93c>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe f833 	bl	8000888 <HAL_GetTick>
 8002822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	e009      	b.n	800283c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe f82e 	bl	8000888 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e3b1      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x93c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10d      	bne.n	8002874 <HAL_RCC_OscConfig+0x940>
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a02      	ldr	r2, [pc, #8]	; (8002868 <HAL_RCC_OscConfig+0x934>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e03c      	b.n	80028e0 <HAL_RCC_OscConfig+0x9ac>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	10908120 	.word	0x10908120
 8002870:	40007000 	.word	0x40007000
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x96a>
 8002884:	4bc1      	ldr	r3, [pc, #772]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4ac0      	ldr	r2, [pc, #768]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4bbe      	ldr	r3, [pc, #760]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4abd      	ldr	r2, [pc, #756]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e020      	b.n	80028e0 <HAL_RCC_OscConfig+0x9ac>
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x994>
 80028ae:	4bb7      	ldr	r3, [pc, #732]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4ab6      	ldr	r2, [pc, #728]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4bb4      	ldr	r3, [pc, #720]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4ab3      	ldr	r2, [pc, #716]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0x9ac>
 80028c8:	4bb0      	ldr	r3, [pc, #704]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4aaf      	ldr	r2, [pc, #700]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	4bad      	ldr	r3, [pc, #692]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4aac      	ldr	r2, [pc, #688]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80028da:	f023 0304 	bic.w	r3, r3, #4
 80028de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8081 	beq.w	80029f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fd ffc9 	bl	8000888 <HAL_GetTick>
 80028f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fd ffc4 	bl	8000888 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e345      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002940:	2202      	movs	r2, #2
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800295a:	601a      	str	r2, [r3, #0]
  return result;
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002964:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0xa4c>
 800297a:	4b84      	ldr	r3, [pc, #528]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	e013      	b.n	80029a8 <HAL_RCC_OscConfig+0xa74>
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	4b79      	ldr	r3, [pc, #484]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029b0:	2102      	movs	r1, #2
 80029b2:	6011      	str	r1, [r2, #0]
 80029b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	fa92 f1a2 	rbit	r1, r2
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029ca:	6011      	str	r1, [r2, #0]
  return result;
 80029cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d084      	beq.n	80028fc <HAL_RCC_OscConfig+0x9c8>
 80029f2:	e07f      	b.n	8002af4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fd ff48 	bl	8000888 <HAL_GetTick>
 80029f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fd ff43 	bl	8000888 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e2c4      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a1e:	2202      	movs	r2, #2
 8002a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f2a3 	rbit	r2, r3
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a42:	2202      	movs	r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a5c:	601a      	str	r2, [r3, #0]
  return result;
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_OscConfig+0xb4e>
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	e013      	b.n	8002aaa <HAL_RCC_OscConfig+0xb76>
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	fa92 f1a2 	rbit	r1, r2
 8002ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002acc:	6011      	str	r1, [r2, #0]
  return result;
 8002ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d184      	bne.n	80029fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8242 	beq.w	8002f9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_OscConfig+0xc58>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	f000 8213 	beq.w	8002f4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f040 8162 	bne.w	8002dfe <HAL_RCC_OscConfig+0xeca>
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b5e:	601a      	str	r2, [r3, #0]
  return result;
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fd fe82 	bl	8000888 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	e00c      	b.n	8002ba4 <HAL_RCC_OscConfig+0xc70>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fd fe7a 	bl	8000888 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1fd      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bc8:	601a      	str	r2, [r3, #0]
  return result;
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_OscConfig+0xcba>
 8002be8:	4bb0      	ldr	r3, [pc, #704]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e027      	b.n	8002c3e <HAL_RCC_OscConfig+0xd0a>
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	fa93 f2a3 	rbit	r2, r3
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4b9c      	ldr	r3, [pc, #624]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c4a:	6011      	str	r1, [r2, #0]
 8002c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	fa92 f1a2 	rbit	r1, r2
 8002c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c62:	6011      	str	r1, [r2, #0]
  return result;
 8002c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d182      	bne.n	8002b90 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8a:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	497f      	ldr	r1, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ce0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fdc6 	bl	8000888 <HAL_GetTick>
 8002cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	e009      	b.n	8002d16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fd fdc1 	bl	8000888 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e144      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d3a:	601a      	str	r2, [r3, #0]
  return result;
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0xe2c>
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e027      	b.n	8002db0 <HAL_RCC_OscConfig+0xe7c>
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f2a3 	rbit	r2, r3
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	fa92 f1a2 	rbit	r1, r2
 8002dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dd4:	6011      	str	r1, [r2, #0]
  return result;
 8002dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	fab2 f282 	clz	r2, r2
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f042 0220 	orr.w	r2, r2, #32
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	f002 021f 	and.w	r2, r2, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d082      	beq.n	8002d02 <HAL_RCC_OscConfig+0xdce>
 8002dfc:	e0cf      	b.n	8002f9e <HAL_RCC_OscConfig+0x106a>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e22:	601a      	str	r2, [r3, #0]
  return result;
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fd fd20 	bl	8000888 <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	e009      	b.n	8002e62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fd fd1b 	bl	8000888 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e09e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e86:	601a      	str	r2, [r3, #0]
  return result;
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d104      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xf7c>
 8002ea6:	4b01      	ldr	r3, [pc, #4]	; (8002eac <HAL_RCC_OscConfig+0xf78>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e029      	b.n	8002f00 <HAL_RCC_OscConfig+0xfcc>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x1078>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f0c:	6011      	str	r1, [r2, #0]
 8002f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	fa92 f1a2 	rbit	r1, r2
 8002f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f24:	6011      	str	r1, [r2, #0]
  return result;
 8002f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	fab2 f282 	clz	r2, r2
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f042 0220 	orr.w	r2, r2, #32
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f002 021f 	and.w	r2, r2, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d180      	bne.n	8002e4e <HAL_RCC_OscConfig+0xf1a>
 8002f4c:	e027      	b.n	8002f9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e01e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_OscConfig+0x1078>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b09e      	sub	sp, #120	; 0x78
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e162      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b90      	ldr	r3, [pc, #576]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	498b      	ldr	r1, [pc, #556]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e14a      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b82      	ldr	r3, [pc, #520]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	497f      	ldr	r1, [pc, #508]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80dc 	beq.w	80031dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d13c      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xf6>
 800302c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003030:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800303a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_RCC_ClockConfig+0xa6>
 8003050:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	e00f      	b.n	8003076 <HAL_RCC_ClockConfig+0xc6>
 8003056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	667b      	str	r3, [r7, #100]	; 0x64
 8003064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003068:	663b      	str	r3, [r7, #96]	; 0x60
 800306a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003072:	4b67      	ldr	r3, [pc, #412]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800307a:	65ba      	str	r2, [r7, #88]	; 0x58
 800307c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307e:	fa92 f2a2 	rbit	r2, r2
 8003082:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0220 	orr.w	r2, r2, #32
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d17b      	bne.n	800319a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0f3      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d13c      	bne.n	8003128 <HAL_RCC_ClockConfig+0x178>
 80030ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x128>
 80030d2:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e00f      	b.n	80030f8 <HAL_RCC_ClockConfig+0x148>
 80030d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
 80030e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
 80030ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80030fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003100:	fa92 f2a2 	rbit	r2, r2
 8003104:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003108:	fab2 f282 	clz	r2, r2
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f042 0220 	orr.w	r2, r2, #32
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f002 021f 	and.w	r2, r2, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d13a      	bne.n	800319a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b2      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
 8003128:	2302      	movs	r3, #2
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1a0>
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e00d      	b.n	800316c <HAL_RCC_ClockConfig+0x1bc>
 8003150:	2302      	movs	r3, #2
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	2302      	movs	r3, #2
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2202      	movs	r2, #2
 800316e:	61ba      	str	r2, [r7, #24]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	fa92 f2a2 	rbit	r2, r2
 8003176:	617a      	str	r2, [r7, #20]
  return result;
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e079      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	491a      	ldr	r1, [pc, #104]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ac:	f7fd fb6c 	bl	8000888 <HAL_GetTick>
 80031b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fd fb68 	bl	8000888 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e061      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d214      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4906      	ldr	r1, [pc, #24]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e040      	b.n	800328e <HAL_RCC_ClockConfig+0x2de>
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_ClockConfig+0x2e8>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	491a      	ldr	r1, [pc, #104]	; (8003298 <HAL_RCC_ClockConfig+0x2e8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x2e8>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4912      	ldr	r1, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x2e8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003252:	f000 f829 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003256:	4601      	mov	r1, r0
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_RCC_ClockConfig+0x2e8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	22f0      	movs	r2, #240	; 0xf0
 8003262:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	fa92 f2a2 	rbit	r2, r2
 800326a:	60fa      	str	r2, [r7, #12]
  return result;
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	fab2 f282 	clz	r2, r2
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	40d3      	lsrs	r3, r2
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x2ec>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	fa21 f303 	lsr.w	r3, r1, r3
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd faba 	bl	8000800 <HAL_InitTick>
  
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3778      	adds	r7, #120	; 0x78
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	080047c4 	.word	0x080047c4
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b08b      	sub	sp, #44	; 0x2c
 80032ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x30>
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x36>
 80032d6:	e03c      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032da:	623b      	str	r3, [r7, #32]
      break;
 80032dc:	e03c      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	607a      	str	r2, [r7, #4]
  return result;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	40d3      	lsrs	r3, r2
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	220f      	movs	r2, #15
 800330c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	60fa      	str	r2, [r7, #12]
  return result;
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	40d3      	lsrs	r3, r2
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	fbb2 f2f3 	udiv	r2, r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	e004      	b.n	800334c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	623b      	str	r3, [r7, #32]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003354:	623b      	str	r3, [r7, #32]
      break;
 8003356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003358:	6a3b      	ldr	r3, [r7, #32]
}
 800335a:	4618      	mov	r0, r3
 800335c:	372c      	adds	r7, #44	; 0x2c
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	007a1200 	.word	0x007a1200
 8003370:	080047d4 	.word	0x080047d4
 8003374:	080047e4 	.word	0x080047e4
 8003378:	003d0900 	.word	0x003d0900

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b092      	sub	sp, #72	; 0x48
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80d4 	beq.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10e      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	61d3      	str	r3, [r2, #28]
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fd fa51 	bl	8000888 <HAL_GetTick>
 80033e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fd fa4d 	bl	8000888 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e169      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8084 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003424:	429a      	cmp	r2, r3
 8003426:	d07c      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	461a      	mov	r2, r3
 8003452:	2301      	movs	r3, #1
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	2300      	movs	r3, #0
 8003478:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd f9fd 	bl	8000888 <HAL_GetTick>
 800348e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd f9f9 	bl	8000888 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e113      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
  return result;
 80034c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d108      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034d6:	4b01      	ldr	r3, [pc, #4]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	e00d      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
 80034e4:	10908100 	.word	0x10908100
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	4b78      	ldr	r3, [pc, #480]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	613a      	str	r2, [r7, #16]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	60fa      	str	r2, [r7, #12]
  return result;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0b7      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	496a      	ldr	r1, [pc, #424]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003534:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003554:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	495d      	ldr	r1, [pc, #372]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003572:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003590:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	494e      	ldr	r1, [pc, #312]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 0210 	bic.w	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4947      	ldr	r1, [pc, #284]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035cc:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	493f      	ldr	r1, [pc, #252]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f023 0220 	bic.w	r2, r3, #32
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4938      	ldr	r1, [pc, #224]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4930      	ldr	r1, [pc, #192]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	4929      	ldr	r1, [pc, #164]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4921      	ldr	r1, [pc, #132]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	491a      	ldr	r1, [pc, #104]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3748      	adds	r7, #72	; 0x48
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fc ffae 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fb74 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e049      	b.n	8003830 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f841 	bl	8003838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 fb1d 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e03c      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e02f      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e022      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d109      	bne.n	80038be <HAL_TIM_PWM_Start+0x72>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	e015      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d109      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x8c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e008      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e097      	b.n	8003a22 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xb6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003900:	e023      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0xc6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003910:	e01b      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Start+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003920:	e013      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0xe6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003930:	e00b      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b10      	cmp	r3, #16
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0xf6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	e003      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fe58 	bl	8004608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_TIM_PWM_Start+0x1e0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_TIM_PWM_Start+0x13e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <HAL_TIM_PWM_Start+0x1e4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0x13e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_TIM_PWM_Start+0x1e8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0x13e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <HAL_TIM_PWM_Start+0x1ec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0x13e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_TIM_PWM_Start+0x1f0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_TIM_PWM_Start+0x142>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_TIM_PWM_Start+0x144>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <HAL_TIM_PWM_Start+0x1e0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_TIM_PWM_Start+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d013      	beq.n	80039e0 <HAL_TIM_PWM_Start+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <HAL_TIM_PWM_Start+0x1f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_PWM_Start+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_TIM_PWM_Start+0x1f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_PWM_Start+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_TIM_PWM_Start+0x1e4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_PWM_Start+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_TIM_PWM_Start+0x1e8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d115      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <HAL_TIM_PWM_Start+0x1fc>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d015      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x1d2>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d011      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e008      	b.n	8003a1e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e000      	b.n	8003a20 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	00010007 	.word	0x00010007

08003a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0ff      	b.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b14      	cmp	r3, #20
 8003a76:	f200 80f0 	bhi.w	8003c5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003c5b 	.word	0x08003c5b
 8003a88:	08003c5b 	.word	0x08003c5b
 8003a8c:	08003c5b 	.word	0x08003c5b
 8003a90:	08003b15 	.word	0x08003b15
 8003a94:	08003c5b 	.word	0x08003c5b
 8003a98:	08003c5b 	.word	0x08003c5b
 8003a9c:	08003c5b 	.word	0x08003c5b
 8003aa0:	08003b57 	.word	0x08003b57
 8003aa4:	08003c5b 	.word	0x08003c5b
 8003aa8:	08003c5b 	.word	0x08003c5b
 8003aac:	08003c5b 	.word	0x08003c5b
 8003ab0:	08003b97 	.word	0x08003b97
 8003ab4:	08003c5b 	.word	0x08003c5b
 8003ab8:	08003c5b 	.word	0x08003c5b
 8003abc:	08003c5b 	.word	0x08003c5b
 8003ac0:	08003bd9 	.word	0x08003bd9
 8003ac4:	08003c5b 	.word	0x08003c5b
 8003ac8:	08003c5b 	.word	0x08003c5b
 8003acc:	08003c5b 	.word	0x08003c5b
 8003ad0:	08003c19 	.word	0x08003c19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa24 	bl	8003f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
      break;
 8003b12:	e0a5      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa94 	bl	8004048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e084      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fafd 	bl	800415c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0208 	orr.w	r2, r2, #8
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
      break;
 8003b94:	e064      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fb65 	bl	800426c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
      break;
 8003bd6:	e043      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fbae 	bl	8004340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c16:	e023      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fbf2 	bl	8004408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	021a      	lsls	r2, r3, #8
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c58:	e002      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIM_ConfigClockSource+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e0b6      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x18a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ccc:	d03e      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xd8>
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	f200 8087 	bhi.w	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	f000 8086 	beq.w	8003dea <HAL_TIM_ConfigClockSource+0x176>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d87f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003ce4:	2b70      	cmp	r3, #112	; 0x70
 8003ce6:	d01a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xaa>
 8003ce8:	2b70      	cmp	r3, #112	; 0x70
 8003cea:	d87b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003cec:	2b60      	cmp	r3, #96	; 0x60
 8003cee:	d050      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x11e>
 8003cf0:	2b60      	cmp	r3, #96	; 0x60
 8003cf2:	d877      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003cf4:	2b50      	cmp	r3, #80	; 0x50
 8003cf6:	d03c      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xfe>
 8003cf8:	2b50      	cmp	r3, #80	; 0x50
 8003cfa:	d873      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d058      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x13e>
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d86f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003d04:	2b30      	cmp	r3, #48	; 0x30
 8003d06:	d064      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d86b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d060      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d867      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05c      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d05a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003d1c:	e062      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f000 fc4b 	bl	80045c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e04f      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 fc34 	bl	80045c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6e:	609a      	str	r2, [r3, #8]
      break;
 8003d70:	e03c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 fba8 	bl	80044d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2150      	movs	r1, #80	; 0x50
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fc01 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d90:	e02c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 fbc7 	bl	8004532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2160      	movs	r1, #96	; 0x60
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fbf1 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003db0:	e01c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 fb88 	bl	80044d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	; 0x40
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fbe1 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 fbd8 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003de2:	e003      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3c      	ldr	r2, [pc, #240]	; (8003f0c <TIM_Base_SetConfig+0x104>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00f      	beq.n	8003e40 <TIM_Base_SetConfig+0x38>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d00b      	beq.n	8003e40 <TIM_Base_SetConfig+0x38>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a39      	ldr	r2, [pc, #228]	; (8003f10 <TIM_Base_SetConfig+0x108>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d007      	beq.n	8003e40 <TIM_Base_SetConfig+0x38>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <TIM_Base_SetConfig+0x10c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <TIM_Base_SetConfig+0x110>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d108      	bne.n	8003e52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <TIM_Base_SetConfig+0x104>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <TIM_Base_SetConfig+0x108>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	; (8003f14 <TIM_Base_SetConfig+0x10c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <TIM_Base_SetConfig+0x110>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <TIM_Base_SetConfig+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a26      	ldr	r2, [pc, #152]	; (8003f20 <TIM_Base_SetConfig+0x118>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <TIM_Base_SetConfig+0x11c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <TIM_Base_SetConfig+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0xe8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <TIM_Base_SetConfig+0x110>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0xe8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <TIM_Base_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0xe8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <TIM_Base_SetConfig+0x118>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0xe8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <TIM_Base_SetConfig+0x11c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d103      	bne.n	8003ef8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40013400 	.word	0x40013400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800

08003f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 0302 	bic.w	r3, r3, #2
 8003f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <TIM_OC1_SetConfig+0x10c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00f      	beq.n	8003fa8 <TIM_OC1_SetConfig+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2b      	ldr	r2, [pc, #172]	; (8004038 <TIM_OC1_SetConfig+0x110>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_OC1_SetConfig+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a2a      	ldr	r2, [pc, #168]	; (800403c <TIM_OC1_SetConfig+0x114>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_OC1_SetConfig+0x80>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a29      	ldr	r2, [pc, #164]	; (8004040 <TIM_OC1_SetConfig+0x118>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC1_SetConfig+0x80>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a28      	ldr	r2, [pc, #160]	; (8004044 <TIM_OC1_SetConfig+0x11c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10c      	bne.n	8003fc2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0308 	bic.w	r3, r3, #8
 8003fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <TIM_OC1_SetConfig+0x10c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00f      	beq.n	8003fea <TIM_OC1_SetConfig+0xc2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <TIM_OC1_SetConfig+0x110>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <TIM_OC1_SetConfig+0xc2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <TIM_OC1_SetConfig+0x114>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <TIM_OC1_SetConfig+0xc2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <TIM_OC1_SetConfig+0x118>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_OC1_SetConfig+0xc2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	; (8004044 <TIM_OC1_SetConfig+0x11c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d111      	bne.n	800400e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	621a      	str	r2, [r3, #32]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40013400 	.word	0x40013400
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0210 	bic.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0320 	bic.w	r3, r3, #32
 8004096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a28      	ldr	r2, [pc, #160]	; (8004148 <TIM_OC2_SetConfig+0x100>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC2_SetConfig+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a27      	ldr	r2, [pc, #156]	; (800414c <TIM_OC2_SetConfig+0x104>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10d      	bne.n	80040d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <TIM_OC2_SetConfig+0x100>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <TIM_OC2_SetConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <TIM_OC2_SetConfig+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_OC2_SetConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <TIM_OC2_SetConfig+0x108>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_OC2_SetConfig+0xb0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <TIM_OC2_SetConfig+0x10c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC2_SetConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a19      	ldr	r2, [pc, #100]	; (8004158 <TIM_OC2_SetConfig+0x110>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d113      	bne.n	8004120 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004106:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40013400 	.word	0x40013400
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <TIM_OC3_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_OC3_SetConfig+0x6a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_OC3_SetConfig+0x100>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10d      	bne.n	80041e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <TIM_OC3_SetConfig+0xfc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_OC3_SetConfig+0xae>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <TIM_OC3_SetConfig+0x100>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_OC3_SetConfig+0xae>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <TIM_OC3_SetConfig+0x104>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_OC3_SetConfig+0xae>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <TIM_OC3_SetConfig+0x108>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_OC3_SetConfig+0xae>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <TIM_OC3_SetConfig+0x10c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d113      	bne.n	8004232 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40013400 	.word	0x40013400
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800

0800426c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a18      	ldr	r2, [pc, #96]	; (800432c <TIM_OC4_SetConfig+0xc0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_OC4_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC4_SetConfig+0xc4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_OC4_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <TIM_OC4_SetConfig+0xc8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_OC4_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <TIM_OC4_SetConfig+0xcc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC4_SetConfig+0x84>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a14      	ldr	r2, [pc, #80]	; (800433c <TIM_OC4_SetConfig+0xd0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <TIM_OC5_SetConfig+0xb4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_OC5_SetConfig+0x7a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <TIM_OC5_SetConfig+0xb8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_OC5_SetConfig+0x7a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <TIM_OC5_SetConfig+0xbc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_OC5_SetConfig+0x7a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a14      	ldr	r2, [pc, #80]	; (8004400 <TIM_OC5_SetConfig+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC5_SetConfig+0x7a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <TIM_OC5_SetConfig+0xc4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d109      	bne.n	80043ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800

08004408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800444e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	051b      	lsls	r3, r3, #20
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <TIM_OC6_SetConfig+0xb8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00f      	beq.n	8004484 <TIM_OC6_SetConfig+0x7c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <TIM_OC6_SetConfig+0xbc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_OC6_SetConfig+0x7c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <TIM_OC6_SetConfig+0xc0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_OC6_SetConfig+0x7c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a15      	ldr	r2, [pc, #84]	; (80044cc <TIM_OC6_SetConfig+0xc4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC6_SetConfig+0x7c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <TIM_OC6_SetConfig+0xc8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d109      	bne.n	8004498 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40013400 	.word	0x40013400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e063      	b.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d013      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10c      	bne.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40013400 	.word	0x40013400
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40014000 	.word	0x40014000

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	; (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	; (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	; (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	; (8004798 <__libc_init_array+0x44>)
 8004768:	f000 f820 	bl	80047ac <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	080047f4 	.word	0x080047f4
 8004790:	080047f4 	.word	0x080047f4
 8004794:	080047f4 	.word	0x080047f4
 8004798:	080047f8 	.word	0x080047f8

0800479c <memset>:
 800479c:	4402      	add	r2, r0
 800479e:	4603      	mov	r3, r0
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	f803 1b01 	strb.w	r1, [r3], #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr
