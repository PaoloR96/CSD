# include "invio.h"

void invio_tx(float temp0, float hmdy0){

	char bufferT[50],bufferH[50];

	//Trasmissione Temp
	gcvt(char(temp0), sizeof(char(temp0)), bufferT);
	//HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
	sprintf(bufferT, "+");
	//HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);

	//Trasmissione Umidit√†
	for(int i=0;i<50;i++)bufferT[i]=0;
	gcvt(hmdy0, sizeof(Hmdy), bufferT);
	//HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);


	sprintf(bufferT, "\n");
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
	//for(int i=0;i<50;i++)bufferT[i]=0;

}

double calcola_parametri(float Temp, float Hmdy, int StatoC, int modo){
	if(StatoC>0 && modo==0){
		double Tem= Temp + Hmdy;
		double PIDOut = 0
		PID(&TPID, &Tem, &PIDOut, &TempSetpoint, PID_KP, PID_KD, PID_KI, _PID_P_ON_E, _PID_CD_DIRECT);
		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
		PID_SetSampleTime(&TPID, SAMPLE_TIME);
		PID_SetOutputLimits(&TPID, PID_LIM_MIN, PID_LIM_MAX);
	 	PID_Compute(&TPID);
	 	return PIDOut;
	}else if(StatoC>0 && modo==1){
		//funzione fuzzy
		return calcola_fuzzy(Temp, Hmdy);
	}
}

double calcola_fuzzy(float inputA, float inputB){
	    // Valuta le funzioni di appartenenza per A e B
	    float mA = membershipA(inputA);
	    float mB = membershipB(inputB);

	    // Restituisci l'operatore MIN per aggregare i risultati
	    return (mA < mB) ? mA : mB;
	}
}

float membershipA(float x) {
    if (x <= 0.0 || x >= 10.0) {
        return 0.0;
    } else if (x >= 5.0 && x <= 7.5) {
        return 1.0;
    } else if (x < 5.0) {
        return (x - 0.0) / (5.0 - 0.0);
    } else {
        return (10.0 - x) / (10.0 - 7.5);
    }
}

float membershipB(float x) {
    if (x <= 0.0 || x >= 10.0) {
        return 0.0;
    } else if (x >= 5.0 && x <= 7.5) {
        return 1.0;
    } else if (x < 5.0) {
        return (x - 0.0) / (5.0 - 0.0);
    } else {
        return (10.0 - x) / (10.0 - 7.5);
    }
}
