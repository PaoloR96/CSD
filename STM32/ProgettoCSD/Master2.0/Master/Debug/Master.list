
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009c38  08009c38  00019c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a110  0800a110  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a110  0800a110  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a110  0800a110  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000002f8  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cff7  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002231  00000000  00000000  0002d213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000870  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ecb6  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db5a  00000000  00000000  0004f2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af986  00000000  00000000  0005ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c7b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a34  00000000  00000000  0010c808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c20 	.word	0x08009c20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009c20 	.word	0x08009c20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff39 	bl	8000adc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff6f 	bl	8000b7c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff60 	bl	8000b7c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <CutString>:
 *  Created on: Jun 22, 2023
 *      Author: Utente
 */
# include "ManageStr.h"
Stringa_TypeDef str;
Stringa_TypeDef CutString(char* buffer){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
	// Troviamo l'indice del carattere '+' nel buffer
	   int plus_index = strchr(buffer, '+') - buffer;
 8000cd0:	212b      	movs	r1, #43	; 0x2b
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f004 ff4e 	bl	8005b74 <strchr>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c

	   // Estraiamo la stringa contenente il valore della temperatura
	   char temp_str[MAX_BUFFER_LENGTH];
	   strncpy(temp_str, buffer, plus_index);
 8000ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 ff50 	bl	8005b8e <strncpy>
	   temp_str[plus_index] = '\0';
 8000cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]

	   // Estraiamo la stringa contenente il valore dell'umidità
	   char hmdy_str[MAX_BUFFER_LENGTH];
	   strncpy(hmdy_str, buffer + plus_index + 1, MAX_BUFFER_LENGTH - plus_index - 1);
 8000cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	18d1      	adds	r1, r2, r3
 8000d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d04:	f1c3 0313 	rsb	r3, r3, #19
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 ff3d 	bl	8005b8e <strncpy>
	   hmdy_str[MAX_BUFFER_LENGTH - plus_index - 1] = '\0';
 8000d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d16:	f1c3 0313 	rsb	r3, r3, #19
 8000d1a:	3350      	adds	r3, #80	; 0x50
 8000d1c:	443b      	add	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f803 2c3c 	strb.w	r2, [r3, #-60]

	   // Convertiamo le stringhe in valori di tipo float
	   float temp = atof(temp_str);
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fe9b 	bl	8005a64 <atof>
 8000d2e:	ec53 2b10 	vmov	r2, r3, d0
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff ff41 	bl	8000bbc <__aeabi_d2f>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
	   float hmdy = atof(hmdy_str);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 fe8e 	bl	8005a64 <atof>
 8000d48:	ec53 2b10 	vmov	r2, r3, d0
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff ff34 	bl	8000bbc <__aeabi_d2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
	   str.Temp=temp;
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <CutString+0xc4>)
 8000d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d5c:	6013      	str	r3, [r2, #0]
	   str.Hmdy=hmdy;
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <CutString+0xc4>)
 8000d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d62:	6053      	str	r3, [r2, #4]


return str;
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <CutString+0xc4>)
 8000d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d76:	ee07 2a10 	vmov	s14, r2
 8000d7a:	ee07 3a90 	vmov	s15, r3

}
 8000d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d82:	eef0 0a67 	vmov.f32	s1, s15
 8000d86:	3750      	adds	r7, #80	; 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000020c 	.word	0x2000020c

08000d90 <invio_tx>:

double TempSetpoint=25;
PID_TypeDef TPID;
double PIDOut=0;

void invio_tx(float temp0, float hmdy0, double intes, UART_HandleTypeDef huart4){
 8000d90:	b084      	sub	sp, #16
 8000d92:	b5b0      	push	{r4, r5, r7, lr}
 8000d94:	b092      	sub	sp, #72	; 0x48
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d9c:	edc7 0a02 	vstr	s1, [r7, #8]
 8000da0:	ed87 1b00 	vstr	d1, [r7]
 8000da4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char bufferT[50];

	//Trasmissione Temp
	gcvt(temp0, sizeof(temp0), bufferT);
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	4604      	mov	r4, r0
 8000db4:	460d      	mov	r5, r1
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	ec45 4b10 	vmov	d0, r4, r5
 8000dc2:	f004 fe53 	bl	8005a6c <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa00 	bl	80001d0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f107 0110 	add.w	r1, r7, #16
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000de0:	f003 fbdc 	bl	800459c <HAL_UART_Transmit>
	sprintf(bufferT, "+");
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4943      	ldr	r1, [pc, #268]	; (8000ef8 <invio_tx+0x168>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 fea2 	bl	8005b34 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9eb 	bl	80001d0 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f107 0110 	add.w	r1, r7, #16
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e0a:	f003 fbc7 	bl	800459c <HAL_UART_Transmit>

	//Trasmissione Umidità
	gcvt(hmdy0, sizeof(hmdy0), bufferT);
 8000e0e:	68b8      	ldr	r0, [r7, #8]
 8000e10:	f7ff fb9a 	bl	8000548 <__aeabi_f2d>
 8000e14:	4604      	mov	r4, r0
 8000e16:	460d      	mov	r5, r1
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2004      	movs	r0, #4
 8000e20:	ec45 4b10 	vmov	d0, r4, r5
 8000e24:	f004 fe22 	bl	8005a6c <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9cf 	bl	80001d0 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0110 	add.w	r1, r7, #16
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e42:	f003 fbab 	bl	800459c <HAL_UART_Transmit>
	sprintf(bufferT, "+");
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	492b      	ldr	r1, [pc, #172]	; (8000ef8 <invio_tx+0x168>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fe71 	bl	8005b34 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff f9ba 	bl	80001d0 <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f107 0110 	add.w	r1, r7, #16
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e6c:	f003 fb96 	bl	800459c <HAL_UART_Transmit>

	gcvt(intes, sizeof(intes), bufferT);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	2008      	movs	r0, #8
 8000e78:	ed97 0b00 	vldr	d0, [r7]
 8000e7c:	f004 fdf6 	bl	8005a6c <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0110 	add.w	r1, r7, #16
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e9a:	f003 fb7f 	bl	800459c <HAL_UART_Transmit>
	sprintf(bufferT, "\n");
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4916      	ldr	r1, [pc, #88]	; (8000efc <invio_tx+0x16c>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fe45 	bl	8005b34 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f98e 	bl	80001d0 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0110 	add.w	r1, r7, #16
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ec4:	f003 fb6a 	bl	800459c <HAL_UART_Transmit>

	for(int i=0;i<50;i++)bufferT[i]=0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
 8000ecc:	e008      	b.n	8000ee0 <invio_tx+0x150>
 8000ece:	f107 0210 	add.w	r2, r7, #16
 8000ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed4:	4413      	add	r3, r2
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000edc:	3301      	adds	r3, #1
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee2:	2b31      	cmp	r3, #49	; 0x31
 8000ee4:	ddf3      	ble.n	8000ece <invio_tx+0x13e>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3748      	adds	r7, #72	; 0x48
 8000eec:	46bd      	mov	sp, r7
 8000eee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	08009c38 	.word	0x08009c38
 8000efc:	08009c3c 	.word	0x08009c3c

08000f00 <calcola_parametri>:

double calcola_parametri(float Temp, float Hmdy, int StatoC, int modo){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	if(StatoC>0 && modo==0){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd30      	ble.n	8000f7a <calcola_parametri+0x7a>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d12d      	bne.n	8000f7a <calcola_parametri+0x7a>
		double Tem= Temp;
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fb12 	bl	8000548 <__aeabi_f2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PID(&TPID, &Tem, &PIDOut, &TempSetpoint, PID_KP, PID_KD, PID_KI, _PID_P_ON_E, _PID_CD_DIRECT);
 8000f2c:	f107 0110 	add.w	r1, r7, #16
 8000f30:	2300      	movs	r3, #0
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8000fb0 <calcola_parametri+0xb0>
 8000f3c:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000fb8 <calcola_parametri+0xb8>
 8000f40:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000fc0 <calcola_parametri+0xc0>
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <calcola_parametri+0xe0>)
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <calcola_parametri+0xe4>)
 8000f48:	4827      	ldr	r0, [pc, #156]	; (8000fe8 <calcola_parametri+0xe8>)
 8000f4a:	f000 f9d9 	bl	8001300 <PID>
		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <calcola_parametri+0xe8>)
 8000f52:	f000 fb0b 	bl	800156c <PID_SetMode>
		PID_SetSampleTime(&TPID, SAMPLE_TIME);
 8000f56:	2100      	movs	r1, #0
 8000f58:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <calcola_parametri+0xe8>)
 8000f5a:	f000 fc7b 	bl	8001854 <PID_SetSampleTime>
		PID_SetOutputLimits(&TPID, PID_LIM_MIN, PID_LIM_MAX);
 8000f5e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8000fc8 <calcola_parametri+0xc8>
 8000f62:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000fd0 <calcola_parametri+0xd0>
 8000f66:	4820      	ldr	r0, [pc, #128]	; (8000fe8 <calcola_parametri+0xe8>)
 8000f68:	f000 fb1e 	bl	80015a8 <PID_SetOutputLimits>
	 	PID_Compute(&TPID);
 8000f6c:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <calcola_parametri+0xe8>)
 8000f6e:	f000 fa13 	bl	8001398 <PID_Compute>
	 	return PIDOut;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <calcola_parametri+0xe4>)
 8000f74:	ed93 7b00 	vldr	d7, [r3]
 8000f78:	e012      	b.n	8000fa0 <calcola_parametri+0xa0>
	}else if(StatoC>0 && modo==1){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dd0d      	ble.n	8000f9c <calcola_parametri+0x9c>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d10a      	bne.n	8000f9c <calcola_parametri+0x9c>
		//funzione fuzzy
		return calcola_fuzzy(Temp, Hmdy);
 8000f86:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f8e:	f000 f82d 	bl	8000fec <calcola_fuzzy>
 8000f92:	eeb0 7a40 	vmov.f32	s14, s0
 8000f96:	eef0 7a60 	vmov.f32	s15, s1
 8000f9a:	e001      	b.n	8000fa0 <calcola_parametri+0xa0>
	}
	return 0;
 8000f9c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8000fd8 <calcola_parametri+0xd8>
}
 8000fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa4:	eef0 0a67 	vmov.f32	s1, s15
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	3fe00000 	.word	0x3fe00000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	3fd00000 	.word	0x3fd00000
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40000000 	.word	0x40000000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40590000 	.word	0x40590000
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	c0590000 	.word	0xc0590000
	...
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000288 	.word	0x20000288
 8000fe8:	20000218 	.word	0x20000218

08000fec <calcola_fuzzy>:
 *      Author: Utente
 */

#include "fuzzy.h"

double calcola_fuzzy(float inputA, float inputB){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ff6:	edc7 0a00 	vstr	s1, [r7]
	    // Valuta le funzioni di appartenenza per A e B
	    float mA = membershipA(inputA);
 8000ffa:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ffe:	f000 f8cb 	bl	8001198 <membershipA>
 8001002:	ed87 0a03 	vstr	s0, [r7, #12]
	    float mB = membershipB(inputB);
 8001006:	ed97 0a00 	vldr	s0, [r7]
 800100a:	f000 f901 	bl	8001210 <membershipB>
 800100e:	ed87 0a02 	vstr	s0, [r7, #8]

	    if ((mA == 0 && mB == 0) || (mA == 2 && mB == 2)){
 8001012:	edd7 7a03 	vldr	s15, [r7, #12]
 8001016:	eef5 7a40 	vcmp.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d106      	bne.n	800102e <calcola_fuzzy+0x42>
 8001020:	edd7 7a02 	vldr	s15, [r7, #8]
 8001024:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d011      	beq.n	8001052 <calcola_fuzzy+0x66>
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001036:	eef4 7a47 	vcmp.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d10c      	bne.n	800105a <calcola_fuzzy+0x6e>
 8001040:	edd7 7a02 	vldr	s15, [r7, #8]
 8001044:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001048:	eef4 7a47 	vcmp.f32	s15, s14
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d103      	bne.n	800105a <calcola_fuzzy+0x6e>
	        return -70; //forte
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b4d      	ldr	r3, [pc, #308]	; (800118c <calcola_fuzzy+0x1a0>)
 8001058:	e08e      	b.n	8001178 <calcola_fuzzy+0x18c>
	    } else if ((mA == 0 && mB == 1) || (mA == 1 && mB == 0) || (mA == 1 && mB == 1) || (mA == 2 && mB == 1)) {
 800105a:	edd7 7a03 	vldr	s15, [r7, #12]
 800105e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	d108      	bne.n	800107a <calcola_fuzzy+0x8e>
 8001068:	edd7 7a02 	vldr	s15, [r7, #8]
 800106c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001070:	eef4 7a47 	vcmp.f32	s15, s14
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d033      	beq.n	80010e2 <calcola_fuzzy+0xf6>
 800107a:	edd7 7a03 	vldr	s15, [r7, #12]
 800107e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001082:	eef4 7a47 	vcmp.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d106      	bne.n	800109a <calcola_fuzzy+0xae>
 800108c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d023      	beq.n	80010e2 <calcola_fuzzy+0xf6>
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010a2:	eef4 7a47 	vcmp.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d108      	bne.n	80010be <calcola_fuzzy+0xd2>
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010b4:	eef4 7a47 	vcmp.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d011      	beq.n	80010e2 <calcola_fuzzy+0xf6>
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010c6:	eef4 7a47 	vcmp.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d10c      	bne.n	80010ea <calcola_fuzzy+0xfe>
 80010d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010d8:	eef4 7a47 	vcmp.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d103      	bne.n	80010ea <calcola_fuzzy+0xfe>
	        return -35; //medio
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <calcola_fuzzy+0x1a4>)
 80010e8:	e046      	b.n	8001178 <calcola_fuzzy+0x18c>
	    } else if ((mA == 0 && mB == 2) || (mA == 1 && mB == 2) || (mA == 2 && mB == 0)){
 80010ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	d108      	bne.n	800110a <calcola_fuzzy+0x11e>
 80010f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001100:	eef4 7a47 	vcmp.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d021      	beq.n	800114e <calcola_fuzzy+0x162>
 800110a:	edd7 7a03 	vldr	s15, [r7, #12]
 800110e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001112:	eef4 7a47 	vcmp.f32	s15, s14
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d108      	bne.n	800112e <calcola_fuzzy+0x142>
 800111c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001120:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001124:	eef4 7a47 	vcmp.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d00f      	beq.n	800114e <calcola_fuzzy+0x162>
 800112e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001132:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001136:	eef4 7a47 	vcmp.f32	s15, s14
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d10a      	bne.n	8001156 <calcola_fuzzy+0x16a>
 8001140:	edd7 7a02 	vldr	s15, [r7, #8]
 8001144:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d103      	bne.n	8001156 <calcola_fuzzy+0x16a>
	        return -5; //debole
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <calcola_fuzzy+0x1a8>)
 8001154:	e010      	b.n	8001178 <calcola_fuzzy+0x18c>
	    }


	    // Restituisci l'operatore MIN per aggregare i risultati
	    return (mA < mB) ? mA : mB;
 8001156:	ed97 7a03 	vldr	s14, [r7, #12]
 800115a:	edd7 7a02 	vldr	s15, [r7, #8]
 800115e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d501      	bpl.n	800116c <calcola_fuzzy+0x180>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	e000      	b.n	800116e <calcola_fuzzy+0x182>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9ea 	bl	8000548 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
}
 8001178:	ec43 2b17 	vmov	d7, r2, r3
 800117c:	eeb0 0a47 	vmov.f32	s0, s14
 8001180:	eef0 0a67 	vmov.f32	s1, s15
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	c0518000 	.word	0xc0518000
 8001190:	c0418000 	.word	0xc0418000
 8001194:	c0140000 	.word	0xc0140000

08001198 <membershipA>:

float membershipA(float x) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x <= 15) {
 80011a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d802      	bhi.n	80011ba <membershipA+0x22>
        return 0; //freddo
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	e021      	b.n	80011fe <membershipA+0x66>
    } else if (x > 15 && x <= 25) {
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dd0b      	ble.n	80011e4 <membershipA+0x4c>
 80011cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d802      	bhi.n	80011e4 <membershipA+0x4c>
        return 1; //mite
 80011de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011e2:	e00c      	b.n	80011fe <membershipA+0x66>
    } else if (x > 25) {
 80011e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80011ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	dd02      	ble.n	80011fc <membershipA+0x64>
        return 2; //caldo
 80011f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fa:	e000      	b.n	80011fe <membershipA+0x66>
    }
}
 80011fc:	e001      	b.n	8001202 <membershipA+0x6a>
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <membershipB>:

float membershipB(float x) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x <= 30) {
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d802      	bhi.n	8001232 <membershipB+0x22>
        return 0; //asciutto
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e021      	b.n	8001276 <membershipB+0x66>
    } else if (x > 20 && x <= 50) {
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800123a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	dd0b      	ble.n	800125c <membershipB+0x4c>
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001288 <membershipB+0x78>
 800124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	d802      	bhi.n	800125c <membershipB+0x4c>
        return 1; //normale
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800125a:	e00c      	b.n	8001276 <membershipB+0x66>
    } else if (x > 50) {
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001288 <membershipB+0x78>
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	dd02      	ble.n	8001274 <membershipB+0x64>
        return 2; //umido
 800126e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001272:	e000      	b.n	8001276 <membershipB+0x66>
    }
}
 8001274:	e001      	b.n	800127a <membershipB+0x6a>
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	42480000 	.word	0x42480000

0800128c <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012bc:	f7ff fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80012d2:	e011      	b.n	80012f8 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012e0:	f7ff fbfc 	bl	8000adc <__aeabi_dcmplt>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d100      	bne.n	80012ec <PID_Init+0x60>
}
 80012ea:	e005      	b.n	80012f8 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6278      	str	r0, [r7, #36]	; 0x24
 8001308:	6239      	str	r1, [r7, #32]
 800130a:	61fa      	str	r2, [r7, #28]
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001312:	ed87 1b02 	vstr	d1, [r7, #8]
 8001316:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	6a3a      	ldr	r2, [r7, #32]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2200      	movs	r2, #0
 8001330:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001332:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001388 <PID+0x88>
 8001336:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001390 <PID+0x90>
 800133a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800133c:	f000 f934 	bl	80015a8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	2264      	movs	r2, #100	; 0x64
 8001344:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001346:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800134a:	4619      	mov	r1, r3
 800134c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800134e:	f000 fa41 	bl	80017d4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001352:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001356:	4619      	mov	r1, r3
 8001358:	ed97 2b00 	vldr	d2, [r7]
 800135c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001360:	ed97 0b04 	vldr	d0, [r7, #16]
 8001364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001366:	f000 f98d 	bl	8001684 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 800136a:	f001 f967 	bl	800263c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	1ad2      	subs	r2, r2, r3
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	605a      	str	r2, [r3, #4]
	
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	00000000 	.word	0x00000000
 800138c:	406fe000 	.word	0x406fe000
	...

08001398 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <PID_Compute+0x14>
	{
		return _FALSE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e0db      	b.n	8001564 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80013ac:	f001 f946 	bl	800263c <HAL_GetTick>
 80013b0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f0c0 80cd 	bcc.w	8001562 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e0:	f7fe ff52 	bl	8000288 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80013f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f6:	f7fe ff47 	bl	8000288 <__aeabi_dsub>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800140e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001412:	f7ff f8f1 	bl	80005f8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7fe ff35 	bl	800028c <__adddf3>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d114      	bne.n	800145e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001444:	f7ff f8d8 	bl	80005f8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7fe ff1a 	bl	8000288 <__aeabi_dsub>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800146a:	f7ff fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001480:	e010      	b.n	80014a4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800148e:	f7ff fb25 	bl	8000adc <__aeabi_dcmplt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b6:	f7ff f89f 	bl	80005f8 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80014c2:	e005      	b.n	80014d0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80014dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014e0:	f7ff f88a 	bl	80005f8 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fecc 	bl	8000288 <__aeabi_dsub>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014f8:	f7fe fec8 	bl	800028c <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800150a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800150e:	f7ff fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800151e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001522:	e00e      	b.n	8001542 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800152a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152e:	f7ff fad5 	bl	8000adc <__aeabi_dcmplt>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800153e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800154a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001554:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8001562:	2300      	movs	r3, #0
	}
	
}
 8001564:	4618      	mov	r0, r3
 8001566:	3730      	adds	r7, #48	; 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}

0800156c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b01      	cmp	r3, #1
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <PID_SetMode+0x2e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fe79 	bl	800128c <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	705a      	strb	r2, [r3, #1]
	
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6178      	str	r0, [r7, #20]
 80015b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80015b4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80015b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c0:	f7ff faa0 	bl	8000b04 <__aeabi_dcmpge>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d158      	bne.n	800167c <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80015ca:	6979      	ldr	r1, [r7, #20]
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80015d4:	6979      	ldr	r1, [r7, #20]
 80015d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015da:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04b      	beq.n	800167e <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80015f4:	f7ff fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001608:	e9c1 2300 	strd	r2, r3, [r1]
 800160c:	e012      	b.n	8001634 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800161c:	f7ff fa5e 	bl	8000adc <__aeabi_dcmplt>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001630:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001640:	f7ff fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001656:	e012      	b.n	800167e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001664:	f7ff fa3a 	bl	8000adc <__aeabi_dcmplt>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001674:	6979      	ldr	r1, [r7, #20]
 8001676:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800167a:	e000      	b.n	800167e <PID_SetOutputLimits+0xd6>
		return;
 800167c:	bf00      	nop
		}
		else { }
		
	}
	
}
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	61f8      	str	r0, [r7, #28]
 800168c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001690:	ed87 1b02 	vstr	d1, [r7, #8]
 8001694:	ed87 2b00 	vstr	d2, [r7]
 8001698:	460b      	mov	r3, r1
 800169a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a8:	f7ff fa18 	bl	8000adc <__aeabi_dcmplt>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 8089 	bne.w	80017c6 <PID_SetTunings2+0x142>
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016c0:	f7ff fa0c 	bl	8000adc <__aeabi_dcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d17d      	bne.n	80017c6 <PID_SetTunings2+0x142>
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d6:	f7ff fa01 	bl	8000adc <__aeabi_dcmplt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d172      	bne.n	80017c6 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	7efa      	ldrb	r2, [r7, #27]
 80016e4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80016e6:	7efb      	ldrb	r3, [r7, #27]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80016f8:	69f9      	ldr	r1, [r7, #28]
 80016fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001702:	69f9      	ldr	r1, [r7, #28]
 8001704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001708:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001712:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fef2 	bl	8000504 <__aeabi_ui2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <PID_SetTunings2+0x14c>)
 8001726:	f7ff f891 	bl	800084c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001738:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800173c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001744:	f7fe ff58 	bl	80005f8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800175a:	f7ff f877 	bl	800084c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	69f9      	ldr	r1, [r7, #28]
 8001764:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12b      	bne.n	80017c8 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	f7fe fd83 	bl	8000288 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	69f9      	ldr	r1, [r7, #28]
 8001788:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	f7fe fd75 	bl	8000288 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	69f9      	ldr	r1, [r7, #28]
 80017a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	f7fe fd67 	bl	8000288 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	69f9      	ldr	r1, [r7, #28]
 80017c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80017c4:	e000      	b.n	80017c8 <PID_SetTunings2+0x144>
		return;
 80017c6:	bf00      	nop
		
	}
	
}
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	408f4000 	.word	0x408f4000

080017d4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d02e      	beq.n	8001846 <PID_SetControllerDirection+0x72>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d029      	beq.n	8001846 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f7fe fd42 	bl	8000288 <__aeabi_dsub>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	f7fe fd34 	bl	8000288 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	f7fe fd26 	bl	8000288 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	70da      	strb	r2, [r3, #3]
	
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	dd2e      	ble.n	80018c2 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7fe fe5d 	bl	8000524 <__aeabi_i2d>
 800186a:	4604      	mov	r4, r0
 800186c:	460d      	mov	r5, r1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe46 	bl	8000504 <__aeabi_ui2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe ffe4 	bl	800084c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001896:	f7fe feaf 	bl	80005f8 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80018aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ae:	f7fe ffcd 	bl	800084c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018cc <HAL_GPIO_EXTI_Callback>:
int ModFunz=0;
char StartRx='1';
int modo=0;StatoC=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
                       if(StatoC==0){
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_GPIO_EXTI_Callback+0xcc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d12c      	bne.n	8001938 <HAL_GPIO_EXTI_Callback+0x6c>
                    	   HAL_UART_Transmit(&huart1, &StartRx, strlen(StartRx), HAL_MAX_DELAY);
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_GPIO_EXTI_Callback+0xd0>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc74 	bl	80001d0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	492a      	ldr	r1, [pc, #168]	; (800199c <HAL_GPIO_EXTI_Callback+0xd0>)
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80018f4:	f002 fe52 	bl	800459c <HAL_UART_Transmit>
                    	   HAL_UART_Transmit(&huart2, &StartRx, strlen(StartRx), HAL_MAX_DELAY);
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_GPIO_EXTI_Callback+0xd0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc67 	bl	80001d0 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	4924      	ldr	r1, [pc, #144]	; (800199c <HAL_GPIO_EXTI_Callback+0xd0>)
 800190c:	4825      	ldr	r0, [pc, #148]	; (80019a4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800190e:	f002 fe45 	bl	800459c <HAL_UART_Transmit>
                    	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800191a:	f001 f99d 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001924:	4820      	ldr	r0, [pc, #128]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001926:	f001 f997 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   StatoC=1;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_GPIO_EXTI_Callback+0xcc>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
                    	   modo=0;
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_GPIO_EXTI_Callback+0xe0>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
                    	   	  	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
                    	   	  	 			  modo=1;
                    	   	  	 			  //PidOn=false;
                    	   	  	 		  }
                    	}
}
 8001936:	e02a      	b.n	800198e <HAL_GPIO_EXTI_Callback+0xc2>
                    	   	  	 		  while((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0);
 8001938:	bf00      	nop
 800193a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d0f8      	beq.n	800193a <HAL_GPIO_EXTI_Callback+0x6e>
                    	   	  	 		  if(modo==1){
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_GPIO_EXTI_Callback+0xe0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10f      	bne.n	8001970 <HAL_GPIO_EXTI_Callback+0xa4>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001956:	4814      	ldr	r0, [pc, #80]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001958:	f001 f97e 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001964:	f001 f978 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   	  	 			  modo=0;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_GPIO_EXTI_Callback+0xe0>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	e00e      	b.n	800198e <HAL_GPIO_EXTI_Callback+0xc2>
                    	   	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001978:	f001 f96e 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   	  	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001984:	f001 f968 	bl	8002c58 <HAL_GPIO_WritePin>
                    	   	  	 			  modo=1;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_GPIO_EXTI_Callback+0xe0>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200004ac 	.word	0x200004ac
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000398 	.word	0x20000398
 80019a4:	20000420 	.word	0x20000420
 80019a8:	48001000 	.word	0x48001000
 80019ac:	200004a8 	.word	0x200004a8

080019b0 <HAL_UART_RxCpltCallback>:
float temp0=0,temp1=0,hmdy0=0,hmdy1=0;
double uscita0 = 0;
Stringa_TypeDef valS0,valS1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	ed2d 8b04 	vpush	{d8-d9}
 80019b6:	b0a5      	sub	sp, #148	; 0x94
 80019b8:	af1e      	add	r7, sp, #120	; 0x78
 80019ba:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_UART_RxCpltCallback+0x204>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d13c      	bne.n	8001a42 <HAL_UART_RxCpltCallback+0x92>
    {
		HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 80019c8:	2201      	movs	r2, #1
 80019ca:	497b      	ldr	r1, [pc, #492]	; (8001bb8 <HAL_UART_RxCpltCallback+0x208>)
 80019cc:	4879      	ldr	r0, [pc, #484]	; (8001bb4 <HAL_UART_RxCpltCallback+0x204>)
 80019ce:	f002 fe6f 	bl	80046b0 <HAL_UART_Receive_IT>
		if (RX_BUFFER[0] == stop) {
 80019d2:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HAL_UART_RxCpltCallback+0x208>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b73      	cmp	r3, #115	; 0x73
 80019d8:	d128      	bne.n	8001a2c <HAL_UART_RxCpltCallback+0x7c>
				   rx_complete = true;
 80019da:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_UART_RxCpltCallback+0x20c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
					valS1=CutString(&rx_buffer);
 80019e0:	4877      	ldr	r0, [pc, #476]	; (8001bc0 <HAL_UART_RxCpltCallback+0x210>)
 80019e2:	f7ff f971 	bl	8000cc8 <CutString>
 80019e6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ea:	eef0 7a60 	vmov.f32	s15, s1
 80019ee:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 80019f0:	ed83 7a00 	vstr	s14, [r3]
 80019f4:	edc3 7a01 	vstr	s15, [r3, #4]
					 temp0=valS1.Temp;
 80019f8:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_UART_RxCpltCallback+0x218>)
 80019fe:	6013      	str	r3, [r2, #0]
					 hmdy0=valS1.Hmdy;
 8001a00:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a71      	ldr	r2, [pc, #452]	; (8001bcc <HAL_UART_RxCpltCallback+0x21c>)
 8001a06:	6013      	str	r3, [r2, #0]
					rx_index = 0;
 8001a08:	4b71      	ldr	r3, [pc, #452]	; (8001bd0 <HAL_UART_RxCpltCallback+0x220>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
					for(int i=0;i<50;i++)rx_buffer[i]=0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e007      	b.n	8001a24 <HAL_UART_RxCpltCallback+0x74>
 8001a14:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_UART_RxCpltCallback+0x210>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4413      	add	r3, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b31      	cmp	r3, #49	; 0x31
 8001a28:	ddf4      	ble.n	8001a14 <HAL_UART_RxCpltCallback+0x64>
 8001a2a:	e00a      	b.n	8001a42 <HAL_UART_RxCpltCallback+0x92>
			   } else {
				   rx_buffer[rx_index] = RX_BUFFER[0];
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_UART_RxCpltCallback+0x220>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <HAL_UART_RxCpltCallback+0x208>)
 8001a32:	7811      	ldrb	r1, [r2, #0]
 8001a34:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_UART_RxCpltCallback+0x210>)
 8001a36:	54d1      	strb	r1, [r2, r3]
				   rx_index++;
 8001a38:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_UART_RxCpltCallback+0x220>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a64      	ldr	r2, [pc, #400]	; (8001bd0 <HAL_UART_RxCpltCallback+0x220>)
 8001a40:	6013      	str	r3, [r2, #0]
			   }

    }
    if(huart->Instance == huart2.Instance)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_UART_RxCpltCallback+0x224>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_UART_RxCpltCallback+0x118>
    {
       HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4961      	ldr	r1, [pc, #388]	; (8001bd8 <HAL_UART_RxCpltCallback+0x228>)
 8001a52:	4860      	ldr	r0, [pc, #384]	; (8001bd4 <HAL_UART_RxCpltCallback+0x224>)
 8001a54:	f002 fe2c 	bl	80046b0 <HAL_UART_Receive_IT>
       if (RX_BUFFER1[0] == stop) {
 8001a58:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_UART_RxCpltCallback+0x228>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b73      	cmp	r3, #115	; 0x73
 8001a5e:	d128      	bne.n	8001ab2 <HAL_UART_RxCpltCallback+0x102>
                   rx_complete1 = true;
 8001a60:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_UART_RxCpltCallback+0x22c>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
    	   	   	   valS1=CutString(&rx_buffer1);
 8001a66:	485e      	ldr	r0, [pc, #376]	; (8001be0 <HAL_UART_RxCpltCallback+0x230>)
 8001a68:	f7ff f92e 	bl	8000cc8 <CutString>
 8001a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a70:	eef0 7a60 	vmov.f32	s15, s1
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 8001a76:	ed83 7a00 	vstr	s14, [r3]
 8001a7a:	edc3 7a01 	vstr	s15, [r3, #4]
    	       	    temp1=valS1.Temp;
 8001a7e:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_UART_RxCpltCallback+0x234>)
 8001a84:	6013      	str	r3, [r2, #0]
    	       	    hmdy1=valS1.Hmdy;
 8001a86:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_UART_RxCpltCallback+0x214>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_UART_RxCpltCallback+0x238>)
 8001a8c:	6013      	str	r3, [r2, #0]
    	       	   rx_index1 = 0;
 8001a8e:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_UART_RxCpltCallback+0x23c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
    	       	for(int i=0;i<50;i++)rx_buffer1[i]=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e007      	b.n	8001aaa <HAL_UART_RxCpltCallback+0xfa>
 8001a9a:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_UART_RxCpltCallback+0x230>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b31      	cmp	r3, #49	; 0x31
 8001aae:	ddf4      	ble.n	8001a9a <HAL_UART_RxCpltCallback+0xea>
 8001ab0:	e00a      	b.n	8001ac8 <HAL_UART_RxCpltCallback+0x118>
                } else {
                    rx_buffer1[rx_index1] = RX_BUFFER1[0];
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_UART_RxCpltCallback+0x23c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_UART_RxCpltCallback+0x228>)
 8001ab8:	7811      	ldrb	r1, [r2, #0]
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_UART_RxCpltCallback+0x230>)
 8001abc:	54d1      	strb	r1, [r2, r3]
                    rx_index1++;
 8001abe:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_UART_RxCpltCallback+0x23c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a49      	ldr	r2, [pc, #292]	; (8001bec <HAL_UART_RxCpltCallback+0x23c>)
 8001ac6:	6013      	str	r3, [r2, #0]
                }
    }
    if(rx_complete == true &&  rx_complete1 == true){
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <HAL_UART_RxCpltCallback+0x20c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d06b      	beq.n	8001ba8 <HAL_UART_RxCpltCallback+0x1f8>
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <HAL_UART_RxCpltCallback+0x22c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d067      	beq.n	8001ba8 <HAL_UART_RxCpltCallback+0x1f8>
		//funzione calcola_psrsmetri
		uscita0 = calcola_parametri(temp0, hmdy0, StatoC, modo);
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_UART_RxCpltCallback+0x218>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_UART_RxCpltCallback+0x21c>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_UART_RxCpltCallback+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a42      	ldr	r2, [pc, #264]	; (8001bf4 <HAL_UART_RxCpltCallback+0x244>)
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	eef0 0a47 	vmov.f32	s1, s14
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f7ff fa02 	bl	8000f00 <calcola_parametri>
 8001afc:	eeb0 7a40 	vmov.f32	s14, s0
 8001b00:	eef0 7a60 	vmov.f32	s15, s1
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_UART_RxCpltCallback+0x248>)
 8001b06:	ed83 7b00 	vstr	d7, [r3]
		double uscita1 = calcola_parametri(temp1, hmdy1, StatoC, modo);
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_UART_RxCpltCallback+0x234>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_UART_RxCpltCallback+0x238>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_UART_RxCpltCallback+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <HAL_UART_RxCpltCallback+0x244>)
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	eef0 0a47 	vmov.f32	s1, s14
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	f7ff f9e9 	bl	8000f00 <calcola_parametri>
 8001b2e:	ed87 0b02 	vstr	d0, [r7, #8]
		//funzione invio
    	invio_tx(temp0, hmdy0, uscita0, huart4);
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_UART_RxCpltCallback+0x218>)
 8001b34:	ed93 9a00 	vldr	s18, [r3]
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_UART_RxCpltCallback+0x21c>)
 8001b3a:	edd3 9a00 	vldr	s19, [r3]
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_UART_RxCpltCallback+0x248>)
 8001b40:	ed93 8b00 	vldr	d8, [r3]
 8001b44:	4c2d      	ldr	r4, [pc, #180]	; (8001bfc <HAL_UART_RxCpltCallback+0x24c>)
 8001b46:	4668      	mov	r0, sp
 8001b48:	f104 0310 	add.w	r3, r4, #16
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f003 ffda 	bl	8005b08 <memcpy>
 8001b54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b58:	eeb0 1a48 	vmov.f32	s2, s16
 8001b5c:	eef0 1a68 	vmov.f32	s3, s17
 8001b60:	eef0 0a69 	vmov.f32	s1, s19
 8001b64:	eeb0 0a49 	vmov.f32	s0, s18
 8001b68:	f7ff f912 	bl	8000d90 <invio_tx>
    	invio_tx(temp1, hmdy1, uscita1, huart4);
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_UART_RxCpltCallback+0x234>)
 8001b6e:	ed93 8a00 	vldr	s16, [r3]
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_UART_RxCpltCallback+0x238>)
 8001b74:	edd3 8a00 	vldr	s17, [r3]
 8001b78:	4c20      	ldr	r4, [pc, #128]	; (8001bfc <HAL_UART_RxCpltCallback+0x24c>)
 8001b7a:	4668      	mov	r0, sp
 8001b7c:	f104 0310 	add.w	r3, r4, #16
 8001b80:	2278      	movs	r2, #120	; 0x78
 8001b82:	4619      	mov	r1, r3
 8001b84:	f003 ffc0 	bl	8005b08 <memcpy>
 8001b88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b8c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001b90:	eef0 0a68 	vmov.f32	s1, s17
 8001b94:	eeb0 0a48 	vmov.f32	s0, s16
 8001b98:	f7ff f8fa 	bl	8000d90 <invio_tx>
    	rx_complete = false;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_UART_RxCpltCallback+0x20c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
    	rx_complete1 = false;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_UART_RxCpltCallback+0x22c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
    }
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	ecbd 8b04 	vpop	{d8-d9}
 8001bb2:	bd90      	pop	{r4, r7, pc}
 8001bb4:	20000398 	.word	0x20000398
 8001bb8:	20000290 	.word	0x20000290
 8001bbc:	200002d0 	.word	0x200002d0
 8001bc0:	20000298 	.word	0x20000298
 8001bc4:	200004c8 	.word	0x200004c8
 8001bc8:	200004b0 	.word	0x200004b0
 8001bcc:	200004b8 	.word	0x200004b8
 8001bd0:	200002cc 	.word	0x200002cc
 8001bd4:	20000420 	.word	0x20000420
 8001bd8:	20000294 	.word	0x20000294
 8001bdc:	2000030c 	.word	0x2000030c
 8001be0:	200002d4 	.word	0x200002d4
 8001be4:	200004b4 	.word	0x200004b4
 8001be8:	200004bc 	.word	0x200004bc
 8001bec:	20000308 	.word	0x20000308
 8001bf0:	200004ac 	.word	0x200004ac
 8001bf4:	200004a8 	.word	0x200004a8
 8001bf8:	200004c0 	.word	0x200004c0
 8001bfc:	20000310 	.word	0x20000310

08001c00 <main>:


int main(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
	HAL_Init();
 8001c06:	f000 fcbf 	bl	8002588 <HAL_Init>
	SystemClock_Config();
 8001c0a:	f000 f919 	bl	8001e40 <SystemClock_Config>
	MX_GPIO_Init();
 8001c0e:	f000 f9fb 	bl	8002008 <MX_GPIO_Init>
	MX_UART4_Init();
 8001c12:	f000 f969 	bl	8001ee8 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8001c16:	f000 f997 	bl	8001f48 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001c1a:	f000 f9c5 	bl	8001fa8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4977      	ldr	r1, [pc, #476]	; (8001e00 <main+0x200>)
 8001c22:	4878      	ldr	r0, [pc, #480]	; (8001e04 <main+0x204>)
 8001c24:	f002 fd44 	bl	80046b0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4977      	ldr	r1, [pc, #476]	; (8001e08 <main+0x208>)
 8001c2c:	4877      	ldr	r0, [pc, #476]	; (8001e0c <main+0x20c>)
 8001c2e:	f002 fd3f 	bl	80046b0 <HAL_UART_Receive_IT>
	for(int i=0;i<50;i++)rx_buffer[i]=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e007      	b.n	8001c48 <main+0x48>
 8001c38:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <main+0x210>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3301      	adds	r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b31      	cmp	r3, #49	; 0x31
 8001c4c:	ddf4      	ble.n	8001c38 <main+0x38>

while (1)
{
				if (StatoC == 1){
 8001c4e:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <main+0x214>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d1fb      	bne.n	8001c4e <main+0x4e>
	 	      	    	   if (uscita0 <= -5) {
 8001c56:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <main+0x218>)
 8001c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <main+0x21c>)
 8001c62:	f7fe ff45 	bl	8000af0 <__aeabi_dcmple>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <main+0x84>
	 	      	    		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001c72:	486b      	ldr	r0, [pc, #428]	; (8001e20 <main+0x220>)
 8001c74:	f000 fff0 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7e:	4868      	ldr	r0, [pc, #416]	; (8001e20 <main+0x220>)
 8001c80:	f000 ffea 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -15.0) {
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <main+0x218>)
 8001c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <main+0x224>)
 8001c90:	f7fe ff2e 	bl	8000af0 <__aeabi_dcmple>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <main+0xb2>
	 	      	    	        // Accendi il LED 2
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001ca0:	485f      	ldr	r0, [pc, #380]	; (8001e20 <main+0x220>)
 8001ca2:	f000 ffd9 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001cac:	485c      	ldr	r0, [pc, #368]	; (8001e20 <main+0x220>)
 8001cae:	f000 ffd3 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -25.0) {
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <main+0x218>)
 8001cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <main+0x228>)
 8001cbe:	f7fe ff17 	bl	8000af0 <__aeabi_dcmple>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <main+0xe0>
	 	      	    	        // Accendi il LED 3
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001cce:	4854      	ldr	r0, [pc, #336]	; (8001e20 <main+0x220>)
 8001cd0:	f000 ffc2 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001cda:	4851      	ldr	r0, [pc, #324]	; (8001e20 <main+0x220>)
 8001cdc:	f000 ffbc 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -35.0) {
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <main+0x218>)
 8001ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <main+0x22c>)
 8001cec:	f7fe ff00 	bl	8000af0 <__aeabi_dcmple>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <main+0x10e>
	 	      	    	        // Accendi il LED 4
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001cfc:	4848      	ldr	r0, [pc, #288]	; (8001e20 <main+0x220>)
 8001cfe:	f000 ffab 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d08:	4845      	ldr	r0, [pc, #276]	; (8001e20 <main+0x220>)
 8001d0a:	f000 ffa5 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -45.0) {
 8001d0e:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <main+0x218>)
 8001d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <main+0x230>)
 8001d1a:	f7fe fee9 	bl	8000af0 <__aeabi_dcmple>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <main+0x13c>
	 	      	    	        // Accendi il LED 5
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d2a:	483d      	ldr	r0, [pc, #244]	; (8001e20 <main+0x220>)
 8001d2c:	f000 ff94 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001d36:	483a      	ldr	r0, [pc, #232]	; (8001e20 <main+0x220>)
 8001d38:	f000 ff8e 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -52.0) {
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <main+0x218>)
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <main+0x234>)
 8001d48:	f7fe fed2 	bl	8000af0 <__aeabi_dcmple>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <main+0x16a>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <main+0x220>)
 8001d5a:	f000 ff7d 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001d64:	482e      	ldr	r0, [pc, #184]	; (8001e20 <main+0x220>)
 8001d66:	f000 ff77 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -55.0) {
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <main+0x218>)
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <main+0x238>)
 8001d76:	f7fe febb 	bl	8000af0 <__aeabi_dcmple>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <main+0x198>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d86:	4826      	ldr	r0, [pc, #152]	; (8001e20 <main+0x220>)
 8001d88:	f000 ff66 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001d92:	4823      	ldr	r0, [pc, #140]	; (8001e20 <main+0x220>)
 8001d94:	f000 ff60 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -60.0) {
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <main+0x218>)
 8001d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <main+0x23c>)
 8001da4:	f7fe fea4 	bl	8000af0 <__aeabi_dcmple>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <main+0x1c6>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <main+0x220>)
 8001db6:	f000 ff4f 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8001dc0:	4817      	ldr	r0, [pc, #92]	; (8001e20 <main+0x220>)
 8001dc2:	f000 ff49 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -65.0){
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <main+0x218>)
 8001dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dcc:	a30a      	add	r3, pc, #40	; (adr r3, 8001df8 <main+0x1f8>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fe8d 	bl	8000af0 <__aeabi_dcmple>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <main+0x1f4>
	 	      	    	        // Accendi il LED 9
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <main+0x220>)
 8001de4:	f000 ff38 	bl	8002c58 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <main+0x220>)
 8001df0:	f000 ff32 	bl	8002c58 <HAL_GPIO_WritePin>
				if (StatoC == 1){
 8001df4:	e72b      	b.n	8001c4e <main+0x4e>
 8001df6:	bf00      	nop
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	c0504000 	.word	0xc0504000
 8001e00:	20000294 	.word	0x20000294
 8001e04:	20000420 	.word	0x20000420
 8001e08:	20000290 	.word	0x20000290
 8001e0c:	20000398 	.word	0x20000398
 8001e10:	20000298 	.word	0x20000298
 8001e14:	200004ac 	.word	0x200004ac
 8001e18:	200004c0 	.word	0x200004c0
 8001e1c:	c0140000 	.word	0xc0140000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	c02e0000 	.word	0xc02e0000
 8001e28:	c0390000 	.word	0xc0390000
 8001e2c:	c0418000 	.word	0xc0418000
 8001e30:	c0468000 	.word	0xc0468000
 8001e34:	c04a0000 	.word	0xc04a0000
 8001e38:	c04b8000 	.word	0xc04b8000
 8001e3c:	c04e0000 	.word	0xc04e0000

08001e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09e      	sub	sp, #120	; 0x78
 8001e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e4a:	2228      	movs	r2, #40	; 0x28
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fe68 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e64:	463b      	mov	r3, r7
 8001e66:	223c      	movs	r2, #60	; 0x3c
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fe5a 	bl	8005b24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e70:	2302      	movs	r3, #2
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e74:	2301      	movs	r3, #1
 8001e76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ff17 	bl	8002cb8 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001e90:	f000 f940 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ea8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 ff40 	bl	8003d34 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001eba:	f000 f92b 	bl	8002114 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001ebe:	230b      	movs	r3, #11
 8001ec0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 f965 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001edc:	f000 f91a 	bl	8002114 <Error_Handler>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3778      	adds	r7, #120	; 0x78
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_UART4_Init+0x58>)
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <MX_UART4_Init+0x5c>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <MX_UART4_Init+0x58>)
 8001ef4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ef8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_UART4_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_UART4_Init+0x58>)
 8001f2c:	f002 fae8 	bl	8004500 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001f36:	f000 f8ed 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000310 	.word	0x20000310
 8001f44:	40004c00 	.word	0x40004c00

08001f48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <MX_USART1_UART_Init+0x5c>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f8c:	f002 fab8 	bl	8004500 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f96:	f000 f8bd 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000398 	.word	0x20000398
 8001fa4:	40013800 	.word	0x40013800

08001fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <MX_USART2_UART_Init+0x5c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART2_UART_Init+0x58>)
 8001fec:	f002 fa88 	bl	8004500 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ff6:	f000 f88d 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000420 	.word	0x20000420
 8002004:	40004400 	.word	0x40004400

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <MX_GPIO_Init+0x100>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a39      	ldr	r2, [pc, #228]	; (8002108 <MX_GPIO_Init+0x100>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6153      	str	r3, [r2, #20]
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <MX_GPIO_Init+0x100>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <MX_GPIO_Init+0x100>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <MX_GPIO_Init+0x100>)
 800203c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002040:	6153      	str	r3, [r2, #20]
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <MX_GPIO_Init+0x100>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <MX_GPIO_Init+0x100>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <MX_GPIO_Init+0x100>)
 8002054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002058:	6153      	str	r3, [r2, #20]
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <MX_GPIO_Init+0x100>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <MX_GPIO_Init+0x100>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a27      	ldr	r2, [pc, #156]	; (8002108 <MX_GPIO_Init+0x100>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6153      	str	r3, [r2, #20]
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <MX_GPIO_Init+0x100>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8002084:	4821      	ldr	r0, [pc, #132]	; (800210c <MX_GPIO_Init+0x104>)
 8002086:	f000 fde7 	bl	8002c58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800208a:	2200      	movs	r2, #0
 800208c:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 8002090:	481f      	ldr	r0, [pc, #124]	; (8002110 <MX_GPIO_Init+0x108>)
 8002092:	f000 fde1 	bl	8002c58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800209e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f000 fc59 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80020b2:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80020b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <MX_GPIO_Init+0x104>)
 80020cc:	f000 fc4a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80020d0:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 80020d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <MX_GPIO_Init+0x108>)
 80020ea:	f000 fc3b 	bl	8002964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2006      	movs	r0, #6
 80020f4:	f000 fb89 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020f8:	2006      	movs	r0, #6
 80020fa:	f000 fba2 	bl	8002842 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	48001000 	.word	0x48001000
 8002110:	48000400 	.word	0x48000400

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x8>
	...

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_MspInit+0x44>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_MspInit+0x44>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_MspInit+0x44>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x44>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_MspInit+0x44>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x44>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_UART_MspInit+0x168>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d131      	bne.n	80021ee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800218a:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 80021a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ac:	6153      	str	r3, [r2, #20]
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80021cc:	2305      	movs	r3, #5
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	4840      	ldr	r0, [pc, #256]	; (80022d8 <HAL_UART_MspInit+0x170>)
 80021d8:	f000 fbc4 	bl	8002964 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2101      	movs	r1, #1
 80021e0:	2034      	movs	r0, #52	; 0x34
 80021e2:	f000 fb12 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021e6:	2034      	movs	r0, #52	; 0x34
 80021e8:	f000 fb2b 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021ec:	e06b      	b.n	80022c6 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_UART_MspInit+0x174>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d130      	bne.n	800225a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a35      	ldr	r2, [pc, #212]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800221a:	6153      	str	r3, [r2, #20]
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002228:	2330      	movs	r3, #48	; 0x30
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002238:	2307      	movs	r3, #7
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <HAL_UART_MspInit+0x170>)
 8002244:	f000 fb8e 	bl	8002964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2103      	movs	r1, #3
 800224c:	2025      	movs	r0, #37	; 0x25
 800224e:	f000 fadc 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002252:	2025      	movs	r0, #37	; 0x25
 8002254:	f000 faf5 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8002258:	e035      	b.n	80022c6 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_UART_MspInit+0x178>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d130      	bne.n	80022c6 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 800226a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 8002282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002286:	6153      	str	r3, [r2, #20]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_UART_MspInit+0x16c>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002294:	230c      	movs	r3, #12
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a4:	2307      	movs	r3, #7
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f000 fb57 	bl	8002964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2102      	movs	r1, #2
 80022ba:	2026      	movs	r0, #38	; 0x26
 80022bc:	f000 faa5 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c0:	2026      	movs	r0, #38	; 0x26
 80022c2:	f000 fabe 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3738      	adds	r7, #56	; 0x38
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40004c00 	.word	0x40004c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000800 	.word	0x48000800
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40004400 	.word	0x40004400

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002330:	f000 f970 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800233c:	2001      	movs	r0, #1
 800233e:	f000 fca3 	bl	8002c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART1_IRQHandler+0x10>)
 800234e:	f002 f9f3 	bl	8004738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000398 	.word	0x20000398

0800235c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <USART2_IRQHandler+0x10>)
 8002362:	f002 f9e9 	bl	8004738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000420 	.word	0x20000420

08002370 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <UART4_IRQHandler+0x10>)
 8002376:	f002 f9df 	bl	8004738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000310 	.word	0x20000310

08002384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_kill>:

int _kill(int pid, int sig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800239e:	f003 fb89 	bl	8005ab4 <__errno>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2216      	movs	r2, #22
 80023a6:	601a      	str	r2, [r3, #0]
  return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe7 	bl	8002394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023da:	f3af 8000 	nop.w
 80023de:	4601      	mov	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
  }

  return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
  }
  return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002462:	605a      	str	r2, [r3, #4]
  return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f003 faee 	bl	8005ab4 <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000a000 	.word	0x2000a000
 8002504:	00000400 	.word	0x00000400
 8002508:	200004d0 	.word	0x200004d0
 800250c:	200004e8 	.word	0x200004e8

08002510 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002538:	f7ff ffea 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <LoopForever+0x6>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <LoopForever+0xe>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <LoopForever+0x16>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f003 faad 	bl	8005ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002566:	f7ff fb4b 	bl	8001c00 <main>

0800256a <LoopForever>:

LoopForever:
    b LoopForever
 800256a:	e7fe      	b.n	800256a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800256c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002578:	0800a118 	.word	0x0800a118
  ldr r2, =_sbss
 800257c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002580:	200004e8 	.word	0x200004e8

08002584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC1_2_IRQHandler>
	...

08002588 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x28>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x28>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 f92b 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	200f      	movs	r0, #15
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fdbc 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f943 	bl	800285e <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f000 f90b 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000000c 	.word	0x2000000c
 800260c:	20000014 	.word	0x20000014
 8002610:	20000010 	.word	0x20000010

08002614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000014 	.word	0x20000014
 8002638:	200004d4 	.word	0x200004d4

0800263c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200004d4 	.word	0x200004d4

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff29 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff3e 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff31 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002884:	2b02      	cmp	r3, #2
 8002886:	d008      	beq.n	800289a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2204      	movs	r2, #4
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e020      	b.n	80028dc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020e 	bic.w	r2, r2, #14
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d005      	beq.n	800290a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e027      	b.n	800295a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 020e 	bic.w	r2, r2, #14
 8002918:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
    } 
  }
  return status;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e154      	b.n	8002c1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8146 	beq.w	8002c18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x40>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d017      	beq.n	8002a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d123      	bne.n	8002a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	6939      	ldr	r1, [r7, #16]
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80a0 	beq.w	8002c18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad8:	4b58      	ldr	r3, [pc, #352]	; (8002c3c <HAL_GPIO_Init+0x2d8>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a57      	ldr	r2, [pc, #348]	; (8002c3c <HAL_GPIO_Init+0x2d8>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <HAL_GPIO_Init+0x2d8>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af0:	4a53      	ldr	r2, [pc, #332]	; (8002c40 <HAL_GPIO_Init+0x2dc>)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b1a:	d019      	beq.n	8002b50 <HAL_GPIO_Init+0x1ec>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a49      	ldr	r2, [pc, #292]	; (8002c44 <HAL_GPIO_Init+0x2e0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_GPIO_Init+0x1e8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <HAL_GPIO_Init+0x2e4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00d      	beq.n	8002b48 <HAL_GPIO_Init+0x1e4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a47      	ldr	r2, [pc, #284]	; (8002c4c <HAL_GPIO_Init+0x2e8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <HAL_GPIO_Init+0x1e0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a46      	ldr	r2, [pc, #280]	; (8002c50 <HAL_GPIO_Init+0x2ec>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_GPIO_Init+0x1dc>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e008      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b40:	2305      	movs	r3, #5
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b44:	2303      	movs	r3, #3
 8002b46:	e004      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e002      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b50:	2300      	movs	r3, #0
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	f002 0203 	and.w	r2, r2, #3
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	4093      	lsls	r3, r2
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b62:	4937      	ldr	r1, [pc, #220]	; (8002c40 <HAL_GPIO_Init+0x2dc>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b70:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b94:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f aea3 	bne.w	8002974 <HAL_GPIO_Init+0x10>
  }
}
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	48000400 	.word	0x48000400
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	48000c00 	.word	0x48000c00
 8002c50:	48001000 	.word	0x48001000
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fe10 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f001 b823 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 817d 	beq.w	8002fee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cf4:	4bbc      	ldr	r3, [pc, #752]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4bb9      	ldr	r3, [pc, #740]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d15c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x10e>
 8002d0c:	4bb6      	ldr	r3, [pc, #728]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d155      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x10e>
 8002d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_OscConfig+0x94>
 8002d46:	4ba8      	ldr	r3, [pc, #672]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e015      	b.n	8002d78 <HAL_RCC_OscConfig+0xc0>
 8002d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d74:	4b9c      	ldr	r3, [pc, #624]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 811f 	beq.w	8002fec <HAL_RCC_OscConfig+0x334>
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 8116 	bne.w	8002fec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f000 bfaf 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12e>
 8002dd8:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a82      	ldr	r2, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e036      	b.n	8002e54 <HAL_RCC_OscConfig+0x19c>
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x158>
 8002df6:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a78      	ldr	r2, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e021      	b.n	8002e54 <HAL_RCC_OscConfig+0x19c>
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x184>
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a70      	ldr	r2, [pc, #448]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6d      	ldr	r2, [pc, #436]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0x19c>
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b67      	ldr	r3, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a66      	ldr	r2, [pc, #408]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f023 020f 	bic.w	r2, r3, #15
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	495f      	ldr	r1, [pc, #380]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d059      	beq.n	8002f32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff fbdd 	bl	800263c <HAL_GetTick>
 8002e82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7ff fbd8 	bl	800263c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d902      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	f000 bf43 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 8002e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002eb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x218>
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e015      	b.n	8002efc <HAL_RCC_OscConfig+0x244>
 8002ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f08:	fa92 f2a2 	rbit	r2, r2
 8002f0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f002 021f 	and.w	r2, r2, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ab      	beq.n	8002e88 <HAL_RCC_OscConfig+0x1d0>
 8002f30:	e05d      	b.n	8002fee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff fb83 	bl	800263c <HAL_GetTick>
 8002f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7ff fb7e 	bl	800263c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f000 bee9 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2cc>
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
 8002f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fa0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCC_OscConfig+0x330>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fbc:	fa92 f2a2 	rbit	r2, r2
 8002fc0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ab      	bne.n	8002f3c <HAL_RCC_OscConfig+0x284>
 8002fe4:	e003      	b.n	8002fee <HAL_RCC_OscConfig+0x336>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 817d 	beq.w	80032fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003004:	4ba6      	ldr	r3, [pc, #664]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003010:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d172      	bne.n	8003102 <HAL_RCC_OscConfig+0x44a>
 800301c:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d16c      	bne.n	8003102 <HAL_RCC_OscConfig+0x44a>
 8003028:	2302      	movs	r3, #2
 800302a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800303a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_RCC_OscConfig+0x3a0>
 8003052:	4b93      	ldr	r3, [pc, #588]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e013      	b.n	8003080 <HAL_RCC_OscConfig+0x3c8>
 8003058:	2302      	movs	r3, #2
 800305a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003070:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2202      	movs	r2, #2
 8003082:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003086:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003092:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003096:	fab2 f282 	clz	r2, r2
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f002 021f 	and.w	r2, r2, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCC_OscConfig+0x410>
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f000 be2e 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b75      	ldr	r3, [pc, #468]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	21f8      	movs	r1, #248	; 0xf8
 80030de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030e6:	fa91 f1a1 	rbit	r1, r1
 80030ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030f2:	fab1 f181 	clz	r1, r1
 80030f6:	b2c9      	uxtb	r1, r1
 80030f8:	408b      	lsls	r3, r1
 80030fa:	4969      	ldr	r1, [pc, #420]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003100:	e0fd      	b.n	80032fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8088 	beq.w	8003224 <HAL_RCC_OscConfig+0x56c>
 8003114:	2301      	movs	r3, #1
 8003116:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003126:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff fa7c 	bl	800263c <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7ff fa77 	bl	800263c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	f000 bde2 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003172:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_RCC_OscConfig+0x4d8>
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0x500>
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031b4:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2202      	movs	r2, #2
 80031ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80031be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031c2:	fa92 f2a2 	rbit	r2, r2
 80031c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0af      	beq.n	800314a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	21f8      	movs	r1, #248	; 0xf8
 8003200:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003208:	fa91 f1a1 	rbit	r1, r1
 800320c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003210:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003214:	fab1 f181 	clz	r1, r1
 8003218:	b2c9      	uxtb	r1, r1
 800321a:	408b      	lsls	r3, r1
 800321c:	4920      	ldr	r1, [pc, #128]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e06c      	b.n	80032fe <HAL_RCC_OscConfig+0x646>
 8003224:	2301      	movs	r3, #1
 8003226:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003236:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	461a      	mov	r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7ff f9f4 	bl	800263c <HAL_GetTick>
 8003254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7ff f9ef 	bl	800263c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	f000 bd5a 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d104      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5ec>
 800329a:	4b01      	ldr	r3, [pc, #4]	; (80032a0 <HAL_RCC_OscConfig+0x5e8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	e015      	b.n	80032cc <HAL_RCC_OscConfig+0x614>
 80032a0:	40021000 	.word	0x40021000
 80032a4:	2302      	movs	r3, #2
 80032a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032b6:	2302      	movs	r3, #2
 80032b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032c8:	4bc8      	ldr	r3, [pc, #800]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2202      	movs	r2, #2
 80032ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032d6:	fa92 f2a2 	rbit	r2, r2
 80032da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f042 0220 	orr.w	r2, r2, #32
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f002 021f 	and.w	r2, r2, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ad      	bne.n	800325a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8110 	beq.w	8003534 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d079      	beq.n	8003418 <HAL_RCC_OscConfig+0x760>
 8003324:	2301      	movs	r3, #1
 8003326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	4bab      	ldr	r3, [pc, #684]	; (80035f0 <HAL_RCC_OscConfig+0x938>)
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	461a      	mov	r2, r3
 800334a:	2301      	movs	r3, #1
 800334c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff f975 	bl	800263c <HAL_GetTick>
 8003352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003358:	f7ff f970 	bl	800263c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d902      	bls.n	800336e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	f000 bcdb 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 80033ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033d4:	2102      	movs	r1, #2
 80033d6:	6019      	str	r1, [r3, #0]
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f1a3 	rbit	r1, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033ee:	6019      	str	r1, [r3, #0]
  return result;
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0a0      	beq.n	8003358 <HAL_RCC_OscConfig+0x6a0>
 8003416:	e08d      	b.n	8003534 <HAL_RCC_OscConfig+0x87c>
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800343a:	601a      	str	r2, [r3, #0]
  return result;
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003444:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_OscConfig+0x938>)
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	461a      	mov	r2, r3
 8003456:	2300      	movs	r3, #0
 8003458:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7ff f8ef 	bl	800263c <HAL_GetTick>
 800345e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003464:	f7ff f8ea 	bl	800263c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d902      	bls.n	800347a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	f000 bc55 	b.w	8003d24 <HAL_RCC_OscConfig+0x106c>
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003482:	2202      	movs	r2, #2
 8003484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	fa93 f2a3 	rbit	r2, r3
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034a6:	2202      	movs	r2, #2
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034ca:	2202      	movs	r2, #2
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 80034e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034f2:	2102      	movs	r1, #2
 80034f4:	6019      	str	r1, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f1a3 	rbit	r1, r3
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800350c:	6019      	str	r1, [r3, #0]
  return result;
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d197      	bne.n	8003464 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 81a1 	beq.w	800388c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	61d3      	str	r3, [r2, #28]
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003582:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCC_OscConfig+0x93c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11a      	bne.n	80035cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_RCC_OscConfig+0x93c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_RCC_OscConfig+0x93c>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7ff f84b 	bl	800263c <HAL_GetTick>
 80035a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	e009      	b.n	80035c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7ff f846 	bl	800263c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e3b1      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x93c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10d      	bne.n	80035f8 <HAL_RCC_OscConfig+0x940>
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <HAL_RCC_OscConfig+0x934>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	e03c      	b.n	8003664 <HAL_RCC_OscConfig+0x9ac>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	10908120 	.word	0x10908120
 80035f4:	40007000 	.word	0x40007000
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10c      	bne.n	8003622 <HAL_RCC_OscConfig+0x96a>
 8003608:	4bc1      	ldr	r3, [pc, #772]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4ac0      	ldr	r2, [pc, #768]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6213      	str	r3, [r2, #32]
 8003614:	4bbe      	ldr	r3, [pc, #760]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4abd      	ldr	r2, [pc, #756]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6213      	str	r3, [r2, #32]
 8003620:	e020      	b.n	8003664 <HAL_RCC_OscConfig+0x9ac>
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x994>
 8003632:	4bb7      	ldr	r3, [pc, #732]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4ab6      	ldr	r2, [pc, #728]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003638:	f043 0304 	orr.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4bb4      	ldr	r3, [pc, #720]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4ab3      	ldr	r2, [pc, #716]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0x9ac>
 800364c:	4bb0      	ldr	r3, [pc, #704]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4aaf      	ldr	r2, [pc, #700]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	4bad      	ldr	r3, [pc, #692]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4aac      	ldr	r2, [pc, #688]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8081 	beq.w	8003778 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe ffe1 	bl	800263c <HAL_GetTick>
 800367a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fe ffdc 	bl	800263c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e345      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	fa93 f2a3 	rbit	r2, r3
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036c4:	2202      	movs	r2, #2
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	fa93 f2a3 	rbit	r2, r3
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036de:	601a      	str	r2, [r3, #0]
  return result;
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0xa4c>
 80036fe:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0xa74>
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	4b79      	ldr	r3, [pc, #484]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003730:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003734:	2102      	movs	r1, #2
 8003736:	6011      	str	r1, [r2, #0]
 8003738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	fa92 f1a2 	rbit	r1, r2
 8003746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800374a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800374e:	6011      	str	r1, [r2, #0]
  return result;
 8003750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003754:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d084      	beq.n	8003680 <HAL_RCC_OscConfig+0x9c8>
 8003776:	e07f      	b.n	8003878 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fe ff60 	bl	800263c <HAL_GetTick>
 800377c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe ff5b 	bl	800263c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e2c4      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037a2:	2202      	movs	r2, #2
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037c6:	2202      	movs	r2, #2
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037e0:	601a      	str	r2, [r3, #0]
  return result;
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_OscConfig+0xb4e>
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	e013      	b.n	800382e <HAL_RCC_OscConfig+0xb76>
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800380e:	2202      	movs	r2, #2
 8003810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	fa93 f2a3 	rbit	r2, r3
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003832:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003836:	2102      	movs	r1, #2
 8003838:	6011      	str	r1, [r2, #0]
 800383a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800383e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	fa92 f1a2 	rbit	r1, r2
 8003848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800384c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003850:	6011      	str	r1, [r2, #0]
  return result;
 8003852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003856:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f002 021f 	and.w	r2, r2, #31
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d184      	bne.n	8003782 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003878:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8242 	beq.w	8003d22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0xc58>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	f000 8213 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f040 8162 	bne.w	8003b82 <HAL_RCC_OscConfig+0xeca>
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	fa93 f2a3 	rbit	r2, r3
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038e2:	601a      	str	r2, [r3, #0]
  return result;
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	461a      	mov	r2, r3
 8003900:	2300      	movs	r3, #0
 8003902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe fe9a 	bl	800263c <HAL_GetTick>
 8003908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390c:	e00c      	b.n	8003928 <HAL_RCC_OscConfig+0xc70>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fe92 	bl	800263c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e1fd      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fa93 f2a3 	rbit	r2, r3
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800394c:	601a      	str	r2, [r3, #0]
  return result;
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003956:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d102      	bne.n	8003972 <HAL_RCC_OscConfig+0xcba>
 800396c:	4bb0      	ldr	r3, [pc, #704]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	e027      	b.n	80039c2 <HAL_RCC_OscConfig+0xd0a>
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	4b9c      	ldr	r3, [pc, #624]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039ce:	6011      	str	r1, [r2, #0]
 80039d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	fa92 f1a2 	rbit	r1, r2
 80039de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039e6:	6011      	str	r1, [r2, #0]
  return result;
 80039e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d182      	bne.n	8003914 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0e:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	497f      	ldr	r1, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	461a      	mov	r2, r3
 8003a78:	2301      	movs	r3, #1
 8003a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fdde 	bl	800263c <HAL_GetTick>
 8003a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe fdd9 	bl	800263c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e144      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ac8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xe2c>
 8003ade:	4b54      	ldr	r3, [pc, #336]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e027      	b.n	8003b34 <HAL_RCC_OscConfig+0xe7c>
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f2a3 	rbit	r2, r3
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	fa93 f2a3 	rbit	r2, r3
 8003b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	fa92 f1a2 	rbit	r1, r2
 8003b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b58:	6011      	str	r1, [r2, #0]
  return result;
 8003b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	fab2 f282 	clz	r2, r2
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	f002 021f 	and.w	r2, r2, #31
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d082      	beq.n	8003a86 <HAL_RCC_OscConfig+0xdce>
 8003b80:	e0cf      	b.n	8003d22 <HAL_RCC_OscConfig+0x106a>
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ba6:	601a      	str	r2, [r3, #0]
  return result;
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fd38 	bl	800263c <HAL_GetTick>
 8003bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fe fd33 	bl	800263c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e09e      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c0a:	601a      	str	r2, [r3, #0]
  return result;
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d104      	bne.n	8003c34 <HAL_RCC_OscConfig+0xf7c>
 8003c2a:	4b01      	ldr	r3, [pc, #4]	; (8003c30 <HAL_RCC_OscConfig+0xf78>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e029      	b.n	8003c84 <HAL_RCC_OscConfig+0xfcc>
 8003c30:	40021000 	.word	0x40021000
 8003c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	fa93 f2a3 	rbit	r2, r3
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_OscConfig+0x1078>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c88:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c90:	6011      	str	r1, [r2, #0]
 8003c92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c96:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	fa92 f1a2 	rbit	r1, r2
 8003ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ca4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ca8:	6011      	str	r1, [r2, #0]
  return result;
 8003caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0220 	orr.w	r2, r2, #32
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d180      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xf1a>
 8003cd0:	e027      	b.n	8003d22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e01e      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_OscConfig+0x1078>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cf2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b09e      	sub	sp, #120	; 0x78
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e162      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	498b      	ldr	r1, [pc, #556]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b89      	ldr	r3, [pc, #548]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e14a      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b82      	ldr	r3, [pc, #520]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	497f      	ldr	r1, [pc, #508]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80dc 	beq.w	8003f60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d13c      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xf6>
 8003db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_ClockConfig+0xa6>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	e00f      	b.n	8003dfa <HAL_RCC_ClockConfig+0xc6>
 8003dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	667b      	str	r3, [r7, #100]	; 0x64
 8003de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dec:	663b      	str	r3, [r7, #96]	; 0x60
 8003dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e02:	fa92 f2a2 	rbit	r2, r2
 8003e06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f002 021f 	and.w	r2, r2, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d17b      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0f3      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d13c      	bne.n	8003eac <HAL_RCC_ClockConfig+0x178>
 8003e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x128>
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	e00f      	b.n	8003e7c <HAL_RCC_ClockConfig+0x148>
 8003e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e80:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f042 0220 	orr.w	r2, r2, #32
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f002 021f 	and.w	r2, r2, #31
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13a      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b2      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
 8003eac:	2302      	movs	r3, #2
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x1a0>
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	e00d      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1bc>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	61ba      	str	r2, [r7, #24]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	fa92 f2a2 	rbit	r2, r2
 8003efa:	617a      	str	r2, [r7, #20]
  return result;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f042 0220 	orr.w	r2, r2, #32
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e079      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	491a      	ldr	r1, [pc, #104]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fe fb84 	bl	800263c <HAL_GetTick>
 8003f34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fe fb80 	bl	800263c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e061      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d214      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 0207 	bic.w	r2, r3, #7
 8003f76:	4906      	ldr	r1, [pc, #24]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <HAL_RCC_ClockConfig+0x25c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e040      	b.n	8004012 <HAL_RCC_ClockConfig+0x2de>
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	491a      	ldr	r1, [pc, #104]	; (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4912      	ldr	r1, [pc, #72]	; (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fd6:	f000 f829 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCC_ClockConfig+0x2e8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe4:	22f0      	movs	r2, #240	; 0xf0
 8003fe6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	fa92 f2a2 	rbit	r2, r2
 8003fee:	60fa      	str	r2, [r7, #12]
  return result;
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	fab2 f282 	clz	r2, r2
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	40d3      	lsrs	r3, r2
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x2ec>)
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <HAL_RCC_ClockConfig+0x2f0>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_ClockConfig+0x2f4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fad2 	bl	80025b4 <HAL_InitTick>
  
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3778      	adds	r7, #120	; 0x78
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	08009c40 	.word	0x08009c40
 8004024:	2000000c 	.word	0x2000000c
 8004028:	20000010 	.word	0x20000010

0800402c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	b08b      	sub	sp, #44	; 0x2c
 8004030:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x30>
 8004056:	2b08      	cmp	r3, #8
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x36>
 800405a:	e03c      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800405e:	623b      	str	r3, [r7, #32]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004068:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800406c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	fa92 f2a2 	rbit	r2, r2
 8004074:	607a      	str	r2, [r7, #4]
  return result;
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	40d3      	lsrs	r3, r2
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	220f      	movs	r2, #15
 8004090:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	fa92 f2a2 	rbit	r2, r2
 8004098:	60fa      	str	r2, [r7, #12]
  return result;
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	fab2 f282 	clz	r2, r2
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	40d3      	lsrs	r3, r2
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040b4:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	e004      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	623b      	str	r3, [r7, #32]
      break;
 80040d4:	e002      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040d8:	623b      	str	r3, [r7, #32]
      break;
 80040da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	372c      	adds	r7, #44	; 0x2c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	007a1200 	.word	0x007a1200
 80040f4:	08009c58 	.word	0x08009c58
 80040f8:	08009c68 	.word	0x08009c68
 80040fc:	003d0900 	.word	0x003d0900

08004100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <HAL_RCC_GetHCLKFreq+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000000c 	.word	0x2000000c

08004118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800411e:	f7ff ffef 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 8004122:	4601      	mov	r1, r0
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800412c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004130:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	fa92 f2a2 	rbit	r2, r2
 8004138:	603a      	str	r2, [r7, #0]
  return result;
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	fab2 f282 	clz	r2, r2
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	40d3      	lsrs	r3, r2
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	08009c50 	.word	0x08009c50

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004162:	f7ff ffcd 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 8004166:	4601      	mov	r1, r0
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004170:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004174:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	603a      	str	r2, [r7, #0]
  return result;
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	fab2 f282 	clz	r2, r2
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	40d3      	lsrs	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_RCC_GetPCLK2Freq+0x40>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	08009c50 	.word	0x08009c50

080041a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b092      	sub	sp, #72	; 0x48
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80d4 	beq.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c4:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10e      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	61d3      	str	r3, [r2, #28]
 80041dc:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b45      	ldr	r3, [pc, #276]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d118      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fa:	4b42      	ldr	r3, [pc, #264]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a41      	ldr	r2, [pc, #260]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fe fa19 	bl	800263c <HAL_GetTick>
 800420a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fe fa15 	bl	800263c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	; 0x64
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e169      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8084 	beq.w	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004248:	429a      	cmp	r2, r3
 800424a:	d07c      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	461a      	mov	r2, r3
 8004276:	2301      	movs	r3, #1
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	2300      	movs	r3, #0
 800429c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe f9c5 	bl	800263c <HAL_GetTick>
 80042b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	e00a      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe f9c1 	bl	800263c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e113      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80042cc:	2302      	movs	r3, #2
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	2302      	movs	r3, #2
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	61fb      	str	r3, [r7, #28]
  return result;
 80042e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d108      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042fa:	4b01      	ldr	r3, [pc, #4]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	e00d      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	10908100 	.word	0x10908100
 800430c:	2302      	movs	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	4b78      	ldr	r3, [pc, #480]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	2202      	movs	r2, #2
 800431e:	613a      	str	r2, [r7, #16]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	fa92 f2a2 	rbit	r2, r2
 8004326:	60fa      	str	r2, [r7, #12]
  return result;
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	fab2 f282 	clz	r2, r2
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	f002 021f 	and.w	r2, r2, #31
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f202 	lsl.w	r2, r1, r2
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0b7      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	496a      	ldr	r1, [pc, #424]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004378:	4b60      	ldr	r3, [pc, #384]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f023 0203 	bic.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	495d      	ldr	r1, [pc, #372]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d008      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004396:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4956      	ldr	r1, [pc, #344]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b4:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	494e      	ldr	r1, [pc, #312]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4947      	ldr	r1, [pc, #284]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043f0:	4b42      	ldr	r3, [pc, #264]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	493f      	ldr	r1, [pc, #252]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f023 0220 	bic.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	4938      	ldr	r1, [pc, #224]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	4930      	ldr	r1, [pc, #192]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	4929      	ldr	r1, [pc, #164]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004468:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4921      	ldr	r1, [pc, #132]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	491a      	ldr	r1, [pc, #104]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044a4:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	4912      	ldr	r1, [pc, #72]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	490b      	ldr	r1, [pc, #44]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3748      	adds	r7, #72	; 0x48
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000

08004500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e040      	b.n	8004594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd fe20 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fc00 	bl	8004d44 <UART_SetConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e022      	b.n	8004594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fdc8 	bl	80050ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fe4f 	bl	8005230 <UART_CheckIdleState>
 8004592:	4603      	mov	r3, r0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d178      	bne.n	80046a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Transmit+0x24>
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e071      	b.n	80046a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2221      	movs	r2, #33	; 0x21
 80045d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d2:	f7fe f833 	bl	800263c <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Transmit+0x68>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800460c:	e030      	b.n	8004670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 feb1 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e03c      	b.n	80046a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004640:	b292      	uxth	r2, r2
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	3302      	adds	r3, #2
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e008      	b.n	800465e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b292      	uxth	r2, r2
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1c8      	bne.n	800460e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fe7a 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e005      	b.n	80046a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d132      	bne.n	800472e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Receive_IT+0x24>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e02b      	b.n	8004730 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d018      	beq.n	800471e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	613b      	str	r3, [r7, #16]
   return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	61bb      	str	r3, [r7, #24]
   return(result);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e6      	bne.n	80046ec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fe93 	bl	8005450 <UART_Start_Receive_IT>
 800472a:	4603      	mov	r3, r0
 800472c:	e000      	b.n	8004730 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3728      	adds	r7, #40	; 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b0ba      	sub	sp, #232	; 0xe8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800475e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004762:	f640 030f 	movw	r3, #2063	; 0x80f
 8004766:	4013      	ands	r3, r2
 8004768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800476c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d115      	bne.n	80047a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 82ab 	beq.w	8004cec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
      }
      return;
 800479e:	e2a5      	b.n	8004cec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8117 	beq.w	80049d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047ba:	4b85      	ldr	r3, [pc, #532]	; (80049d0 <HAL_UART_IRQHandler+0x298>)
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 810a 	beq.w	80049d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <HAL_UART_IRQHandler+0xbc>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00b      	beq.n	80047f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d011      	beq.n	8004824 <HAL_UART_IRQHandler+0xec>
 8004800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2202      	movs	r2, #2
 8004812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481a:	f043 0204 	orr.w	r2, r3, #4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <HAL_UART_IRQHandler+0x11c>
 8004830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2204      	movs	r2, #4
 8004842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	f043 0202 	orr.w	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d017      	beq.n	8004890 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004870:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004886:	f043 0208 	orr.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <HAL_UART_IRQHandler+0x18a>
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8211 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800490e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004912:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004916:	2b00      	cmp	r3, #0
 8004918:	d04f      	beq.n	80049ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fe4c 	bl	80055b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d141      	bne.n	80049b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3308      	adds	r3, #8
 8004934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800495a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800495e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1d9      	bne.n	800492e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <HAL_UART_IRQHandler+0x29c>)
 8004988:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd ffaa 	bl	80028e8 <HAL_DMA_Abort_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d017      	beq.n	80049ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049a4:	4610      	mov	r0, r2
 80049a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	e00f      	b.n	80049ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9b4 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	e00b      	b.n	80049ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9b0 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	e007      	b.n	80049ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f9ac 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80049c8:	e192      	b.n	8004cf0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ca:	bf00      	nop
    return;
 80049cc:	e190      	b.n	8004cf0 <HAL_UART_IRQHandler+0x5b8>
 80049ce:	bf00      	nop
 80049d0:	04000120 	.word	0x04000120
 80049d4:	08005681 	.word	0x08005681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 814b 	bne.w	8004c78 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8144 	beq.w	8004c78 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 813d 	beq.w	8004c78 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2210      	movs	r2, #16
 8004a04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	f040 80b5 	bne.w	8004b80 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8164 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f080 815c 	bcs.w	8004cf4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	f000 8086 	beq.w	8004b5e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1da      	bne.n	8004a52 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ac0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e1      	bne.n	8004a9c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3308      	adds	r3, #8
 8004ade:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004afc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004afe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e3      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e4      	bne.n	8004b1e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd fe8c 	bl	8002876 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f8d7 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b7e:	e0b9      	b.n	8004cf4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80ab 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a6 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bce:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e4      	bne.n	8004bac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c06:	633a      	str	r2, [r7, #48]	; 0x30
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e3      	bne.n	8004be2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e4      	bne.n	8004c2e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f85b 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c76:	e03f      	b.n	8004cf8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00e      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x56a>
 8004c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fed8 	bl	8005a50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ca0:	e02d      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01c      	beq.n	8004cfc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
    }
    return;
 8004cca:	e017      	b.n	8004cfc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fce1 	bl	80056ac <UART_EndTransmit_IT>
    return;
 8004cea:	e008      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cec:	bf00      	nop
 8004cee:	e006      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cf0:	bf00      	nop
 8004cf2:	e004      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cf4:	bf00      	nop
 8004cf6:	e002      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004cfc:	bf00      	nop
  }

}
 8004cfe:	37e8      	adds	r7, #232	; 0xe8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d72:	f023 030c 	bic.w	r3, r3, #12
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	6979      	ldr	r1, [r7, #20]
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4aa7      	ldr	r2, [pc, #668]	; (800505c <UART_SetConfig+0x318>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d120      	bne.n	8004e06 <UART_SetConfig+0xc2>
 8004dc4:	4ba6      	ldr	r3, [pc, #664]	; (8005060 <UART_SetConfig+0x31c>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d817      	bhi.n	8004e00 <UART_SetConfig+0xbc>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x94>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004de9 	.word	0x08004de9
 8004ddc:	08004df5 	.word	0x08004df5
 8004de0:	08004dfb 	.word	0x08004dfb
 8004de4:	08004def 	.word	0x08004def
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0b5      	b.n	8004f5a <UART_SetConfig+0x216>
 8004dee:	2302      	movs	r3, #2
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e0b2      	b.n	8004f5a <UART_SetConfig+0x216>
 8004df4:	2304      	movs	r3, #4
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0af      	b.n	8004f5a <UART_SetConfig+0x216>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0ac      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0a9      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a96      	ldr	r2, [pc, #600]	; (8005064 <UART_SetConfig+0x320>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d124      	bne.n	8004e5a <UART_SetConfig+0x116>
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <UART_SetConfig+0x31c>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e1c:	d011      	beq.n	8004e42 <UART_SetConfig+0xfe>
 8004e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e22:	d817      	bhi.n	8004e54 <UART_SetConfig+0x110>
 8004e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e28:	d011      	beq.n	8004e4e <UART_SetConfig+0x10a>
 8004e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2e:	d811      	bhi.n	8004e54 <UART_SetConfig+0x110>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <UART_SetConfig+0xf8>
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d006      	beq.n	8004e48 <UART_SetConfig+0x104>
 8004e3a:	e00b      	b.n	8004e54 <UART_SetConfig+0x110>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e08b      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e42:	2302      	movs	r3, #2
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e088      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e085      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e082      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e54:	2310      	movs	r3, #16
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e07f      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a82      	ldr	r2, [pc, #520]	; (8005068 <UART_SetConfig+0x324>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d124      	bne.n	8004eae <UART_SetConfig+0x16a>
 8004e64:	4b7e      	ldr	r3, [pc, #504]	; (8005060 <UART_SetConfig+0x31c>)
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e70:	d011      	beq.n	8004e96 <UART_SetConfig+0x152>
 8004e72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e76:	d817      	bhi.n	8004ea8 <UART_SetConfig+0x164>
 8004e78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e7c:	d011      	beq.n	8004ea2 <UART_SetConfig+0x15e>
 8004e7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e82:	d811      	bhi.n	8004ea8 <UART_SetConfig+0x164>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x14c>
 8004e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e8c:	d006      	beq.n	8004e9c <UART_SetConfig+0x158>
 8004e8e:	e00b      	b.n	8004ea8 <UART_SetConfig+0x164>
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e061      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e05e      	b.n	8004f5a <UART_SetConfig+0x216>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e05b      	b.n	8004f5a <UART_SetConfig+0x216>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e058      	b.n	8004f5a <UART_SetConfig+0x216>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e055      	b.n	8004f5a <UART_SetConfig+0x216>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6e      	ldr	r2, [pc, #440]	; (800506c <UART_SetConfig+0x328>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d124      	bne.n	8004f02 <UART_SetConfig+0x1be>
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <UART_SetConfig+0x31c>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ec0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ec4:	d011      	beq.n	8004eea <UART_SetConfig+0x1a6>
 8004ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eca:	d817      	bhi.n	8004efc <UART_SetConfig+0x1b8>
 8004ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed0:	d011      	beq.n	8004ef6 <UART_SetConfig+0x1b2>
 8004ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed6:	d811      	bhi.n	8004efc <UART_SetConfig+0x1b8>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <UART_SetConfig+0x1a0>
 8004edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee0:	d006      	beq.n	8004ef0 <UART_SetConfig+0x1ac>
 8004ee2:	e00b      	b.n	8004efc <UART_SetConfig+0x1b8>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e037      	b.n	8004f5a <UART_SetConfig+0x216>
 8004eea:	2302      	movs	r3, #2
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e034      	b.n	8004f5a <UART_SetConfig+0x216>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e031      	b.n	8004f5a <UART_SetConfig+0x216>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e02e      	b.n	8004f5a <UART_SetConfig+0x216>
 8004efc:	2310      	movs	r3, #16
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e02b      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5a      	ldr	r2, [pc, #360]	; (8005070 <UART_SetConfig+0x32c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d124      	bne.n	8004f56 <UART_SetConfig+0x212>
 8004f0c:	4b54      	ldr	r3, [pc, #336]	; (8005060 <UART_SetConfig+0x31c>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004f14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f18:	d011      	beq.n	8004f3e <UART_SetConfig+0x1fa>
 8004f1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f1e:	d817      	bhi.n	8004f50 <UART_SetConfig+0x20c>
 8004f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f24:	d011      	beq.n	8004f4a <UART_SetConfig+0x206>
 8004f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f2a:	d811      	bhi.n	8004f50 <UART_SetConfig+0x20c>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <UART_SetConfig+0x1f4>
 8004f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f34:	d006      	beq.n	8004f44 <UART_SetConfig+0x200>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x20c>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e00d      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e00a      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f44:	2304      	movs	r3, #4
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e007      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e004      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e001      	b.n	8004f5a <UART_SetConfig+0x216>
 8004f56:	2310      	movs	r3, #16
 8004f58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f62:	d15b      	bne.n	800501c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004f64:	7ffb      	ldrb	r3, [r7, #31]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d827      	bhi.n	8004fba <UART_SetConfig+0x276>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0x22c>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	08004fbb 	.word	0x08004fbb
 8004f80:	08004fab 	.word	0x08004fab
 8004f84:	08004fbb 	.word	0x08004fbb
 8004f88:	08004fbb 	.word	0x08004fbb
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fb3 	.word	0x08004fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7ff f8c0 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8004f98:	61b8      	str	r0, [r7, #24]
        break;
 8004f9a:	e013      	b.n	8004fc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f9c:	f7ff f8de 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8004fa0:	61b8      	str	r0, [r7, #24]
        break;
 8004fa2:	e00f      	b.n	8004fc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa4:	4b33      	ldr	r3, [pc, #204]	; (8005074 <UART_SetConfig+0x330>)
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e00c      	b.n	8004fc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004faa:	f7ff f83f 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8004fae:	61b8      	str	r0, [r7, #24]
        break;
 8004fb0:	e008      	b.n	8004fc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb6:	61bb      	str	r3, [r7, #24]
        break;
 8004fb8:	e004      	b.n	8004fc4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8082 	beq.w	80050d0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	005a      	lsls	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	441a      	add	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b0f      	cmp	r3, #15
 8004fe6:	d916      	bls.n	8005016 <UART_SetConfig+0x2d2>
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d212      	bcs.n	8005016 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f023 030f 	bic.w	r3, r3, #15
 8004ff8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	b29a      	uxth	r2, r3
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	4313      	orrs	r3, r2
 800500a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	89fa      	ldrh	r2, [r7, #14]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	e05c      	b.n	80050d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	77bb      	strb	r3, [r7, #30]
 800501a:	e059      	b.n	80050d0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501c:	7ffb      	ldrb	r3, [r7, #31]
 800501e:	2b08      	cmp	r3, #8
 8005020:	d835      	bhi.n	800508e <UART_SetConfig+0x34a>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x2e4>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	08005079 	.word	0x08005079
 8005034:	0800508f 	.word	0x0800508f
 8005038:	0800507f 	.word	0x0800507f
 800503c:	0800508f 	.word	0x0800508f
 8005040:	0800508f 	.word	0x0800508f
 8005044:	0800508f 	.word	0x0800508f
 8005048:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7ff f864 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8005050:	61b8      	str	r0, [r7, #24]
        break;
 8005052:	e021      	b.n	8005098 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7ff f882 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8005058:	61b8      	str	r0, [r7, #24]
        break;
 800505a:	e01d      	b.n	8005098 <UART_SetConfig+0x354>
 800505c:	40013800 	.word	0x40013800
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	40004800 	.word	0x40004800
 800506c:	40004c00 	.word	0x40004c00
 8005070:	40005000 	.word	0x40005000
 8005074:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <UART_SetConfig+0x3a4>)
 800507a:	61bb      	str	r3, [r7, #24]
        break;
 800507c:	e00c      	b.n	8005098 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe ffd5 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8005082:	61b8      	str	r0, [r7, #24]
        break;
 8005084:	e008      	b.n	8005098 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	61bb      	str	r3, [r7, #24]
        break;
 800508c:	e004      	b.n	8005098 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	77bb      	strb	r3, [r7, #30]
        break;
 8005096:	bf00      	nop
    }

    if (pclk != 0U)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	085a      	lsrs	r2, r3, #1
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	441a      	add	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b0f      	cmp	r3, #15
 80050b6:	d909      	bls.n	80050cc <UART_SetConfig+0x388>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050be:	d205      	bcs.n	80050cc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	e001      	b.n	80050d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	007a1200 	.word	0x007a1200

080050ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ea:	d10a      	bne.n	8005202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b098      	sub	sp, #96	; 0x60
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005240:	f7fd f9fc 	bl	800263c <HAL_GetTick>
 8005244:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b08      	cmp	r3, #8
 8005252:	d12e      	bne.n	80052b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f88c 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d021      	beq.n	80052b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005282:	653b      	str	r3, [r7, #80]	; 0x50
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	647b      	str	r3, [r7, #68]	; 0x44
 800528e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e062      	b.n	8005378 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d149      	bne.n	8005354 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f856 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03c      	beq.n	8005354 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	623b      	str	r3, [r7, #32]
   return(result);
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
 80052fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3308      	adds	r3, #8
 8005312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60fb      	str	r3, [r7, #12]
   return(result);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532c:	61fa      	str	r2, [r7, #28]
 800532e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69b9      	ldr	r1, [r7, #24]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	617b      	str	r3, [r7, #20]
   return(result);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e011      	b.n	8005378 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3758      	adds	r7, #88	; 0x58
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	e049      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d045      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fd f94f 	bl	800263c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e048      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d031      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d110      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f8ed 	bl	80055b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2208      	movs	r2, #8
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e029      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005400:	d111      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800540a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f8d3 	bl	80055b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e00f      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d0a6      	beq.n	8005392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005450:	b480      	push	{r7}
 8005452:	b097      	sub	sp, #92	; 0x5c
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	d10e      	bne.n	80054a2 <UART_Start_Receive_IT+0x52>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <UART_Start_Receive_IT+0x48>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005496:	e01a      	b.n	80054ce <UART_Start_Receive_IT+0x7e>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	22ff      	movs	r2, #255	; 0xff
 800549c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a0:	e015      	b.n	80054ce <UART_Start_Receive_IT+0x7e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10d      	bne.n	80054c6 <UART_Start_Receive_IT+0x76>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <UART_Start_Receive_IT+0x6c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ba:	e008      	b.n	80054ce <UART_Start_Receive_IT+0x7e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	227f      	movs	r2, #127	; 0x7f
 80054c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054c4:	e003      	b.n	80054ce <UART_Start_Receive_IT+0x7e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2222      	movs	r2, #34	; 0x22
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	657b      	str	r3, [r7, #84]	; 0x54
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d107      	bne.n	800552c <UART_Start_Receive_IT+0xdc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <UART_Start_Receive_IT+0x160>)
 8005528:	669a      	str	r2, [r3, #104]	; 0x68
 800552a:	e002      	b.n	8005532 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <UART_Start_Receive_IT+0x164>)
 8005530:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d019      	beq.n	800556e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
 800555a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e6      	bne.n	800553a <UART_Start_Receive_IT+0xea>
 800556c:	e018      	b.n	80055a0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	613b      	str	r3, [r7, #16]
   return(result);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f043 0320 	orr.w	r3, r3, #32
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	69f9      	ldr	r1, [r7, #28]
 8005592:	6a3a      	ldr	r2, [r7, #32]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	61bb      	str	r3, [r7, #24]
   return(result);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	375c      	adds	r7, #92	; 0x5c
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	080058a9 	.word	0x080058a9
 80055b4:	08005701 	.word	0x08005701

080055b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b095      	sub	sp, #84	; 0x54
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	61fb      	str	r3, [r7, #28]
   return(result);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	64bb      	str	r3, [r7, #72]	; 0x48
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562a:	2b01      	cmp	r3, #1
 800562c:	d118      	bne.n	8005660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60bb      	str	r3, [r7, #8]
   return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 0310 	bic.w	r3, r3, #16
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	613b      	str	r3, [r7, #16]
   return(result);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005674:	bf00      	nop
 8005676:	3754      	adds	r7, #84	; 0x54
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fb3a 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6979      	ldr	r1, [r7, #20]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	613b      	str	r3, [r7, #16]
   return(result);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fb06 	bl	8004d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f8:	bf00      	nop
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b09c      	sub	sp, #112	; 0x70
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800570e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005718:	2b22      	cmp	r3, #34	; 0x22
 800571a:	f040 80b9 	bne.w	8005890 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005724:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005728:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800572c:	b2d9      	uxtb	r1, r3
 800572e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	400a      	ands	r2, r1
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 809c 	bne.w	80058a0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800577c:	66bb      	str	r3, [r7, #104]	; 0x68
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005786:	65bb      	str	r3, [r7, #88]	; 0x58
 8005788:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	667b      	str	r3, [r7, #100]	; 0x64
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057ba:	647a      	str	r2, [r7, #68]	; 0x44
 80057bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d018      	beq.n	8005822 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	623b      	str	r3, [r7, #32]
   return(result);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005804:	663b      	str	r3, [r7, #96]	; 0x60
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
 8005810:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	2b01      	cmp	r3, #1
 8005828:	d12e      	bne.n	8005888 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	60fb      	str	r3, [r7, #12]
   return(result);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	69b9      	ldr	r1, [r7, #24]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	617b      	str	r3, [r7, #20]
   return(result);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d103      	bne.n	8005878 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2210      	movs	r2, #16
 8005876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fa53 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005886:	e00b      	b.n	80058a0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc f891 	bl	80019b0 <HAL_UART_RxCpltCallback>
}
 800588e:	e007      	b.n	80058a0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	619a      	str	r2, [r3, #24]
}
 80058a0:	bf00      	nop
 80058a2:	3770      	adds	r7, #112	; 0x70
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b09c      	sub	sp, #112	; 0x70
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	2b22      	cmp	r3, #34	; 0x22
 80058c2:	f040 80b9 	bne.w	8005a38 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058de:	4013      	ands	r3, r2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	f040 809c 	bne.w	8005a48 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800591e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005924:	667b      	str	r3, [r7, #100]	; 0x64
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800592e:	657b      	str	r3, [r7, #84]	; 0x54
 8005930:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800593c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	663b      	str	r3, [r7, #96]	; 0x60
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005962:	643a      	str	r2, [r7, #64]	; 0x40
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d12e      	bne.n	8005a30 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 0310 	bic.w	r3, r3, #16
 80059ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e6      	bne.n	80059d8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d103      	bne.n	8005a20 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff f97f 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a2e:	e00b      	b.n	8005a48 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb ffbd 	bl	80019b0 <HAL_UART_RxCpltCallback>
}
 8005a36:	e007      	b.n	8005a48 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	619a      	str	r2, [r3, #24]
}
 8005a48:	bf00      	nop
 8005a4a:	3770      	adds	r7, #112	; 0x70
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <atof>:
 8005a64:	2100      	movs	r1, #0
 8005a66:	f000 bec9 	b.w	80067fc <strtod>
	...

08005a6c <gcvt>:
 8005a6c:	b530      	push	{r4, r5, lr}
 8005a6e:	2200      	movs	r2, #0
 8005a70:	b085      	sub	sp, #20
 8005a72:	460c      	mov	r4, r1
 8005a74:	4605      	mov	r5, r0
 8005a76:	2300      	movs	r3, #0
 8005a78:	ec51 0b10 	vmov	r0, r1, d0
 8005a7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a80:	f7fb f82c 	bl	8000adc <__aeabi_dcmplt>
 8005a84:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005a88:	4622      	mov	r2, r4
 8005a8a:	b118      	cbz	r0, 8005a94 <gcvt+0x28>
 8005a8c:	232d      	movs	r3, #45	; 0x2d
 8005a8e:	f802 3b01 	strb.w	r3, [r2], #1
 8005a92:	3d01      	subs	r5, #1
 8005a94:	2300      	movs	r3, #0
 8005a96:	4806      	ldr	r0, [pc, #24]	; (8005ab0 <gcvt+0x44>)
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	2367      	movs	r3, #103	; 0x67
 8005a9e:	6800      	ldr	r0, [r0, #0]
 8005aa0:	f000 ff32 	bl	8006908 <_gcvt>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	bf14      	ite	ne
 8005aa8:	4620      	movne	r0, r4
 8005aaa:	2000      	moveq	r0, #0
 8005aac:	b005      	add	sp, #20
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	20000018 	.word	0x20000018

08005ab4 <__errno>:
 8005ab4:	4b01      	ldr	r3, [pc, #4]	; (8005abc <__errno+0x8>)
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000018 	.word	0x20000018

08005ac0 <__libc_init_array>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4d0d      	ldr	r5, [pc, #52]	; (8005af8 <__libc_init_array+0x38>)
 8005ac4:	4c0d      	ldr	r4, [pc, #52]	; (8005afc <__libc_init_array+0x3c>)
 8005ac6:	1b64      	subs	r4, r4, r5
 8005ac8:	10a4      	asrs	r4, r4, #2
 8005aca:	2600      	movs	r6, #0
 8005acc:	42a6      	cmp	r6, r4
 8005ace:	d109      	bne.n	8005ae4 <__libc_init_array+0x24>
 8005ad0:	4d0b      	ldr	r5, [pc, #44]	; (8005b00 <__libc_init_array+0x40>)
 8005ad2:	4c0c      	ldr	r4, [pc, #48]	; (8005b04 <__libc_init_array+0x44>)
 8005ad4:	f004 f8a4 	bl	8009c20 <_init>
 8005ad8:	1b64      	subs	r4, r4, r5
 8005ada:	10a4      	asrs	r4, r4, #2
 8005adc:	2600      	movs	r6, #0
 8005ade:	42a6      	cmp	r6, r4
 8005ae0:	d105      	bne.n	8005aee <__libc_init_array+0x2e>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae8:	4798      	blx	r3
 8005aea:	3601      	adds	r6, #1
 8005aec:	e7ee      	b.n	8005acc <__libc_init_array+0xc>
 8005aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af2:	4798      	blx	r3
 8005af4:	3601      	adds	r6, #1
 8005af6:	e7f2      	b.n	8005ade <__libc_init_array+0x1e>
 8005af8:	0800a110 	.word	0x0800a110
 8005afc:	0800a110 	.word	0x0800a110
 8005b00:	0800a110 	.word	0x0800a110
 8005b04:	0800a114 	.word	0x0800a114

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <siprintf>:
 8005b34:	b40e      	push	{r1, r2, r3}
 8005b36:	b500      	push	{lr}
 8005b38:	b09c      	sub	sp, #112	; 0x70
 8005b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b3c:	9002      	str	r0, [sp, #8]
 8005b3e:	9006      	str	r0, [sp, #24]
 8005b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b44:	4809      	ldr	r0, [pc, #36]	; (8005b6c <siprintf+0x38>)
 8005b46:	9107      	str	r1, [sp, #28]
 8005b48:	9104      	str	r1, [sp, #16]
 8005b4a:	4909      	ldr	r1, [pc, #36]	; (8005b70 <siprintf+0x3c>)
 8005b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b50:	9105      	str	r1, [sp, #20]
 8005b52:	6800      	ldr	r0, [r0, #0]
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	a902      	add	r1, sp, #8
 8005b58:	f002 f92c 	bl	8007db4 <_svfiprintf_r>
 8005b5c:	9b02      	ldr	r3, [sp, #8]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	b01c      	add	sp, #112	; 0x70
 8005b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b68:	b003      	add	sp, #12
 8005b6a:	4770      	bx	lr
 8005b6c:	20000018 	.word	0x20000018
 8005b70:	ffff0208 	.word	0xffff0208

08005b74 <strchr>:
 8005b74:	b2c9      	uxtb	r1, r1
 8005b76:	4603      	mov	r3, r0
 8005b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7c:	b11a      	cbz	r2, 8005b86 <strchr+0x12>
 8005b7e:	428a      	cmp	r2, r1
 8005b80:	d1f9      	bne.n	8005b76 <strchr+0x2>
 8005b82:	4618      	mov	r0, r3
 8005b84:	4770      	bx	lr
 8005b86:	2900      	cmp	r1, #0
 8005b88:	bf18      	it	ne
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	e7f9      	b.n	8005b82 <strchr+0xe>

08005b8e <strncpy>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	3901      	subs	r1, #1
 8005b92:	4603      	mov	r3, r0
 8005b94:	b132      	cbz	r2, 8005ba4 <strncpy+0x16>
 8005b96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b9a:	f803 4b01 	strb.w	r4, [r3], #1
 8005b9e:	3a01      	subs	r2, #1
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f7      	bne.n	8005b94 <strncpy+0x6>
 8005ba4:	441a      	add	r2, r3
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d100      	bne.n	8005bae <strncpy+0x20>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb2:	e7f9      	b.n	8005ba8 <strncpy+0x1a>

08005bb4 <sulp>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	460d      	mov	r5, r1
 8005bba:	ec45 4b10 	vmov	d0, r4, r5
 8005bbe:	4616      	mov	r6, r2
 8005bc0:	f001 fe56 	bl	8007870 <__ulp>
 8005bc4:	ec51 0b10 	vmov	r0, r1, d0
 8005bc8:	b17e      	cbz	r6, 8005bea <sulp+0x36>
 8005bca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005bce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd09      	ble.n	8005bea <sulp+0x36>
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005bdc:	2400      	movs	r4, #0
 8005bde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005be2:	4622      	mov	r2, r4
 8005be4:	462b      	mov	r3, r5
 8005be6:	f7fa fd07 	bl	80005f8 <__aeabi_dmul>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	0000      	movs	r0, r0
	...

08005bf0 <_strtod_l>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	ed2d 8b02 	vpush	{d8}
 8005bf8:	b09d      	sub	sp, #116	; 0x74
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9318      	str	r3, [sp, #96]	; 0x60
 8005c00:	4ba2      	ldr	r3, [pc, #648]	; (8005e8c <_strtod_l+0x29c>)
 8005c02:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	9305      	str	r3, [sp, #20]
 8005c08:	4604      	mov	r4, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	4688      	mov	r8, r1
 8005c0e:	f7fa fadf 	bl	80001d0 <strlen>
 8005c12:	f04f 0a00 	mov.w	sl, #0
 8005c16:	4605      	mov	r5, r0
 8005c18:	f04f 0b00 	mov.w	fp, #0
 8005c1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	2a2b      	cmp	r2, #43	; 0x2b
 8005c26:	d04e      	beq.n	8005cc6 <_strtod_l+0xd6>
 8005c28:	d83b      	bhi.n	8005ca2 <_strtod_l+0xb2>
 8005c2a:	2a0d      	cmp	r2, #13
 8005c2c:	d834      	bhi.n	8005c98 <_strtod_l+0xa8>
 8005c2e:	2a08      	cmp	r2, #8
 8005c30:	d834      	bhi.n	8005c9c <_strtod_l+0xac>
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d03e      	beq.n	8005cb4 <_strtod_l+0xc4>
 8005c36:	2300      	movs	r3, #0
 8005c38:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005c3c:	7833      	ldrb	r3, [r6, #0]
 8005c3e:	2b30      	cmp	r3, #48	; 0x30
 8005c40:	f040 80b0 	bne.w	8005da4 <_strtod_l+0x1b4>
 8005c44:	7873      	ldrb	r3, [r6, #1]
 8005c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c4a:	2b58      	cmp	r3, #88	; 0x58
 8005c4c:	d168      	bne.n	8005d20 <_strtod_l+0x130>
 8005c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	ab18      	add	r3, sp, #96	; 0x60
 8005c54:	9702      	str	r7, [sp, #8]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4a8d      	ldr	r2, [pc, #564]	; (8005e90 <_strtod_l+0x2a0>)
 8005c5a:	ab19      	add	r3, sp, #100	; 0x64
 8005c5c:	a917      	add	r1, sp, #92	; 0x5c
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 ff7a 	bl	8006b58 <__gethex>
 8005c64:	f010 0707 	ands.w	r7, r0, #7
 8005c68:	4605      	mov	r5, r0
 8005c6a:	d005      	beq.n	8005c78 <_strtod_l+0x88>
 8005c6c:	2f06      	cmp	r7, #6
 8005c6e:	d12c      	bne.n	8005cca <_strtod_l+0xda>
 8005c70:	3601      	adds	r6, #1
 8005c72:	2300      	movs	r3, #0
 8005c74:	9617      	str	r6, [sp, #92]	; 0x5c
 8005c76:	930a      	str	r3, [sp, #40]	; 0x28
 8005c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 8590 	bne.w	80067a0 <_strtod_l+0xbb0>
 8005c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c82:	b1eb      	cbz	r3, 8005cc0 <_strtod_l+0xd0>
 8005c84:	4652      	mov	r2, sl
 8005c86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c8a:	ec43 2b10 	vmov	d0, r2, r3
 8005c8e:	b01d      	add	sp, #116	; 0x74
 8005c90:	ecbd 8b02 	vpop	{d8}
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c98:	2a20      	cmp	r2, #32
 8005c9a:	d1cc      	bne.n	8005c36 <_strtod_l+0x46>
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ca0:	e7be      	b.n	8005c20 <_strtod_l+0x30>
 8005ca2:	2a2d      	cmp	r2, #45	; 0x2d
 8005ca4:	d1c7      	bne.n	8005c36 <_strtod_l+0x46>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1c2      	bne.n	8005c3a <_strtod_l+0x4a>
 8005cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f040 856e 	bne.w	800679c <_strtod_l+0xbac>
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	465b      	mov	r3, fp
 8005cc4:	e7e1      	b.n	8005c8a <_strtod_l+0x9a>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	e7ee      	b.n	8005ca8 <_strtod_l+0xb8>
 8005cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ccc:	b13a      	cbz	r2, 8005cde <_strtod_l+0xee>
 8005cce:	2135      	movs	r1, #53	; 0x35
 8005cd0:	a81a      	add	r0, sp, #104	; 0x68
 8005cd2:	f001 fef7 	bl	8007ac4 <__copybits>
 8005cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f001 fa97 	bl	800720c <_Bfree>
 8005cde:	3f01      	subs	r7, #1
 8005ce0:	2f04      	cmp	r7, #4
 8005ce2:	d806      	bhi.n	8005cf2 <_strtod_l+0x102>
 8005ce4:	e8df f007 	tbb	[pc, r7]
 8005ce8:	1714030a 	.word	0x1714030a
 8005cec:	0a          	.byte	0x0a
 8005ced:	00          	.byte	0x00
 8005cee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005cf2:	0728      	lsls	r0, r5, #28
 8005cf4:	d5c0      	bpl.n	8005c78 <_strtod_l+0x88>
 8005cf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005cfa:	e7bd      	b.n	8005c78 <_strtod_l+0x88>
 8005cfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005d00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d0e:	e7f0      	b.n	8005cf2 <_strtod_l+0x102>
 8005d10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005e94 <_strtod_l+0x2a4>
 8005d14:	e7ed      	b.n	8005cf2 <_strtod_l+0x102>
 8005d16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005d1a:	f04f 3aff 	mov.w	sl, #4294967295
 8005d1e:	e7e8      	b.n	8005cf2 <_strtod_l+0x102>
 8005d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d0f9      	beq.n	8005d20 <_strtod_l+0x130>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0a3      	beq.n	8005c78 <_strtod_l+0x88>
 8005d30:	2301      	movs	r3, #1
 8005d32:	f04f 0900 	mov.w	r9, #0
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d3a:	9308      	str	r3, [sp, #32]
 8005d3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d40:	464f      	mov	r7, r9
 8005d42:	220a      	movs	r2, #10
 8005d44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005d46:	7806      	ldrb	r6, [r0, #0]
 8005d48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005d4c:	b2d9      	uxtb	r1, r3
 8005d4e:	2909      	cmp	r1, #9
 8005d50:	d92a      	bls.n	8005da8 <_strtod_l+0x1b8>
 8005d52:	9905      	ldr	r1, [sp, #20]
 8005d54:	462a      	mov	r2, r5
 8005d56:	f002 fae3 	bl	8008320 <strncmp>
 8005d5a:	b398      	cbz	r0, 8005dc4 <_strtod_l+0x1d4>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	4632      	mov	r2, r6
 8005d60:	463d      	mov	r5, r7
 8005d62:	9005      	str	r0, [sp, #20]
 8005d64:	4603      	mov	r3, r0
 8005d66:	2a65      	cmp	r2, #101	; 0x65
 8005d68:	d001      	beq.n	8005d6e <_strtod_l+0x17e>
 8005d6a:	2a45      	cmp	r2, #69	; 0x45
 8005d6c:	d118      	bne.n	8005da0 <_strtod_l+0x1b0>
 8005d6e:	b91d      	cbnz	r5, 8005d78 <_strtod_l+0x188>
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	4302      	orrs	r2, r0
 8005d74:	d09e      	beq.n	8005cb4 <_strtod_l+0xc4>
 8005d76:	2500      	movs	r5, #0
 8005d78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005d7c:	f108 0201 	add.w	r2, r8, #1
 8005d80:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005d86:	2a2b      	cmp	r2, #43	; 0x2b
 8005d88:	d075      	beq.n	8005e76 <_strtod_l+0x286>
 8005d8a:	2a2d      	cmp	r2, #45	; 0x2d
 8005d8c:	d07b      	beq.n	8005e86 <_strtod_l+0x296>
 8005d8e:	f04f 0c00 	mov.w	ip, #0
 8005d92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d96:	2909      	cmp	r1, #9
 8005d98:	f240 8082 	bls.w	8005ea0 <_strtod_l+0x2b0>
 8005d9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005da0:	2600      	movs	r6, #0
 8005da2:	e09d      	b.n	8005ee0 <_strtod_l+0x2f0>
 8005da4:	2300      	movs	r3, #0
 8005da6:	e7c4      	b.n	8005d32 <_strtod_l+0x142>
 8005da8:	2f08      	cmp	r7, #8
 8005daa:	bfd8      	it	le
 8005dac:	9907      	ldrle	r1, [sp, #28]
 8005dae:	f100 0001 	add.w	r0, r0, #1
 8005db2:	bfda      	itte	le
 8005db4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005db8:	9307      	strle	r3, [sp, #28]
 8005dba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005dbe:	3701      	adds	r7, #1
 8005dc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005dc2:	e7bf      	b.n	8005d44 <_strtod_l+0x154>
 8005dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dc6:	195a      	adds	r2, r3, r5
 8005dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005dca:	5d5a      	ldrb	r2, [r3, r5]
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	d037      	beq.n	8005e40 <_strtod_l+0x250>
 8005dd0:	9005      	str	r0, [sp, #20]
 8005dd2:	463d      	mov	r5, r7
 8005dd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d912      	bls.n	8005e02 <_strtod_l+0x212>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7c2      	b.n	8005d66 <_strtod_l+0x176>
 8005de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005de6:	785a      	ldrb	r2, [r3, #1]
 8005de8:	3001      	adds	r0, #1
 8005dea:	2a30      	cmp	r2, #48	; 0x30
 8005dec:	d0f8      	beq.n	8005de0 <_strtod_l+0x1f0>
 8005dee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	f200 84d9 	bhi.w	80067aa <_strtod_l+0xbba>
 8005df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dfa:	9005      	str	r0, [sp, #20]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	9308      	str	r3, [sp, #32]
 8005e00:	4605      	mov	r5, r0
 8005e02:	3a30      	subs	r2, #48	; 0x30
 8005e04:	f100 0301 	add.w	r3, r0, #1
 8005e08:	d014      	beq.n	8005e34 <_strtod_l+0x244>
 8005e0a:	9905      	ldr	r1, [sp, #20]
 8005e0c:	4419      	add	r1, r3
 8005e0e:	9105      	str	r1, [sp, #20]
 8005e10:	462b      	mov	r3, r5
 8005e12:	eb00 0e05 	add.w	lr, r0, r5
 8005e16:	210a      	movs	r1, #10
 8005e18:	4573      	cmp	r3, lr
 8005e1a:	d113      	bne.n	8005e44 <_strtod_l+0x254>
 8005e1c:	182b      	adds	r3, r5, r0
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	f105 0501 	add.w	r5, r5, #1
 8005e24:	4405      	add	r5, r0
 8005e26:	dc1c      	bgt.n	8005e62 <_strtod_l+0x272>
 8005e28:	9907      	ldr	r1, [sp, #28]
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	fb03 2301 	mla	r3, r3, r1, r2
 8005e30:	9307      	str	r3, [sp, #28]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e36:	1c51      	adds	r1, r2, #1
 8005e38:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e3a:	7852      	ldrb	r2, [r2, #1]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	e7c9      	b.n	8005dd4 <_strtod_l+0x1e4>
 8005e40:	4638      	mov	r0, r7
 8005e42:	e7d2      	b.n	8005dea <_strtod_l+0x1fa>
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	dc04      	bgt.n	8005e52 <_strtod_l+0x262>
 8005e48:	9e07      	ldr	r6, [sp, #28]
 8005e4a:	434e      	muls	r6, r1
 8005e4c:	9607      	str	r6, [sp, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	e7e2      	b.n	8005e18 <_strtod_l+0x228>
 8005e52:	f103 0c01 	add.w	ip, r3, #1
 8005e56:	f1bc 0f10 	cmp.w	ip, #16
 8005e5a:	bfd8      	it	le
 8005e5c:	fb01 f909 	mulle.w	r9, r1, r9
 8005e60:	e7f5      	b.n	8005e4e <_strtod_l+0x25e>
 8005e62:	2d10      	cmp	r5, #16
 8005e64:	bfdc      	itt	le
 8005e66:	230a      	movle	r3, #10
 8005e68:	fb03 2909 	mlale	r9, r3, r9, r2
 8005e6c:	e7e1      	b.n	8005e32 <_strtod_l+0x242>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	2301      	movs	r3, #1
 8005e74:	e77c      	b.n	8005d70 <_strtod_l+0x180>
 8005e76:	f04f 0c00 	mov.w	ip, #0
 8005e7a:	f108 0202 	add.w	r2, r8, #2
 8005e7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005e84:	e785      	b.n	8005d92 <_strtod_l+0x1a2>
 8005e86:	f04f 0c01 	mov.w	ip, #1
 8005e8a:	e7f6      	b.n	8005e7a <_strtod_l+0x28a>
 8005e8c:	08009d50 	.word	0x08009d50
 8005e90:	08009c84 	.word	0x08009c84
 8005e94:	7ff00000 	.word	0x7ff00000
 8005e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e9a:	1c51      	adds	r1, r2, #1
 8005e9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e9e:	7852      	ldrb	r2, [r2, #1]
 8005ea0:	2a30      	cmp	r2, #48	; 0x30
 8005ea2:	d0f9      	beq.n	8005e98 <_strtod_l+0x2a8>
 8005ea4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005ea8:	2908      	cmp	r1, #8
 8005eaa:	f63f af79 	bhi.w	8005da0 <_strtod_l+0x1b0>
 8005eae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005eb4:	9206      	str	r2, [sp, #24]
 8005eb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005eb8:	1c51      	adds	r1, r2, #1
 8005eba:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ebc:	7852      	ldrb	r2, [r2, #1]
 8005ebe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005ec2:	2e09      	cmp	r6, #9
 8005ec4:	d937      	bls.n	8005f36 <_strtod_l+0x346>
 8005ec6:	9e06      	ldr	r6, [sp, #24]
 8005ec8:	1b89      	subs	r1, r1, r6
 8005eca:	2908      	cmp	r1, #8
 8005ecc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005ed0:	dc02      	bgt.n	8005ed8 <_strtod_l+0x2e8>
 8005ed2:	4576      	cmp	r6, lr
 8005ed4:	bfa8      	it	ge
 8005ed6:	4676      	movge	r6, lr
 8005ed8:	f1bc 0f00 	cmp.w	ip, #0
 8005edc:	d000      	beq.n	8005ee0 <_strtod_l+0x2f0>
 8005ede:	4276      	negs	r6, r6
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	d14d      	bne.n	8005f80 <_strtod_l+0x390>
 8005ee4:	9904      	ldr	r1, [sp, #16]
 8005ee6:	4301      	orrs	r1, r0
 8005ee8:	f47f aec6 	bne.w	8005c78 <_strtod_l+0x88>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f aee1 	bne.w	8005cb4 <_strtod_l+0xc4>
 8005ef2:	2a69      	cmp	r2, #105	; 0x69
 8005ef4:	d027      	beq.n	8005f46 <_strtod_l+0x356>
 8005ef6:	dc24      	bgt.n	8005f42 <_strtod_l+0x352>
 8005ef8:	2a49      	cmp	r2, #73	; 0x49
 8005efa:	d024      	beq.n	8005f46 <_strtod_l+0x356>
 8005efc:	2a4e      	cmp	r2, #78	; 0x4e
 8005efe:	f47f aed9 	bne.w	8005cb4 <_strtod_l+0xc4>
 8005f02:	499f      	ldr	r1, [pc, #636]	; (8006180 <_strtod_l+0x590>)
 8005f04:	a817      	add	r0, sp, #92	; 0x5c
 8005f06:	f001 f87f 	bl	8007008 <__match>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	f43f aed2 	beq.w	8005cb4 <_strtod_l+0xc4>
 8005f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b28      	cmp	r3, #40	; 0x28
 8005f16:	d12d      	bne.n	8005f74 <_strtod_l+0x384>
 8005f18:	499a      	ldr	r1, [pc, #616]	; (8006184 <_strtod_l+0x594>)
 8005f1a:	aa1a      	add	r2, sp, #104	; 0x68
 8005f1c:	a817      	add	r0, sp, #92	; 0x5c
 8005f1e:	f001 f887 	bl	8007030 <__hexnan>
 8005f22:	2805      	cmp	r0, #5
 8005f24:	d126      	bne.n	8005f74 <_strtod_l+0x384>
 8005f26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005f2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005f30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005f34:	e6a0      	b.n	8005c78 <_strtod_l+0x88>
 8005f36:	210a      	movs	r1, #10
 8005f38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005f3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005f40:	e7b9      	b.n	8005eb6 <_strtod_l+0x2c6>
 8005f42:	2a6e      	cmp	r2, #110	; 0x6e
 8005f44:	e7db      	b.n	8005efe <_strtod_l+0x30e>
 8005f46:	4990      	ldr	r1, [pc, #576]	; (8006188 <_strtod_l+0x598>)
 8005f48:	a817      	add	r0, sp, #92	; 0x5c
 8005f4a:	f001 f85d 	bl	8007008 <__match>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f aeb0 	beq.w	8005cb4 <_strtod_l+0xc4>
 8005f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f56:	498d      	ldr	r1, [pc, #564]	; (800618c <_strtod_l+0x59c>)
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	a817      	add	r0, sp, #92	; 0x5c
 8005f5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f5e:	f001 f853 	bl	8007008 <__match>
 8005f62:	b910      	cbnz	r0, 8005f6a <_strtod_l+0x37a>
 8005f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f66:	3301      	adds	r3, #1
 8005f68:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800619c <_strtod_l+0x5ac>
 8005f6e:	f04f 0a00 	mov.w	sl, #0
 8005f72:	e681      	b.n	8005c78 <_strtod_l+0x88>
 8005f74:	4886      	ldr	r0, [pc, #536]	; (8006190 <_strtod_l+0x5a0>)
 8005f76:	f002 f9b3 	bl	80082e0 <nan>
 8005f7a:	ec5b ab10 	vmov	sl, fp, d0
 8005f7e:	e67b      	b.n	8005c78 <_strtod_l+0x88>
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	9807      	ldr	r0, [sp, #28]
 8005f84:	1af3      	subs	r3, r6, r3
 8005f86:	2f00      	cmp	r7, #0
 8005f88:	bf08      	it	eq
 8005f8a:	462f      	moveq	r7, r5
 8005f8c:	2d10      	cmp	r5, #16
 8005f8e:	9306      	str	r3, [sp, #24]
 8005f90:	46a8      	mov	r8, r5
 8005f92:	bfa8      	it	ge
 8005f94:	f04f 0810 	movge.w	r8, #16
 8005f98:	f7fa fab4 	bl	8000504 <__aeabi_ui2d>
 8005f9c:	2d09      	cmp	r5, #9
 8005f9e:	4682      	mov	sl, r0
 8005fa0:	468b      	mov	fp, r1
 8005fa2:	dd13      	ble.n	8005fcc <_strtod_l+0x3dc>
 8005fa4:	4b7b      	ldr	r3, [pc, #492]	; (8006194 <_strtod_l+0x5a4>)
 8005fa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005faa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005fae:	f7fa fb23 	bl	80005f8 <__aeabi_dmul>
 8005fb2:	4682      	mov	sl, r0
 8005fb4:	4648      	mov	r0, r9
 8005fb6:	468b      	mov	fp, r1
 8005fb8:	f7fa faa4 	bl	8000504 <__aeabi_ui2d>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa f962 	bl	800028c <__adddf3>
 8005fc8:	4682      	mov	sl, r0
 8005fca:	468b      	mov	fp, r1
 8005fcc:	2d0f      	cmp	r5, #15
 8005fce:	dc38      	bgt.n	8006042 <_strtod_l+0x452>
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f43f ae50 	beq.w	8005c78 <_strtod_l+0x88>
 8005fd8:	dd24      	ble.n	8006024 <_strtod_l+0x434>
 8005fda:	2b16      	cmp	r3, #22
 8005fdc:	dc0b      	bgt.n	8005ff6 <_strtod_l+0x406>
 8005fde:	496d      	ldr	r1, [pc, #436]	; (8006194 <_strtod_l+0x5a4>)
 8005fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe8:	4652      	mov	r2, sl
 8005fea:	465b      	mov	r3, fp
 8005fec:	f7fa fb04 	bl	80005f8 <__aeabi_dmul>
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	468b      	mov	fp, r1
 8005ff4:	e640      	b.n	8005c78 <_strtod_l+0x88>
 8005ff6:	9a06      	ldr	r2, [sp, #24]
 8005ff8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	db20      	blt.n	8006042 <_strtod_l+0x452>
 8006000:	4c64      	ldr	r4, [pc, #400]	; (8006194 <_strtod_l+0x5a4>)
 8006002:	f1c5 050f 	rsb	r5, r5, #15
 8006006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800600a:	4652      	mov	r2, sl
 800600c:	465b      	mov	r3, fp
 800600e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006012:	f7fa faf1 	bl	80005f8 <__aeabi_dmul>
 8006016:	9b06      	ldr	r3, [sp, #24]
 8006018:	1b5d      	subs	r5, r3, r5
 800601a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800601e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006022:	e7e3      	b.n	8005fec <_strtod_l+0x3fc>
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	3316      	adds	r3, #22
 8006028:	db0b      	blt.n	8006042 <_strtod_l+0x452>
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	1b9e      	subs	r6, r3, r6
 800602e:	4b59      	ldr	r3, [pc, #356]	; (8006194 <_strtod_l+0x5a4>)
 8006030:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006034:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006038:	4650      	mov	r0, sl
 800603a:	4659      	mov	r1, fp
 800603c:	f7fa fc06 	bl	800084c <__aeabi_ddiv>
 8006040:	e7d6      	b.n	8005ff0 <_strtod_l+0x400>
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	eba5 0808 	sub.w	r8, r5, r8
 8006048:	4498      	add	r8, r3
 800604a:	f1b8 0f00 	cmp.w	r8, #0
 800604e:	dd74      	ble.n	800613a <_strtod_l+0x54a>
 8006050:	f018 030f 	ands.w	r3, r8, #15
 8006054:	d00a      	beq.n	800606c <_strtod_l+0x47c>
 8006056:	494f      	ldr	r1, [pc, #316]	; (8006194 <_strtod_l+0x5a4>)
 8006058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800605c:	4652      	mov	r2, sl
 800605e:	465b      	mov	r3, fp
 8006060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006064:	f7fa fac8 	bl	80005f8 <__aeabi_dmul>
 8006068:	4682      	mov	sl, r0
 800606a:	468b      	mov	fp, r1
 800606c:	f038 080f 	bics.w	r8, r8, #15
 8006070:	d04f      	beq.n	8006112 <_strtod_l+0x522>
 8006072:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006076:	dd22      	ble.n	80060be <_strtod_l+0x4ce>
 8006078:	2500      	movs	r5, #0
 800607a:	462e      	mov	r6, r5
 800607c:	9507      	str	r5, [sp, #28]
 800607e:	9505      	str	r5, [sp, #20]
 8006080:	2322      	movs	r3, #34	; 0x22
 8006082:	f8df b118 	ldr.w	fp, [pc, #280]	; 800619c <_strtod_l+0x5ac>
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	f04f 0a00 	mov.w	sl, #0
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f43f adf2 	beq.w	8005c78 <_strtod_l+0x88>
 8006094:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006096:	4620      	mov	r0, r4
 8006098:	f001 f8b8 	bl	800720c <_Bfree>
 800609c:	9905      	ldr	r1, [sp, #20]
 800609e:	4620      	mov	r0, r4
 80060a0:	f001 f8b4 	bl	800720c <_Bfree>
 80060a4:	4631      	mov	r1, r6
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 f8b0 	bl	800720c <_Bfree>
 80060ac:	9907      	ldr	r1, [sp, #28]
 80060ae:	4620      	mov	r0, r4
 80060b0:	f001 f8ac 	bl	800720c <_Bfree>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 f8a8 	bl	800720c <_Bfree>
 80060bc:	e5dc      	b.n	8005c78 <_strtod_l+0x88>
 80060be:	4b36      	ldr	r3, [pc, #216]	; (8006198 <_strtod_l+0x5a8>)
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	2300      	movs	r3, #0
 80060c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80060c8:	4650      	mov	r0, sl
 80060ca:	4659      	mov	r1, fp
 80060cc:	4699      	mov	r9, r3
 80060ce:	f1b8 0f01 	cmp.w	r8, #1
 80060d2:	dc21      	bgt.n	8006118 <_strtod_l+0x528>
 80060d4:	b10b      	cbz	r3, 80060da <_strtod_l+0x4ea>
 80060d6:	4682      	mov	sl, r0
 80060d8:	468b      	mov	fp, r1
 80060da:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <_strtod_l+0x5a8>)
 80060dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80060e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80060e4:	4652      	mov	r2, sl
 80060e6:	465b      	mov	r3, fp
 80060e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80060ec:	f7fa fa84 	bl	80005f8 <__aeabi_dmul>
 80060f0:	4b2a      	ldr	r3, [pc, #168]	; (800619c <_strtod_l+0x5ac>)
 80060f2:	460a      	mov	r2, r1
 80060f4:	400b      	ands	r3, r1
 80060f6:	492a      	ldr	r1, [pc, #168]	; (80061a0 <_strtod_l+0x5b0>)
 80060f8:	428b      	cmp	r3, r1
 80060fa:	4682      	mov	sl, r0
 80060fc:	d8bc      	bhi.n	8006078 <_strtod_l+0x488>
 80060fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006102:	428b      	cmp	r3, r1
 8006104:	bf86      	itte	hi
 8006106:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80061a4 <_strtod_l+0x5b4>
 800610a:	f04f 3aff 	movhi.w	sl, #4294967295
 800610e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006112:	2300      	movs	r3, #0
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	e084      	b.n	8006222 <_strtod_l+0x632>
 8006118:	f018 0f01 	tst.w	r8, #1
 800611c:	d005      	beq.n	800612a <_strtod_l+0x53a>
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa fa68 	bl	80005f8 <__aeabi_dmul>
 8006128:	2301      	movs	r3, #1
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	3208      	adds	r2, #8
 800612e:	f109 0901 	add.w	r9, r9, #1
 8006132:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006136:	9204      	str	r2, [sp, #16]
 8006138:	e7c9      	b.n	80060ce <_strtod_l+0x4de>
 800613a:	d0ea      	beq.n	8006112 <_strtod_l+0x522>
 800613c:	f1c8 0800 	rsb	r8, r8, #0
 8006140:	f018 020f 	ands.w	r2, r8, #15
 8006144:	d00a      	beq.n	800615c <_strtod_l+0x56c>
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_strtod_l+0x5a4>)
 8006148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614c:	4650      	mov	r0, sl
 800614e:	4659      	mov	r1, fp
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa fb7a 	bl	800084c <__aeabi_ddiv>
 8006158:	4682      	mov	sl, r0
 800615a:	468b      	mov	fp, r1
 800615c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006160:	d0d7      	beq.n	8006112 <_strtod_l+0x522>
 8006162:	f1b8 0f1f 	cmp.w	r8, #31
 8006166:	dd1f      	ble.n	80061a8 <_strtod_l+0x5b8>
 8006168:	2500      	movs	r5, #0
 800616a:	462e      	mov	r6, r5
 800616c:	9507      	str	r5, [sp, #28]
 800616e:	9505      	str	r5, [sp, #20]
 8006170:	2322      	movs	r3, #34	; 0x22
 8006172:	f04f 0a00 	mov.w	sl, #0
 8006176:	f04f 0b00 	mov.w	fp, #0
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	e786      	b.n	800608c <_strtod_l+0x49c>
 800617e:	bf00      	nop
 8006180:	08009c7f 	.word	0x08009c7f
 8006184:	08009c98 	.word	0x08009c98
 8006188:	08009c7c 	.word	0x08009c7c
 800618c:	0800a047 	.word	0x0800a047
 8006190:	08009f42 	.word	0x08009f42
 8006194:	08009e00 	.word	0x08009e00
 8006198:	08009dd8 	.word	0x08009dd8
 800619c:	7ff00000 	.word	0x7ff00000
 80061a0:	7ca00000 	.word	0x7ca00000
 80061a4:	7fefffff 	.word	0x7fefffff
 80061a8:	f018 0310 	ands.w	r3, r8, #16
 80061ac:	bf18      	it	ne
 80061ae:	236a      	movne	r3, #106	; 0x6a
 80061b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006560 <_strtod_l+0x970>
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	4650      	mov	r0, sl
 80061b8:	4659      	mov	r1, fp
 80061ba:	2300      	movs	r3, #0
 80061bc:	f018 0f01 	tst.w	r8, #1
 80061c0:	d004      	beq.n	80061cc <_strtod_l+0x5dc>
 80061c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061c6:	f7fa fa17 	bl	80005f8 <__aeabi_dmul>
 80061ca:	2301      	movs	r3, #1
 80061cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80061d0:	f109 0908 	add.w	r9, r9, #8
 80061d4:	d1f2      	bne.n	80061bc <_strtod_l+0x5cc>
 80061d6:	b10b      	cbz	r3, 80061dc <_strtod_l+0x5ec>
 80061d8:	4682      	mov	sl, r0
 80061da:	468b      	mov	fp, r1
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	b1c3      	cbz	r3, 8006212 <_strtod_l+0x622>
 80061e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	4659      	mov	r1, fp
 80061ec:	dd11      	ble.n	8006212 <_strtod_l+0x622>
 80061ee:	2b1f      	cmp	r3, #31
 80061f0:	f340 8124 	ble.w	800643c <_strtod_l+0x84c>
 80061f4:	2b34      	cmp	r3, #52	; 0x34
 80061f6:	bfde      	ittt	le
 80061f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80061fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006200:	fa03 f202 	lslle.w	r2, r3, r2
 8006204:	f04f 0a00 	mov.w	sl, #0
 8006208:	bfcc      	ite	gt
 800620a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800620e:	ea02 0b01 	andle.w	fp, r2, r1
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	4650      	mov	r0, sl
 8006218:	4659      	mov	r1, fp
 800621a:	f7fa fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800621e:	2800      	cmp	r0, #0
 8006220:	d1a2      	bne.n	8006168 <_strtod_l+0x578>
 8006222:	9b07      	ldr	r3, [sp, #28]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	9908      	ldr	r1, [sp, #32]
 8006228:	462b      	mov	r3, r5
 800622a:	463a      	mov	r2, r7
 800622c:	4620      	mov	r0, r4
 800622e:	f001 f855 	bl	80072dc <__s2b>
 8006232:	9007      	str	r0, [sp, #28]
 8006234:	2800      	cmp	r0, #0
 8006236:	f43f af1f 	beq.w	8006078 <_strtod_l+0x488>
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	1b9e      	subs	r6, r3, r6
 800623e:	9b06      	ldr	r3, [sp, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfb4      	ite	lt
 8006244:	4633      	movlt	r3, r6
 8006246:	2300      	movge	r3, #0
 8006248:	930c      	str	r3, [sp, #48]	; 0x30
 800624a:	9b06      	ldr	r3, [sp, #24]
 800624c:	2500      	movs	r5, #0
 800624e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006252:	9312      	str	r3, [sp, #72]	; 0x48
 8006254:	462e      	mov	r6, r5
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	4620      	mov	r0, r4
 800625a:	6859      	ldr	r1, [r3, #4]
 800625c:	f000 ff96 	bl	800718c <_Balloc>
 8006260:	9005      	str	r0, [sp, #20]
 8006262:	2800      	cmp	r0, #0
 8006264:	f43f af0c 	beq.w	8006080 <_strtod_l+0x490>
 8006268:	9b07      	ldr	r3, [sp, #28]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	3202      	adds	r2, #2
 800626e:	f103 010c 	add.w	r1, r3, #12
 8006272:	0092      	lsls	r2, r2, #2
 8006274:	300c      	adds	r0, #12
 8006276:	f7ff fc47 	bl	8005b08 <memcpy>
 800627a:	ec4b ab10 	vmov	d0, sl, fp
 800627e:	aa1a      	add	r2, sp, #104	; 0x68
 8006280:	a919      	add	r1, sp, #100	; 0x64
 8006282:	4620      	mov	r0, r4
 8006284:	f001 fb70 	bl	8007968 <__d2b>
 8006288:	ec4b ab18 	vmov	d8, sl, fp
 800628c:	9018      	str	r0, [sp, #96]	; 0x60
 800628e:	2800      	cmp	r0, #0
 8006290:	f43f aef6 	beq.w	8006080 <_strtod_l+0x490>
 8006294:	2101      	movs	r1, #1
 8006296:	4620      	mov	r0, r4
 8006298:	f001 f8ba 	bl	8007410 <__i2b>
 800629c:	4606      	mov	r6, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	f43f aeee 	beq.w	8006080 <_strtod_l+0x490>
 80062a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062a6:	9904      	ldr	r1, [sp, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfab      	itete	ge
 80062ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80062ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80062b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80062b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80062b6:	bfac      	ite	ge
 80062b8:	eb03 0902 	addge.w	r9, r3, r2
 80062bc:	1ad7      	sublt	r7, r2, r3
 80062be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062c0:	eba3 0801 	sub.w	r8, r3, r1
 80062c4:	4490      	add	r8, r2
 80062c6:	4ba1      	ldr	r3, [pc, #644]	; (800654c <_strtod_l+0x95c>)
 80062c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80062cc:	4598      	cmp	r8, r3
 80062ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80062d2:	f280 80c7 	bge.w	8006464 <_strtod_l+0x874>
 80062d6:	eba3 0308 	sub.w	r3, r3, r8
 80062da:	2b1f      	cmp	r3, #31
 80062dc:	eba2 0203 	sub.w	r2, r2, r3
 80062e0:	f04f 0101 	mov.w	r1, #1
 80062e4:	f300 80b1 	bgt.w	800644a <_strtod_l+0x85a>
 80062e8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ec:	930d      	str	r3, [sp, #52]	; 0x34
 80062ee:	2300      	movs	r3, #0
 80062f0:	9308      	str	r3, [sp, #32]
 80062f2:	eb09 0802 	add.w	r8, r9, r2
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	45c1      	cmp	r9, r8
 80062fa:	4417      	add	r7, r2
 80062fc:	441f      	add	r7, r3
 80062fe:	464b      	mov	r3, r9
 8006300:	bfa8      	it	ge
 8006302:	4643      	movge	r3, r8
 8006304:	42bb      	cmp	r3, r7
 8006306:	bfa8      	it	ge
 8006308:	463b      	movge	r3, r7
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfc2      	ittt	gt
 800630e:	eba8 0803 	subgt.w	r8, r8, r3
 8006312:	1aff      	subgt	r7, r7, r3
 8006314:	eba9 0903 	subgt.w	r9, r9, r3
 8006318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd17      	ble.n	800634e <_strtod_l+0x75e>
 800631e:	4631      	mov	r1, r6
 8006320:	461a      	mov	r2, r3
 8006322:	4620      	mov	r0, r4
 8006324:	f001 f934 	bl	8007590 <__pow5mult>
 8006328:	4606      	mov	r6, r0
 800632a:	2800      	cmp	r0, #0
 800632c:	f43f aea8 	beq.w	8006080 <_strtod_l+0x490>
 8006330:	4601      	mov	r1, r0
 8006332:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006334:	4620      	mov	r0, r4
 8006336:	f001 f881 	bl	800743c <__multiply>
 800633a:	900b      	str	r0, [sp, #44]	; 0x2c
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f ae9f 	beq.w	8006080 <_strtod_l+0x490>
 8006342:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006344:	4620      	mov	r0, r4
 8006346:	f000 ff61 	bl	800720c <_Bfree>
 800634a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800634c:	9318      	str	r3, [sp, #96]	; 0x60
 800634e:	f1b8 0f00 	cmp.w	r8, #0
 8006352:	f300 808c 	bgt.w	800646e <_strtod_l+0x87e>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dd08      	ble.n	800636e <_strtod_l+0x77e>
 800635c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800635e:	9905      	ldr	r1, [sp, #20]
 8006360:	4620      	mov	r0, r4
 8006362:	f001 f915 	bl	8007590 <__pow5mult>
 8006366:	9005      	str	r0, [sp, #20]
 8006368:	2800      	cmp	r0, #0
 800636a:	f43f ae89 	beq.w	8006080 <_strtod_l+0x490>
 800636e:	2f00      	cmp	r7, #0
 8006370:	dd08      	ble.n	8006384 <_strtod_l+0x794>
 8006372:	9905      	ldr	r1, [sp, #20]
 8006374:	463a      	mov	r2, r7
 8006376:	4620      	mov	r0, r4
 8006378:	f001 f964 	bl	8007644 <__lshift>
 800637c:	9005      	str	r0, [sp, #20]
 800637e:	2800      	cmp	r0, #0
 8006380:	f43f ae7e 	beq.w	8006080 <_strtod_l+0x490>
 8006384:	f1b9 0f00 	cmp.w	r9, #0
 8006388:	dd08      	ble.n	800639c <_strtod_l+0x7ac>
 800638a:	4631      	mov	r1, r6
 800638c:	464a      	mov	r2, r9
 800638e:	4620      	mov	r0, r4
 8006390:	f001 f958 	bl	8007644 <__lshift>
 8006394:	4606      	mov	r6, r0
 8006396:	2800      	cmp	r0, #0
 8006398:	f43f ae72 	beq.w	8006080 <_strtod_l+0x490>
 800639c:	9a05      	ldr	r2, [sp, #20]
 800639e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063a0:	4620      	mov	r0, r4
 80063a2:	f001 f9db 	bl	800775c <__mdiff>
 80063a6:	4605      	mov	r5, r0
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f43f ae69 	beq.w	8006080 <_strtod_l+0x490>
 80063ae:	68c3      	ldr	r3, [r0, #12]
 80063b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b2:	2300      	movs	r3, #0
 80063b4:	60c3      	str	r3, [r0, #12]
 80063b6:	4631      	mov	r1, r6
 80063b8:	f001 f9b4 	bl	8007724 <__mcmp>
 80063bc:	2800      	cmp	r0, #0
 80063be:	da60      	bge.n	8006482 <_strtod_l+0x892>
 80063c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c2:	ea53 030a 	orrs.w	r3, r3, sl
 80063c6:	f040 8082 	bne.w	80064ce <_strtod_l+0x8de>
 80063ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d17d      	bne.n	80064ce <_strtod_l+0x8de>
 80063d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063d6:	0d1b      	lsrs	r3, r3, #20
 80063d8:	051b      	lsls	r3, r3, #20
 80063da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063de:	d976      	bls.n	80064ce <_strtod_l+0x8de>
 80063e0:	696b      	ldr	r3, [r5, #20]
 80063e2:	b913      	cbnz	r3, 80063ea <_strtod_l+0x7fa>
 80063e4:	692b      	ldr	r3, [r5, #16]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	dd71      	ble.n	80064ce <_strtod_l+0x8de>
 80063ea:	4629      	mov	r1, r5
 80063ec:	2201      	movs	r2, #1
 80063ee:	4620      	mov	r0, r4
 80063f0:	f001 f928 	bl	8007644 <__lshift>
 80063f4:	4631      	mov	r1, r6
 80063f6:	4605      	mov	r5, r0
 80063f8:	f001 f994 	bl	8007724 <__mcmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	dd66      	ble.n	80064ce <_strtod_l+0x8de>
 8006400:	9904      	ldr	r1, [sp, #16]
 8006402:	4a53      	ldr	r2, [pc, #332]	; (8006550 <_strtod_l+0x960>)
 8006404:	465b      	mov	r3, fp
 8006406:	2900      	cmp	r1, #0
 8006408:	f000 8081 	beq.w	800650e <_strtod_l+0x91e>
 800640c:	ea02 010b 	and.w	r1, r2, fp
 8006410:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006414:	dc7b      	bgt.n	800650e <_strtod_l+0x91e>
 8006416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800641a:	f77f aea9 	ble.w	8006170 <_strtod_l+0x580>
 800641e:	4b4d      	ldr	r3, [pc, #308]	; (8006554 <_strtod_l+0x964>)
 8006420:	4650      	mov	r0, sl
 8006422:	4659      	mov	r1, fp
 8006424:	2200      	movs	r2, #0
 8006426:	f7fa f8e7 	bl	80005f8 <__aeabi_dmul>
 800642a:	460b      	mov	r3, r1
 800642c:	4303      	orrs	r3, r0
 800642e:	bf08      	it	eq
 8006430:	2322      	moveq	r3, #34	; 0x22
 8006432:	4682      	mov	sl, r0
 8006434:	468b      	mov	fp, r1
 8006436:	bf08      	it	eq
 8006438:	6023      	streq	r3, [r4, #0]
 800643a:	e62b      	b.n	8006094 <_strtod_l+0x4a4>
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	ea03 0a0a 	and.w	sl, r3, sl
 8006448:	e6e3      	b.n	8006212 <_strtod_l+0x622>
 800644a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800644e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006452:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006456:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800645a:	fa01 f308 	lsl.w	r3, r1, r8
 800645e:	9308      	str	r3, [sp, #32]
 8006460:	910d      	str	r1, [sp, #52]	; 0x34
 8006462:	e746      	b.n	80062f2 <_strtod_l+0x702>
 8006464:	2300      	movs	r3, #0
 8006466:	9308      	str	r3, [sp, #32]
 8006468:	2301      	movs	r3, #1
 800646a:	930d      	str	r3, [sp, #52]	; 0x34
 800646c:	e741      	b.n	80062f2 <_strtod_l+0x702>
 800646e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006470:	4642      	mov	r2, r8
 8006472:	4620      	mov	r0, r4
 8006474:	f001 f8e6 	bl	8007644 <__lshift>
 8006478:	9018      	str	r0, [sp, #96]	; 0x60
 800647a:	2800      	cmp	r0, #0
 800647c:	f47f af6b 	bne.w	8006356 <_strtod_l+0x766>
 8006480:	e5fe      	b.n	8006080 <_strtod_l+0x490>
 8006482:	465f      	mov	r7, fp
 8006484:	d16e      	bne.n	8006564 <_strtod_l+0x974>
 8006486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006488:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800648c:	b342      	cbz	r2, 80064e0 <_strtod_l+0x8f0>
 800648e:	4a32      	ldr	r2, [pc, #200]	; (8006558 <_strtod_l+0x968>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d128      	bne.n	80064e6 <_strtod_l+0x8f6>
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	4651      	mov	r1, sl
 8006498:	b1eb      	cbz	r3, 80064d6 <_strtod_l+0x8e6>
 800649a:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <_strtod_l+0x960>)
 800649c:	403b      	ands	r3, r7
 800649e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	d819      	bhi.n	80064dc <_strtod_l+0x8ec>
 80064a8:	0d1b      	lsrs	r3, r3, #20
 80064aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d117      	bne.n	80064e6 <_strtod_l+0x8f6>
 80064b6:	4b29      	ldr	r3, [pc, #164]	; (800655c <_strtod_l+0x96c>)
 80064b8:	429f      	cmp	r7, r3
 80064ba:	d102      	bne.n	80064c2 <_strtod_l+0x8d2>
 80064bc:	3101      	adds	r1, #1
 80064be:	f43f addf 	beq.w	8006080 <_strtod_l+0x490>
 80064c2:	4b23      	ldr	r3, [pc, #140]	; (8006550 <_strtod_l+0x960>)
 80064c4:	403b      	ands	r3, r7
 80064c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80064ca:	f04f 0a00 	mov.w	sl, #0
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1a4      	bne.n	800641e <_strtod_l+0x82e>
 80064d4:	e5de      	b.n	8006094 <_strtod_l+0x4a4>
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295
 80064da:	e7ea      	b.n	80064b2 <_strtod_l+0x8c2>
 80064dc:	4613      	mov	r3, r2
 80064de:	e7e8      	b.n	80064b2 <_strtod_l+0x8c2>
 80064e0:	ea53 030a 	orrs.w	r3, r3, sl
 80064e4:	d08c      	beq.n	8006400 <_strtod_l+0x810>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	b1db      	cbz	r3, 8006522 <_strtod_l+0x932>
 80064ea:	423b      	tst	r3, r7
 80064ec:	d0ef      	beq.n	80064ce <_strtod_l+0x8de>
 80064ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f0:	9a04      	ldr	r2, [sp, #16]
 80064f2:	4650      	mov	r0, sl
 80064f4:	4659      	mov	r1, fp
 80064f6:	b1c3      	cbz	r3, 800652a <_strtod_l+0x93a>
 80064f8:	f7ff fb5c 	bl	8005bb4 <sulp>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	ec51 0b18 	vmov	r0, r1, d8
 8006504:	f7f9 fec2 	bl	800028c <__adddf3>
 8006508:	4682      	mov	sl, r0
 800650a:	468b      	mov	fp, r1
 800650c:	e7df      	b.n	80064ce <_strtod_l+0x8de>
 800650e:	4013      	ands	r3, r2
 8006510:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006514:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006518:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800651c:	f04f 3aff 	mov.w	sl, #4294967295
 8006520:	e7d5      	b.n	80064ce <_strtod_l+0x8de>
 8006522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006524:	ea13 0f0a 	tst.w	r3, sl
 8006528:	e7e0      	b.n	80064ec <_strtod_l+0x8fc>
 800652a:	f7ff fb43 	bl	8005bb4 <sulp>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	ec51 0b18 	vmov	r0, r1, d8
 8006536:	f7f9 fea7 	bl	8000288 <__aeabi_dsub>
 800653a:	2200      	movs	r2, #0
 800653c:	2300      	movs	r3, #0
 800653e:	4682      	mov	sl, r0
 8006540:	468b      	mov	fp, r1
 8006542:	f7fa fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006546:	2800      	cmp	r0, #0
 8006548:	d0c1      	beq.n	80064ce <_strtod_l+0x8de>
 800654a:	e611      	b.n	8006170 <_strtod_l+0x580>
 800654c:	fffffc02 	.word	0xfffffc02
 8006550:	7ff00000 	.word	0x7ff00000
 8006554:	39500000 	.word	0x39500000
 8006558:	000fffff 	.word	0x000fffff
 800655c:	7fefffff 	.word	0x7fefffff
 8006560:	08009cb0 	.word	0x08009cb0
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	f001 fa5a 	bl	8007a20 <__ratio>
 800656c:	ec59 8b10 	vmov	r8, r9, d0
 8006570:	ee10 0a10 	vmov	r0, s0
 8006574:	2200      	movs	r2, #0
 8006576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800657a:	4649      	mov	r1, r9
 800657c:	f7fa fab8 	bl	8000af0 <__aeabi_dcmple>
 8006580:	2800      	cmp	r0, #0
 8006582:	d07a      	beq.n	800667a <_strtod_l+0xa8a>
 8006584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04a      	beq.n	8006620 <_strtod_l+0xa30>
 800658a:	4b95      	ldr	r3, [pc, #596]	; (80067e0 <_strtod_l+0xbf0>)
 800658c:	2200      	movs	r2, #0
 800658e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006592:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80067e0 <_strtod_l+0xbf0>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	4b92      	ldr	r3, [pc, #584]	; (80067e4 <_strtod_l+0xbf4>)
 800659c:	403b      	ands	r3, r7
 800659e:	930d      	str	r3, [sp, #52]	; 0x34
 80065a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065a2:	4b91      	ldr	r3, [pc, #580]	; (80067e8 <_strtod_l+0xbf8>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	f040 80b0 	bne.w	800670a <_strtod_l+0xb1a>
 80065aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80065b2:	ec4b ab10 	vmov	d0, sl, fp
 80065b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065ba:	f001 f959 	bl	8007870 <__ulp>
 80065be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065c2:	ec53 2b10 	vmov	r2, r3, d0
 80065c6:	f7fa f817 	bl	80005f8 <__aeabi_dmul>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7f9 fe5d 	bl	800028c <__adddf3>
 80065d2:	460b      	mov	r3, r1
 80065d4:	4983      	ldr	r1, [pc, #524]	; (80067e4 <_strtod_l+0xbf4>)
 80065d6:	4a85      	ldr	r2, [pc, #532]	; (80067ec <_strtod_l+0xbfc>)
 80065d8:	4019      	ands	r1, r3
 80065da:	4291      	cmp	r1, r2
 80065dc:	4682      	mov	sl, r0
 80065de:	d960      	bls.n	80066a2 <_strtod_l+0xab2>
 80065e0:	ee18 3a90 	vmov	r3, s17
 80065e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d104      	bne.n	80065f6 <_strtod_l+0xa06>
 80065ec:	ee18 3a10 	vmov	r3, s16
 80065f0:	3301      	adds	r3, #1
 80065f2:	f43f ad45 	beq.w	8006080 <_strtod_l+0x490>
 80065f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80067f8 <_strtod_l+0xc08>
 80065fa:	f04f 3aff 	mov.w	sl, #4294967295
 80065fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fe03 	bl	800720c <_Bfree>
 8006606:	9905      	ldr	r1, [sp, #20]
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fdff 	bl	800720c <_Bfree>
 800660e:	4631      	mov	r1, r6
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fdfb 	bl	800720c <_Bfree>
 8006616:	4629      	mov	r1, r5
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fdf7 	bl	800720c <_Bfree>
 800661e:	e61a      	b.n	8006256 <_strtod_l+0x666>
 8006620:	f1ba 0f00 	cmp.w	sl, #0
 8006624:	d11b      	bne.n	800665e <_strtod_l+0xa6e>
 8006626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800662a:	b9f3      	cbnz	r3, 800666a <_strtod_l+0xa7a>
 800662c:	4b6c      	ldr	r3, [pc, #432]	; (80067e0 <_strtod_l+0xbf0>)
 800662e:	2200      	movs	r2, #0
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7fa fa52 	bl	8000adc <__aeabi_dcmplt>
 8006638:	b9d0      	cbnz	r0, 8006670 <_strtod_l+0xa80>
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	4b6c      	ldr	r3, [pc, #432]	; (80067f0 <_strtod_l+0xc00>)
 8006640:	2200      	movs	r2, #0
 8006642:	f7f9 ffd9 	bl	80005f8 <__aeabi_dmul>
 8006646:	4680      	mov	r8, r0
 8006648:	4689      	mov	r9, r1
 800664a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800664e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006652:	9315      	str	r3, [sp, #84]	; 0x54
 8006654:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006658:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800665c:	e79d      	b.n	800659a <_strtod_l+0x9aa>
 800665e:	f1ba 0f01 	cmp.w	sl, #1
 8006662:	d102      	bne.n	800666a <_strtod_l+0xa7a>
 8006664:	2f00      	cmp	r7, #0
 8006666:	f43f ad83 	beq.w	8006170 <_strtod_l+0x580>
 800666a:	4b62      	ldr	r3, [pc, #392]	; (80067f4 <_strtod_l+0xc04>)
 800666c:	2200      	movs	r2, #0
 800666e:	e78e      	b.n	800658e <_strtod_l+0x99e>
 8006670:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80067f0 <_strtod_l+0xc00>
 8006674:	f04f 0800 	mov.w	r8, #0
 8006678:	e7e7      	b.n	800664a <_strtod_l+0xa5a>
 800667a:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <_strtod_l+0xc00>)
 800667c:	4640      	mov	r0, r8
 800667e:	4649      	mov	r1, r9
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 ffb9 	bl	80005f8 <__aeabi_dmul>
 8006686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006688:	4680      	mov	r8, r0
 800668a:	4689      	mov	r9, r1
 800668c:	b933      	cbnz	r3, 800669c <_strtod_l+0xaac>
 800668e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006692:	900e      	str	r0, [sp, #56]	; 0x38
 8006694:	930f      	str	r3, [sp, #60]	; 0x3c
 8006696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800669a:	e7dd      	b.n	8006658 <_strtod_l+0xa68>
 800669c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80066a0:	e7f9      	b.n	8006696 <_strtod_l+0xaa6>
 80066a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1a8      	bne.n	80065fe <_strtod_l+0xa0e>
 80066ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b2:	0d1b      	lsrs	r3, r3, #20
 80066b4:	051b      	lsls	r3, r3, #20
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d1a1      	bne.n	80065fe <_strtod_l+0xa0e>
 80066ba:	4640      	mov	r0, r8
 80066bc:	4649      	mov	r1, r9
 80066be:	f7fa facd 	bl	8000c5c <__aeabi_d2lz>
 80066c2:	f7f9 ff6b 	bl	800059c <__aeabi_l2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 fddb 	bl	8000288 <__aeabi_dsub>
 80066d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066d8:	ea43 030a 	orr.w	r3, r3, sl
 80066dc:	4313      	orrs	r3, r2
 80066de:	4680      	mov	r8, r0
 80066e0:	4689      	mov	r9, r1
 80066e2:	d055      	beq.n	8006790 <_strtod_l+0xba0>
 80066e4:	a336      	add	r3, pc, #216	; (adr r3, 80067c0 <_strtod_l+0xbd0>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7fa f9f7 	bl	8000adc <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f47f acd0 	bne.w	8006094 <_strtod_l+0x4a4>
 80066f4:	a334      	add	r3, pc, #208	; (adr r3, 80067c8 <_strtod_l+0xbd8>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7fa fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8006702:	2800      	cmp	r0, #0
 8006704:	f43f af7b 	beq.w	80065fe <_strtod_l+0xa0e>
 8006708:	e4c4      	b.n	8006094 <_strtod_l+0x4a4>
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	b333      	cbz	r3, 800675c <_strtod_l+0xb6c>
 800670e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006710:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006714:	d822      	bhi.n	800675c <_strtod_l+0xb6c>
 8006716:	a32e      	add	r3, pc, #184	; (adr r3, 80067d0 <_strtod_l+0xbe0>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7fa f9e6 	bl	8000af0 <__aeabi_dcmple>
 8006724:	b1a0      	cbz	r0, 8006750 <_strtod_l+0xb60>
 8006726:	4649      	mov	r1, r9
 8006728:	4640      	mov	r0, r8
 800672a:	f7fa fa27 	bl	8000b7c <__aeabi_d2uiz>
 800672e:	2801      	cmp	r0, #1
 8006730:	bf38      	it	cc
 8006732:	2001      	movcc	r0, #1
 8006734:	f7f9 fee6 	bl	8000504 <__aeabi_ui2d>
 8006738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	bb23      	cbnz	r3, 800678a <_strtod_l+0xb9a>
 8006740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006744:	9010      	str	r0, [sp, #64]	; 0x40
 8006746:	9311      	str	r3, [sp, #68]	; 0x44
 8006748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800674c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006754:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006760:	eeb0 0a48 	vmov.f32	s0, s16
 8006764:	eef0 0a68 	vmov.f32	s1, s17
 8006768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800676c:	f001 f880 	bl	8007870 <__ulp>
 8006770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006774:	ec53 2b10 	vmov	r2, r3, d0
 8006778:	f7f9 ff3e 	bl	80005f8 <__aeabi_dmul>
 800677c:	ec53 2b18 	vmov	r2, r3, d8
 8006780:	f7f9 fd84 	bl	800028c <__adddf3>
 8006784:	4682      	mov	sl, r0
 8006786:	468b      	mov	fp, r1
 8006788:	e78d      	b.n	80066a6 <_strtod_l+0xab6>
 800678a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800678e:	e7db      	b.n	8006748 <_strtod_l+0xb58>
 8006790:	a311      	add	r3, pc, #68	; (adr r3, 80067d8 <_strtod_l+0xbe8>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7fa f9a1 	bl	8000adc <__aeabi_dcmplt>
 800679a:	e7b2      	b.n	8006702 <_strtod_l+0xb12>
 800679c:	2300      	movs	r3, #0
 800679e:	930a      	str	r3, [sp, #40]	; 0x28
 80067a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	f7ff ba6b 	b.w	8005c80 <_strtod_l+0x90>
 80067aa:	2a65      	cmp	r2, #101	; 0x65
 80067ac:	f43f ab5f 	beq.w	8005e6e <_strtod_l+0x27e>
 80067b0:	2a45      	cmp	r2, #69	; 0x45
 80067b2:	f43f ab5c 	beq.w	8005e6e <_strtod_l+0x27e>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f7ff bb94 	b.w	8005ee4 <_strtod_l+0x2f4>
 80067bc:	f3af 8000 	nop.w
 80067c0:	94a03595 	.word	0x94a03595
 80067c4:	3fdfffff 	.word	0x3fdfffff
 80067c8:	35afe535 	.word	0x35afe535
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	ffc00000 	.word	0xffc00000
 80067d4:	41dfffff 	.word	0x41dfffff
 80067d8:	94a03595 	.word	0x94a03595
 80067dc:	3fcfffff 	.word	0x3fcfffff
 80067e0:	3ff00000 	.word	0x3ff00000
 80067e4:	7ff00000 	.word	0x7ff00000
 80067e8:	7fe00000 	.word	0x7fe00000
 80067ec:	7c9fffff 	.word	0x7c9fffff
 80067f0:	3fe00000 	.word	0x3fe00000
 80067f4:	bff00000 	.word	0xbff00000
 80067f8:	7fefffff 	.word	0x7fefffff

080067fc <strtod>:
 80067fc:	460a      	mov	r2, r1
 80067fe:	4601      	mov	r1, r0
 8006800:	4802      	ldr	r0, [pc, #8]	; (800680c <strtod+0x10>)
 8006802:	4b03      	ldr	r3, [pc, #12]	; (8006810 <strtod+0x14>)
 8006804:	6800      	ldr	r0, [r0, #0]
 8006806:	f7ff b9f3 	b.w	8005bf0 <_strtod_l>
 800680a:	bf00      	nop
 800680c:	20000018 	.word	0x20000018
 8006810:	20000080 	.word	0x20000080

08006814 <print_e>:
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006816:	b087      	sub	sp, #28
 8006818:	ec43 2b10 	vmov	d0, r2, r3
 800681c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800681e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006822:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006824:	ab04      	add	r3, sp, #16
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	1c62      	adds	r2, r4, #1
 800682e:	ab05      	add	r3, sp, #20
 8006830:	460f      	mov	r7, r1
 8006832:	2102      	movs	r1, #2
 8006834:	f001 fe40 	bl	80084b8 <_dtoa_r>
 8006838:	9a05      	ldr	r2, [sp, #20]
 800683a:	f242 730f 	movw	r3, #9999	; 0x270f
 800683e:	429a      	cmp	r2, r3
 8006840:	d105      	bne.n	800684e <print_e+0x3a>
 8006842:	4601      	mov	r1, r0
 8006844:	4638      	mov	r0, r7
 8006846:	f001 fd63 	bl	8008310 <strcpy>
 800684a:	b007      	add	sp, #28
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	463b      	mov	r3, r7
 8006850:	7801      	ldrb	r1, [r0, #0]
 8006852:	f803 1b01 	strb.w	r1, [r3], #1
 8006856:	2c00      	cmp	r4, #0
 8006858:	bfc8      	it	gt
 800685a:	2501      	movgt	r5, #1
 800685c:	212e      	movs	r1, #46	; 0x2e
 800685e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006862:	b10f      	cbz	r7, 8006868 <print_e+0x54>
 8006864:	2c00      	cmp	r4, #0
 8006866:	dc37      	bgt.n	80068d8 <print_e+0xc4>
 8006868:	2e67      	cmp	r6, #103	; 0x67
 800686a:	d046      	beq.n	80068fa <print_e+0xe6>
 800686c:	2e47      	cmp	r6, #71	; 0x47
 800686e:	d046      	beq.n	80068fe <print_e+0xea>
 8006870:	212e      	movs	r1, #46	; 0x2e
 8006872:	2030      	movs	r0, #48	; 0x30
 8006874:	2c00      	cmp	r4, #0
 8006876:	dc38      	bgt.n	80068ea <print_e+0xd6>
 8006878:	1e51      	subs	r1, r2, #1
 800687a:	2900      	cmp	r1, #0
 800687c:	bfb8      	it	lt
 800687e:	f1c2 0201 	rsblt	r2, r2, #1
 8006882:	4618      	mov	r0, r3
 8006884:	9105      	str	r1, [sp, #20]
 8006886:	bfac      	ite	ge
 8006888:	222b      	movge	r2, #43	; 0x2b
 800688a:	9205      	strlt	r2, [sp, #20]
 800688c:	f800 6b02 	strb.w	r6, [r0], #2
 8006890:	bfa8      	it	ge
 8006892:	705a      	strbge	r2, [r3, #1]
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	bfbc      	itt	lt
 8006898:	212d      	movlt	r1, #45	; 0x2d
 800689a:	7059      	strblt	r1, [r3, #1]
 800689c:	2a63      	cmp	r2, #99	; 0x63
 800689e:	dd0b      	ble.n	80068b8 <print_e+0xa4>
 80068a0:	2164      	movs	r1, #100	; 0x64
 80068a2:	fb92 f1f1 	sdiv	r1, r2, r1
 80068a6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80068aa:	1cd8      	adds	r0, r3, #3
 80068ac:	709c      	strb	r4, [r3, #2]
 80068ae:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80068b2:	fb03 2201 	mla	r2, r3, r1, r2
 80068b6:	9205      	str	r2, [sp, #20]
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	220a      	movs	r2, #10
 80068bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80068c0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80068c4:	7001      	strb	r1, [r0, #0]
 80068c6:	f06f 0109 	mvn.w	r1, #9
 80068ca:	fb01 3302 	mla	r3, r1, r2, r3
 80068ce:	3330      	adds	r3, #48	; 0x30
 80068d0:	7043      	strb	r3, [r0, #1]
 80068d2:	2300      	movs	r3, #0
 80068d4:	7083      	strb	r3, [r0, #2]
 80068d6:	e7b8      	b.n	800684a <print_e+0x36>
 80068d8:	b10d      	cbz	r5, 80068de <print_e+0xca>
 80068da:	f803 1b01 	strb.w	r1, [r3], #1
 80068de:	7805      	ldrb	r5, [r0, #0]
 80068e0:	f803 5b01 	strb.w	r5, [r3], #1
 80068e4:	3c01      	subs	r4, #1
 80068e6:	2500      	movs	r5, #0
 80068e8:	e7b9      	b.n	800685e <print_e+0x4a>
 80068ea:	b10d      	cbz	r5, 80068f0 <print_e+0xdc>
 80068ec:	f803 1b01 	strb.w	r1, [r3], #1
 80068f0:	f803 0b01 	strb.w	r0, [r3], #1
 80068f4:	3c01      	subs	r4, #1
 80068f6:	2500      	movs	r5, #0
 80068f8:	e7bc      	b.n	8006874 <print_e+0x60>
 80068fa:	2665      	movs	r6, #101	; 0x65
 80068fc:	e7bc      	b.n	8006878 <print_e+0x64>
 80068fe:	2645      	movs	r6, #69	; 0x45
 8006900:	e7ba      	b.n	8006878 <print_e+0x64>
 8006902:	0000      	movs	r0, r0
 8006904:	0000      	movs	r0, r0
	...

08006908 <_gcvt>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	ec55 4b10 	vmov	r4, r5, d0
 8006910:	b088      	sub	sp, #32
 8006912:	4681      	mov	r9, r0
 8006914:	4688      	mov	r8, r1
 8006916:	4616      	mov	r6, r2
 8006918:	469a      	mov	sl, r3
 800691a:	ee10 0a10 	vmov	r0, s0
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	4629      	mov	r1, r5
 8006924:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006926:	f7fa f8d9 	bl	8000adc <__aeabi_dcmplt>
 800692a:	b110      	cbz	r0, 8006932 <_gcvt+0x2a>
 800692c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006930:	461d      	mov	r5, r3
 8006932:	2200      	movs	r2, #0
 8006934:	2300      	movs	r3, #0
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	f7fa f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800693e:	b138      	cbz	r0, 8006950 <_gcvt+0x48>
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	7033      	strb	r3, [r6, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	7073      	strb	r3, [r6, #1]
 8006948:	4630      	mov	r0, r6
 800694a:	b008      	add	sp, #32
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006950:	a34b      	add	r3, pc, #300	; (adr r3, 8006a80 <_gcvt+0x178>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7fa f8c9 	bl	8000af0 <__aeabi_dcmple>
 800695e:	b158      	cbz	r0, 8006978 <_gcvt+0x70>
 8006960:	f108 31ff 	add.w	r1, r8, #4294967295
 8006964:	9100      	str	r1, [sp, #0]
 8006966:	e9cd a701 	strd	sl, r7, [sp, #4]
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	4631      	mov	r1, r6
 8006970:	4648      	mov	r0, r9
 8006972:	f7ff ff4f 	bl	8006814 <print_e>
 8006976:	e7e7      	b.n	8006948 <_gcvt+0x40>
 8006978:	4640      	mov	r0, r8
 800697a:	f001 f885 	bl	8007a88 <_mprec_log10>
 800697e:	4622      	mov	r2, r4
 8006980:	ec51 0b10 	vmov	r0, r1, d0
 8006984:	462b      	mov	r3, r5
 8006986:	f7fa f8b3 	bl	8000af0 <__aeabi_dcmple>
 800698a:	2800      	cmp	r0, #0
 800698c:	d1e8      	bne.n	8006960 <_gcvt+0x58>
 800698e:	ab07      	add	r3, sp, #28
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	ab06      	add	r3, sp, #24
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4642      	mov	r2, r8
 8006998:	ab05      	add	r3, sp, #20
 800699a:	ec45 4b10 	vmov	d0, r4, r5
 800699e:	2102      	movs	r1, #2
 80069a0:	4648      	mov	r0, r9
 80069a2:	f001 fd89 	bl	80084b8 <_dtoa_r>
 80069a6:	9a05      	ldr	r2, [sp, #20]
 80069a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d00e      	beq.n	80069ce <_gcvt+0xc6>
 80069b0:	4633      	mov	r3, r6
 80069b2:	44b0      	add	r8, r6
 80069b4:	4605      	mov	r5, r0
 80069b6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80069ba:	9c05      	ldr	r4, [sp, #20]
 80069bc:	eba8 0203 	sub.w	r2, r8, r3
 80069c0:	b109      	cbz	r1, 80069c6 <_gcvt+0xbe>
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	dc08      	bgt.n	80069d8 <_gcvt+0xd0>
 80069c6:	2100      	movs	r1, #0
 80069c8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80069cc:	e00d      	b.n	80069ea <_gcvt+0xe2>
 80069ce:	4601      	mov	r1, r0
 80069d0:	4630      	mov	r0, r6
 80069d2:	f001 fc9d 	bl	8008310 <strcpy>
 80069d6:	e7b7      	b.n	8006948 <_gcvt+0x40>
 80069d8:	3c01      	subs	r4, #1
 80069da:	f803 1b01 	strb.w	r1, [r3], #1
 80069de:	9405      	str	r4, [sp, #20]
 80069e0:	e7e8      	b.n	80069b4 <_gcvt+0xac>
 80069e2:	f803 cb01 	strb.w	ip, [r3], #1
 80069e6:	3a01      	subs	r2, #1
 80069e8:	2101      	movs	r1, #1
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	4620      	mov	r0, r4
 80069ee:	dc2a      	bgt.n	8006a46 <_gcvt+0x13e>
 80069f0:	b101      	cbz	r1, 80069f4 <_gcvt+0xec>
 80069f2:	9405      	str	r4, [sp, #20]
 80069f4:	b90f      	cbnz	r7, 80069fa <_gcvt+0xf2>
 80069f6:	7829      	ldrb	r1, [r5, #0]
 80069f8:	b311      	cbz	r1, 8006a40 <_gcvt+0x138>
 80069fa:	42b3      	cmp	r3, r6
 80069fc:	bf04      	itt	eq
 80069fe:	2130      	moveq	r1, #48	; 0x30
 8006a00:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006a04:	212e      	movs	r1, #46	; 0x2e
 8006a06:	7019      	strb	r1, [r3, #0]
 8006a08:	9905      	ldr	r1, [sp, #20]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	2400      	movs	r4, #0
 8006a0e:	eba1 0c03 	sub.w	ip, r1, r3
 8006a12:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006a16:	eb1c 0f00 	cmn.w	ip, r0
 8006a1a:	d41c      	bmi.n	8006a56 <_gcvt+0x14e>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	f1c1 0000 	rsb	r0, r1, #0
 8006a22:	bfc8      	it	gt
 8006a24:	2000      	movgt	r0, #0
 8006a26:	f100 0c01 	add.w	ip, r0, #1
 8006a2a:	4463      	add	r3, ip
 8006a2c:	4401      	add	r1, r0
 8006a2e:	b104      	cbz	r4, 8006a32 <_gcvt+0x12a>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	1e69      	subs	r1, r5, #1
 8006a34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a38:	b108      	cbz	r0, 8006a3e <_gcvt+0x136>
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	dc0f      	bgt.n	8006a5e <_gcvt+0x156>
 8006a3e:	b9df      	cbnz	r7, 8006a78 <_gcvt+0x170>
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e780      	b.n	8006948 <_gcvt+0x40>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a4c:	dcc9      	bgt.n	80069e2 <_gcvt+0xda>
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d0d0      	beq.n	80069f4 <_gcvt+0xec>
 8006a52:	9005      	str	r0, [sp, #20]
 8006a54:	e7ce      	b.n	80069f4 <_gcvt+0xec>
 8006a56:	f800 ef01 	strb.w	lr, [r0, #1]!
 8006a5a:	2401      	movs	r4, #1
 8006a5c:	e7db      	b.n	8006a16 <_gcvt+0x10e>
 8006a5e:	f803 0b01 	strb.w	r0, [r3], #1
 8006a62:	3a01      	subs	r2, #1
 8006a64:	e7e6      	b.n	8006a34 <_gcvt+0x12c>
 8006a66:	f801 5b01 	strb.w	r5, [r1], #1
 8006a6a:	1a60      	subs	r0, r4, r1
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dcfa      	bgt.n	8006a66 <_gcvt+0x15e>
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	bfa8      	it	ge
 8006a74:	189b      	addge	r3, r3, r2
 8006a76:	e7e3      	b.n	8006a40 <_gcvt+0x138>
 8006a78:	4619      	mov	r1, r3
 8006a7a:	189c      	adds	r4, r3, r2
 8006a7c:	2530      	movs	r5, #48	; 0x30
 8006a7e:	e7f4      	b.n	8006a6a <_gcvt+0x162>
 8006a80:	eb1c432d 	.word	0xeb1c432d
 8006a84:	3f1a36e2 	.word	0x3f1a36e2

08006a88 <rshift>:
 8006a88:	6903      	ldr	r3, [r0, #16]
 8006a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a96:	f100 0414 	add.w	r4, r0, #20
 8006a9a:	dd45      	ble.n	8006b28 <rshift+0xa0>
 8006a9c:	f011 011f 	ands.w	r1, r1, #31
 8006aa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006aa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006aa8:	d10c      	bne.n	8006ac4 <rshift+0x3c>
 8006aaa:	f100 0710 	add.w	r7, r0, #16
 8006aae:	4629      	mov	r1, r5
 8006ab0:	42b1      	cmp	r1, r6
 8006ab2:	d334      	bcc.n	8006b1e <rshift+0x96>
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	1eea      	subs	r2, r5, #3
 8006aba:	4296      	cmp	r6, r2
 8006abc:	bf38      	it	cc
 8006abe:	2300      	movcc	r3, #0
 8006ac0:	4423      	add	r3, r4
 8006ac2:	e015      	b.n	8006af0 <rshift+0x68>
 8006ac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006ac8:	f1c1 0820 	rsb	r8, r1, #32
 8006acc:	40cf      	lsrs	r7, r1
 8006ace:	f105 0e04 	add.w	lr, r5, #4
 8006ad2:	46a1      	mov	r9, r4
 8006ad4:	4576      	cmp	r6, lr
 8006ad6:	46f4      	mov	ip, lr
 8006ad8:	d815      	bhi.n	8006b06 <rshift+0x7e>
 8006ada:	1a9a      	subs	r2, r3, r2
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	3a04      	subs	r2, #4
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	42ae      	cmp	r6, r5
 8006ae4:	bf38      	it	cc
 8006ae6:	2200      	movcc	r2, #0
 8006ae8:	18a3      	adds	r3, r4, r2
 8006aea:	50a7      	str	r7, [r4, r2]
 8006aec:	b107      	cbz	r7, 8006af0 <rshift+0x68>
 8006aee:	3304      	adds	r3, #4
 8006af0:	1b1a      	subs	r2, r3, r4
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006af8:	bf08      	it	eq
 8006afa:	2300      	moveq	r3, #0
 8006afc:	6102      	str	r2, [r0, #16]
 8006afe:	bf08      	it	eq
 8006b00:	6143      	streq	r3, [r0, #20]
 8006b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b06:	f8dc c000 	ldr.w	ip, [ip]
 8006b0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b0e:	ea4c 0707 	orr.w	r7, ip, r7
 8006b12:	f849 7b04 	str.w	r7, [r9], #4
 8006b16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b1a:	40cf      	lsrs	r7, r1
 8006b1c:	e7da      	b.n	8006ad4 <rshift+0x4c>
 8006b1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b22:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b26:	e7c3      	b.n	8006ab0 <rshift+0x28>
 8006b28:	4623      	mov	r3, r4
 8006b2a:	e7e1      	b.n	8006af0 <rshift+0x68>

08006b2c <__hexdig_fun>:
 8006b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b30:	2b09      	cmp	r3, #9
 8006b32:	d802      	bhi.n	8006b3a <__hexdig_fun+0xe>
 8006b34:	3820      	subs	r0, #32
 8006b36:	b2c0      	uxtb	r0, r0
 8006b38:	4770      	bx	lr
 8006b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d801      	bhi.n	8006b46 <__hexdig_fun+0x1a>
 8006b42:	3847      	subs	r0, #71	; 0x47
 8006b44:	e7f7      	b.n	8006b36 <__hexdig_fun+0xa>
 8006b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d801      	bhi.n	8006b52 <__hexdig_fun+0x26>
 8006b4e:	3827      	subs	r0, #39	; 0x27
 8006b50:	e7f1      	b.n	8006b36 <__hexdig_fun+0xa>
 8006b52:	2000      	movs	r0, #0
 8006b54:	4770      	bx	lr
	...

08006b58 <__gethex>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	ed2d 8b02 	vpush	{d8}
 8006b60:	b089      	sub	sp, #36	; 0x24
 8006b62:	ee08 0a10 	vmov	s16, r0
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	4bb4      	ldr	r3, [pc, #720]	; (8006e3c <__gethex+0x2e4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	468b      	mov	fp, r1
 8006b72:	4690      	mov	r8, r2
 8006b74:	f7f9 fb2c 	bl	80001d0 <strlen>
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	f8db 2000 	ldr.w	r2, [fp]
 8006b7e:	4403      	add	r3, r0
 8006b80:	4682      	mov	sl, r0
 8006b82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	1c93      	adds	r3, r2, #2
 8006b8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006b8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006b92:	32fe      	adds	r2, #254	; 0xfe
 8006b94:	18d1      	adds	r1, r2, r3
 8006b96:	461f      	mov	r7, r3
 8006b98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b9c:	9100      	str	r1, [sp, #0]
 8006b9e:	2830      	cmp	r0, #48	; 0x30
 8006ba0:	d0f8      	beq.n	8006b94 <__gethex+0x3c>
 8006ba2:	f7ff ffc3 	bl	8006b2c <__hexdig_fun>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d13a      	bne.n	8006c22 <__gethex+0xca>
 8006bac:	9901      	ldr	r1, [sp, #4]
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f001 fbb5 	bl	8008320 <strncmp>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d168      	bne.n	8006c8e <__gethex+0x136>
 8006bbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006bc0:	eb07 060a 	add.w	r6, r7, sl
 8006bc4:	f7ff ffb2 	bl	8006b2c <__hexdig_fun>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d062      	beq.n	8006c92 <__gethex+0x13a>
 8006bcc:	4633      	mov	r3, r6
 8006bce:	7818      	ldrb	r0, [r3, #0]
 8006bd0:	2830      	cmp	r0, #48	; 0x30
 8006bd2:	461f      	mov	r7, r3
 8006bd4:	f103 0301 	add.w	r3, r3, #1
 8006bd8:	d0f9      	beq.n	8006bce <__gethex+0x76>
 8006bda:	f7ff ffa7 	bl	8006b2c <__hexdig_fun>
 8006bde:	2301      	movs	r3, #1
 8006be0:	fab0 f480 	clz	r4, r0
 8006be4:	0964      	lsrs	r4, r4, #5
 8006be6:	4635      	mov	r5, r6
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	463a      	mov	r2, r7
 8006bec:	4616      	mov	r6, r2
 8006bee:	3201      	adds	r2, #1
 8006bf0:	7830      	ldrb	r0, [r6, #0]
 8006bf2:	f7ff ff9b 	bl	8006b2c <__hexdig_fun>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d1f8      	bne.n	8006bec <__gethex+0x94>
 8006bfa:	9901      	ldr	r1, [sp, #4]
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f001 fb8e 	bl	8008320 <strncmp>
 8006c04:	b980      	cbnz	r0, 8006c28 <__gethex+0xd0>
 8006c06:	b94d      	cbnz	r5, 8006c1c <__gethex+0xc4>
 8006c08:	eb06 050a 	add.w	r5, r6, sl
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	4616      	mov	r6, r2
 8006c10:	3201      	adds	r2, #1
 8006c12:	7830      	ldrb	r0, [r6, #0]
 8006c14:	f7ff ff8a 	bl	8006b2c <__hexdig_fun>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d1f8      	bne.n	8006c0e <__gethex+0xb6>
 8006c1c:	1bad      	subs	r5, r5, r6
 8006c1e:	00ad      	lsls	r5, r5, #2
 8006c20:	e004      	b.n	8006c2c <__gethex+0xd4>
 8006c22:	2400      	movs	r4, #0
 8006c24:	4625      	mov	r5, r4
 8006c26:	e7e0      	b.n	8006bea <__gethex+0x92>
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	d1f7      	bne.n	8006c1c <__gethex+0xc4>
 8006c2c:	7833      	ldrb	r3, [r6, #0]
 8006c2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c32:	2b50      	cmp	r3, #80	; 0x50
 8006c34:	d13b      	bne.n	8006cae <__gethex+0x156>
 8006c36:	7873      	ldrb	r3, [r6, #1]
 8006c38:	2b2b      	cmp	r3, #43	; 0x2b
 8006c3a:	d02c      	beq.n	8006c96 <__gethex+0x13e>
 8006c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8006c3e:	d02e      	beq.n	8006c9e <__gethex+0x146>
 8006c40:	1c71      	adds	r1, r6, #1
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	7808      	ldrb	r0, [r1, #0]
 8006c48:	f7ff ff70 	bl	8006b2c <__hexdig_fun>
 8006c4c:	1e43      	subs	r3, r0, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b18      	cmp	r3, #24
 8006c52:	d82c      	bhi.n	8006cae <__gethex+0x156>
 8006c54:	f1a0 0210 	sub.w	r2, r0, #16
 8006c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c5c:	f7ff ff66 	bl	8006b2c <__hexdig_fun>
 8006c60:	1e43      	subs	r3, r0, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b18      	cmp	r3, #24
 8006c66:	d91d      	bls.n	8006ca4 <__gethex+0x14c>
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	d000      	beq.n	8006c70 <__gethex+0x118>
 8006c6e:	4252      	negs	r2, r2
 8006c70:	4415      	add	r5, r2
 8006c72:	f8cb 1000 	str.w	r1, [fp]
 8006c76:	b1e4      	cbz	r4, 8006cb2 <__gethex+0x15a>
 8006c78:	9b00      	ldr	r3, [sp, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bf14      	ite	ne
 8006c7e:	2700      	movne	r7, #0
 8006c80:	2706      	moveq	r7, #6
 8006c82:	4638      	mov	r0, r7
 8006c84:	b009      	add	sp, #36	; 0x24
 8006c86:	ecbd 8b02 	vpop	{d8}
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	463e      	mov	r6, r7
 8006c90:	4625      	mov	r5, r4
 8006c92:	2401      	movs	r4, #1
 8006c94:	e7ca      	b.n	8006c2c <__gethex+0xd4>
 8006c96:	f04f 0900 	mov.w	r9, #0
 8006c9a:	1cb1      	adds	r1, r6, #2
 8006c9c:	e7d3      	b.n	8006c46 <__gethex+0xee>
 8006c9e:	f04f 0901 	mov.w	r9, #1
 8006ca2:	e7fa      	b.n	8006c9a <__gethex+0x142>
 8006ca4:	230a      	movs	r3, #10
 8006ca6:	fb03 0202 	mla	r2, r3, r2, r0
 8006caa:	3a10      	subs	r2, #16
 8006cac:	e7d4      	b.n	8006c58 <__gethex+0x100>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	e7df      	b.n	8006c72 <__gethex+0x11a>
 8006cb2:	1bf3      	subs	r3, r6, r7
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	dc0b      	bgt.n	8006cd4 <__gethex+0x17c>
 8006cbc:	ee18 0a10 	vmov	r0, s16
 8006cc0:	f000 fa64 	bl	800718c <_Balloc>
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	b940      	cbnz	r0, 8006cda <__gethex+0x182>
 8006cc8:	4b5d      	ldr	r3, [pc, #372]	; (8006e40 <__gethex+0x2e8>)
 8006cca:	4602      	mov	r2, r0
 8006ccc:	21de      	movs	r1, #222	; 0xde
 8006cce:	485d      	ldr	r0, [pc, #372]	; (8006e44 <__gethex+0x2ec>)
 8006cd0:	f001 fb48 	bl	8008364 <__assert_func>
 8006cd4:	3101      	adds	r1, #1
 8006cd6:	105b      	asrs	r3, r3, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__gethex+0x160>
 8006cda:	f100 0914 	add.w	r9, r0, #20
 8006cde:	f04f 0b00 	mov.w	fp, #0
 8006ce2:	f1ca 0301 	rsb	r3, sl, #1
 8006ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cea:	f8cd b000 	str.w	fp, [sp]
 8006cee:	9306      	str	r3, [sp, #24]
 8006cf0:	42b7      	cmp	r7, r6
 8006cf2:	d340      	bcc.n	8006d76 <__gethex+0x21e>
 8006cf4:	9802      	ldr	r0, [sp, #8]
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	f840 3b04 	str.w	r3, [r0], #4
 8006cfc:	eba0 0009 	sub.w	r0, r0, r9
 8006d00:	1080      	asrs	r0, r0, #2
 8006d02:	0146      	lsls	r6, r0, #5
 8006d04:	6120      	str	r0, [r4, #16]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fb32 	bl	8007370 <__hi0bits>
 8006d0c:	1a30      	subs	r0, r6, r0
 8006d0e:	f8d8 6000 	ldr.w	r6, [r8]
 8006d12:	42b0      	cmp	r0, r6
 8006d14:	dd63      	ble.n	8006dde <__gethex+0x286>
 8006d16:	1b87      	subs	r7, r0, r6
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fef5 	bl	8007b0a <__any_on>
 8006d20:	4682      	mov	sl, r0
 8006d22:	b1a8      	cbz	r0, 8006d50 <__gethex+0x1f8>
 8006d24:	1e7b      	subs	r3, r7, #1
 8006d26:	1159      	asrs	r1, r3, #5
 8006d28:	f003 021f 	and.w	r2, r3, #31
 8006d2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d30:	f04f 0a01 	mov.w	sl, #1
 8006d34:	fa0a f202 	lsl.w	r2, sl, r2
 8006d38:	420a      	tst	r2, r1
 8006d3a:	d009      	beq.n	8006d50 <__gethex+0x1f8>
 8006d3c:	4553      	cmp	r3, sl
 8006d3e:	dd05      	ble.n	8006d4c <__gethex+0x1f4>
 8006d40:	1eb9      	subs	r1, r7, #2
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fee1 	bl	8007b0a <__any_on>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d145      	bne.n	8006dd8 <__gethex+0x280>
 8006d4c:	f04f 0a02 	mov.w	sl, #2
 8006d50:	4639      	mov	r1, r7
 8006d52:	4620      	mov	r0, r4
 8006d54:	f7ff fe98 	bl	8006a88 <rshift>
 8006d58:	443d      	add	r5, r7
 8006d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d5e:	42ab      	cmp	r3, r5
 8006d60:	da4c      	bge.n	8006dfc <__gethex+0x2a4>
 8006d62:	ee18 0a10 	vmov	r0, s16
 8006d66:	4621      	mov	r1, r4
 8006d68:	f000 fa50 	bl	800720c <_Bfree>
 8006d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	27a3      	movs	r7, #163	; 0xa3
 8006d74:	e785      	b.n	8006c82 <__gethex+0x12a>
 8006d76:	1e73      	subs	r3, r6, #1
 8006d78:	9a05      	ldr	r2, [sp, #20]
 8006d7a:	9303      	str	r3, [sp, #12]
 8006d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d019      	beq.n	8006db8 <__gethex+0x260>
 8006d84:	f1bb 0f20 	cmp.w	fp, #32
 8006d88:	d107      	bne.n	8006d9a <__gethex+0x242>
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	9a00      	ldr	r2, [sp, #0]
 8006d8e:	f843 2b04 	str.w	r2, [r3], #4
 8006d92:	9302      	str	r3, [sp, #8]
 8006d94:	2300      	movs	r3, #0
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	469b      	mov	fp, r3
 8006d9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d9e:	f7ff fec5 	bl	8006b2c <__hexdig_fun>
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	f000 000f 	and.w	r0, r0, #15
 8006da8:	fa00 f00b 	lsl.w	r0, r0, fp
 8006dac:	4303      	orrs	r3, r0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	f10b 0b04 	add.w	fp, fp, #4
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	e00d      	b.n	8006dd4 <__gethex+0x27c>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	9a06      	ldr	r2, [sp, #24]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	42bb      	cmp	r3, r7
 8006dc0:	d3e0      	bcc.n	8006d84 <__gethex+0x22c>
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	9901      	ldr	r1, [sp, #4]
 8006dc6:	9307      	str	r3, [sp, #28]
 8006dc8:	4652      	mov	r2, sl
 8006dca:	f001 faa9 	bl	8008320 <strncmp>
 8006dce:	9b07      	ldr	r3, [sp, #28]
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1d7      	bne.n	8006d84 <__gethex+0x22c>
 8006dd4:	461e      	mov	r6, r3
 8006dd6:	e78b      	b.n	8006cf0 <__gethex+0x198>
 8006dd8:	f04f 0a03 	mov.w	sl, #3
 8006ddc:	e7b8      	b.n	8006d50 <__gethex+0x1f8>
 8006dde:	da0a      	bge.n	8006df6 <__gethex+0x29e>
 8006de0:	1a37      	subs	r7, r6, r0
 8006de2:	4621      	mov	r1, r4
 8006de4:	ee18 0a10 	vmov	r0, s16
 8006de8:	463a      	mov	r2, r7
 8006dea:	f000 fc2b 	bl	8007644 <__lshift>
 8006dee:	1bed      	subs	r5, r5, r7
 8006df0:	4604      	mov	r4, r0
 8006df2:	f100 0914 	add.w	r9, r0, #20
 8006df6:	f04f 0a00 	mov.w	sl, #0
 8006dfa:	e7ae      	b.n	8006d5a <__gethex+0x202>
 8006dfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e00:	42a8      	cmp	r0, r5
 8006e02:	dd72      	ble.n	8006eea <__gethex+0x392>
 8006e04:	1b45      	subs	r5, r0, r5
 8006e06:	42ae      	cmp	r6, r5
 8006e08:	dc36      	bgt.n	8006e78 <__gethex+0x320>
 8006e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d02a      	beq.n	8006e68 <__gethex+0x310>
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d02c      	beq.n	8006e70 <__gethex+0x318>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d11c      	bne.n	8006e54 <__gethex+0x2fc>
 8006e1a:	42ae      	cmp	r6, r5
 8006e1c:	d11a      	bne.n	8006e54 <__gethex+0x2fc>
 8006e1e:	2e01      	cmp	r6, #1
 8006e20:	d112      	bne.n	8006e48 <__gethex+0x2f0>
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	f8c9 3000 	str.w	r3, [r9]
 8006e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e34:	2762      	movs	r7, #98	; 0x62
 8006e36:	601c      	str	r4, [r3, #0]
 8006e38:	e723      	b.n	8006c82 <__gethex+0x12a>
 8006e3a:	bf00      	nop
 8006e3c:	08009d50 	.word	0x08009d50
 8006e40:	08009cd8 	.word	0x08009cd8
 8006e44:	08009ce9 	.word	0x08009ce9
 8006e48:	1e71      	subs	r1, r6, #1
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 fe5d 	bl	8007b0a <__any_on>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d1e6      	bne.n	8006e22 <__gethex+0x2ca>
 8006e54:	ee18 0a10 	vmov	r0, s16
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f000 f9d7 	bl	800720c <_Bfree>
 8006e5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e60:	2300      	movs	r3, #0
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	2750      	movs	r7, #80	; 0x50
 8006e66:	e70c      	b.n	8006c82 <__gethex+0x12a>
 8006e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f2      	bne.n	8006e54 <__gethex+0x2fc>
 8006e6e:	e7d8      	b.n	8006e22 <__gethex+0x2ca>
 8006e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1d5      	bne.n	8006e22 <__gethex+0x2ca>
 8006e76:	e7ed      	b.n	8006e54 <__gethex+0x2fc>
 8006e78:	1e6f      	subs	r7, r5, #1
 8006e7a:	f1ba 0f00 	cmp.w	sl, #0
 8006e7e:	d131      	bne.n	8006ee4 <__gethex+0x38c>
 8006e80:	b127      	cbz	r7, 8006e8c <__gethex+0x334>
 8006e82:	4639      	mov	r1, r7
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fe40 	bl	8007b0a <__any_on>
 8006e8a:	4682      	mov	sl, r0
 8006e8c:	117b      	asrs	r3, r7, #5
 8006e8e:	2101      	movs	r1, #1
 8006e90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006e94:	f007 071f 	and.w	r7, r7, #31
 8006e98:	fa01 f707 	lsl.w	r7, r1, r7
 8006e9c:	421f      	tst	r7, r3
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bf18      	it	ne
 8006ea4:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ea8:	1b76      	subs	r6, r6, r5
 8006eaa:	f7ff fded 	bl	8006a88 <rshift>
 8006eae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006eb2:	2702      	movs	r7, #2
 8006eb4:	f1ba 0f00 	cmp.w	sl, #0
 8006eb8:	d048      	beq.n	8006f4c <__gethex+0x3f4>
 8006eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d015      	beq.n	8006eee <__gethex+0x396>
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d017      	beq.n	8006ef6 <__gethex+0x39e>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d109      	bne.n	8006ede <__gethex+0x386>
 8006eca:	f01a 0f02 	tst.w	sl, #2
 8006ece:	d006      	beq.n	8006ede <__gethex+0x386>
 8006ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8006ed4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ed8:	f01a 0f01 	tst.w	sl, #1
 8006edc:	d10e      	bne.n	8006efc <__gethex+0x3a4>
 8006ede:	f047 0710 	orr.w	r7, r7, #16
 8006ee2:	e033      	b.n	8006f4c <__gethex+0x3f4>
 8006ee4:	f04f 0a01 	mov.w	sl, #1
 8006ee8:	e7d0      	b.n	8006e8c <__gethex+0x334>
 8006eea:	2701      	movs	r7, #1
 8006eec:	e7e2      	b.n	8006eb4 <__gethex+0x35c>
 8006eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef0:	f1c3 0301 	rsb	r3, r3, #1
 8006ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8006ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <__gethex+0x386>
 8006efc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f00:	f104 0314 	add.w	r3, r4, #20
 8006f04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f0c:	f04f 0c00 	mov.w	ip, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f1a:	d01c      	beq.n	8006f56 <__gethex+0x3fe>
 8006f1c:	3201      	adds	r2, #1
 8006f1e:	6002      	str	r2, [r0, #0]
 8006f20:	2f02      	cmp	r7, #2
 8006f22:	f104 0314 	add.w	r3, r4, #20
 8006f26:	d13f      	bne.n	8006fa8 <__gethex+0x450>
 8006f28:	f8d8 2000 	ldr.w	r2, [r8]
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	42b2      	cmp	r2, r6
 8006f30:	d10a      	bne.n	8006f48 <__gethex+0x3f0>
 8006f32:	1171      	asrs	r1, r6, #5
 8006f34:	2201      	movs	r2, #1
 8006f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f3a:	f006 061f 	and.w	r6, r6, #31
 8006f3e:	fa02 f606 	lsl.w	r6, r2, r6
 8006f42:	421e      	tst	r6, r3
 8006f44:	bf18      	it	ne
 8006f46:	4617      	movne	r7, r2
 8006f48:	f047 0720 	orr.w	r7, r7, #32
 8006f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f4e:	601c      	str	r4, [r3, #0]
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	601d      	str	r5, [r3, #0]
 8006f54:	e695      	b.n	8006c82 <__gethex+0x12a>
 8006f56:	4299      	cmp	r1, r3
 8006f58:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f5c:	d8d8      	bhi.n	8006f10 <__gethex+0x3b8>
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	459b      	cmp	fp, r3
 8006f62:	db19      	blt.n	8006f98 <__gethex+0x440>
 8006f64:	6861      	ldr	r1, [r4, #4]
 8006f66:	ee18 0a10 	vmov	r0, s16
 8006f6a:	3101      	adds	r1, #1
 8006f6c:	f000 f90e 	bl	800718c <_Balloc>
 8006f70:	4681      	mov	r9, r0
 8006f72:	b918      	cbnz	r0, 8006f7c <__gethex+0x424>
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <__gethex+0x488>)
 8006f76:	4602      	mov	r2, r0
 8006f78:	2184      	movs	r1, #132	; 0x84
 8006f7a:	e6a8      	b.n	8006cce <__gethex+0x176>
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	3202      	adds	r2, #2
 8006f80:	f104 010c 	add.w	r1, r4, #12
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	300c      	adds	r0, #12
 8006f88:	f7fe fdbe 	bl	8005b08 <memcpy>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	ee18 0a10 	vmov	r0, s16
 8006f92:	f000 f93b 	bl	800720c <_Bfree>
 8006f96:	464c      	mov	r4, r9
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fa0:	6122      	str	r2, [r4, #16]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	615a      	str	r2, [r3, #20]
 8006fa6:	e7bb      	b.n	8006f20 <__gethex+0x3c8>
 8006fa8:	6922      	ldr	r2, [r4, #16]
 8006faa:	455a      	cmp	r2, fp
 8006fac:	dd0b      	ble.n	8006fc6 <__gethex+0x46e>
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff fd69 	bl	8006a88 <rshift>
 8006fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fba:	3501      	adds	r5, #1
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	f6ff aed0 	blt.w	8006d62 <__gethex+0x20a>
 8006fc2:	2701      	movs	r7, #1
 8006fc4:	e7c0      	b.n	8006f48 <__gethex+0x3f0>
 8006fc6:	f016 061f 	ands.w	r6, r6, #31
 8006fca:	d0fa      	beq.n	8006fc2 <__gethex+0x46a>
 8006fcc:	4453      	add	r3, sl
 8006fce:	f1c6 0620 	rsb	r6, r6, #32
 8006fd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006fd6:	f000 f9cb 	bl	8007370 <__hi0bits>
 8006fda:	42b0      	cmp	r0, r6
 8006fdc:	dbe7      	blt.n	8006fae <__gethex+0x456>
 8006fde:	e7f0      	b.n	8006fc2 <__gethex+0x46a>
 8006fe0:	08009cd8 	.word	0x08009cd8

08006fe4 <L_shift>:
 8006fe4:	f1c2 0208 	rsb	r2, r2, #8
 8006fe8:	0092      	lsls	r2, r2, #2
 8006fea:	b570      	push	{r4, r5, r6, lr}
 8006fec:	f1c2 0620 	rsb	r6, r2, #32
 8006ff0:	6843      	ldr	r3, [r0, #4]
 8006ff2:	6804      	ldr	r4, [r0, #0]
 8006ff4:	fa03 f506 	lsl.w	r5, r3, r6
 8006ff8:	432c      	orrs	r4, r5
 8006ffa:	40d3      	lsrs	r3, r2
 8006ffc:	6004      	str	r4, [r0, #0]
 8006ffe:	f840 3f04 	str.w	r3, [r0, #4]!
 8007002:	4288      	cmp	r0, r1
 8007004:	d3f4      	bcc.n	8006ff0 <L_shift+0xc>
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__match>:
 8007008:	b530      	push	{r4, r5, lr}
 800700a:	6803      	ldr	r3, [r0, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007012:	b914      	cbnz	r4, 800701a <__match+0x12>
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	2001      	movs	r0, #1
 8007018:	bd30      	pop	{r4, r5, pc}
 800701a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007022:	2d19      	cmp	r5, #25
 8007024:	bf98      	it	ls
 8007026:	3220      	addls	r2, #32
 8007028:	42a2      	cmp	r2, r4
 800702a:	d0f0      	beq.n	800700e <__match+0x6>
 800702c:	2000      	movs	r0, #0
 800702e:	e7f3      	b.n	8007018 <__match+0x10>

08007030 <__hexnan>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	115e      	asrs	r6, r3, #5
 8007038:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800703c:	f013 031f 	ands.w	r3, r3, #31
 8007040:	b087      	sub	sp, #28
 8007042:	bf18      	it	ne
 8007044:	3604      	addne	r6, #4
 8007046:	2500      	movs	r5, #0
 8007048:	1f37      	subs	r7, r6, #4
 800704a:	4690      	mov	r8, r2
 800704c:	6802      	ldr	r2, [r0, #0]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	4682      	mov	sl, r0
 8007052:	f846 5c04 	str.w	r5, [r6, #-4]
 8007056:	46b9      	mov	r9, r7
 8007058:	463c      	mov	r4, r7
 800705a:	9502      	str	r5, [sp, #8]
 800705c:	46ab      	mov	fp, r5
 800705e:	7851      	ldrb	r1, [r2, #1]
 8007060:	1c53      	adds	r3, r2, #1
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	b341      	cbz	r1, 80070b8 <__hexnan+0x88>
 8007066:	4608      	mov	r0, r1
 8007068:	9205      	str	r2, [sp, #20]
 800706a:	9104      	str	r1, [sp, #16]
 800706c:	f7ff fd5e 	bl	8006b2c <__hexdig_fun>
 8007070:	2800      	cmp	r0, #0
 8007072:	d14f      	bne.n	8007114 <__hexnan+0xe4>
 8007074:	9904      	ldr	r1, [sp, #16]
 8007076:	9a05      	ldr	r2, [sp, #20]
 8007078:	2920      	cmp	r1, #32
 800707a:	d818      	bhi.n	80070ae <__hexnan+0x7e>
 800707c:	9b02      	ldr	r3, [sp, #8]
 800707e:	459b      	cmp	fp, r3
 8007080:	dd13      	ble.n	80070aa <__hexnan+0x7a>
 8007082:	454c      	cmp	r4, r9
 8007084:	d206      	bcs.n	8007094 <__hexnan+0x64>
 8007086:	2d07      	cmp	r5, #7
 8007088:	dc04      	bgt.n	8007094 <__hexnan+0x64>
 800708a:	462a      	mov	r2, r5
 800708c:	4649      	mov	r1, r9
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff ffa8 	bl	8006fe4 <L_shift>
 8007094:	4544      	cmp	r4, r8
 8007096:	d950      	bls.n	800713a <__hexnan+0x10a>
 8007098:	2300      	movs	r3, #0
 800709a:	f1a4 0904 	sub.w	r9, r4, #4
 800709e:	f844 3c04 	str.w	r3, [r4, #-4]
 80070a2:	f8cd b008 	str.w	fp, [sp, #8]
 80070a6:	464c      	mov	r4, r9
 80070a8:	461d      	mov	r5, r3
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	e7d7      	b.n	800705e <__hexnan+0x2e>
 80070ae:	2929      	cmp	r1, #41	; 0x29
 80070b0:	d156      	bne.n	8007160 <__hexnan+0x130>
 80070b2:	3202      	adds	r2, #2
 80070b4:	f8ca 2000 	str.w	r2, [sl]
 80070b8:	f1bb 0f00 	cmp.w	fp, #0
 80070bc:	d050      	beq.n	8007160 <__hexnan+0x130>
 80070be:	454c      	cmp	r4, r9
 80070c0:	d206      	bcs.n	80070d0 <__hexnan+0xa0>
 80070c2:	2d07      	cmp	r5, #7
 80070c4:	dc04      	bgt.n	80070d0 <__hexnan+0xa0>
 80070c6:	462a      	mov	r2, r5
 80070c8:	4649      	mov	r1, r9
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff ff8a 	bl	8006fe4 <L_shift>
 80070d0:	4544      	cmp	r4, r8
 80070d2:	d934      	bls.n	800713e <__hexnan+0x10e>
 80070d4:	f1a8 0204 	sub.w	r2, r8, #4
 80070d8:	4623      	mov	r3, r4
 80070da:	f853 1b04 	ldr.w	r1, [r3], #4
 80070de:	f842 1f04 	str.w	r1, [r2, #4]!
 80070e2:	429f      	cmp	r7, r3
 80070e4:	d2f9      	bcs.n	80070da <__hexnan+0xaa>
 80070e6:	1b3b      	subs	r3, r7, r4
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	3304      	adds	r3, #4
 80070ee:	3401      	adds	r4, #1
 80070f0:	3e03      	subs	r6, #3
 80070f2:	42b4      	cmp	r4, r6
 80070f4:	bf88      	it	hi
 80070f6:	2304      	movhi	r3, #4
 80070f8:	4443      	add	r3, r8
 80070fa:	2200      	movs	r2, #0
 80070fc:	f843 2b04 	str.w	r2, [r3], #4
 8007100:	429f      	cmp	r7, r3
 8007102:	d2fb      	bcs.n	80070fc <__hexnan+0xcc>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	b91b      	cbnz	r3, 8007110 <__hexnan+0xe0>
 8007108:	4547      	cmp	r7, r8
 800710a:	d127      	bne.n	800715c <__hexnan+0x12c>
 800710c:	2301      	movs	r3, #1
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	2005      	movs	r0, #5
 8007112:	e026      	b.n	8007162 <__hexnan+0x132>
 8007114:	3501      	adds	r5, #1
 8007116:	2d08      	cmp	r5, #8
 8007118:	f10b 0b01 	add.w	fp, fp, #1
 800711c:	dd06      	ble.n	800712c <__hexnan+0xfc>
 800711e:	4544      	cmp	r4, r8
 8007120:	d9c3      	bls.n	80070aa <__hexnan+0x7a>
 8007122:	2300      	movs	r3, #0
 8007124:	f844 3c04 	str.w	r3, [r4, #-4]
 8007128:	2501      	movs	r5, #1
 800712a:	3c04      	subs	r4, #4
 800712c:	6822      	ldr	r2, [r4, #0]
 800712e:	f000 000f 	and.w	r0, r0, #15
 8007132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	e7b7      	b.n	80070aa <__hexnan+0x7a>
 800713a:	2508      	movs	r5, #8
 800713c:	e7b5      	b.n	80070aa <__hexnan+0x7a>
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0df      	beq.n	8007104 <__hexnan+0xd4>
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	f1c3 0320 	rsb	r3, r3, #32
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007154:	401a      	ands	r2, r3
 8007156:	f846 2c04 	str.w	r2, [r6, #-4]
 800715a:	e7d3      	b.n	8007104 <__hexnan+0xd4>
 800715c:	3f04      	subs	r7, #4
 800715e:	e7d1      	b.n	8007104 <__hexnan+0xd4>
 8007160:	2004      	movs	r0, #4
 8007162:	b007      	add	sp, #28
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007168 <__ascii_mbtowc>:
 8007168:	b082      	sub	sp, #8
 800716a:	b901      	cbnz	r1, 800716e <__ascii_mbtowc+0x6>
 800716c:	a901      	add	r1, sp, #4
 800716e:	b142      	cbz	r2, 8007182 <__ascii_mbtowc+0x1a>
 8007170:	b14b      	cbz	r3, 8007186 <__ascii_mbtowc+0x1e>
 8007172:	7813      	ldrb	r3, [r2, #0]
 8007174:	600b      	str	r3, [r1, #0]
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	1e10      	subs	r0, r2, #0
 800717a:	bf18      	it	ne
 800717c:	2001      	movne	r0, #1
 800717e:	b002      	add	sp, #8
 8007180:	4770      	bx	lr
 8007182:	4610      	mov	r0, r2
 8007184:	e7fb      	b.n	800717e <__ascii_mbtowc+0x16>
 8007186:	f06f 0001 	mvn.w	r0, #1
 800718a:	e7f8      	b.n	800717e <__ascii_mbtowc+0x16>

0800718c <_Balloc>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007190:	4604      	mov	r4, r0
 8007192:	460d      	mov	r5, r1
 8007194:	b976      	cbnz	r6, 80071b4 <_Balloc+0x28>
 8007196:	2010      	movs	r0, #16
 8007198:	f001 ff8e 	bl	80090b8 <malloc>
 800719c:	4602      	mov	r2, r0
 800719e:	6260      	str	r0, [r4, #36]	; 0x24
 80071a0:	b920      	cbnz	r0, 80071ac <_Balloc+0x20>
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <_Balloc+0x78>)
 80071a4:	4818      	ldr	r0, [pc, #96]	; (8007208 <_Balloc+0x7c>)
 80071a6:	2166      	movs	r1, #102	; 0x66
 80071a8:	f001 f8dc 	bl	8008364 <__assert_func>
 80071ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b0:	6006      	str	r6, [r0, #0]
 80071b2:	60c6      	str	r6, [r0, #12]
 80071b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b6:	68f3      	ldr	r3, [r6, #12]
 80071b8:	b183      	cbz	r3, 80071dc <_Balloc+0x50>
 80071ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c2:	b9b8      	cbnz	r0, 80071f4 <_Balloc+0x68>
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ca:	1d72      	adds	r2, r6, #5
 80071cc:	0092      	lsls	r2, r2, #2
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fcbc 	bl	8007b4c <_calloc_r>
 80071d4:	b160      	cbz	r0, 80071f0 <_Balloc+0x64>
 80071d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071da:	e00e      	b.n	80071fa <_Balloc+0x6e>
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	2104      	movs	r1, #4
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fcb3 	bl	8007b4c <_calloc_r>
 80071e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e8:	60f0      	str	r0, [r6, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <_Balloc+0x2e>
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fa:	2300      	movs	r3, #0
 80071fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007200:	e7f7      	b.n	80071f2 <_Balloc+0x66>
 8007202:	bf00      	nop
 8007204:	08009d64 	.word	0x08009d64
 8007208:	08009d7b 	.word	0x08009d7b

0800720c <_Bfree>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b976      	cbnz	r6, 8007234 <_Bfree+0x28>
 8007216:	2010      	movs	r0, #16
 8007218:	f001 ff4e 	bl	80090b8 <malloc>
 800721c:	4602      	mov	r2, r0
 800721e:	6268      	str	r0, [r5, #36]	; 0x24
 8007220:	b920      	cbnz	r0, 800722c <_Bfree+0x20>
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <_Bfree+0x3c>)
 8007224:	4809      	ldr	r0, [pc, #36]	; (800724c <_Bfree+0x40>)
 8007226:	218a      	movs	r1, #138	; 0x8a
 8007228:	f001 f89c 	bl	8008364 <__assert_func>
 800722c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007230:	6006      	str	r6, [r0, #0]
 8007232:	60c6      	str	r6, [r0, #12]
 8007234:	b13c      	cbz	r4, 8007246 <_Bfree+0x3a>
 8007236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007240:	6021      	str	r1, [r4, #0]
 8007242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	08009d64 	.word	0x08009d64
 800724c:	08009d7b 	.word	0x08009d7b

08007250 <__multadd>:
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	690d      	ldr	r5, [r1, #16]
 8007256:	4607      	mov	r7, r0
 8007258:	460c      	mov	r4, r1
 800725a:	461e      	mov	r6, r3
 800725c:	f101 0c14 	add.w	ip, r1, #20
 8007260:	2000      	movs	r0, #0
 8007262:	f8dc 3000 	ldr.w	r3, [ip]
 8007266:	b299      	uxth	r1, r3
 8007268:	fb02 6101 	mla	r1, r2, r1, r6
 800726c:	0c1e      	lsrs	r6, r3, #16
 800726e:	0c0b      	lsrs	r3, r1, #16
 8007270:	fb02 3306 	mla	r3, r2, r6, r3
 8007274:	b289      	uxth	r1, r1
 8007276:	3001      	adds	r0, #1
 8007278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800727c:	4285      	cmp	r5, r0
 800727e:	f84c 1b04 	str.w	r1, [ip], #4
 8007282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007286:	dcec      	bgt.n	8007262 <__multadd+0x12>
 8007288:	b30e      	cbz	r6, 80072ce <__multadd+0x7e>
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	42ab      	cmp	r3, r5
 800728e:	dc19      	bgt.n	80072c4 <__multadd+0x74>
 8007290:	6861      	ldr	r1, [r4, #4]
 8007292:	4638      	mov	r0, r7
 8007294:	3101      	adds	r1, #1
 8007296:	f7ff ff79 	bl	800718c <_Balloc>
 800729a:	4680      	mov	r8, r0
 800729c:	b928      	cbnz	r0, 80072aa <__multadd+0x5a>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <__multadd+0x84>)
 80072a2:	480d      	ldr	r0, [pc, #52]	; (80072d8 <__multadd+0x88>)
 80072a4:	21b5      	movs	r1, #181	; 0xb5
 80072a6:	f001 f85d 	bl	8008364 <__assert_func>
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	3202      	adds	r2, #2
 80072ae:	f104 010c 	add.w	r1, r4, #12
 80072b2:	0092      	lsls	r2, r2, #2
 80072b4:	300c      	adds	r0, #12
 80072b6:	f7fe fc27 	bl	8005b08 <memcpy>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff ffa5 	bl	800720c <_Bfree>
 80072c2:	4644      	mov	r4, r8
 80072c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072c8:	3501      	adds	r5, #1
 80072ca:	615e      	str	r6, [r3, #20]
 80072cc:	6125      	str	r5, [r4, #16]
 80072ce:	4620      	mov	r0, r4
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d4:	08009cd8 	.word	0x08009cd8
 80072d8:	08009d7b 	.word	0x08009d7b

080072dc <__s2b>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	4615      	mov	r5, r2
 80072e4:	461f      	mov	r7, r3
 80072e6:	2209      	movs	r2, #9
 80072e8:	3308      	adds	r3, #8
 80072ea:	4606      	mov	r6, r0
 80072ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80072f0:	2100      	movs	r1, #0
 80072f2:	2201      	movs	r2, #1
 80072f4:	429a      	cmp	r2, r3
 80072f6:	db09      	blt.n	800730c <__s2b+0x30>
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff ff47 	bl	800718c <_Balloc>
 80072fe:	b940      	cbnz	r0, 8007312 <__s2b+0x36>
 8007300:	4602      	mov	r2, r0
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <__s2b+0x8c>)
 8007304:	4819      	ldr	r0, [pc, #100]	; (800736c <__s2b+0x90>)
 8007306:	21ce      	movs	r1, #206	; 0xce
 8007308:	f001 f82c 	bl	8008364 <__assert_func>
 800730c:	0052      	lsls	r2, r2, #1
 800730e:	3101      	adds	r1, #1
 8007310:	e7f0      	b.n	80072f4 <__s2b+0x18>
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	6143      	str	r3, [r0, #20]
 8007316:	2d09      	cmp	r5, #9
 8007318:	f04f 0301 	mov.w	r3, #1
 800731c:	6103      	str	r3, [r0, #16]
 800731e:	dd16      	ble.n	800734e <__s2b+0x72>
 8007320:	f104 0909 	add.w	r9, r4, #9
 8007324:	46c8      	mov	r8, r9
 8007326:	442c      	add	r4, r5
 8007328:	f818 3b01 	ldrb.w	r3, [r8], #1
 800732c:	4601      	mov	r1, r0
 800732e:	3b30      	subs	r3, #48	; 0x30
 8007330:	220a      	movs	r2, #10
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ff8c 	bl	8007250 <__multadd>
 8007338:	45a0      	cmp	r8, r4
 800733a:	d1f5      	bne.n	8007328 <__s2b+0x4c>
 800733c:	f1a5 0408 	sub.w	r4, r5, #8
 8007340:	444c      	add	r4, r9
 8007342:	1b2d      	subs	r5, r5, r4
 8007344:	1963      	adds	r3, r4, r5
 8007346:	42bb      	cmp	r3, r7
 8007348:	db04      	blt.n	8007354 <__s2b+0x78>
 800734a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734e:	340a      	adds	r4, #10
 8007350:	2509      	movs	r5, #9
 8007352:	e7f6      	b.n	8007342 <__s2b+0x66>
 8007354:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007358:	4601      	mov	r1, r0
 800735a:	3b30      	subs	r3, #48	; 0x30
 800735c:	220a      	movs	r2, #10
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff76 	bl	8007250 <__multadd>
 8007364:	e7ee      	b.n	8007344 <__s2b+0x68>
 8007366:	bf00      	nop
 8007368:	08009cd8 	.word	0x08009cd8
 800736c:	08009d7b 	.word	0x08009d7b

08007370 <__hi0bits>:
 8007370:	0c03      	lsrs	r3, r0, #16
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	b9d3      	cbnz	r3, 80073ac <__hi0bits+0x3c>
 8007376:	0400      	lsls	r0, r0, #16
 8007378:	2310      	movs	r3, #16
 800737a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800737e:	bf04      	itt	eq
 8007380:	0200      	lsleq	r0, r0, #8
 8007382:	3308      	addeq	r3, #8
 8007384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007388:	bf04      	itt	eq
 800738a:	0100      	lsleq	r0, r0, #4
 800738c:	3304      	addeq	r3, #4
 800738e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007392:	bf04      	itt	eq
 8007394:	0080      	lsleq	r0, r0, #2
 8007396:	3302      	addeq	r3, #2
 8007398:	2800      	cmp	r0, #0
 800739a:	db05      	blt.n	80073a8 <__hi0bits+0x38>
 800739c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073a0:	f103 0301 	add.w	r3, r3, #1
 80073a4:	bf08      	it	eq
 80073a6:	2320      	moveq	r3, #32
 80073a8:	4618      	mov	r0, r3
 80073aa:	4770      	bx	lr
 80073ac:	2300      	movs	r3, #0
 80073ae:	e7e4      	b.n	800737a <__hi0bits+0xa>

080073b0 <__lo0bits>:
 80073b0:	6803      	ldr	r3, [r0, #0]
 80073b2:	f013 0207 	ands.w	r2, r3, #7
 80073b6:	4601      	mov	r1, r0
 80073b8:	d00b      	beq.n	80073d2 <__lo0bits+0x22>
 80073ba:	07da      	lsls	r2, r3, #31
 80073bc:	d423      	bmi.n	8007406 <__lo0bits+0x56>
 80073be:	0798      	lsls	r0, r3, #30
 80073c0:	bf49      	itett	mi
 80073c2:	085b      	lsrmi	r3, r3, #1
 80073c4:	089b      	lsrpl	r3, r3, #2
 80073c6:	2001      	movmi	r0, #1
 80073c8:	600b      	strmi	r3, [r1, #0]
 80073ca:	bf5c      	itt	pl
 80073cc:	600b      	strpl	r3, [r1, #0]
 80073ce:	2002      	movpl	r0, #2
 80073d0:	4770      	bx	lr
 80073d2:	b298      	uxth	r0, r3
 80073d4:	b9a8      	cbnz	r0, 8007402 <__lo0bits+0x52>
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	2010      	movs	r0, #16
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	b90a      	cbnz	r2, 80073e2 <__lo0bits+0x32>
 80073de:	3008      	adds	r0, #8
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	071a      	lsls	r2, r3, #28
 80073e4:	bf04      	itt	eq
 80073e6:	091b      	lsreq	r3, r3, #4
 80073e8:	3004      	addeq	r0, #4
 80073ea:	079a      	lsls	r2, r3, #30
 80073ec:	bf04      	itt	eq
 80073ee:	089b      	lsreq	r3, r3, #2
 80073f0:	3002      	addeq	r0, #2
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	d403      	bmi.n	80073fe <__lo0bits+0x4e>
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f100 0001 	add.w	r0, r0, #1
 80073fc:	d005      	beq.n	800740a <__lo0bits+0x5a>
 80073fe:	600b      	str	r3, [r1, #0]
 8007400:	4770      	bx	lr
 8007402:	4610      	mov	r0, r2
 8007404:	e7e9      	b.n	80073da <__lo0bits+0x2a>
 8007406:	2000      	movs	r0, #0
 8007408:	4770      	bx	lr
 800740a:	2020      	movs	r0, #32
 800740c:	4770      	bx	lr
	...

08007410 <__i2b>:
 8007410:	b510      	push	{r4, lr}
 8007412:	460c      	mov	r4, r1
 8007414:	2101      	movs	r1, #1
 8007416:	f7ff feb9 	bl	800718c <_Balloc>
 800741a:	4602      	mov	r2, r0
 800741c:	b928      	cbnz	r0, 800742a <__i2b+0x1a>
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <__i2b+0x24>)
 8007420:	4805      	ldr	r0, [pc, #20]	; (8007438 <__i2b+0x28>)
 8007422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007426:	f000 ff9d 	bl	8008364 <__assert_func>
 800742a:	2301      	movs	r3, #1
 800742c:	6144      	str	r4, [r0, #20]
 800742e:	6103      	str	r3, [r0, #16]
 8007430:	bd10      	pop	{r4, pc}
 8007432:	bf00      	nop
 8007434:	08009cd8 	.word	0x08009cd8
 8007438:	08009d7b 	.word	0x08009d7b

0800743c <__multiply>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	4691      	mov	r9, r2
 8007442:	690a      	ldr	r2, [r1, #16]
 8007444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	bfb8      	it	lt
 800744c:	460b      	movlt	r3, r1
 800744e:	460c      	mov	r4, r1
 8007450:	bfbc      	itt	lt
 8007452:	464c      	movlt	r4, r9
 8007454:	4699      	movlt	r9, r3
 8007456:	6927      	ldr	r7, [r4, #16]
 8007458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	6861      	ldr	r1, [r4, #4]
 8007460:	eb07 060a 	add.w	r6, r7, sl
 8007464:	42b3      	cmp	r3, r6
 8007466:	b085      	sub	sp, #20
 8007468:	bfb8      	it	lt
 800746a:	3101      	addlt	r1, #1
 800746c:	f7ff fe8e 	bl	800718c <_Balloc>
 8007470:	b930      	cbnz	r0, 8007480 <__multiply+0x44>
 8007472:	4602      	mov	r2, r0
 8007474:	4b44      	ldr	r3, [pc, #272]	; (8007588 <__multiply+0x14c>)
 8007476:	4845      	ldr	r0, [pc, #276]	; (800758c <__multiply+0x150>)
 8007478:	f240 115d 	movw	r1, #349	; 0x15d
 800747c:	f000 ff72 	bl	8008364 <__assert_func>
 8007480:	f100 0514 	add.w	r5, r0, #20
 8007484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007488:	462b      	mov	r3, r5
 800748a:	2200      	movs	r2, #0
 800748c:	4543      	cmp	r3, r8
 800748e:	d321      	bcc.n	80074d4 <__multiply+0x98>
 8007490:	f104 0314 	add.w	r3, r4, #20
 8007494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007498:	f109 0314 	add.w	r3, r9, #20
 800749c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074a0:	9202      	str	r2, [sp, #8]
 80074a2:	1b3a      	subs	r2, r7, r4
 80074a4:	3a15      	subs	r2, #21
 80074a6:	f022 0203 	bic.w	r2, r2, #3
 80074aa:	3204      	adds	r2, #4
 80074ac:	f104 0115 	add.w	r1, r4, #21
 80074b0:	428f      	cmp	r7, r1
 80074b2:	bf38      	it	cc
 80074b4:	2204      	movcc	r2, #4
 80074b6:	9201      	str	r2, [sp, #4]
 80074b8:	9a02      	ldr	r2, [sp, #8]
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d80c      	bhi.n	80074da <__multiply+0x9e>
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	dd03      	ble.n	80074cc <__multiply+0x90>
 80074c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05a      	beq.n	8007582 <__multiply+0x146>
 80074cc:	6106      	str	r6, [r0, #16]
 80074ce:	b005      	add	sp, #20
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	f843 2b04 	str.w	r2, [r3], #4
 80074d8:	e7d8      	b.n	800748c <__multiply+0x50>
 80074da:	f8b3 a000 	ldrh.w	sl, [r3]
 80074de:	f1ba 0f00 	cmp.w	sl, #0
 80074e2:	d024      	beq.n	800752e <__multiply+0xf2>
 80074e4:	f104 0e14 	add.w	lr, r4, #20
 80074e8:	46a9      	mov	r9, r5
 80074ea:	f04f 0c00 	mov.w	ip, #0
 80074ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074f2:	f8d9 1000 	ldr.w	r1, [r9]
 80074f6:	fa1f fb82 	uxth.w	fp, r2
 80074fa:	b289      	uxth	r1, r1
 80074fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007504:	f8d9 2000 	ldr.w	r2, [r9]
 8007508:	4461      	add	r1, ip
 800750a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800750e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007516:	b289      	uxth	r1, r1
 8007518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800751c:	4577      	cmp	r7, lr
 800751e:	f849 1b04 	str.w	r1, [r9], #4
 8007522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007526:	d8e2      	bhi.n	80074ee <__multiply+0xb2>
 8007528:	9a01      	ldr	r2, [sp, #4]
 800752a:	f845 c002 	str.w	ip, [r5, r2]
 800752e:	9a03      	ldr	r2, [sp, #12]
 8007530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007534:	3304      	adds	r3, #4
 8007536:	f1b9 0f00 	cmp.w	r9, #0
 800753a:	d020      	beq.n	800757e <__multiply+0x142>
 800753c:	6829      	ldr	r1, [r5, #0]
 800753e:	f104 0c14 	add.w	ip, r4, #20
 8007542:	46ae      	mov	lr, r5
 8007544:	f04f 0a00 	mov.w	sl, #0
 8007548:	f8bc b000 	ldrh.w	fp, [ip]
 800754c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007550:	fb09 220b 	mla	r2, r9, fp, r2
 8007554:	4492      	add	sl, r2
 8007556:	b289      	uxth	r1, r1
 8007558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800755c:	f84e 1b04 	str.w	r1, [lr], #4
 8007560:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007564:	f8be 1000 	ldrh.w	r1, [lr]
 8007568:	0c12      	lsrs	r2, r2, #16
 800756a:	fb09 1102 	mla	r1, r9, r2, r1
 800756e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007572:	4567      	cmp	r7, ip
 8007574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007578:	d8e6      	bhi.n	8007548 <__multiply+0x10c>
 800757a:	9a01      	ldr	r2, [sp, #4]
 800757c:	50a9      	str	r1, [r5, r2]
 800757e:	3504      	adds	r5, #4
 8007580:	e79a      	b.n	80074b8 <__multiply+0x7c>
 8007582:	3e01      	subs	r6, #1
 8007584:	e79c      	b.n	80074c0 <__multiply+0x84>
 8007586:	bf00      	nop
 8007588:	08009cd8 	.word	0x08009cd8
 800758c:	08009d7b 	.word	0x08009d7b

08007590 <__pow5mult>:
 8007590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007594:	4615      	mov	r5, r2
 8007596:	f012 0203 	ands.w	r2, r2, #3
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	d007      	beq.n	80075b0 <__pow5mult+0x20>
 80075a0:	4c25      	ldr	r4, [pc, #148]	; (8007638 <__pow5mult+0xa8>)
 80075a2:	3a01      	subs	r2, #1
 80075a4:	2300      	movs	r3, #0
 80075a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075aa:	f7ff fe51 	bl	8007250 <__multadd>
 80075ae:	4607      	mov	r7, r0
 80075b0:	10ad      	asrs	r5, r5, #2
 80075b2:	d03d      	beq.n	8007630 <__pow5mult+0xa0>
 80075b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075b6:	b97c      	cbnz	r4, 80075d8 <__pow5mult+0x48>
 80075b8:	2010      	movs	r0, #16
 80075ba:	f001 fd7d 	bl	80090b8 <malloc>
 80075be:	4602      	mov	r2, r0
 80075c0:	6270      	str	r0, [r6, #36]	; 0x24
 80075c2:	b928      	cbnz	r0, 80075d0 <__pow5mult+0x40>
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <__pow5mult+0xac>)
 80075c6:	481e      	ldr	r0, [pc, #120]	; (8007640 <__pow5mult+0xb0>)
 80075c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075cc:	f000 feca 	bl	8008364 <__assert_func>
 80075d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075d4:	6004      	str	r4, [r0, #0]
 80075d6:	60c4      	str	r4, [r0, #12]
 80075d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075e0:	b94c      	cbnz	r4, 80075f6 <__pow5mult+0x66>
 80075e2:	f240 2171 	movw	r1, #625	; 0x271
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7ff ff12 	bl	8007410 <__i2b>
 80075ec:	2300      	movs	r3, #0
 80075ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80075f2:	4604      	mov	r4, r0
 80075f4:	6003      	str	r3, [r0, #0]
 80075f6:	f04f 0900 	mov.w	r9, #0
 80075fa:	07eb      	lsls	r3, r5, #31
 80075fc:	d50a      	bpl.n	8007614 <__pow5mult+0x84>
 80075fe:	4639      	mov	r1, r7
 8007600:	4622      	mov	r2, r4
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ff1a 	bl	800743c <__multiply>
 8007608:	4639      	mov	r1, r7
 800760a:	4680      	mov	r8, r0
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fdfd 	bl	800720c <_Bfree>
 8007612:	4647      	mov	r7, r8
 8007614:	106d      	asrs	r5, r5, #1
 8007616:	d00b      	beq.n	8007630 <__pow5mult+0xa0>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	b938      	cbnz	r0, 800762c <__pow5mult+0x9c>
 800761c:	4622      	mov	r2, r4
 800761e:	4621      	mov	r1, r4
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff ff0b 	bl	800743c <__multiply>
 8007626:	6020      	str	r0, [r4, #0]
 8007628:	f8c0 9000 	str.w	r9, [r0]
 800762c:	4604      	mov	r4, r0
 800762e:	e7e4      	b.n	80075fa <__pow5mult+0x6a>
 8007630:	4638      	mov	r0, r7
 8007632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007636:	bf00      	nop
 8007638:	08009ec8 	.word	0x08009ec8
 800763c:	08009d64 	.word	0x08009d64
 8007640:	08009d7b 	.word	0x08009d7b

08007644 <__lshift>:
 8007644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	6849      	ldr	r1, [r1, #4]
 800764c:	6923      	ldr	r3, [r4, #16]
 800764e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	4607      	mov	r7, r0
 8007656:	4691      	mov	r9, r2
 8007658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800765c:	f108 0601 	add.w	r6, r8, #1
 8007660:	42b3      	cmp	r3, r6
 8007662:	db0b      	blt.n	800767c <__lshift+0x38>
 8007664:	4638      	mov	r0, r7
 8007666:	f7ff fd91 	bl	800718c <_Balloc>
 800766a:	4605      	mov	r5, r0
 800766c:	b948      	cbnz	r0, 8007682 <__lshift+0x3e>
 800766e:	4602      	mov	r2, r0
 8007670:	4b2a      	ldr	r3, [pc, #168]	; (800771c <__lshift+0xd8>)
 8007672:	482b      	ldr	r0, [pc, #172]	; (8007720 <__lshift+0xdc>)
 8007674:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007678:	f000 fe74 	bl	8008364 <__assert_func>
 800767c:	3101      	adds	r1, #1
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	e7ee      	b.n	8007660 <__lshift+0x1c>
 8007682:	2300      	movs	r3, #0
 8007684:	f100 0114 	add.w	r1, r0, #20
 8007688:	f100 0210 	add.w	r2, r0, #16
 800768c:	4618      	mov	r0, r3
 800768e:	4553      	cmp	r3, sl
 8007690:	db37      	blt.n	8007702 <__lshift+0xbe>
 8007692:	6920      	ldr	r0, [r4, #16]
 8007694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007698:	f104 0314 	add.w	r3, r4, #20
 800769c:	f019 091f 	ands.w	r9, r9, #31
 80076a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076a8:	d02f      	beq.n	800770a <__lshift+0xc6>
 80076aa:	f1c9 0e20 	rsb	lr, r9, #32
 80076ae:	468a      	mov	sl, r1
 80076b0:	f04f 0c00 	mov.w	ip, #0
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	fa02 f209 	lsl.w	r2, r2, r9
 80076ba:	ea42 020c 	orr.w	r2, r2, ip
 80076be:	f84a 2b04 	str.w	r2, [sl], #4
 80076c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c6:	4298      	cmp	r0, r3
 80076c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076cc:	d8f2      	bhi.n	80076b4 <__lshift+0x70>
 80076ce:	1b03      	subs	r3, r0, r4
 80076d0:	3b15      	subs	r3, #21
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	3304      	adds	r3, #4
 80076d8:	f104 0215 	add.w	r2, r4, #21
 80076dc:	4290      	cmp	r0, r2
 80076de:	bf38      	it	cc
 80076e0:	2304      	movcc	r3, #4
 80076e2:	f841 c003 	str.w	ip, [r1, r3]
 80076e6:	f1bc 0f00 	cmp.w	ip, #0
 80076ea:	d001      	beq.n	80076f0 <__lshift+0xac>
 80076ec:	f108 0602 	add.w	r6, r8, #2
 80076f0:	3e01      	subs	r6, #1
 80076f2:	4638      	mov	r0, r7
 80076f4:	612e      	str	r6, [r5, #16]
 80076f6:	4621      	mov	r1, r4
 80076f8:	f7ff fd88 	bl	800720c <_Bfree>
 80076fc:	4628      	mov	r0, r5
 80076fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007702:	f842 0f04 	str.w	r0, [r2, #4]!
 8007706:	3301      	adds	r3, #1
 8007708:	e7c1      	b.n	800768e <__lshift+0x4a>
 800770a:	3904      	subs	r1, #4
 800770c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007710:	f841 2f04 	str.w	r2, [r1, #4]!
 8007714:	4298      	cmp	r0, r3
 8007716:	d8f9      	bhi.n	800770c <__lshift+0xc8>
 8007718:	e7ea      	b.n	80076f0 <__lshift+0xac>
 800771a:	bf00      	nop
 800771c:	08009cd8 	.word	0x08009cd8
 8007720:	08009d7b 	.word	0x08009d7b

08007724 <__mcmp>:
 8007724:	b530      	push	{r4, r5, lr}
 8007726:	6902      	ldr	r2, [r0, #16]
 8007728:	690c      	ldr	r4, [r1, #16]
 800772a:	1b12      	subs	r2, r2, r4
 800772c:	d10e      	bne.n	800774c <__mcmp+0x28>
 800772e:	f100 0314 	add.w	r3, r0, #20
 8007732:	3114      	adds	r1, #20
 8007734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800773c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007744:	42a5      	cmp	r5, r4
 8007746:	d003      	beq.n	8007750 <__mcmp+0x2c>
 8007748:	d305      	bcc.n	8007756 <__mcmp+0x32>
 800774a:	2201      	movs	r2, #1
 800774c:	4610      	mov	r0, r2
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	4283      	cmp	r3, r0
 8007752:	d3f3      	bcc.n	800773c <__mcmp+0x18>
 8007754:	e7fa      	b.n	800774c <__mcmp+0x28>
 8007756:	f04f 32ff 	mov.w	r2, #4294967295
 800775a:	e7f7      	b.n	800774c <__mcmp+0x28>

0800775c <__mdiff>:
 800775c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	460c      	mov	r4, r1
 8007762:	4606      	mov	r6, r0
 8007764:	4611      	mov	r1, r2
 8007766:	4620      	mov	r0, r4
 8007768:	4690      	mov	r8, r2
 800776a:	f7ff ffdb 	bl	8007724 <__mcmp>
 800776e:	1e05      	subs	r5, r0, #0
 8007770:	d110      	bne.n	8007794 <__mdiff+0x38>
 8007772:	4629      	mov	r1, r5
 8007774:	4630      	mov	r0, r6
 8007776:	f7ff fd09 	bl	800718c <_Balloc>
 800777a:	b930      	cbnz	r0, 800778a <__mdiff+0x2e>
 800777c:	4b3a      	ldr	r3, [pc, #232]	; (8007868 <__mdiff+0x10c>)
 800777e:	4602      	mov	r2, r0
 8007780:	f240 2132 	movw	r1, #562	; 0x232
 8007784:	4839      	ldr	r0, [pc, #228]	; (800786c <__mdiff+0x110>)
 8007786:	f000 fded 	bl	8008364 <__assert_func>
 800778a:	2301      	movs	r3, #1
 800778c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007794:	bfa4      	itt	ge
 8007796:	4643      	movge	r3, r8
 8007798:	46a0      	movge	r8, r4
 800779a:	4630      	mov	r0, r6
 800779c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077a0:	bfa6      	itte	ge
 80077a2:	461c      	movge	r4, r3
 80077a4:	2500      	movge	r5, #0
 80077a6:	2501      	movlt	r5, #1
 80077a8:	f7ff fcf0 	bl	800718c <_Balloc>
 80077ac:	b920      	cbnz	r0, 80077b8 <__mdiff+0x5c>
 80077ae:	4b2e      	ldr	r3, [pc, #184]	; (8007868 <__mdiff+0x10c>)
 80077b0:	4602      	mov	r2, r0
 80077b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077b6:	e7e5      	b.n	8007784 <__mdiff+0x28>
 80077b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077bc:	6926      	ldr	r6, [r4, #16]
 80077be:	60c5      	str	r5, [r0, #12]
 80077c0:	f104 0914 	add.w	r9, r4, #20
 80077c4:	f108 0514 	add.w	r5, r8, #20
 80077c8:	f100 0e14 	add.w	lr, r0, #20
 80077cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077d4:	f108 0210 	add.w	r2, r8, #16
 80077d8:	46f2      	mov	sl, lr
 80077da:	2100      	movs	r1, #0
 80077dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80077e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077e4:	fa1f f883 	uxth.w	r8, r3
 80077e8:	fa11 f18b 	uxtah	r1, r1, fp
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	eba1 0808 	sub.w	r8, r1, r8
 80077f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077fa:	fa1f f888 	uxth.w	r8, r8
 80077fe:	1419      	asrs	r1, r3, #16
 8007800:	454e      	cmp	r6, r9
 8007802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007806:	f84a 3b04 	str.w	r3, [sl], #4
 800780a:	d8e7      	bhi.n	80077dc <__mdiff+0x80>
 800780c:	1b33      	subs	r3, r6, r4
 800780e:	3b15      	subs	r3, #21
 8007810:	f023 0303 	bic.w	r3, r3, #3
 8007814:	3304      	adds	r3, #4
 8007816:	3415      	adds	r4, #21
 8007818:	42a6      	cmp	r6, r4
 800781a:	bf38      	it	cc
 800781c:	2304      	movcc	r3, #4
 800781e:	441d      	add	r5, r3
 8007820:	4473      	add	r3, lr
 8007822:	469e      	mov	lr, r3
 8007824:	462e      	mov	r6, r5
 8007826:	4566      	cmp	r6, ip
 8007828:	d30e      	bcc.n	8007848 <__mdiff+0xec>
 800782a:	f10c 0203 	add.w	r2, ip, #3
 800782e:	1b52      	subs	r2, r2, r5
 8007830:	f022 0203 	bic.w	r2, r2, #3
 8007834:	3d03      	subs	r5, #3
 8007836:	45ac      	cmp	ip, r5
 8007838:	bf38      	it	cc
 800783a:	2200      	movcc	r2, #0
 800783c:	441a      	add	r2, r3
 800783e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007842:	b17b      	cbz	r3, 8007864 <__mdiff+0x108>
 8007844:	6107      	str	r7, [r0, #16]
 8007846:	e7a3      	b.n	8007790 <__mdiff+0x34>
 8007848:	f856 8b04 	ldr.w	r8, [r6], #4
 800784c:	fa11 f288 	uxtah	r2, r1, r8
 8007850:	1414      	asrs	r4, r2, #16
 8007852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007856:	b292      	uxth	r2, r2
 8007858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800785c:	f84e 2b04 	str.w	r2, [lr], #4
 8007860:	1421      	asrs	r1, r4, #16
 8007862:	e7e0      	b.n	8007826 <__mdiff+0xca>
 8007864:	3f01      	subs	r7, #1
 8007866:	e7ea      	b.n	800783e <__mdiff+0xe2>
 8007868:	08009cd8 	.word	0x08009cd8
 800786c:	08009d7b 	.word	0x08009d7b

08007870 <__ulp>:
 8007870:	b082      	sub	sp, #8
 8007872:	ed8d 0b00 	vstr	d0, [sp]
 8007876:	9b01      	ldr	r3, [sp, #4]
 8007878:	4912      	ldr	r1, [pc, #72]	; (80078c4 <__ulp+0x54>)
 800787a:	4019      	ands	r1, r3
 800787c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007880:	2900      	cmp	r1, #0
 8007882:	dd05      	ble.n	8007890 <__ulp+0x20>
 8007884:	2200      	movs	r2, #0
 8007886:	460b      	mov	r3, r1
 8007888:	ec43 2b10 	vmov	d0, r2, r3
 800788c:	b002      	add	sp, #8
 800788e:	4770      	bx	lr
 8007890:	4249      	negs	r1, r1
 8007892:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007896:	ea4f 5021 	mov.w	r0, r1, asr #20
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	da04      	bge.n	80078ae <__ulp+0x3e>
 80078a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80078a8:	fa41 f300 	asr.w	r3, r1, r0
 80078ac:	e7ec      	b.n	8007888 <__ulp+0x18>
 80078ae:	f1a0 0114 	sub.w	r1, r0, #20
 80078b2:	291e      	cmp	r1, #30
 80078b4:	bfda      	itte	le
 80078b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80078ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80078be:	2101      	movgt	r1, #1
 80078c0:	460a      	mov	r2, r1
 80078c2:	e7e1      	b.n	8007888 <__ulp+0x18>
 80078c4:	7ff00000 	.word	0x7ff00000

080078c8 <__b2d>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	6905      	ldr	r5, [r0, #16]
 80078cc:	f100 0714 	add.w	r7, r0, #20
 80078d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80078d4:	1f2e      	subs	r6, r5, #4
 80078d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80078da:	4620      	mov	r0, r4
 80078dc:	f7ff fd48 	bl	8007370 <__hi0bits>
 80078e0:	f1c0 0320 	rsb	r3, r0, #32
 80078e4:	280a      	cmp	r0, #10
 80078e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007964 <__b2d+0x9c>
 80078ea:	600b      	str	r3, [r1, #0]
 80078ec:	dc14      	bgt.n	8007918 <__b2d+0x50>
 80078ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80078f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80078f6:	42b7      	cmp	r7, r6
 80078f8:	ea41 030c 	orr.w	r3, r1, ip
 80078fc:	bf34      	ite	cc
 80078fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007902:	2100      	movcs	r1, #0
 8007904:	3015      	adds	r0, #21
 8007906:	fa04 f000 	lsl.w	r0, r4, r0
 800790a:	fa21 f10e 	lsr.w	r1, r1, lr
 800790e:	ea40 0201 	orr.w	r2, r0, r1
 8007912:	ec43 2b10 	vmov	d0, r2, r3
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	42b7      	cmp	r7, r6
 800791a:	bf3a      	itte	cc
 800791c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007920:	f1a5 0608 	subcc.w	r6, r5, #8
 8007924:	2100      	movcs	r1, #0
 8007926:	380b      	subs	r0, #11
 8007928:	d017      	beq.n	800795a <__b2d+0x92>
 800792a:	f1c0 0c20 	rsb	ip, r0, #32
 800792e:	fa04 f500 	lsl.w	r5, r4, r0
 8007932:	42be      	cmp	r6, r7
 8007934:	fa21 f40c 	lsr.w	r4, r1, ip
 8007938:	ea45 0504 	orr.w	r5, r5, r4
 800793c:	bf8c      	ite	hi
 800793e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007942:	2400      	movls	r4, #0
 8007944:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007948:	fa01 f000 	lsl.w	r0, r1, r0
 800794c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007950:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007954:	ea40 0204 	orr.w	r2, r0, r4
 8007958:	e7db      	b.n	8007912 <__b2d+0x4a>
 800795a:	ea44 030c 	orr.w	r3, r4, ip
 800795e:	460a      	mov	r2, r1
 8007960:	e7d7      	b.n	8007912 <__b2d+0x4a>
 8007962:	bf00      	nop
 8007964:	3ff00000 	.word	0x3ff00000

08007968 <__d2b>:
 8007968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4689      	mov	r9, r1
 800796e:	2101      	movs	r1, #1
 8007970:	ec57 6b10 	vmov	r6, r7, d0
 8007974:	4690      	mov	r8, r2
 8007976:	f7ff fc09 	bl	800718c <_Balloc>
 800797a:	4604      	mov	r4, r0
 800797c:	b930      	cbnz	r0, 800798c <__d2b+0x24>
 800797e:	4602      	mov	r2, r0
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <__d2b+0xb0>)
 8007982:	4826      	ldr	r0, [pc, #152]	; (8007a1c <__d2b+0xb4>)
 8007984:	f240 310a 	movw	r1, #778	; 0x30a
 8007988:	f000 fcec 	bl	8008364 <__assert_func>
 800798c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007994:	bb35      	cbnz	r5, 80079e4 <__d2b+0x7c>
 8007996:	2e00      	cmp	r6, #0
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	d028      	beq.n	80079ee <__d2b+0x86>
 800799c:	4668      	mov	r0, sp
 800799e:	9600      	str	r6, [sp, #0]
 80079a0:	f7ff fd06 	bl	80073b0 <__lo0bits>
 80079a4:	9900      	ldr	r1, [sp, #0]
 80079a6:	b300      	cbz	r0, 80079ea <__d2b+0x82>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	f1c0 0320 	rsb	r3, r0, #32
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	430b      	orrs	r3, r1
 80079b4:	40c2      	lsrs	r2, r0
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	61a3      	str	r3, [r4, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bf14      	ite	ne
 80079c2:	2202      	movne	r2, #2
 80079c4:	2201      	moveq	r2, #1
 80079c6:	6122      	str	r2, [r4, #16]
 80079c8:	b1d5      	cbz	r5, 8007a00 <__d2b+0x98>
 80079ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079ce:	4405      	add	r5, r0
 80079d0:	f8c9 5000 	str.w	r5, [r9]
 80079d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079d8:	f8c8 0000 	str.w	r0, [r8]
 80079dc:	4620      	mov	r0, r4
 80079de:	b003      	add	sp, #12
 80079e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079e8:	e7d5      	b.n	8007996 <__d2b+0x2e>
 80079ea:	6161      	str	r1, [r4, #20]
 80079ec:	e7e5      	b.n	80079ba <__d2b+0x52>
 80079ee:	a801      	add	r0, sp, #4
 80079f0:	f7ff fcde 	bl	80073b0 <__lo0bits>
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	6163      	str	r3, [r4, #20]
 80079f8:	2201      	movs	r2, #1
 80079fa:	6122      	str	r2, [r4, #16]
 80079fc:	3020      	adds	r0, #32
 80079fe:	e7e3      	b.n	80079c8 <__d2b+0x60>
 8007a00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a08:	f8c9 0000 	str.w	r0, [r9]
 8007a0c:	6918      	ldr	r0, [r3, #16]
 8007a0e:	f7ff fcaf 	bl	8007370 <__hi0bits>
 8007a12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a16:	e7df      	b.n	80079d8 <__d2b+0x70>
 8007a18:	08009cd8 	.word	0x08009cd8
 8007a1c:	08009d7b 	.word	0x08009d7b

08007a20 <__ratio>:
 8007a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	4688      	mov	r8, r1
 8007a26:	4669      	mov	r1, sp
 8007a28:	4681      	mov	r9, r0
 8007a2a:	f7ff ff4d 	bl	80078c8 <__b2d>
 8007a2e:	a901      	add	r1, sp, #4
 8007a30:	4640      	mov	r0, r8
 8007a32:	ec55 4b10 	vmov	r4, r5, d0
 8007a36:	f7ff ff47 	bl	80078c8 <__b2d>
 8007a3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a42:	eba3 0c02 	sub.w	ip, r3, r2
 8007a46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a50:	ec51 0b10 	vmov	r0, r1, d0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfd6      	itet	le
 8007a58:	460a      	movle	r2, r1
 8007a5a:	462a      	movgt	r2, r5
 8007a5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a60:	468b      	mov	fp, r1
 8007a62:	462f      	mov	r7, r5
 8007a64:	bfd4      	ite	le
 8007a66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007a6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a6e:	4620      	mov	r0, r4
 8007a70:	ee10 2a10 	vmov	r2, s0
 8007a74:	465b      	mov	r3, fp
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f8 fee8 	bl	800084c <__aeabi_ddiv>
 8007a7c:	ec41 0b10 	vmov	d0, r0, r1
 8007a80:	b003      	add	sp, #12
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007a88 <_mprec_log10>:
 8007a88:	2817      	cmp	r0, #23
 8007a8a:	b5d0      	push	{r4, r6, r7, lr}
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	dc07      	bgt.n	8007aa0 <_mprec_log10+0x18>
 8007a90:	4809      	ldr	r0, [pc, #36]	; (8007ab8 <_mprec_log10+0x30>)
 8007a92:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007a96:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007a9a:	ec41 0b10 	vmov	d0, r0, r1
 8007a9e:	bdd0      	pop	{r4, r6, r7, pc}
 8007aa0:	4906      	ldr	r1, [pc, #24]	; (8007abc <_mprec_log10+0x34>)
 8007aa2:	4f07      	ldr	r7, [pc, #28]	; (8007ac0 <_mprec_log10+0x38>)
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	463b      	mov	r3, r7
 8007aac:	f7f8 fda4 	bl	80005f8 <__aeabi_dmul>
 8007ab0:	3c01      	subs	r4, #1
 8007ab2:	d1f9      	bne.n	8007aa8 <_mprec_log10+0x20>
 8007ab4:	e7f1      	b.n	8007a9a <_mprec_log10+0x12>
 8007ab6:	bf00      	nop
 8007ab8:	08009e00 	.word	0x08009e00
 8007abc:	3ff00000 	.word	0x3ff00000
 8007ac0:	40240000 	.word	0x40240000

08007ac4 <__copybits>:
 8007ac4:	3901      	subs	r1, #1
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	1149      	asrs	r1, r1, #5
 8007aca:	6914      	ldr	r4, [r2, #16]
 8007acc:	3101      	adds	r1, #1
 8007ace:	f102 0314 	add.w	r3, r2, #20
 8007ad2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ada:	1f05      	subs	r5, r0, #4
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d30c      	bcc.n	8007afa <__copybits+0x36>
 8007ae0:	1aa3      	subs	r3, r4, r2
 8007ae2:	3b11      	subs	r3, #17
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	3211      	adds	r2, #17
 8007aea:	42a2      	cmp	r2, r4
 8007aec:	bf88      	it	hi
 8007aee:	2300      	movhi	r3, #0
 8007af0:	4418      	add	r0, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	4288      	cmp	r0, r1
 8007af6:	d305      	bcc.n	8007b04 <__copybits+0x40>
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	f853 6b04 	ldr.w	r6, [r3], #4
 8007afe:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b02:	e7eb      	b.n	8007adc <__copybits+0x18>
 8007b04:	f840 3b04 	str.w	r3, [r0], #4
 8007b08:	e7f4      	b.n	8007af4 <__copybits+0x30>

08007b0a <__any_on>:
 8007b0a:	f100 0214 	add.w	r2, r0, #20
 8007b0e:	6900      	ldr	r0, [r0, #16]
 8007b10:	114b      	asrs	r3, r1, #5
 8007b12:	4298      	cmp	r0, r3
 8007b14:	b510      	push	{r4, lr}
 8007b16:	db11      	blt.n	8007b3c <__any_on+0x32>
 8007b18:	dd0a      	ble.n	8007b30 <__any_on+0x26>
 8007b1a:	f011 011f 	ands.w	r1, r1, #31
 8007b1e:	d007      	beq.n	8007b30 <__any_on+0x26>
 8007b20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b24:	fa24 f001 	lsr.w	r0, r4, r1
 8007b28:	fa00 f101 	lsl.w	r1, r0, r1
 8007b2c:	428c      	cmp	r4, r1
 8007b2e:	d10b      	bne.n	8007b48 <__any_on+0x3e>
 8007b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d803      	bhi.n	8007b40 <__any_on+0x36>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	e7f7      	b.n	8007b30 <__any_on+0x26>
 8007b40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d0f5      	beq.n	8007b34 <__any_on+0x2a>
 8007b48:	2001      	movs	r0, #1
 8007b4a:	e7f6      	b.n	8007b3a <__any_on+0x30>

08007b4c <_calloc_r>:
 8007b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b4e:	fba1 2402 	umull	r2, r4, r1, r2
 8007b52:	b94c      	cbnz	r4, 8007b68 <_calloc_r+0x1c>
 8007b54:	4611      	mov	r1, r2
 8007b56:	9201      	str	r2, [sp, #4]
 8007b58:	f000 f82e 	bl	8007bb8 <_malloc_r>
 8007b5c:	9a01      	ldr	r2, [sp, #4]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	b930      	cbnz	r0, 8007b70 <_calloc_r+0x24>
 8007b62:	4628      	mov	r0, r5
 8007b64:	b003      	add	sp, #12
 8007b66:	bd30      	pop	{r4, r5, pc}
 8007b68:	220c      	movs	r2, #12
 8007b6a:	6002      	str	r2, [r0, #0]
 8007b6c:	2500      	movs	r5, #0
 8007b6e:	e7f8      	b.n	8007b62 <_calloc_r+0x16>
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7fd ffd7 	bl	8005b24 <memset>
 8007b76:	e7f4      	b.n	8007b62 <_calloc_r+0x16>

08007b78 <sbrk_aligned>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4e0e      	ldr	r6, [pc, #56]	; (8007bb4 <sbrk_aligned+0x3c>)
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	6831      	ldr	r1, [r6, #0]
 8007b80:	4605      	mov	r5, r0
 8007b82:	b911      	cbnz	r1, 8007b8a <sbrk_aligned+0x12>
 8007b84:	f000 fbb4 	bl	80082f0 <_sbrk_r>
 8007b88:	6030      	str	r0, [r6, #0]
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 fbaf 	bl	80082f0 <_sbrk_r>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	d00a      	beq.n	8007bac <sbrk_aligned+0x34>
 8007b96:	1cc4      	adds	r4, r0, #3
 8007b98:	f024 0403 	bic.w	r4, r4, #3
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	d007      	beq.n	8007bb0 <sbrk_aligned+0x38>
 8007ba0:	1a21      	subs	r1, r4, r0
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 fba4 	bl	80082f0 <_sbrk_r>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d101      	bne.n	8007bb0 <sbrk_aligned+0x38>
 8007bac:	f04f 34ff 	mov.w	r4, #4294967295
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	200004dc 	.word	0x200004dc

08007bb8 <_malloc_r>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	1ccd      	adds	r5, r1, #3
 8007bbe:	f025 0503 	bic.w	r5, r5, #3
 8007bc2:	3508      	adds	r5, #8
 8007bc4:	2d0c      	cmp	r5, #12
 8007bc6:	bf38      	it	cc
 8007bc8:	250c      	movcc	r5, #12
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	4607      	mov	r7, r0
 8007bce:	db01      	blt.n	8007bd4 <_malloc_r+0x1c>
 8007bd0:	42a9      	cmp	r1, r5
 8007bd2:	d905      	bls.n	8007be0 <_malloc_r+0x28>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	2600      	movs	r6, #0
 8007bda:	4630      	mov	r0, r6
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	4e2e      	ldr	r6, [pc, #184]	; (8007c9c <_malloc_r+0xe4>)
 8007be2:	f001 fa8b 	bl	80090fc <__malloc_lock>
 8007be6:	6833      	ldr	r3, [r6, #0]
 8007be8:	461c      	mov	r4, r3
 8007bea:	bb34      	cbnz	r4, 8007c3a <_malloc_r+0x82>
 8007bec:	4629      	mov	r1, r5
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f7ff ffc2 	bl	8007b78 <sbrk_aligned>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	d14d      	bne.n	8007c96 <_malloc_r+0xde>
 8007bfa:	6834      	ldr	r4, [r6, #0]
 8007bfc:	4626      	mov	r6, r4
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	d140      	bne.n	8007c84 <_malloc_r+0xcc>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	4631      	mov	r1, r6
 8007c06:	4638      	mov	r0, r7
 8007c08:	eb04 0803 	add.w	r8, r4, r3
 8007c0c:	f000 fb70 	bl	80082f0 <_sbrk_r>
 8007c10:	4580      	cmp	r8, r0
 8007c12:	d13a      	bne.n	8007c8a <_malloc_r+0xd2>
 8007c14:	6821      	ldr	r1, [r4, #0]
 8007c16:	3503      	adds	r5, #3
 8007c18:	1a6d      	subs	r5, r5, r1
 8007c1a:	f025 0503 	bic.w	r5, r5, #3
 8007c1e:	3508      	adds	r5, #8
 8007c20:	2d0c      	cmp	r5, #12
 8007c22:	bf38      	it	cc
 8007c24:	250c      	movcc	r5, #12
 8007c26:	4629      	mov	r1, r5
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ffa5 	bl	8007b78 <sbrk_aligned>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d02b      	beq.n	8007c8a <_malloc_r+0xd2>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	442b      	add	r3, r5
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	e00e      	b.n	8007c58 <_malloc_r+0xa0>
 8007c3a:	6822      	ldr	r2, [r4, #0]
 8007c3c:	1b52      	subs	r2, r2, r5
 8007c3e:	d41e      	bmi.n	8007c7e <_malloc_r+0xc6>
 8007c40:	2a0b      	cmp	r2, #11
 8007c42:	d916      	bls.n	8007c72 <_malloc_r+0xba>
 8007c44:	1961      	adds	r1, r4, r5
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	6025      	str	r5, [r4, #0]
 8007c4a:	bf18      	it	ne
 8007c4c:	6059      	strne	r1, [r3, #4]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	bf08      	it	eq
 8007c52:	6031      	streq	r1, [r6, #0]
 8007c54:	5162      	str	r2, [r4, r5]
 8007c56:	604b      	str	r3, [r1, #4]
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f104 060b 	add.w	r6, r4, #11
 8007c5e:	f001 fa53 	bl	8009108 <__malloc_unlock>
 8007c62:	f026 0607 	bic.w	r6, r6, #7
 8007c66:	1d23      	adds	r3, r4, #4
 8007c68:	1af2      	subs	r2, r6, r3
 8007c6a:	d0b6      	beq.n	8007bda <_malloc_r+0x22>
 8007c6c:	1b9b      	subs	r3, r3, r6
 8007c6e:	50a3      	str	r3, [r4, r2]
 8007c70:	e7b3      	b.n	8007bda <_malloc_r+0x22>
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	bf0c      	ite	eq
 8007c78:	6032      	streq	r2, [r6, #0]
 8007c7a:	605a      	strne	r2, [r3, #4]
 8007c7c:	e7ec      	b.n	8007c58 <_malloc_r+0xa0>
 8007c7e:	4623      	mov	r3, r4
 8007c80:	6864      	ldr	r4, [r4, #4]
 8007c82:	e7b2      	b.n	8007bea <_malloc_r+0x32>
 8007c84:	4634      	mov	r4, r6
 8007c86:	6876      	ldr	r6, [r6, #4]
 8007c88:	e7b9      	b.n	8007bfe <_malloc_r+0x46>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f001 fa3a 	bl	8009108 <__malloc_unlock>
 8007c94:	e7a1      	b.n	8007bda <_malloc_r+0x22>
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	e7de      	b.n	8007c58 <_malloc_r+0xa0>
 8007c9a:	bf00      	nop
 8007c9c:	200004d8 	.word	0x200004d8

08007ca0 <_realloc_r>:
 8007ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	460e      	mov	r6, r1
 8007caa:	b921      	cbnz	r1, 8007cb6 <_realloc_r+0x16>
 8007cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	f7ff bf81 	b.w	8007bb8 <_malloc_r>
 8007cb6:	b92a      	cbnz	r2, 8007cc4 <_realloc_r+0x24>
 8007cb8:	f001 fa2c 	bl	8009114 <_free_r>
 8007cbc:	4625      	mov	r5, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	f001 fa72 	bl	80091ac <_malloc_usable_size_r>
 8007cc8:	4284      	cmp	r4, r0
 8007cca:	4607      	mov	r7, r0
 8007ccc:	d802      	bhi.n	8007cd4 <_realloc_r+0x34>
 8007cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cd2:	d812      	bhi.n	8007cfa <_realloc_r+0x5a>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f7ff ff6e 	bl	8007bb8 <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0ed      	beq.n	8007cbe <_realloc_r+0x1e>
 8007ce2:	42bc      	cmp	r4, r7
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	bf28      	it	cs
 8007cea:	463a      	movcs	r2, r7
 8007cec:	f7fd ff0c 	bl	8005b08 <memcpy>
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f001 fa0e 	bl	8009114 <_free_r>
 8007cf8:	e7e1      	b.n	8007cbe <_realloc_r+0x1e>
 8007cfa:	4635      	mov	r5, r6
 8007cfc:	e7df      	b.n	8007cbe <_realloc_r+0x1e>

08007cfe <__ssputs_r>:
 8007cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d02:	688e      	ldr	r6, [r1, #8]
 8007d04:	429e      	cmp	r6, r3
 8007d06:	4682      	mov	sl, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	4690      	mov	r8, r2
 8007d0c:	461f      	mov	r7, r3
 8007d0e:	d838      	bhi.n	8007d82 <__ssputs_r+0x84>
 8007d10:	898a      	ldrh	r2, [r1, #12]
 8007d12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d16:	d032      	beq.n	8007d7e <__ssputs_r+0x80>
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	6909      	ldr	r1, [r1, #16]
 8007d1c:	eba5 0901 	sub.w	r9, r5, r1
 8007d20:	6965      	ldr	r5, [r4, #20]
 8007d22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	444b      	add	r3, r9
 8007d2e:	106d      	asrs	r5, r5, #1
 8007d30:	429d      	cmp	r5, r3
 8007d32:	bf38      	it	cc
 8007d34:	461d      	movcc	r5, r3
 8007d36:	0553      	lsls	r3, r2, #21
 8007d38:	d531      	bpl.n	8007d9e <__ssputs_r+0xa0>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7ff ff3c 	bl	8007bb8 <_malloc_r>
 8007d40:	4606      	mov	r6, r0
 8007d42:	b950      	cbnz	r0, 8007d5a <__ssputs_r+0x5c>
 8007d44:	230c      	movs	r3, #12
 8007d46:	f8ca 3000 	str.w	r3, [sl]
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	f04f 30ff 	mov.w	r0, #4294967295
 8007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5a:	6921      	ldr	r1, [r4, #16]
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	f7fd fed3 	bl	8005b08 <memcpy>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	6126      	str	r6, [r4, #16]
 8007d70:	6165      	str	r5, [r4, #20]
 8007d72:	444e      	add	r6, r9
 8007d74:	eba5 0509 	sub.w	r5, r5, r9
 8007d78:	6026      	str	r6, [r4, #0]
 8007d7a:	60a5      	str	r5, [r4, #8]
 8007d7c:	463e      	mov	r6, r7
 8007d7e:	42be      	cmp	r6, r7
 8007d80:	d900      	bls.n	8007d84 <__ssputs_r+0x86>
 8007d82:	463e      	mov	r6, r7
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4632      	mov	r2, r6
 8007d88:	4641      	mov	r1, r8
 8007d8a:	f001 f99d 	bl	80090c8 <memmove>
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	1b9b      	subs	r3, r3, r6
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	4433      	add	r3, r6
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e7db      	b.n	8007d56 <__ssputs_r+0x58>
 8007d9e:	462a      	mov	r2, r5
 8007da0:	f7ff ff7e 	bl	8007ca0 <_realloc_r>
 8007da4:	4606      	mov	r6, r0
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1e1      	bne.n	8007d6e <__ssputs_r+0x70>
 8007daa:	6921      	ldr	r1, [r4, #16]
 8007dac:	4650      	mov	r0, sl
 8007dae:	f001 f9b1 	bl	8009114 <_free_r>
 8007db2:	e7c7      	b.n	8007d44 <__ssputs_r+0x46>

08007db4 <_svfiprintf_r>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	4698      	mov	r8, r3
 8007dba:	898b      	ldrh	r3, [r1, #12]
 8007dbc:	061b      	lsls	r3, r3, #24
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	d50e      	bpl.n	8007de6 <_svfiprintf_r+0x32>
 8007dc8:	690b      	ldr	r3, [r1, #16]
 8007dca:	b963      	cbnz	r3, 8007de6 <_svfiprintf_r+0x32>
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	f7ff fef3 	bl	8007bb8 <_malloc_r>
 8007dd2:	6028      	str	r0, [r5, #0]
 8007dd4:	6128      	str	r0, [r5, #16]
 8007dd6:	b920      	cbnz	r0, 8007de2 <_svfiprintf_r+0x2e>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	e0d1      	b.n	8007f86 <_svfiprintf_r+0x1d2>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	616b      	str	r3, [r5, #20]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dea:	2320      	movs	r3, #32
 8007dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fa0 <_svfiprintf_r+0x1ec>
 8007dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dfe:	f04f 0901 	mov.w	r9, #1
 8007e02:	4623      	mov	r3, r4
 8007e04:	469a      	mov	sl, r3
 8007e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0a:	b10a      	cbz	r2, 8007e10 <_svfiprintf_r+0x5c>
 8007e0c:	2a25      	cmp	r2, #37	; 0x25
 8007e0e:	d1f9      	bne.n	8007e04 <_svfiprintf_r+0x50>
 8007e10:	ebba 0b04 	subs.w	fp, sl, r4
 8007e14:	d00b      	beq.n	8007e2e <_svfiprintf_r+0x7a>
 8007e16:	465b      	mov	r3, fp
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff ff6e 	bl	8007cfe <__ssputs_r>
 8007e22:	3001      	adds	r0, #1
 8007e24:	f000 80aa 	beq.w	8007f7c <_svfiprintf_r+0x1c8>
 8007e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e2a:	445a      	add	r2, fp
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80a2 	beq.w	8007f7c <_svfiprintf_r+0x1c8>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e42:	f10a 0a01 	add.w	sl, sl, #1
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	9307      	str	r3, [sp, #28]
 8007e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e50:	4654      	mov	r4, sl
 8007e52:	2205      	movs	r2, #5
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	4851      	ldr	r0, [pc, #324]	; (8007fa0 <_svfiprintf_r+0x1ec>)
 8007e5a:	f7f8 f9c1 	bl	80001e0 <memchr>
 8007e5e:	9a04      	ldr	r2, [sp, #16]
 8007e60:	b9d8      	cbnz	r0, 8007e9a <_svfiprintf_r+0xe6>
 8007e62:	06d0      	lsls	r0, r2, #27
 8007e64:	bf44      	itt	mi
 8007e66:	2320      	movmi	r3, #32
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6c:	0711      	lsls	r1, r2, #28
 8007e6e:	bf44      	itt	mi
 8007e70:	232b      	movmi	r3, #43	; 0x2b
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e76:	f89a 3000 	ldrb.w	r3, [sl]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d015      	beq.n	8007eaa <_svfiprintf_r+0xf6>
 8007e7e:	9a07      	ldr	r2, [sp, #28]
 8007e80:	4654      	mov	r4, sl
 8007e82:	2000      	movs	r0, #0
 8007e84:	f04f 0c0a 	mov.w	ip, #10
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8e:	3b30      	subs	r3, #48	; 0x30
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d94e      	bls.n	8007f32 <_svfiprintf_r+0x17e>
 8007e94:	b1b0      	cbz	r0, 8007ec4 <_svfiprintf_r+0x110>
 8007e96:	9207      	str	r2, [sp, #28]
 8007e98:	e014      	b.n	8007ec4 <_svfiprintf_r+0x110>
 8007e9a:	eba0 0308 	sub.w	r3, r0, r8
 8007e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	46a2      	mov	sl, r4
 8007ea8:	e7d2      	b.n	8007e50 <_svfiprintf_r+0x9c>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	1d19      	adds	r1, r3, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	9103      	str	r1, [sp, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfbb      	ittet	lt
 8007eb6:	425b      	neglt	r3, r3
 8007eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ebc:	9307      	strge	r3, [sp, #28]
 8007ebe:	9307      	strlt	r3, [sp, #28]
 8007ec0:	bfb8      	it	lt
 8007ec2:	9204      	strlt	r2, [sp, #16]
 8007ec4:	7823      	ldrb	r3, [r4, #0]
 8007ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec8:	d10c      	bne.n	8007ee4 <_svfiprintf_r+0x130>
 8007eca:	7863      	ldrb	r3, [r4, #1]
 8007ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ece:	d135      	bne.n	8007f3c <_svfiprintf_r+0x188>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1d1a      	adds	r2, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	9203      	str	r2, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfb8      	it	lt
 8007edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee0:	3402      	adds	r4, #2
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fb0 <_svfiprintf_r+0x1fc>
 8007ee8:	7821      	ldrb	r1, [r4, #0]
 8007eea:	2203      	movs	r2, #3
 8007eec:	4650      	mov	r0, sl
 8007eee:	f7f8 f977 	bl	80001e0 <memchr>
 8007ef2:	b140      	cbz	r0, 8007f06 <_svfiprintf_r+0x152>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	eba0 000a 	sub.w	r0, r0, sl
 8007efa:	fa03 f000 	lsl.w	r0, r3, r0
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	4303      	orrs	r3, r0
 8007f02:	3401      	adds	r4, #1
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0a:	4826      	ldr	r0, [pc, #152]	; (8007fa4 <_svfiprintf_r+0x1f0>)
 8007f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f10:	2206      	movs	r2, #6
 8007f12:	f7f8 f965 	bl	80001e0 <memchr>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d038      	beq.n	8007f8c <_svfiprintf_r+0x1d8>
 8007f1a:	4b23      	ldr	r3, [pc, #140]	; (8007fa8 <_svfiprintf_r+0x1f4>)
 8007f1c:	bb1b      	cbnz	r3, 8007f66 <_svfiprintf_r+0x1b2>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	f023 0307 	bic.w	r3, r3, #7
 8007f26:	3308      	adds	r3, #8
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2c:	4433      	add	r3, r6
 8007f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f30:	e767      	b.n	8007e02 <_svfiprintf_r+0x4e>
 8007f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f36:	460c      	mov	r4, r1
 8007f38:	2001      	movs	r0, #1
 8007f3a:	e7a5      	b.n	8007e88 <_svfiprintf_r+0xd4>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	3401      	adds	r4, #1
 8007f40:	9305      	str	r3, [sp, #20]
 8007f42:	4619      	mov	r1, r3
 8007f44:	f04f 0c0a 	mov.w	ip, #10
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f4e:	3a30      	subs	r2, #48	; 0x30
 8007f50:	2a09      	cmp	r2, #9
 8007f52:	d903      	bls.n	8007f5c <_svfiprintf_r+0x1a8>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0c5      	beq.n	8007ee4 <_svfiprintf_r+0x130>
 8007f58:	9105      	str	r1, [sp, #20]
 8007f5a:	e7c3      	b.n	8007ee4 <_svfiprintf_r+0x130>
 8007f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f60:	4604      	mov	r4, r0
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7f0      	b.n	8007f48 <_svfiprintf_r+0x194>
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <_svfiprintf_r+0x1f8>)
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	4638      	mov	r0, r7
 8007f72:	f3af 8000 	nop.w
 8007f76:	1c42      	adds	r2, r0, #1
 8007f78:	4606      	mov	r6, r0
 8007f7a:	d1d6      	bne.n	8007f2a <_svfiprintf_r+0x176>
 8007f7c:	89ab      	ldrh	r3, [r5, #12]
 8007f7e:	065b      	lsls	r3, r3, #25
 8007f80:	f53f af2c 	bmi.w	8007ddc <_svfiprintf_r+0x28>
 8007f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f86:	b01d      	add	sp, #116	; 0x74
 8007f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	462a      	mov	r2, r5
 8007f92:	4b06      	ldr	r3, [pc, #24]	; (8007fac <_svfiprintf_r+0x1f8>)
 8007f94:	a904      	add	r1, sp, #16
 8007f96:	4638      	mov	r0, r7
 8007f98:	f000 f87a 	bl	8008090 <_printf_i>
 8007f9c:	e7eb      	b.n	8007f76 <_svfiprintf_r+0x1c2>
 8007f9e:	bf00      	nop
 8007fa0:	08009ed4 	.word	0x08009ed4
 8007fa4:	08009ede 	.word	0x08009ede
 8007fa8:	00000000 	.word	0x00000000
 8007fac:	08007cff 	.word	0x08007cff
 8007fb0:	08009eda 	.word	0x08009eda

08007fb4 <_printf_common>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	4616      	mov	r6, r2
 8007fba:	4699      	mov	r9, r3
 8007fbc:	688a      	ldr	r2, [r1, #8]
 8007fbe:	690b      	ldr	r3, [r1, #16]
 8007fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	bfb8      	it	lt
 8007fc8:	4613      	movlt	r3, r2
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	b10a      	cbz	r2, 8007fda <_printf_common+0x26>
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	6033      	str	r3, [r6, #0]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	0699      	lsls	r1, r3, #26
 8007fde:	bf42      	ittt	mi
 8007fe0:	6833      	ldrmi	r3, [r6, #0]
 8007fe2:	3302      	addmi	r3, #2
 8007fe4:	6033      	strmi	r3, [r6, #0]
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	f015 0506 	ands.w	r5, r5, #6
 8007fec:	d106      	bne.n	8007ffc <_printf_common+0x48>
 8007fee:	f104 0a19 	add.w	sl, r4, #25
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	6832      	ldr	r2, [r6, #0]
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dc26      	bgt.n	800804a <_printf_common+0x96>
 8007ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008000:	1e13      	subs	r3, r2, #0
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	bf18      	it	ne
 8008006:	2301      	movne	r3, #1
 8008008:	0692      	lsls	r2, r2, #26
 800800a:	d42b      	bmi.n	8008064 <_printf_common+0xb0>
 800800c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008010:	4649      	mov	r1, r9
 8008012:	4638      	mov	r0, r7
 8008014:	47c0      	blx	r8
 8008016:	3001      	adds	r0, #1
 8008018:	d01e      	beq.n	8008058 <_printf_common+0xa4>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	68e5      	ldr	r5, [r4, #12]
 800801e:	6832      	ldr	r2, [r6, #0]
 8008020:	f003 0306 	and.w	r3, r3, #6
 8008024:	2b04      	cmp	r3, #4
 8008026:	bf08      	it	eq
 8008028:	1aad      	subeq	r5, r5, r2
 800802a:	68a3      	ldr	r3, [r4, #8]
 800802c:	6922      	ldr	r2, [r4, #16]
 800802e:	bf0c      	ite	eq
 8008030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008034:	2500      	movne	r5, #0
 8008036:	4293      	cmp	r3, r2
 8008038:	bfc4      	itt	gt
 800803a:	1a9b      	subgt	r3, r3, r2
 800803c:	18ed      	addgt	r5, r5, r3
 800803e:	2600      	movs	r6, #0
 8008040:	341a      	adds	r4, #26
 8008042:	42b5      	cmp	r5, r6
 8008044:	d11a      	bne.n	800807c <_printf_common+0xc8>
 8008046:	2000      	movs	r0, #0
 8008048:	e008      	b.n	800805c <_printf_common+0xa8>
 800804a:	2301      	movs	r3, #1
 800804c:	4652      	mov	r2, sl
 800804e:	4649      	mov	r1, r9
 8008050:	4638      	mov	r0, r7
 8008052:	47c0      	blx	r8
 8008054:	3001      	adds	r0, #1
 8008056:	d103      	bne.n	8008060 <_printf_common+0xac>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	3501      	adds	r5, #1
 8008062:	e7c6      	b.n	8007ff2 <_printf_common+0x3e>
 8008064:	18e1      	adds	r1, r4, r3
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	2030      	movs	r0, #48	; 0x30
 800806a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800806e:	4422      	add	r2, r4
 8008070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008078:	3302      	adds	r3, #2
 800807a:	e7c7      	b.n	800800c <_printf_common+0x58>
 800807c:	2301      	movs	r3, #1
 800807e:	4622      	mov	r2, r4
 8008080:	4649      	mov	r1, r9
 8008082:	4638      	mov	r0, r7
 8008084:	47c0      	blx	r8
 8008086:	3001      	adds	r0, #1
 8008088:	d0e6      	beq.n	8008058 <_printf_common+0xa4>
 800808a:	3601      	adds	r6, #1
 800808c:	e7d9      	b.n	8008042 <_printf_common+0x8e>
	...

08008090 <_printf_i>:
 8008090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	7e0f      	ldrb	r7, [r1, #24]
 8008096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008098:	2f78      	cmp	r7, #120	; 0x78
 800809a:	4691      	mov	r9, r2
 800809c:	4680      	mov	r8, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	469a      	mov	sl, r3
 80080a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080a6:	d807      	bhi.n	80080b8 <_printf_i+0x28>
 80080a8:	2f62      	cmp	r7, #98	; 0x62
 80080aa:	d80a      	bhi.n	80080c2 <_printf_i+0x32>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	f000 80d8 	beq.w	8008262 <_printf_i+0x1d2>
 80080b2:	2f58      	cmp	r7, #88	; 0x58
 80080b4:	f000 80a3 	beq.w	80081fe <_printf_i+0x16e>
 80080b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080c0:	e03a      	b.n	8008138 <_printf_i+0xa8>
 80080c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080c6:	2b15      	cmp	r3, #21
 80080c8:	d8f6      	bhi.n	80080b8 <_printf_i+0x28>
 80080ca:	a101      	add	r1, pc, #4	; (adr r1, 80080d0 <_printf_i+0x40>)
 80080cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d0:	08008129 	.word	0x08008129
 80080d4:	0800813d 	.word	0x0800813d
 80080d8:	080080b9 	.word	0x080080b9
 80080dc:	080080b9 	.word	0x080080b9
 80080e0:	080080b9 	.word	0x080080b9
 80080e4:	080080b9 	.word	0x080080b9
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	080080b9 	.word	0x080080b9
 80080f0:	080080b9 	.word	0x080080b9
 80080f4:	080080b9 	.word	0x080080b9
 80080f8:	080080b9 	.word	0x080080b9
 80080fc:	08008249 	.word	0x08008249
 8008100:	0800816d 	.word	0x0800816d
 8008104:	0800822b 	.word	0x0800822b
 8008108:	080080b9 	.word	0x080080b9
 800810c:	080080b9 	.word	0x080080b9
 8008110:	0800826b 	.word	0x0800826b
 8008114:	080080b9 	.word	0x080080b9
 8008118:	0800816d 	.word	0x0800816d
 800811c:	080080b9 	.word	0x080080b9
 8008120:	080080b9 	.word	0x080080b9
 8008124:	08008233 	.word	0x08008233
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	1d1a      	adds	r2, r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	602a      	str	r2, [r5, #0]
 8008130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e0a3      	b.n	8008284 <_printf_i+0x1f4>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	6829      	ldr	r1, [r5, #0]
 8008140:	0606      	lsls	r6, r0, #24
 8008142:	f101 0304 	add.w	r3, r1, #4
 8008146:	d50a      	bpl.n	800815e <_printf_i+0xce>
 8008148:	680e      	ldr	r6, [r1, #0]
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	2e00      	cmp	r6, #0
 800814e:	da03      	bge.n	8008158 <_printf_i+0xc8>
 8008150:	232d      	movs	r3, #45	; 0x2d
 8008152:	4276      	negs	r6, r6
 8008154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008158:	485e      	ldr	r0, [pc, #376]	; (80082d4 <_printf_i+0x244>)
 800815a:	230a      	movs	r3, #10
 800815c:	e019      	b.n	8008192 <_printf_i+0x102>
 800815e:	680e      	ldr	r6, [r1, #0]
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008166:	bf18      	it	ne
 8008168:	b236      	sxthne	r6, r6
 800816a:	e7ef      	b.n	800814c <_printf_i+0xbc>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	6029      	str	r1, [r5, #0]
 8008174:	0601      	lsls	r1, r0, #24
 8008176:	d501      	bpl.n	800817c <_printf_i+0xec>
 8008178:	681e      	ldr	r6, [r3, #0]
 800817a:	e002      	b.n	8008182 <_printf_i+0xf2>
 800817c:	0646      	lsls	r6, r0, #25
 800817e:	d5fb      	bpl.n	8008178 <_printf_i+0xe8>
 8008180:	881e      	ldrh	r6, [r3, #0]
 8008182:	4854      	ldr	r0, [pc, #336]	; (80082d4 <_printf_i+0x244>)
 8008184:	2f6f      	cmp	r7, #111	; 0x6f
 8008186:	bf0c      	ite	eq
 8008188:	2308      	moveq	r3, #8
 800818a:	230a      	movne	r3, #10
 800818c:	2100      	movs	r1, #0
 800818e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008192:	6865      	ldr	r5, [r4, #4]
 8008194:	60a5      	str	r5, [r4, #8]
 8008196:	2d00      	cmp	r5, #0
 8008198:	bfa2      	ittt	ge
 800819a:	6821      	ldrge	r1, [r4, #0]
 800819c:	f021 0104 	bicge.w	r1, r1, #4
 80081a0:	6021      	strge	r1, [r4, #0]
 80081a2:	b90e      	cbnz	r6, 80081a8 <_printf_i+0x118>
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	d04d      	beq.n	8008244 <_printf_i+0x1b4>
 80081a8:	4615      	mov	r5, r2
 80081aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ae:	fb03 6711 	mls	r7, r3, r1, r6
 80081b2:	5dc7      	ldrb	r7, [r0, r7]
 80081b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081b8:	4637      	mov	r7, r6
 80081ba:	42bb      	cmp	r3, r7
 80081bc:	460e      	mov	r6, r1
 80081be:	d9f4      	bls.n	80081aa <_printf_i+0x11a>
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d10b      	bne.n	80081dc <_printf_i+0x14c>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	07de      	lsls	r6, r3, #31
 80081c8:	d508      	bpl.n	80081dc <_printf_i+0x14c>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	6861      	ldr	r1, [r4, #4]
 80081ce:	4299      	cmp	r1, r3
 80081d0:	bfde      	ittt	le
 80081d2:	2330      	movle	r3, #48	; 0x30
 80081d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081dc:	1b52      	subs	r2, r2, r5
 80081de:	6122      	str	r2, [r4, #16]
 80081e0:	f8cd a000 	str.w	sl, [sp]
 80081e4:	464b      	mov	r3, r9
 80081e6:	aa03      	add	r2, sp, #12
 80081e8:	4621      	mov	r1, r4
 80081ea:	4640      	mov	r0, r8
 80081ec:	f7ff fee2 	bl	8007fb4 <_printf_common>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d14c      	bne.n	800828e <_printf_i+0x1fe>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	b004      	add	sp, #16
 80081fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fe:	4835      	ldr	r0, [pc, #212]	; (80082d4 <_printf_i+0x244>)
 8008200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008204:	6829      	ldr	r1, [r5, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	f851 6b04 	ldr.w	r6, [r1], #4
 800820c:	6029      	str	r1, [r5, #0]
 800820e:	061d      	lsls	r5, r3, #24
 8008210:	d514      	bpl.n	800823c <_printf_i+0x1ac>
 8008212:	07df      	lsls	r7, r3, #31
 8008214:	bf44      	itt	mi
 8008216:	f043 0320 	orrmi.w	r3, r3, #32
 800821a:	6023      	strmi	r3, [r4, #0]
 800821c:	b91e      	cbnz	r6, 8008226 <_printf_i+0x196>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	f023 0320 	bic.w	r3, r3, #32
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	2310      	movs	r3, #16
 8008228:	e7b0      	b.n	800818c <_printf_i+0xfc>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f043 0320 	orr.w	r3, r3, #32
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	2378      	movs	r3, #120	; 0x78
 8008234:	4828      	ldr	r0, [pc, #160]	; (80082d8 <_printf_i+0x248>)
 8008236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800823a:	e7e3      	b.n	8008204 <_printf_i+0x174>
 800823c:	0659      	lsls	r1, r3, #25
 800823e:	bf48      	it	mi
 8008240:	b2b6      	uxthmi	r6, r6
 8008242:	e7e6      	b.n	8008212 <_printf_i+0x182>
 8008244:	4615      	mov	r5, r2
 8008246:	e7bb      	b.n	80081c0 <_printf_i+0x130>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	6826      	ldr	r6, [r4, #0]
 800824c:	6961      	ldr	r1, [r4, #20]
 800824e:	1d18      	adds	r0, r3, #4
 8008250:	6028      	str	r0, [r5, #0]
 8008252:	0635      	lsls	r5, r6, #24
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	d501      	bpl.n	800825c <_printf_i+0x1cc>
 8008258:	6019      	str	r1, [r3, #0]
 800825a:	e002      	b.n	8008262 <_printf_i+0x1d2>
 800825c:	0670      	lsls	r0, r6, #25
 800825e:	d5fb      	bpl.n	8008258 <_printf_i+0x1c8>
 8008260:	8019      	strh	r1, [r3, #0]
 8008262:	2300      	movs	r3, #0
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	4615      	mov	r5, r2
 8008268:	e7ba      	b.n	80081e0 <_printf_i+0x150>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	1d1a      	adds	r2, r3, #4
 800826e:	602a      	str	r2, [r5, #0]
 8008270:	681d      	ldr	r5, [r3, #0]
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	2100      	movs	r1, #0
 8008276:	4628      	mov	r0, r5
 8008278:	f7f7 ffb2 	bl	80001e0 <memchr>
 800827c:	b108      	cbz	r0, 8008282 <_printf_i+0x1f2>
 800827e:	1b40      	subs	r0, r0, r5
 8008280:	6060      	str	r0, [r4, #4]
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	2300      	movs	r3, #0
 8008288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828c:	e7a8      	b.n	80081e0 <_printf_i+0x150>
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	462a      	mov	r2, r5
 8008292:	4649      	mov	r1, r9
 8008294:	4640      	mov	r0, r8
 8008296:	47d0      	blx	sl
 8008298:	3001      	adds	r0, #1
 800829a:	d0ab      	beq.n	80081f4 <_printf_i+0x164>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	079b      	lsls	r3, r3, #30
 80082a0:	d413      	bmi.n	80082ca <_printf_i+0x23a>
 80082a2:	68e0      	ldr	r0, [r4, #12]
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	4298      	cmp	r0, r3
 80082a8:	bfb8      	it	lt
 80082aa:	4618      	movlt	r0, r3
 80082ac:	e7a4      	b.n	80081f8 <_printf_i+0x168>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4632      	mov	r2, r6
 80082b2:	4649      	mov	r1, r9
 80082b4:	4640      	mov	r0, r8
 80082b6:	47d0      	blx	sl
 80082b8:	3001      	adds	r0, #1
 80082ba:	d09b      	beq.n	80081f4 <_printf_i+0x164>
 80082bc:	3501      	adds	r5, #1
 80082be:	68e3      	ldr	r3, [r4, #12]
 80082c0:	9903      	ldr	r1, [sp, #12]
 80082c2:	1a5b      	subs	r3, r3, r1
 80082c4:	42ab      	cmp	r3, r5
 80082c6:	dcf2      	bgt.n	80082ae <_printf_i+0x21e>
 80082c8:	e7eb      	b.n	80082a2 <_printf_i+0x212>
 80082ca:	2500      	movs	r5, #0
 80082cc:	f104 0619 	add.w	r6, r4, #25
 80082d0:	e7f5      	b.n	80082be <_printf_i+0x22e>
 80082d2:	bf00      	nop
 80082d4:	08009ee5 	.word	0x08009ee5
 80082d8:	08009ef6 	.word	0x08009ef6
 80082dc:	00000000 	.word	0x00000000

080082e0 <nan>:
 80082e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082e8 <nan+0x8>
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	00000000 	.word	0x00000000
 80082ec:	7ff80000 	.word	0x7ff80000

080082f0 <_sbrk_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	; (800830c <_sbrk_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f7fa f8d2 	bl	80024a4 <_sbrk>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_sbrk_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_sbrk_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	200004e0 	.word	0x200004e0

08008310 <strcpy>:
 8008310:	4603      	mov	r3, r0
 8008312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008316:	f803 2b01 	strb.w	r2, [r3], #1
 800831a:	2a00      	cmp	r2, #0
 800831c:	d1f9      	bne.n	8008312 <strcpy+0x2>
 800831e:	4770      	bx	lr

08008320 <strncmp>:
 8008320:	b510      	push	{r4, lr}
 8008322:	b17a      	cbz	r2, 8008344 <strncmp+0x24>
 8008324:	4603      	mov	r3, r0
 8008326:	3901      	subs	r1, #1
 8008328:	1884      	adds	r4, r0, r2
 800832a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800832e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008332:	4290      	cmp	r0, r2
 8008334:	d101      	bne.n	800833a <strncmp+0x1a>
 8008336:	42a3      	cmp	r3, r4
 8008338:	d101      	bne.n	800833e <strncmp+0x1e>
 800833a:	1a80      	subs	r0, r0, r2
 800833c:	bd10      	pop	{r4, pc}
 800833e:	2800      	cmp	r0, #0
 8008340:	d1f3      	bne.n	800832a <strncmp+0xa>
 8008342:	e7fa      	b.n	800833a <strncmp+0x1a>
 8008344:	4610      	mov	r0, r2
 8008346:	e7f9      	b.n	800833c <strncmp+0x1c>

08008348 <__ascii_wctomb>:
 8008348:	b149      	cbz	r1, 800835e <__ascii_wctomb+0x16>
 800834a:	2aff      	cmp	r2, #255	; 0xff
 800834c:	bf85      	ittet	hi
 800834e:	238a      	movhi	r3, #138	; 0x8a
 8008350:	6003      	strhi	r3, [r0, #0]
 8008352:	700a      	strbls	r2, [r1, #0]
 8008354:	f04f 30ff 	movhi.w	r0, #4294967295
 8008358:	bf98      	it	ls
 800835a:	2001      	movls	r0, #1
 800835c:	4770      	bx	lr
 800835e:	4608      	mov	r0, r1
 8008360:	4770      	bx	lr
	...

08008364 <__assert_func>:
 8008364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008366:	4614      	mov	r4, r2
 8008368:	461a      	mov	r2, r3
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <__assert_func+0x2c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4605      	mov	r5, r0
 8008370:	68d8      	ldr	r0, [r3, #12]
 8008372:	b14c      	cbz	r4, 8008388 <__assert_func+0x24>
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <__assert_func+0x30>)
 8008376:	9100      	str	r1, [sp, #0]
 8008378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800837c:	4906      	ldr	r1, [pc, #24]	; (8008398 <__assert_func+0x34>)
 800837e:	462b      	mov	r3, r5
 8008380:	f000 fe88 	bl	8009094 <fiprintf>
 8008384:	f001 f934 	bl	80095f0 <abort>
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <__assert_func+0x38>)
 800838a:	461c      	mov	r4, r3
 800838c:	e7f3      	b.n	8008376 <__assert_func+0x12>
 800838e:	bf00      	nop
 8008390:	20000018 	.word	0x20000018
 8008394:	08009f07 	.word	0x08009f07
 8008398:	08009f14 	.word	0x08009f14
 800839c:	08009f42 	.word	0x08009f42

080083a0 <quorem>:
 80083a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	6903      	ldr	r3, [r0, #16]
 80083a6:	690c      	ldr	r4, [r1, #16]
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	4607      	mov	r7, r0
 80083ac:	f2c0 8081 	blt.w	80084b2 <quorem+0x112>
 80083b0:	3c01      	subs	r4, #1
 80083b2:	f101 0814 	add.w	r8, r1, #20
 80083b6:	f100 0514 	add.w	r5, r0, #20
 80083ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c8:	3301      	adds	r3, #1
 80083ca:	429a      	cmp	r2, r3
 80083cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80083d8:	d331      	bcc.n	800843e <quorem+0x9e>
 80083da:	f04f 0e00 	mov.w	lr, #0
 80083de:	4640      	mov	r0, r8
 80083e0:	46ac      	mov	ip, r5
 80083e2:	46f2      	mov	sl, lr
 80083e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80083e8:	b293      	uxth	r3, r2
 80083ea:	fb06 e303 	mla	r3, r6, r3, lr
 80083ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	ebaa 0303 	sub.w	r3, sl, r3
 80083f8:	f8dc a000 	ldr.w	sl, [ip]
 80083fc:	0c12      	lsrs	r2, r2, #16
 80083fe:	fa13 f38a 	uxtah	r3, r3, sl
 8008402:	fb06 e202 	mla	r2, r6, r2, lr
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800840e:	b292      	uxth	r2, r2
 8008410:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008418:	f8bd 3000 	ldrh.w	r3, [sp]
 800841c:	4581      	cmp	r9, r0
 800841e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008422:	f84c 3b04 	str.w	r3, [ip], #4
 8008426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800842a:	d2db      	bcs.n	80083e4 <quorem+0x44>
 800842c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008430:	b92b      	cbnz	r3, 800843e <quorem+0x9e>
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	3b04      	subs	r3, #4
 8008436:	429d      	cmp	r5, r3
 8008438:	461a      	mov	r2, r3
 800843a:	d32e      	bcc.n	800849a <quorem+0xfa>
 800843c:	613c      	str	r4, [r7, #16]
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff f970 	bl	8007724 <__mcmp>
 8008444:	2800      	cmp	r0, #0
 8008446:	db24      	blt.n	8008492 <quorem+0xf2>
 8008448:	3601      	adds	r6, #1
 800844a:	4628      	mov	r0, r5
 800844c:	f04f 0c00 	mov.w	ip, #0
 8008450:	f858 2b04 	ldr.w	r2, [r8], #4
 8008454:	f8d0 e000 	ldr.w	lr, [r0]
 8008458:	b293      	uxth	r3, r2
 800845a:	ebac 0303 	sub.w	r3, ip, r3
 800845e:	0c12      	lsrs	r2, r2, #16
 8008460:	fa13 f38e 	uxtah	r3, r3, lr
 8008464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800846c:	b29b      	uxth	r3, r3
 800846e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008472:	45c1      	cmp	r9, r8
 8008474:	f840 3b04 	str.w	r3, [r0], #4
 8008478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800847c:	d2e8      	bcs.n	8008450 <quorem+0xb0>
 800847e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008486:	b922      	cbnz	r2, 8008492 <quorem+0xf2>
 8008488:	3b04      	subs	r3, #4
 800848a:	429d      	cmp	r5, r3
 800848c:	461a      	mov	r2, r3
 800848e:	d30a      	bcc.n	80084a6 <quorem+0x106>
 8008490:	613c      	str	r4, [r7, #16]
 8008492:	4630      	mov	r0, r6
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	3b04      	subs	r3, #4
 800849e:	2a00      	cmp	r2, #0
 80084a0:	d1cc      	bne.n	800843c <quorem+0x9c>
 80084a2:	3c01      	subs	r4, #1
 80084a4:	e7c7      	b.n	8008436 <quorem+0x96>
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	3b04      	subs	r3, #4
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1f0      	bne.n	8008490 <quorem+0xf0>
 80084ae:	3c01      	subs	r4, #1
 80084b0:	e7eb      	b.n	800848a <quorem+0xea>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e7ee      	b.n	8008494 <quorem+0xf4>
	...

080084b8 <_dtoa_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	ed2d 8b04 	vpush	{d8-d9}
 80084c0:	ec57 6b10 	vmov	r6, r7, d0
 80084c4:	b093      	sub	sp, #76	; 0x4c
 80084c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084cc:	9106      	str	r1, [sp, #24]
 80084ce:	ee10 aa10 	vmov	sl, s0
 80084d2:	4604      	mov	r4, r0
 80084d4:	9209      	str	r2, [sp, #36]	; 0x24
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	46bb      	mov	fp, r7
 80084da:	b975      	cbnz	r5, 80084fa <_dtoa_r+0x42>
 80084dc:	2010      	movs	r0, #16
 80084de:	f000 fdeb 	bl	80090b8 <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6260      	str	r0, [r4, #36]	; 0x24
 80084e6:	b920      	cbnz	r0, 80084f2 <_dtoa_r+0x3a>
 80084e8:	4ba7      	ldr	r3, [pc, #668]	; (8008788 <_dtoa_r+0x2d0>)
 80084ea:	21ea      	movs	r1, #234	; 0xea
 80084ec:	48a7      	ldr	r0, [pc, #668]	; (800878c <_dtoa_r+0x2d4>)
 80084ee:	f7ff ff39 	bl	8008364 <__assert_func>
 80084f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084f6:	6005      	str	r5, [r0, #0]
 80084f8:	60c5      	str	r5, [r0, #12]
 80084fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fc:	6819      	ldr	r1, [r3, #0]
 80084fe:	b151      	cbz	r1, 8008516 <_dtoa_r+0x5e>
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	604a      	str	r2, [r1, #4]
 8008504:	2301      	movs	r3, #1
 8008506:	4093      	lsls	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
 800850a:	4620      	mov	r0, r4
 800850c:	f7fe fe7e 	bl	800720c <_Bfree>
 8008510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	1e3b      	subs	r3, r7, #0
 8008518:	bfaa      	itet	ge
 800851a:	2300      	movge	r3, #0
 800851c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008520:	f8c8 3000 	strge.w	r3, [r8]
 8008524:	4b9a      	ldr	r3, [pc, #616]	; (8008790 <_dtoa_r+0x2d8>)
 8008526:	bfbc      	itt	lt
 8008528:	2201      	movlt	r2, #1
 800852a:	f8c8 2000 	strlt.w	r2, [r8]
 800852e:	ea33 030b 	bics.w	r3, r3, fp
 8008532:	d11b      	bne.n	800856c <_dtoa_r+0xb4>
 8008534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008536:	f242 730f 	movw	r3, #9999	; 0x270f
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008540:	4333      	orrs	r3, r6
 8008542:	f000 8592 	beq.w	800906a <_dtoa_r+0xbb2>
 8008546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008548:	b963      	cbnz	r3, 8008564 <_dtoa_r+0xac>
 800854a:	4b92      	ldr	r3, [pc, #584]	; (8008794 <_dtoa_r+0x2dc>)
 800854c:	e022      	b.n	8008594 <_dtoa_r+0xdc>
 800854e:	4b92      	ldr	r3, [pc, #584]	; (8008798 <_dtoa_r+0x2e0>)
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	3308      	adds	r3, #8
 8008554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	b013      	add	sp, #76	; 0x4c
 800855c:	ecbd 8b04 	vpop	{d8-d9}
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008564:	4b8b      	ldr	r3, [pc, #556]	; (8008794 <_dtoa_r+0x2dc>)
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	e7f3      	b.n	8008554 <_dtoa_r+0x9c>
 800856c:	2200      	movs	r2, #0
 800856e:	2300      	movs	r3, #0
 8008570:	4650      	mov	r0, sl
 8008572:	4659      	mov	r1, fp
 8008574:	f7f8 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008578:	ec4b ab19 	vmov	d9, sl, fp
 800857c:	4680      	mov	r8, r0
 800857e:	b158      	cbz	r0, 8008598 <_dtoa_r+0xe0>
 8008580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008582:	2301      	movs	r3, #1
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 856b 	beq.w	8009064 <_dtoa_r+0xbac>
 800858e:	4883      	ldr	r0, [pc, #524]	; (800879c <_dtoa_r+0x2e4>)
 8008590:	6018      	str	r0, [r3, #0]
 8008592:	1e43      	subs	r3, r0, #1
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	e7df      	b.n	8008558 <_dtoa_r+0xa0>
 8008598:	ec4b ab10 	vmov	d0, sl, fp
 800859c:	aa10      	add	r2, sp, #64	; 0x40
 800859e:	a911      	add	r1, sp, #68	; 0x44
 80085a0:	4620      	mov	r0, r4
 80085a2:	f7ff f9e1 	bl	8007968 <__d2b>
 80085a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80085aa:	ee08 0a10 	vmov	s16, r0
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	f000 8084 	beq.w	80086bc <_dtoa_r+0x204>
 80085b4:	ee19 3a90 	vmov	r3, s19
 80085b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085c0:	4656      	mov	r6, sl
 80085c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085ce:	4b74      	ldr	r3, [pc, #464]	; (80087a0 <_dtoa_r+0x2e8>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 fe57 	bl	8000288 <__aeabi_dsub>
 80085da:	a365      	add	r3, pc, #404	; (adr r3, 8008770 <_dtoa_r+0x2b8>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f8 f80a 	bl	80005f8 <__aeabi_dmul>
 80085e4:	a364      	add	r3, pc, #400	; (adr r3, 8008778 <_dtoa_r+0x2c0>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe4f 	bl	800028c <__adddf3>
 80085ee:	4606      	mov	r6, r0
 80085f0:	4628      	mov	r0, r5
 80085f2:	460f      	mov	r7, r1
 80085f4:	f7f7 ff96 	bl	8000524 <__aeabi_i2d>
 80085f8:	a361      	add	r3, pc, #388	; (adr r3, 8008780 <_dtoa_r+0x2c8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fffb 	bl	80005f8 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4630      	mov	r0, r6
 8008608:	4639      	mov	r1, r7
 800860a:	f7f7 fe3f 	bl	800028c <__adddf3>
 800860e:	4606      	mov	r6, r0
 8008610:	460f      	mov	r7, r1
 8008612:	f7f8 fa8b 	bl	8000b2c <__aeabi_d2iz>
 8008616:	2200      	movs	r2, #0
 8008618:	9000      	str	r0, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 fa5c 	bl	8000adc <__aeabi_dcmplt>
 8008624:	b150      	cbz	r0, 800863c <_dtoa_r+0x184>
 8008626:	9800      	ldr	r0, [sp, #0]
 8008628:	f7f7 ff7c 	bl	8000524 <__aeabi_i2d>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	f7f8 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008634:	b910      	cbnz	r0, 800863c <_dtoa_r+0x184>
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	3b01      	subs	r3, #1
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b16      	cmp	r3, #22
 8008640:	d85a      	bhi.n	80086f8 <_dtoa_r+0x240>
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	4b57      	ldr	r3, [pc, #348]	; (80087a4 <_dtoa_r+0x2ec>)
 8008646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	ec51 0b19 	vmov	r0, r1, d9
 8008652:	f7f8 fa43 	bl	8000adc <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	d050      	beq.n	80086fc <_dtoa_r+0x244>
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2300      	movs	r3, #0
 8008662:	930b      	str	r3, [sp, #44]	; 0x2c
 8008664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008666:	1b5d      	subs	r5, r3, r5
 8008668:	1e6b      	subs	r3, r5, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	bf45      	ittet	mi
 800866e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008672:	9304      	strmi	r3, [sp, #16]
 8008674:	2300      	movpl	r3, #0
 8008676:	2300      	movmi	r3, #0
 8008678:	bf4c      	ite	mi
 800867a:	9305      	strmi	r3, [sp, #20]
 800867c:	9304      	strpl	r3, [sp, #16]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db3d      	blt.n	8008700 <_dtoa_r+0x248>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	920a      	str	r2, [sp, #40]	; 0x28
 800868a:	4413      	add	r3, r2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	2300      	movs	r3, #0
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	2b09      	cmp	r3, #9
 8008696:	f200 8089 	bhi.w	80087ac <_dtoa_r+0x2f4>
 800869a:	2b05      	cmp	r3, #5
 800869c:	bfc4      	itt	gt
 800869e:	3b04      	subgt	r3, #4
 80086a0:	9306      	strgt	r3, [sp, #24]
 80086a2:	9b06      	ldr	r3, [sp, #24]
 80086a4:	f1a3 0302 	sub.w	r3, r3, #2
 80086a8:	bfcc      	ite	gt
 80086aa:	2500      	movgt	r5, #0
 80086ac:	2501      	movle	r5, #1
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f200 8087 	bhi.w	80087c2 <_dtoa_r+0x30a>
 80086b4:	e8df f003 	tbb	[pc, r3]
 80086b8:	59383a2d 	.word	0x59383a2d
 80086bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086c0:	441d      	add	r5, r3
 80086c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	bfc1      	itttt	gt
 80086ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80086d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086da:	bfda      	itte	le
 80086dc:	f1c3 0320 	rsble	r3, r3, #32
 80086e0:	fa06 f003 	lslle.w	r0, r6, r3
 80086e4:	4318      	orrgt	r0, r3
 80086e6:	f7f7 ff0d 	bl	8000504 <__aeabi_ui2d>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4606      	mov	r6, r0
 80086ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086f2:	3d01      	subs	r5, #1
 80086f4:	930e      	str	r3, [sp, #56]	; 0x38
 80086f6:	e76a      	b.n	80085ce <_dtoa_r+0x116>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e7b2      	b.n	8008662 <_dtoa_r+0x1aa>
 80086fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80086fe:	e7b1      	b.n	8008664 <_dtoa_r+0x1ac>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	9a00      	ldr	r2, [sp, #0]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	4253      	negs	r3, r2
 800870a:	9307      	str	r3, [sp, #28]
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	e7bf      	b.n	8008692 <_dtoa_r+0x1da>
 8008712:	2300      	movs	r3, #0
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc55      	bgt.n	80087c8 <_dtoa_r+0x310>
 800871c:	2301      	movs	r3, #1
 800871e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008722:	461a      	mov	r2, r3
 8008724:	9209      	str	r2, [sp, #36]	; 0x24
 8008726:	e00c      	b.n	8008742 <_dtoa_r+0x28a>
 8008728:	2301      	movs	r3, #1
 800872a:	e7f3      	b.n	8008714 <_dtoa_r+0x25c>
 800872c:	2300      	movs	r3, #0
 800872e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008730:	9308      	str	r3, [sp, #32]
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	4413      	add	r3, r2
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	3301      	adds	r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	bfb8      	it	lt
 8008740:	2301      	movlt	r3, #1
 8008742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	6042      	str	r2, [r0, #4]
 8008748:	2204      	movs	r2, #4
 800874a:	f102 0614 	add.w	r6, r2, #20
 800874e:	429e      	cmp	r6, r3
 8008750:	6841      	ldr	r1, [r0, #4]
 8008752:	d93d      	bls.n	80087d0 <_dtoa_r+0x318>
 8008754:	4620      	mov	r0, r4
 8008756:	f7fe fd19 	bl	800718c <_Balloc>
 800875a:	9001      	str	r0, [sp, #4]
 800875c:	2800      	cmp	r0, #0
 800875e:	d13b      	bne.n	80087d8 <_dtoa_r+0x320>
 8008760:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <_dtoa_r+0x2f0>)
 8008762:	4602      	mov	r2, r0
 8008764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008768:	e6c0      	b.n	80084ec <_dtoa_r+0x34>
 800876a:	2301      	movs	r3, #1
 800876c:	e7df      	b.n	800872e <_dtoa_r+0x276>
 800876e:	bf00      	nop
 8008770:	636f4361 	.word	0x636f4361
 8008774:	3fd287a7 	.word	0x3fd287a7
 8008778:	8b60c8b3 	.word	0x8b60c8b3
 800877c:	3fc68a28 	.word	0x3fc68a28
 8008780:	509f79fb 	.word	0x509f79fb
 8008784:	3fd34413 	.word	0x3fd34413
 8008788:	08009d64 	.word	0x08009d64
 800878c:	0800a053 	.word	0x0800a053
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	0800a04d 	.word	0x0800a04d
 8008798:	0800a044 	.word	0x0800a044
 800879c:	0800a052 	.word	0x0800a052
 80087a0:	3ff80000 	.word	0x3ff80000
 80087a4:	08009e00 	.word	0x08009e00
 80087a8:	08009cd8 	.word	0x08009cd8
 80087ac:	2501      	movs	r5, #1
 80087ae:	2300      	movs	r3, #0
 80087b0:	9306      	str	r3, [sp, #24]
 80087b2:	9508      	str	r5, [sp, #32]
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	2312      	movs	r3, #18
 80087c0:	e7b0      	b.n	8008724 <_dtoa_r+0x26c>
 80087c2:	2301      	movs	r3, #1
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	e7f5      	b.n	80087b4 <_dtoa_r+0x2fc>
 80087c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ce:	e7b8      	b.n	8008742 <_dtoa_r+0x28a>
 80087d0:	3101      	adds	r1, #1
 80087d2:	6041      	str	r1, [r0, #4]
 80087d4:	0052      	lsls	r2, r2, #1
 80087d6:	e7b8      	b.n	800874a <_dtoa_r+0x292>
 80087d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087da:	9a01      	ldr	r2, [sp, #4]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	2b0e      	cmp	r3, #14
 80087e2:	f200 809d 	bhi.w	8008920 <_dtoa_r+0x468>
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	f000 809a 	beq.w	8008920 <_dtoa_r+0x468>
 80087ec:	9b00      	ldr	r3, [sp, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd32      	ble.n	8008858 <_dtoa_r+0x3a0>
 80087f2:	4ab7      	ldr	r2, [pc, #732]	; (8008ad0 <_dtoa_r+0x618>)
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008800:	9b00      	ldr	r3, [sp, #0]
 8008802:	05d8      	lsls	r0, r3, #23
 8008804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008808:	d516      	bpl.n	8008838 <_dtoa_r+0x380>
 800880a:	4bb2      	ldr	r3, [pc, #712]	; (8008ad4 <_dtoa_r+0x61c>)
 800880c:	ec51 0b19 	vmov	r0, r1, d9
 8008810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008814:	f7f8 f81a 	bl	800084c <__aeabi_ddiv>
 8008818:	f007 070f 	and.w	r7, r7, #15
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	2503      	movs	r5, #3
 8008822:	4eac      	ldr	r6, [pc, #688]	; (8008ad4 <_dtoa_r+0x61c>)
 8008824:	b957      	cbnz	r7, 800883c <_dtoa_r+0x384>
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f8 f80d 	bl	800084c <__aeabi_ddiv>
 8008832:	4682      	mov	sl, r0
 8008834:	468b      	mov	fp, r1
 8008836:	e028      	b.n	800888a <_dtoa_r+0x3d2>
 8008838:	2502      	movs	r5, #2
 800883a:	e7f2      	b.n	8008822 <_dtoa_r+0x36a>
 800883c:	07f9      	lsls	r1, r7, #31
 800883e:	d508      	bpl.n	8008852 <_dtoa_r+0x39a>
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	3501      	adds	r5, #1
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	107f      	asrs	r7, r7, #1
 8008854:	3608      	adds	r6, #8
 8008856:	e7e5      	b.n	8008824 <_dtoa_r+0x36c>
 8008858:	f000 809b 	beq.w	8008992 <_dtoa_r+0x4da>
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	4f9d      	ldr	r7, [pc, #628]	; (8008ad4 <_dtoa_r+0x61c>)
 8008860:	425e      	negs	r6, r3
 8008862:	4b9b      	ldr	r3, [pc, #620]	; (8008ad0 <_dtoa_r+0x618>)
 8008864:	f006 020f 	and.w	r2, r6, #15
 8008868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	ec51 0b19 	vmov	r0, r1, d9
 8008874:	f7f7 fec0 	bl	80005f8 <__aeabi_dmul>
 8008878:	1136      	asrs	r6, r6, #4
 800887a:	4682      	mov	sl, r0
 800887c:	468b      	mov	fp, r1
 800887e:	2300      	movs	r3, #0
 8008880:	2502      	movs	r5, #2
 8008882:	2e00      	cmp	r6, #0
 8008884:	d17a      	bne.n	800897c <_dtoa_r+0x4c4>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1d3      	bne.n	8008832 <_dtoa_r+0x37a>
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8082 	beq.w	8008996 <_dtoa_r+0x4de>
 8008892:	4b91      	ldr	r3, [pc, #580]	; (8008ad8 <_dtoa_r+0x620>)
 8008894:	2200      	movs	r2, #0
 8008896:	4650      	mov	r0, sl
 8008898:	4659      	mov	r1, fp
 800889a:	f7f8 f91f 	bl	8000adc <__aeabi_dcmplt>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d079      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d076      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd36      	ble.n	800891c <_dtoa_r+0x464>
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	1e5f      	subs	r7, r3, #1
 80088b6:	2200      	movs	r2, #0
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <_dtoa_r+0x624>)
 80088ba:	f7f7 fe9d 	bl	80005f8 <__aeabi_dmul>
 80088be:	9e02      	ldr	r6, [sp, #8]
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	3501      	adds	r5, #1
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7f7 fe2c 	bl	8000524 <__aeabi_i2d>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	4b82      	ldr	r3, [pc, #520]	; (8008ae0 <_dtoa_r+0x628>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	f7f7 fcd8 	bl	800028c <__adddf3>
 80088dc:	46d0      	mov	r8, sl
 80088de:	46d9      	mov	r9, fp
 80088e0:	4682      	mov	sl, r0
 80088e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d158      	bne.n	800899c <_dtoa_r+0x4e4>
 80088ea:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <_dtoa_r+0x62c>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fcc9 	bl	8000288 <__aeabi_dsub>
 80088f6:	4652      	mov	r2, sl
 80088f8:	465b      	mov	r3, fp
 80088fa:	4680      	mov	r8, r0
 80088fc:	4689      	mov	r9, r1
 80088fe:	f7f8 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8008902:	2800      	cmp	r0, #0
 8008904:	f040 8295 	bne.w	8008e32 <_dtoa_r+0x97a>
 8008908:	4652      	mov	r2, sl
 800890a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800890e:	4640      	mov	r0, r8
 8008910:	4649      	mov	r1, r9
 8008912:	f7f8 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8289 	bne.w	8008e2e <_dtoa_r+0x976>
 800891c:	ec5b ab19 	vmov	sl, fp, d9
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	f2c0 8148 	blt.w	8008bb8 <_dtoa_r+0x700>
 8008928:	9a00      	ldr	r2, [sp, #0]
 800892a:	2a0e      	cmp	r2, #14
 800892c:	f300 8144 	bgt.w	8008bb8 <_dtoa_r+0x700>
 8008930:	4b67      	ldr	r3, [pc, #412]	; (8008ad0 <_dtoa_r+0x618>)
 8008932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	f280 80d5 	bge.w	8008aec <_dtoa_r+0x634>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f300 80d1 	bgt.w	8008aec <_dtoa_r+0x634>
 800894a:	f040 826f 	bne.w	8008e2c <_dtoa_r+0x974>
 800894e:	4b65      	ldr	r3, [pc, #404]	; (8008ae4 <_dtoa_r+0x62c>)
 8008950:	2200      	movs	r2, #0
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fe4f 	bl	80005f8 <__aeabi_dmul>
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	f7f8 f8d1 	bl	8000b04 <__aeabi_dcmpge>
 8008962:	9e03      	ldr	r6, [sp, #12]
 8008964:	4637      	mov	r7, r6
 8008966:	2800      	cmp	r0, #0
 8008968:	f040 8245 	bne.w	8008df6 <_dtoa_r+0x93e>
 800896c:	9d01      	ldr	r5, [sp, #4]
 800896e:	2331      	movs	r3, #49	; 0x31
 8008970:	f805 3b01 	strb.w	r3, [r5], #1
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	e240      	b.n	8008dfe <_dtoa_r+0x946>
 800897c:	07f2      	lsls	r2, r6, #31
 800897e:	d505      	bpl.n	800898c <_dtoa_r+0x4d4>
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f7f7 fe38 	bl	80005f8 <__aeabi_dmul>
 8008988:	3501      	adds	r5, #1
 800898a:	2301      	movs	r3, #1
 800898c:	1076      	asrs	r6, r6, #1
 800898e:	3708      	adds	r7, #8
 8008990:	e777      	b.n	8008882 <_dtoa_r+0x3ca>
 8008992:	2502      	movs	r5, #2
 8008994:	e779      	b.n	800888a <_dtoa_r+0x3d2>
 8008996:	9f00      	ldr	r7, [sp, #0]
 8008998:	9e03      	ldr	r6, [sp, #12]
 800899a:	e794      	b.n	80088c6 <_dtoa_r+0x40e>
 800899c:	9901      	ldr	r1, [sp, #4]
 800899e:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <_dtoa_r+0x618>)
 80089a0:	4431      	add	r1, r6
 80089a2:	910d      	str	r1, [sp, #52]	; 0x34
 80089a4:	9908      	ldr	r1, [sp, #32]
 80089a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ae:	2900      	cmp	r1, #0
 80089b0:	d043      	beq.n	8008a3a <_dtoa_r+0x582>
 80089b2:	494d      	ldr	r1, [pc, #308]	; (8008ae8 <_dtoa_r+0x630>)
 80089b4:	2000      	movs	r0, #0
 80089b6:	f7f7 ff49 	bl	800084c <__aeabi_ddiv>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	9d01      	ldr	r5, [sp, #4]
 80089c4:	4682      	mov	sl, r0
 80089c6:	468b      	mov	fp, r1
 80089c8:	4649      	mov	r1, r9
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7f8 f8ae 	bl	8000b2c <__aeabi_d2iz>
 80089d0:	4606      	mov	r6, r0
 80089d2:	f7f7 fda7 	bl	8000524 <__aeabi_i2d>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	3630      	adds	r6, #48	; 0x30
 80089e4:	f805 6b01 	strb.w	r6, [r5], #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	465b      	mov	r3, fp
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	f7f8 f874 	bl	8000adc <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d163      	bne.n	8008ac0 <_dtoa_r+0x608>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	4936      	ldr	r1, [pc, #216]	; (8008ad8 <_dtoa_r+0x620>)
 80089fe:	2000      	movs	r0, #0
 8008a00:	f7f7 fc42 	bl	8000288 <__aeabi_dsub>
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	f7f8 f868 	bl	8000adc <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f040 80b5 	bne.w	8008b7c <_dtoa_r+0x6c4>
 8008a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a14:	429d      	cmp	r5, r3
 8008a16:	d081      	beq.n	800891c <_dtoa_r+0x464>
 8008a18:	4b30      	ldr	r3, [pc, #192]	; (8008adc <_dtoa_r+0x624>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	4659      	mov	r1, fp
 8008a20:	f7f7 fdea 	bl	80005f8 <__aeabi_dmul>
 8008a24:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <_dtoa_r+0x624>)
 8008a26:	4682      	mov	sl, r0
 8008a28:	468b      	mov	fp, r1
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	e7c6      	b.n	80089c8 <_dtoa_r+0x510>
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	f7f7 fddb 	bl	80005f8 <__aeabi_dmul>
 8008a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a44:	9d01      	ldr	r5, [sp, #4]
 8008a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7f8 f86c 	bl	8000b2c <__aeabi_d2iz>
 8008a54:	4606      	mov	r6, r0
 8008a56:	f7f7 fd65 	bl	8000524 <__aeabi_i2d>
 8008a5a:	3630      	adds	r6, #48	; 0x30
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fc10 	bl	8000288 <__aeabi_dsub>
 8008a68:	f805 6b01 	strb.w	r6, [r5], #1
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	4680      	mov	r8, r0
 8008a72:	4689      	mov	r9, r1
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	d124      	bne.n	8008ac4 <_dtoa_r+0x60c>
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <_dtoa_r+0x630>)
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	4659      	mov	r1, fp
 8008a80:	f7f7 fc04 	bl	800028c <__adddf3>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f8 f844 	bl	8000b18 <__aeabi_dcmpgt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d173      	bne.n	8008b7c <_dtoa_r+0x6c4>
 8008a94:	4652      	mov	r2, sl
 8008a96:	465b      	mov	r3, fp
 8008a98:	4913      	ldr	r1, [pc, #76]	; (8008ae8 <_dtoa_r+0x630>)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7f7 fbf4 	bl	8000288 <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f8 f818 	bl	8000adc <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f af35 	beq.w	800891c <_dtoa_r+0x464>
 8008ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ab4:	1e6b      	subs	r3, r5, #1
 8008ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d0f8      	beq.n	8008ab2 <_dtoa_r+0x5fa>
 8008ac0:	9700      	str	r7, [sp, #0]
 8008ac2:	e049      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_dtoa_r+0x624>)
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	4680      	mov	r8, r0
 8008acc:	4689      	mov	r9, r1
 8008ace:	e7bd      	b.n	8008a4c <_dtoa_r+0x594>
 8008ad0:	08009e00 	.word	0x08009e00
 8008ad4:	08009dd8 	.word	0x08009dd8
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	40240000 	.word	0x40240000
 8008ae0:	401c0000 	.word	0x401c0000
 8008ae4:	40140000 	.word	0x40140000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	9d01      	ldr	r5, [sp, #4]
 8008aee:	4656      	mov	r6, sl
 8008af0:	465f      	mov	r7, fp
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fea7 	bl	800084c <__aeabi_ddiv>
 8008afe:	f7f8 f815 	bl	8000b2c <__aeabi_d2iz>
 8008b02:	4682      	mov	sl, r0
 8008b04:	f7f7 fd0e 	bl	8000524 <__aeabi_i2d>
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b1c:	f7f7 fbb4 	bl	8000288 <__aeabi_dsub>
 8008b20:	f805 6b01 	strb.w	r6, [r5], #1
 8008b24:	9e01      	ldr	r6, [sp, #4]
 8008b26:	9f03      	ldr	r7, [sp, #12]
 8008b28:	1bae      	subs	r6, r5, r6
 8008b2a:	42b7      	cmp	r7, r6
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	d135      	bne.n	8008b9e <_dtoa_r+0x6e6>
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	f7f7 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008b42:	b9d0      	cbnz	r0, 8008b7a <_dtoa_r+0x6c2>
 8008b44:	4642      	mov	r2, r8
 8008b46:	464b      	mov	r3, r9
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b50:	b110      	cbz	r0, 8008b58 <_dtoa_r+0x6a0>
 8008b52:	f01a 0f01 	tst.w	sl, #1
 8008b56:	d110      	bne.n	8008b7a <_dtoa_r+0x6c2>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	f7fe fb55 	bl	800720c <_Bfree>
 8008b62:	2300      	movs	r3, #0
 8008b64:	9800      	ldr	r0, [sp, #0]
 8008b66:	702b      	strb	r3, [r5, #0]
 8008b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	6018      	str	r0, [r3, #0]
 8008b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f acf1 	beq.w	8008558 <_dtoa_r+0xa0>
 8008b76:	601d      	str	r5, [r3, #0]
 8008b78:	e4ee      	b.n	8008558 <_dtoa_r+0xa0>
 8008b7a:	9f00      	ldr	r7, [sp, #0]
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	461d      	mov	r5, r3
 8008b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b84:	2a39      	cmp	r2, #57	; 0x39
 8008b86:	d106      	bne.n	8008b96 <_dtoa_r+0x6de>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d1f7      	bne.n	8008b7e <_dtoa_r+0x6c6>
 8008b8e:	9901      	ldr	r1, [sp, #4]
 8008b90:	2230      	movs	r2, #48	; 0x30
 8008b92:	3701      	adds	r7, #1
 8008b94:	700a      	strb	r2, [r1, #0]
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	3201      	adds	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e790      	b.n	8008ac0 <_dtoa_r+0x608>
 8008b9e:	4ba6      	ldr	r3, [pc, #664]	; (8008e38 <_dtoa_r+0x980>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	f7f7 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d09d      	beq.n	8008af2 <_dtoa_r+0x63a>
 8008bb6:	e7cf      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	f000 80d7 	beq.w	8008d6e <_dtoa_r+0x8b6>
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	2a01      	cmp	r2, #1
 8008bc4:	f300 80ba 	bgt.w	8008d3c <_dtoa_r+0x884>
 8008bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	f000 80b2 	beq.w	8008d34 <_dtoa_r+0x87c>
 8008bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bd4:	9e07      	ldr	r6, [sp, #28]
 8008bd6:	9d04      	ldr	r5, [sp, #16]
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	441a      	add	r2, r3
 8008bdc:	9204      	str	r2, [sp, #16]
 8008bde:	9a05      	ldr	r2, [sp, #20]
 8008be0:	2101      	movs	r1, #1
 8008be2:	441a      	add	r2, r3
 8008be4:	4620      	mov	r0, r4
 8008be6:	9205      	str	r2, [sp, #20]
 8008be8:	f7fe fc12 	bl	8007410 <__i2b>
 8008bec:	4607      	mov	r7, r0
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	dd0c      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd09      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	bfa8      	it	ge
 8008bfe:	462b      	movge	r3, r5
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	9204      	str	r2, [sp, #16]
 8008c04:	9a05      	ldr	r2, [sp, #20]
 8008c06:	1aed      	subs	r5, r5, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	b31b      	cbz	r3, 8008c58 <_dtoa_r+0x7a0>
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80af 	beq.w	8008d76 <_dtoa_r+0x8be>
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	dd13      	ble.n	8008c44 <_dtoa_r+0x78c>
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7fe fcb5 	bl	8007590 <__pow5mult>
 8008c26:	ee18 2a10 	vmov	r2, s16
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7fe fc04 	bl	800743c <__multiply>
 8008c34:	ee18 1a10 	vmov	r1, s16
 8008c38:	4680      	mov	r8, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7fe fae6 	bl	800720c <_Bfree>
 8008c40:	ee08 8a10 	vmov	s16, r8
 8008c44:	9b07      	ldr	r3, [sp, #28]
 8008c46:	1b9a      	subs	r2, r3, r6
 8008c48:	d006      	beq.n	8008c58 <_dtoa_r+0x7a0>
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7fe fc9e 	bl	8007590 <__pow5mult>
 8008c54:	ee08 0a10 	vmov	s16, r0
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7fe fbd8 	bl	8007410 <__i2b>
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	4606      	mov	r6, r0
 8008c66:	f340 8088 	ble.w	8008d7a <_dtoa_r+0x8c2>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7fe fc8e 	bl	8007590 <__pow5mult>
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	4606      	mov	r6, r0
 8008c7a:	f340 8081 	ble.w	8008d80 <_dtoa_r+0x8c8>
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	6933      	ldr	r3, [r6, #16]
 8008c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c88:	6918      	ldr	r0, [r3, #16]
 8008c8a:	f7fe fb71 	bl	8007370 <__hi0bits>
 8008c8e:	f1c0 0020 	rsb	r0, r0, #32
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	4418      	add	r0, r3
 8008c96:	f010 001f 	ands.w	r0, r0, #31
 8008c9a:	f000 8092 	beq.w	8008dc2 <_dtoa_r+0x90a>
 8008c9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	f340 808a 	ble.w	8008dbc <_dtoa_r+0x904>
 8008ca8:	f1c0 001c 	rsb	r0, r0, #28
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	4403      	add	r3, r0
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9b05      	ldr	r3, [sp, #20]
 8008cb4:	4403      	add	r3, r0
 8008cb6:	4405      	add	r5, r0
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd07      	ble.n	8008cd0 <_dtoa_r+0x818>
 8008cc0:	ee18 1a10 	vmov	r1, s16
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7fe fcbc 	bl	8007644 <__lshift>
 8008ccc:	ee08 0a10 	vmov	s16, r0
 8008cd0:	9b05      	ldr	r3, [sp, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd05      	ble.n	8008ce2 <_dtoa_r+0x82a>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7fe fcb2 	bl	8007644 <__lshift>
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d06e      	beq.n	8008dc6 <_dtoa_r+0x90e>
 8008ce8:	ee18 0a10 	vmov	r0, s16
 8008cec:	4631      	mov	r1, r6
 8008cee:	f7fe fd19 	bl	8007724 <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	da67      	bge.n	8008dc6 <_dtoa_r+0x90e>
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	220a      	movs	r2, #10
 8008d02:	2300      	movs	r3, #0
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7fe faa3 	bl	8007250 <__multadd>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	ee08 0a10 	vmov	s16, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 81b1 	beq.w	8009078 <_dtoa_r+0xbc0>
 8008d16:	2300      	movs	r3, #0
 8008d18:	4639      	mov	r1, r7
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7fe fa97 	bl	8007250 <__multadd>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	4607      	mov	r7, r0
 8008d28:	f300 808e 	bgt.w	8008e48 <_dtoa_r+0x990>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dc51      	bgt.n	8008dd6 <_dtoa_r+0x91e>
 8008d32:	e089      	b.n	8008e48 <_dtoa_r+0x990>
 8008d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d3a:	e74b      	b.n	8008bd4 <_dtoa_r+0x71c>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1e5e      	subs	r6, r3, #1
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	42b3      	cmp	r3, r6
 8008d44:	bfbf      	itttt	lt
 8008d46:	9b07      	ldrlt	r3, [sp, #28]
 8008d48:	9607      	strlt	r6, [sp, #28]
 8008d4a:	1af2      	sublt	r2, r6, r3
 8008d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d4e:	bfb6      	itet	lt
 8008d50:	189b      	addlt	r3, r3, r2
 8008d52:	1b9e      	subge	r6, r3, r6
 8008d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	bfb8      	it	lt
 8008d5a:	2600      	movlt	r6, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfb7      	itett	lt
 8008d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d68:	1a9d      	sublt	r5, r3, r2
 8008d6a:	2300      	movlt	r3, #0
 8008d6c:	e734      	b.n	8008bd8 <_dtoa_r+0x720>
 8008d6e:	9e07      	ldr	r6, [sp, #28]
 8008d70:	9d04      	ldr	r5, [sp, #16]
 8008d72:	9f08      	ldr	r7, [sp, #32]
 8008d74:	e73b      	b.n	8008bee <_dtoa_r+0x736>
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	e767      	b.n	8008c4a <_dtoa_r+0x792>
 8008d7a:	9b06      	ldr	r3, [sp, #24]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	dc18      	bgt.n	8008db2 <_dtoa_r+0x8fa>
 8008d80:	f1ba 0f00 	cmp.w	sl, #0
 8008d84:	d115      	bne.n	8008db2 <_dtoa_r+0x8fa>
 8008d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d8a:	b993      	cbnz	r3, 8008db2 <_dtoa_r+0x8fa>
 8008d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d90:	0d1b      	lsrs	r3, r3, #20
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	b183      	cbz	r3, 8008db8 <_dtoa_r+0x900>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f04f 0801 	mov.w	r8, #1
 8008da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f47f af6a 	bne.w	8008c82 <_dtoa_r+0x7ca>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e76f      	b.n	8008c92 <_dtoa_r+0x7da>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	e7f6      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008db8:	4698      	mov	r8, r3
 8008dba:	e7f4      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008dbc:	f43f af7d 	beq.w	8008cba <_dtoa_r+0x802>
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	301c      	adds	r0, #28
 8008dc4:	e772      	b.n	8008cac <_dtoa_r+0x7f4>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc37      	bgt.n	8008e3c <_dtoa_r+0x984>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dd34      	ble.n	8008e3c <_dtoa_r+0x984>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	9302      	str	r3, [sp, #8]
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	b96b      	cbnz	r3, 8008df6 <_dtoa_r+0x93e>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	2205      	movs	r2, #5
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7fe fa36 	bl	8007250 <__multadd>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4606      	mov	r6, r0
 8008de8:	ee18 0a10 	vmov	r0, s16
 8008dec:	f7fe fc9a 	bl	8007724 <__mcmp>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f73f adbb 	bgt.w	800896c <_dtoa_r+0x4b4>
 8008df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df8:	9d01      	ldr	r5, [sp, #4]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	4631      	mov	r1, r6
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7fe fa01 	bl	800720c <_Bfree>
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	f43f aea4 	beq.w	8008b58 <_dtoa_r+0x6a0>
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	d005      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e16:	45b8      	cmp	r8, r7
 8008e18:	d003      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7fe f9f5 	bl	800720c <_Bfree>
 8008e22:	4639      	mov	r1, r7
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7fe f9f1 	bl	800720c <_Bfree>
 8008e2a:	e695      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4637      	mov	r7, r6
 8008e30:	e7e1      	b.n	8008df6 <_dtoa_r+0x93e>
 8008e32:	9700      	str	r7, [sp, #0]
 8008e34:	4637      	mov	r7, r6
 8008e36:	e599      	b.n	800896c <_dtoa_r+0x4b4>
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 80ca 	beq.w	8008fd8 <_dtoa_r+0xb20>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	dd05      	ble.n	8008e58 <_dtoa_r+0x9a0>
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7fe fbf7 	bl	8007644 <__lshift>
 8008e56:	4607      	mov	r7, r0
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	d05b      	beq.n	8008f16 <_dtoa_r+0xa5e>
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f7fe f993 	bl	800718c <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <_dtoa_r+0x9be>
 8008e6a:	4b87      	ldr	r3, [pc, #540]	; (8009088 <_dtoa_r+0xbd0>)
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e72:	f7ff bb3b 	b.w	80084ec <_dtoa_r+0x34>
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	0092      	lsls	r2, r2, #2
 8008e7c:	f107 010c 	add.w	r1, r7, #12
 8008e80:	300c      	adds	r0, #12
 8008e82:	f7fc fe41 	bl	8005b08 <memcpy>
 8008e86:	2201      	movs	r2, #1
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7fe fbda 	bl	8007644 <__lshift>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	f103 0901 	add.w	r9, r3, #1
 8008e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	f00a 0301 	and.w	r3, sl, #1
 8008ea2:	46b8      	mov	r8, r7
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	ee18 0a10 	vmov	r0, s16
 8008eae:	f7ff fa77 	bl	80083a0 <quorem>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	9002      	str	r0, [sp, #8]
 8008eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eba:	ee18 0a10 	vmov	r0, s16
 8008ebe:	f7fe fc31 	bl	8007724 <__mcmp>
 8008ec2:	463a      	mov	r2, r7
 8008ec4:	9003      	str	r0, [sp, #12]
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7fe fc47 	bl	800775c <__mdiff>
 8008ece:	68c2      	ldr	r2, [r0, #12]
 8008ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	bb02      	cbnz	r2, 8008f1a <_dtoa_r+0xa62>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	ee18 0a10 	vmov	r0, s16
 8008ede:	f7fe fc21 	bl	8007724 <__mcmp>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	f7fe f98f 	bl	800720c <_Bfree>
 8008eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008ef2:	ea43 0102 	orr.w	r1, r3, r2
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	464d      	mov	r5, r9
 8008efc:	d10f      	bne.n	8008f1e <_dtoa_r+0xa66>
 8008efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f02:	d02a      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd02      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008f10:	f88b a000 	strb.w	sl, [fp]
 8008f14:	e775      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f16:	4638      	mov	r0, r7
 8008f18:	e7ba      	b.n	8008e90 <_dtoa_r+0x9d8>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	e7e2      	b.n	8008ee4 <_dtoa_r+0xa2c>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db04      	blt.n	8008f2e <_dtoa_r+0xa76>
 8008f24:	9906      	ldr	r1, [sp, #24]
 8008f26:	430b      	orrs	r3, r1
 8008f28:	9904      	ldr	r1, [sp, #16]
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	d122      	bne.n	8008f74 <_dtoa_r+0xabc>
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	ddee      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f32:	ee18 1a10 	vmov	r1, s16
 8008f36:	2201      	movs	r2, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7fe fb83 	bl	8007644 <__lshift>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	ee08 0a10 	vmov	s16, r0
 8008f44:	f7fe fbee 	bl	8007724 <__mcmp>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	dc03      	bgt.n	8008f54 <_dtoa_r+0xa9c>
 8008f4c:	d1e0      	bne.n	8008f10 <_dtoa_r+0xa58>
 8008f4e:	f01a 0f01 	tst.w	sl, #1
 8008f52:	d0dd      	beq.n	8008f10 <_dtoa_r+0xa58>
 8008f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f58:	d1d7      	bne.n	8008f0a <_dtoa_r+0xa52>
 8008f5a:	2339      	movs	r3, #57	; 0x39
 8008f5c:	f88b 3000 	strb.w	r3, [fp]
 8008f60:	462b      	mov	r3, r5
 8008f62:	461d      	mov	r5, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f6a:	2a39      	cmp	r2, #57	; 0x39
 8008f6c:	d071      	beq.n	8009052 <_dtoa_r+0xb9a>
 8008f6e:	3201      	adds	r2, #1
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	e746      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	dd07      	ble.n	8008f88 <_dtoa_r+0xad0>
 8008f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f7c:	d0ed      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f7e:	f10a 0301 	add.w	r3, sl, #1
 8008f82:	f88b 3000 	strb.w	r3, [fp]
 8008f86:	e73c      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f88:	9b05      	ldr	r3, [sp, #20]
 8008f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f8e:	4599      	cmp	r9, r3
 8008f90:	d047      	beq.n	8009022 <_dtoa_r+0xb6a>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	2300      	movs	r3, #0
 8008f98:	220a      	movs	r2, #10
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7fe f958 	bl	8007250 <__multadd>
 8008fa0:	45b8      	cmp	r8, r7
 8008fa2:	ee08 0a10 	vmov	s16, r0
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	f04f 020a 	mov.w	r2, #10
 8008fae:	4641      	mov	r1, r8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	d106      	bne.n	8008fc2 <_dtoa_r+0xb0a>
 8008fb4:	f7fe f94c 	bl	8007250 <__multadd>
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4607      	mov	r7, r0
 8008fbc:	f109 0901 	add.w	r9, r9, #1
 8008fc0:	e772      	b.n	8008ea8 <_dtoa_r+0x9f0>
 8008fc2:	f7fe f945 	bl	8007250 <__multadd>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4680      	mov	r8, r0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7fe f93e 	bl	8007250 <__multadd>
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	e7f1      	b.n	8008fbc <_dtoa_r+0xb04>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	9302      	str	r3, [sp, #8]
 8008fdc:	9d01      	ldr	r5, [sp, #4]
 8008fde:	ee18 0a10 	vmov	r0, s16
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	f7ff f9dc 	bl	80083a0 <quorem>
 8008fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	f805 ab01 	strb.w	sl, [r5], #1
 8008ff2:	1aea      	subs	r2, r5, r3
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	dd09      	ble.n	800900e <_dtoa_r+0xb56>
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	2300      	movs	r3, #0
 8009000:	220a      	movs	r2, #10
 8009002:	4620      	mov	r0, r4
 8009004:	f7fe f924 	bl	8007250 <__multadd>
 8009008:	ee08 0a10 	vmov	s16, r0
 800900c:	e7e7      	b.n	8008fde <_dtoa_r+0xb26>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfc8      	it	gt
 8009014:	461d      	movgt	r5, r3
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	bfd8      	it	le
 800901a:	2501      	movle	r5, #1
 800901c:	441d      	add	r5, r3
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	ee18 1a10 	vmov	r1, s16
 8009026:	2201      	movs	r2, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f7fe fb0b 	bl	8007644 <__lshift>
 800902e:	4631      	mov	r1, r6
 8009030:	ee08 0a10 	vmov	s16, r0
 8009034:	f7fe fb76 	bl	8007724 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	dc91      	bgt.n	8008f60 <_dtoa_r+0xaa8>
 800903c:	d102      	bne.n	8009044 <_dtoa_r+0xb8c>
 800903e:	f01a 0f01 	tst.w	sl, #1
 8009042:	d18d      	bne.n	8008f60 <_dtoa_r+0xaa8>
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a30      	cmp	r2, #48	; 0x30
 800904e:	d0fa      	beq.n	8009046 <_dtoa_r+0xb8e>
 8009050:	e6d7      	b.n	8008e02 <_dtoa_r+0x94a>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d184      	bne.n	8008f62 <_dtoa_r+0xaaa>
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2331      	movs	r3, #49	; 0x31
 8009060:	7013      	strb	r3, [r2, #0]
 8009062:	e6ce      	b.n	8008e02 <_dtoa_r+0x94a>
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <_dtoa_r+0xbd4>)
 8009066:	f7ff ba95 	b.w	8008594 <_dtoa_r+0xdc>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f aa6e 	bne.w	800854e <_dtoa_r+0x96>
 8009072:	4b07      	ldr	r3, [pc, #28]	; (8009090 <_dtoa_r+0xbd8>)
 8009074:	f7ff ba8e 	b.w	8008594 <_dtoa_r+0xdc>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dcae      	bgt.n	8008fdc <_dtoa_r+0xb24>
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	2b02      	cmp	r3, #2
 8009082:	f73f aea8 	bgt.w	8008dd6 <_dtoa_r+0x91e>
 8009086:	e7a9      	b.n	8008fdc <_dtoa_r+0xb24>
 8009088:	08009cd8 	.word	0x08009cd8
 800908c:	0800a051 	.word	0x0800a051
 8009090:	0800a044 	.word	0x0800a044

08009094 <fiprintf>:
 8009094:	b40e      	push	{r1, r2, r3}
 8009096:	b503      	push	{r0, r1, lr}
 8009098:	4601      	mov	r1, r0
 800909a:	ab03      	add	r3, sp, #12
 800909c:	4805      	ldr	r0, [pc, #20]	; (80090b4 <fiprintf+0x20>)
 800909e:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a2:	6800      	ldr	r0, [r0, #0]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	f000 f8b3 	bl	8009210 <_vfiprintf_r>
 80090aa:	b002      	add	sp, #8
 80090ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b0:	b003      	add	sp, #12
 80090b2:	4770      	bx	lr
 80090b4:	20000018 	.word	0x20000018

080090b8 <malloc>:
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <malloc+0xc>)
 80090ba:	4601      	mov	r1, r0
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	f7fe bd7b 	b.w	8007bb8 <_malloc_r>
 80090c2:	bf00      	nop
 80090c4:	20000018 	.word	0x20000018

080090c8 <memmove>:
 80090c8:	4288      	cmp	r0, r1
 80090ca:	b510      	push	{r4, lr}
 80090cc:	eb01 0402 	add.w	r4, r1, r2
 80090d0:	d902      	bls.n	80090d8 <memmove+0x10>
 80090d2:	4284      	cmp	r4, r0
 80090d4:	4623      	mov	r3, r4
 80090d6:	d807      	bhi.n	80090e8 <memmove+0x20>
 80090d8:	1e43      	subs	r3, r0, #1
 80090da:	42a1      	cmp	r1, r4
 80090dc:	d008      	beq.n	80090f0 <memmove+0x28>
 80090de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e6:	e7f8      	b.n	80090da <memmove+0x12>
 80090e8:	4402      	add	r2, r0
 80090ea:	4601      	mov	r1, r0
 80090ec:	428a      	cmp	r2, r1
 80090ee:	d100      	bne.n	80090f2 <memmove+0x2a>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090fa:	e7f7      	b.n	80090ec <memmove+0x24>

080090fc <__malloc_lock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_lock+0x8>)
 80090fe:	f000 bc37 	b.w	8009970 <__retarget_lock_acquire_recursive>
 8009102:	bf00      	nop
 8009104:	200004e4 	.word	0x200004e4

08009108 <__malloc_unlock>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__malloc_unlock+0x8>)
 800910a:	f000 bc32 	b.w	8009972 <__retarget_lock_release_recursive>
 800910e:	bf00      	nop
 8009110:	200004e4 	.word	0x200004e4

08009114 <_free_r>:
 8009114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009116:	2900      	cmp	r1, #0
 8009118:	d044      	beq.n	80091a4 <_free_r+0x90>
 800911a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911e:	9001      	str	r0, [sp, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f1a1 0404 	sub.w	r4, r1, #4
 8009126:	bfb8      	it	lt
 8009128:	18e4      	addlt	r4, r4, r3
 800912a:	f7ff ffe7 	bl	80090fc <__malloc_lock>
 800912e:	4a1e      	ldr	r2, [pc, #120]	; (80091a8 <_free_r+0x94>)
 8009130:	9801      	ldr	r0, [sp, #4]
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	b933      	cbnz	r3, 8009144 <_free_r+0x30>
 8009136:	6063      	str	r3, [r4, #4]
 8009138:	6014      	str	r4, [r2, #0]
 800913a:	b003      	add	sp, #12
 800913c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009140:	f7ff bfe2 	b.w	8009108 <__malloc_unlock>
 8009144:	42a3      	cmp	r3, r4
 8009146:	d908      	bls.n	800915a <_free_r+0x46>
 8009148:	6825      	ldr	r5, [r4, #0]
 800914a:	1961      	adds	r1, r4, r5
 800914c:	428b      	cmp	r3, r1
 800914e:	bf01      	itttt	eq
 8009150:	6819      	ldreq	r1, [r3, #0]
 8009152:	685b      	ldreq	r3, [r3, #4]
 8009154:	1949      	addeq	r1, r1, r5
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	e7ed      	b.n	8009136 <_free_r+0x22>
 800915a:	461a      	mov	r2, r3
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	b10b      	cbz	r3, 8009164 <_free_r+0x50>
 8009160:	42a3      	cmp	r3, r4
 8009162:	d9fa      	bls.n	800915a <_free_r+0x46>
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	1855      	adds	r5, r2, r1
 8009168:	42a5      	cmp	r5, r4
 800916a:	d10b      	bne.n	8009184 <_free_r+0x70>
 800916c:	6824      	ldr	r4, [r4, #0]
 800916e:	4421      	add	r1, r4
 8009170:	1854      	adds	r4, r2, r1
 8009172:	42a3      	cmp	r3, r4
 8009174:	6011      	str	r1, [r2, #0]
 8009176:	d1e0      	bne.n	800913a <_free_r+0x26>
 8009178:	681c      	ldr	r4, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	6053      	str	r3, [r2, #4]
 800917e:	4421      	add	r1, r4
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	e7da      	b.n	800913a <_free_r+0x26>
 8009184:	d902      	bls.n	800918c <_free_r+0x78>
 8009186:	230c      	movs	r3, #12
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	e7d6      	b.n	800913a <_free_r+0x26>
 800918c:	6825      	ldr	r5, [r4, #0]
 800918e:	1961      	adds	r1, r4, r5
 8009190:	428b      	cmp	r3, r1
 8009192:	bf04      	itt	eq
 8009194:	6819      	ldreq	r1, [r3, #0]
 8009196:	685b      	ldreq	r3, [r3, #4]
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	bf04      	itt	eq
 800919c:	1949      	addeq	r1, r1, r5
 800919e:	6021      	streq	r1, [r4, #0]
 80091a0:	6054      	str	r4, [r2, #4]
 80091a2:	e7ca      	b.n	800913a <_free_r+0x26>
 80091a4:	b003      	add	sp, #12
 80091a6:	bd30      	pop	{r4, r5, pc}
 80091a8:	200004d8 	.word	0x200004d8

080091ac <_malloc_usable_size_r>:
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f18      	subs	r0, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbc      	itt	lt
 80091b6:	580b      	ldrlt	r3, [r1, r0]
 80091b8:	18c0      	addlt	r0, r0, r3
 80091ba:	4770      	bx	lr

080091bc <__sfputc_r>:
 80091bc:	6893      	ldr	r3, [r2, #8]
 80091be:	3b01      	subs	r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	b410      	push	{r4}
 80091c4:	6093      	str	r3, [r2, #8]
 80091c6:	da08      	bge.n	80091da <__sfputc_r+0x1e>
 80091c8:	6994      	ldr	r4, [r2, #24]
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	db01      	blt.n	80091d2 <__sfputc_r+0x16>
 80091ce:	290a      	cmp	r1, #10
 80091d0:	d103      	bne.n	80091da <__sfputc_r+0x1e>
 80091d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d6:	f000 b94b 	b.w	8009470 <__swbuf_r>
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	1c58      	adds	r0, r3, #1
 80091de:	6010      	str	r0, [r2, #0]
 80091e0:	7019      	strb	r1, [r3, #0]
 80091e2:	4608      	mov	r0, r1
 80091e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <__sfputs_r>:
 80091ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ec:	4606      	mov	r6, r0
 80091ee:	460f      	mov	r7, r1
 80091f0:	4614      	mov	r4, r2
 80091f2:	18d5      	adds	r5, r2, r3
 80091f4:	42ac      	cmp	r4, r5
 80091f6:	d101      	bne.n	80091fc <__sfputs_r+0x12>
 80091f8:	2000      	movs	r0, #0
 80091fa:	e007      	b.n	800920c <__sfputs_r+0x22>
 80091fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009200:	463a      	mov	r2, r7
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ffda 	bl	80091bc <__sfputc_r>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d1f3      	bne.n	80091f4 <__sfputs_r+0xa>
 800920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009210 <_vfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	460d      	mov	r5, r1
 8009216:	b09d      	sub	sp, #116	; 0x74
 8009218:	4614      	mov	r4, r2
 800921a:	4698      	mov	r8, r3
 800921c:	4606      	mov	r6, r0
 800921e:	b118      	cbz	r0, 8009228 <_vfiprintf_r+0x18>
 8009220:	6983      	ldr	r3, [r0, #24]
 8009222:	b90b      	cbnz	r3, 8009228 <_vfiprintf_r+0x18>
 8009224:	f000 fb06 	bl	8009834 <__sinit>
 8009228:	4b89      	ldr	r3, [pc, #548]	; (8009450 <_vfiprintf_r+0x240>)
 800922a:	429d      	cmp	r5, r3
 800922c:	d11b      	bne.n	8009266 <_vfiprintf_r+0x56>
 800922e:	6875      	ldr	r5, [r6, #4]
 8009230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009232:	07d9      	lsls	r1, r3, #31
 8009234:	d405      	bmi.n	8009242 <_vfiprintf_r+0x32>
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	059a      	lsls	r2, r3, #22
 800923a:	d402      	bmi.n	8009242 <_vfiprintf_r+0x32>
 800923c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923e:	f000 fb97 	bl	8009970 <__retarget_lock_acquire_recursive>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	071b      	lsls	r3, r3, #28
 8009246:	d501      	bpl.n	800924c <_vfiprintf_r+0x3c>
 8009248:	692b      	ldr	r3, [r5, #16]
 800924a:	b9eb      	cbnz	r3, 8009288 <_vfiprintf_r+0x78>
 800924c:	4629      	mov	r1, r5
 800924e:	4630      	mov	r0, r6
 8009250:	f000 f960 	bl	8009514 <__swsetup_r>
 8009254:	b1c0      	cbz	r0, 8009288 <_vfiprintf_r+0x78>
 8009256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009258:	07dc      	lsls	r4, r3, #31
 800925a:	d50e      	bpl.n	800927a <_vfiprintf_r+0x6a>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	b01d      	add	sp, #116	; 0x74
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	4b7b      	ldr	r3, [pc, #492]	; (8009454 <_vfiprintf_r+0x244>)
 8009268:	429d      	cmp	r5, r3
 800926a:	d101      	bne.n	8009270 <_vfiprintf_r+0x60>
 800926c:	68b5      	ldr	r5, [r6, #8]
 800926e:	e7df      	b.n	8009230 <_vfiprintf_r+0x20>
 8009270:	4b79      	ldr	r3, [pc, #484]	; (8009458 <_vfiprintf_r+0x248>)
 8009272:	429d      	cmp	r5, r3
 8009274:	bf08      	it	eq
 8009276:	68f5      	ldreq	r5, [r6, #12]
 8009278:	e7da      	b.n	8009230 <_vfiprintf_r+0x20>
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	0598      	lsls	r0, r3, #22
 800927e:	d4ed      	bmi.n	800925c <_vfiprintf_r+0x4c>
 8009280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009282:	f000 fb76 	bl	8009972 <__retarget_lock_release_recursive>
 8009286:	e7e9      	b.n	800925c <_vfiprintf_r+0x4c>
 8009288:	2300      	movs	r3, #0
 800928a:	9309      	str	r3, [sp, #36]	; 0x24
 800928c:	2320      	movs	r3, #32
 800928e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009292:	f8cd 800c 	str.w	r8, [sp, #12]
 8009296:	2330      	movs	r3, #48	; 0x30
 8009298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800945c <_vfiprintf_r+0x24c>
 800929c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a0:	f04f 0901 	mov.w	r9, #1
 80092a4:	4623      	mov	r3, r4
 80092a6:	469a      	mov	sl, r3
 80092a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ac:	b10a      	cbz	r2, 80092b2 <_vfiprintf_r+0xa2>
 80092ae:	2a25      	cmp	r2, #37	; 0x25
 80092b0:	d1f9      	bne.n	80092a6 <_vfiprintf_r+0x96>
 80092b2:	ebba 0b04 	subs.w	fp, sl, r4
 80092b6:	d00b      	beq.n	80092d0 <_vfiprintf_r+0xc0>
 80092b8:	465b      	mov	r3, fp
 80092ba:	4622      	mov	r2, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ff93 	bl	80091ea <__sfputs_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	f000 80aa 	beq.w	800941e <_vfiprintf_r+0x20e>
 80092ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092cc:	445a      	add	r2, fp
 80092ce:	9209      	str	r2, [sp, #36]	; 0x24
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80a2 	beq.w	800941e <_vfiprintf_r+0x20e>
 80092da:	2300      	movs	r3, #0
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f0:	931a      	str	r3, [sp, #104]	; 0x68
 80092f2:	4654      	mov	r4, sl
 80092f4:	2205      	movs	r2, #5
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	4858      	ldr	r0, [pc, #352]	; (800945c <_vfiprintf_r+0x24c>)
 80092fc:	f7f6 ff70 	bl	80001e0 <memchr>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	b9d8      	cbnz	r0, 800933c <_vfiprintf_r+0x12c>
 8009304:	06d1      	lsls	r1, r2, #27
 8009306:	bf44      	itt	mi
 8009308:	2320      	movmi	r3, #32
 800930a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930e:	0713      	lsls	r3, r2, #28
 8009310:	bf44      	itt	mi
 8009312:	232b      	movmi	r3, #43	; 0x2b
 8009314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b2a      	cmp	r3, #42	; 0x2a
 800931e:	d015      	beq.n	800934c <_vfiprintf_r+0x13c>
 8009320:	9a07      	ldr	r2, [sp, #28]
 8009322:	4654      	mov	r4, sl
 8009324:	2000      	movs	r0, #0
 8009326:	f04f 0c0a 	mov.w	ip, #10
 800932a:	4621      	mov	r1, r4
 800932c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009330:	3b30      	subs	r3, #48	; 0x30
 8009332:	2b09      	cmp	r3, #9
 8009334:	d94e      	bls.n	80093d4 <_vfiprintf_r+0x1c4>
 8009336:	b1b0      	cbz	r0, 8009366 <_vfiprintf_r+0x156>
 8009338:	9207      	str	r2, [sp, #28]
 800933a:	e014      	b.n	8009366 <_vfiprintf_r+0x156>
 800933c:	eba0 0308 	sub.w	r3, r0, r8
 8009340:	fa09 f303 	lsl.w	r3, r9, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	46a2      	mov	sl, r4
 800934a:	e7d2      	b.n	80092f2 <_vfiprintf_r+0xe2>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfbb      	ittet	lt
 8009358:	425b      	neglt	r3, r3
 800935a:	f042 0202 	orrlt.w	r2, r2, #2
 800935e:	9307      	strge	r3, [sp, #28]
 8009360:	9307      	strlt	r3, [sp, #28]
 8009362:	bfb8      	it	lt
 8009364:	9204      	strlt	r2, [sp, #16]
 8009366:	7823      	ldrb	r3, [r4, #0]
 8009368:	2b2e      	cmp	r3, #46	; 0x2e
 800936a:	d10c      	bne.n	8009386 <_vfiprintf_r+0x176>
 800936c:	7863      	ldrb	r3, [r4, #1]
 800936e:	2b2a      	cmp	r3, #42	; 0x2a
 8009370:	d135      	bne.n	80093de <_vfiprintf_r+0x1ce>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	1d1a      	adds	r2, r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	9203      	str	r2, [sp, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	bfb8      	it	lt
 800937e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009382:	3402      	adds	r4, #2
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800946c <_vfiprintf_r+0x25c>
 800938a:	7821      	ldrb	r1, [r4, #0]
 800938c:	2203      	movs	r2, #3
 800938e:	4650      	mov	r0, sl
 8009390:	f7f6 ff26 	bl	80001e0 <memchr>
 8009394:	b140      	cbz	r0, 80093a8 <_vfiprintf_r+0x198>
 8009396:	2340      	movs	r3, #64	; 0x40
 8009398:	eba0 000a 	sub.w	r0, r0, sl
 800939c:	fa03 f000 	lsl.w	r0, r3, r0
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	4303      	orrs	r3, r0
 80093a4:	3401      	adds	r4, #1
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ac:	482c      	ldr	r0, [pc, #176]	; (8009460 <_vfiprintf_r+0x250>)
 80093ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b2:	2206      	movs	r2, #6
 80093b4:	f7f6 ff14 	bl	80001e0 <memchr>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d03f      	beq.n	800943c <_vfiprintf_r+0x22c>
 80093bc:	4b29      	ldr	r3, [pc, #164]	; (8009464 <_vfiprintf_r+0x254>)
 80093be:	bb1b      	cbnz	r3, 8009408 <_vfiprintf_r+0x1f8>
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	3307      	adds	r3, #7
 80093c4:	f023 0307 	bic.w	r3, r3, #7
 80093c8:	3308      	adds	r3, #8
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	443b      	add	r3, r7
 80093d0:	9309      	str	r3, [sp, #36]	; 0x24
 80093d2:	e767      	b.n	80092a4 <_vfiprintf_r+0x94>
 80093d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d8:	460c      	mov	r4, r1
 80093da:	2001      	movs	r0, #1
 80093dc:	e7a5      	b.n	800932a <_vfiprintf_r+0x11a>
 80093de:	2300      	movs	r3, #0
 80093e0:	3401      	adds	r4, #1
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f04f 0c0a 	mov.w	ip, #10
 80093ea:	4620      	mov	r0, r4
 80093ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f0:	3a30      	subs	r2, #48	; 0x30
 80093f2:	2a09      	cmp	r2, #9
 80093f4:	d903      	bls.n	80093fe <_vfiprintf_r+0x1ee>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0c5      	beq.n	8009386 <_vfiprintf_r+0x176>
 80093fa:	9105      	str	r1, [sp, #20]
 80093fc:	e7c3      	b.n	8009386 <_vfiprintf_r+0x176>
 80093fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009402:	4604      	mov	r4, r0
 8009404:	2301      	movs	r3, #1
 8009406:	e7f0      	b.n	80093ea <_vfiprintf_r+0x1da>
 8009408:	ab03      	add	r3, sp, #12
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	462a      	mov	r2, r5
 800940e:	4b16      	ldr	r3, [pc, #88]	; (8009468 <_vfiprintf_r+0x258>)
 8009410:	a904      	add	r1, sp, #16
 8009412:	4630      	mov	r0, r6
 8009414:	f3af 8000 	nop.w
 8009418:	4607      	mov	r7, r0
 800941a:	1c78      	adds	r0, r7, #1
 800941c:	d1d6      	bne.n	80093cc <_vfiprintf_r+0x1bc>
 800941e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009420:	07d9      	lsls	r1, r3, #31
 8009422:	d405      	bmi.n	8009430 <_vfiprintf_r+0x220>
 8009424:	89ab      	ldrh	r3, [r5, #12]
 8009426:	059a      	lsls	r2, r3, #22
 8009428:	d402      	bmi.n	8009430 <_vfiprintf_r+0x220>
 800942a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942c:	f000 faa1 	bl	8009972 <__retarget_lock_release_recursive>
 8009430:	89ab      	ldrh	r3, [r5, #12]
 8009432:	065b      	lsls	r3, r3, #25
 8009434:	f53f af12 	bmi.w	800925c <_vfiprintf_r+0x4c>
 8009438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943a:	e711      	b.n	8009260 <_vfiprintf_r+0x50>
 800943c:	ab03      	add	r3, sp, #12
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	462a      	mov	r2, r5
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <_vfiprintf_r+0x258>)
 8009444:	a904      	add	r1, sp, #16
 8009446:	4630      	mov	r0, r6
 8009448:	f7fe fe22 	bl	8008090 <_printf_i>
 800944c:	e7e4      	b.n	8009418 <_vfiprintf_r+0x208>
 800944e:	bf00      	nop
 8009450:	0800a0d0 	.word	0x0800a0d0
 8009454:	0800a0f0 	.word	0x0800a0f0
 8009458:	0800a0b0 	.word	0x0800a0b0
 800945c:	08009ed4 	.word	0x08009ed4
 8009460:	08009ede 	.word	0x08009ede
 8009464:	00000000 	.word	0x00000000
 8009468:	080091eb 	.word	0x080091eb
 800946c:	08009eda 	.word	0x08009eda

08009470 <__swbuf_r>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	460e      	mov	r6, r1
 8009474:	4614      	mov	r4, r2
 8009476:	4605      	mov	r5, r0
 8009478:	b118      	cbz	r0, 8009482 <__swbuf_r+0x12>
 800947a:	6983      	ldr	r3, [r0, #24]
 800947c:	b90b      	cbnz	r3, 8009482 <__swbuf_r+0x12>
 800947e:	f000 f9d9 	bl	8009834 <__sinit>
 8009482:	4b21      	ldr	r3, [pc, #132]	; (8009508 <__swbuf_r+0x98>)
 8009484:	429c      	cmp	r4, r3
 8009486:	d12b      	bne.n	80094e0 <__swbuf_r+0x70>
 8009488:	686c      	ldr	r4, [r5, #4]
 800948a:	69a3      	ldr	r3, [r4, #24]
 800948c:	60a3      	str	r3, [r4, #8]
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	071a      	lsls	r2, r3, #28
 8009492:	d52f      	bpl.n	80094f4 <__swbuf_r+0x84>
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	b36b      	cbz	r3, 80094f4 <__swbuf_r+0x84>
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	6820      	ldr	r0, [r4, #0]
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	6963      	ldr	r3, [r4, #20]
 80094a0:	b2f6      	uxtb	r6, r6
 80094a2:	4283      	cmp	r3, r0
 80094a4:	4637      	mov	r7, r6
 80094a6:	dc04      	bgt.n	80094b2 <__swbuf_r+0x42>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 f92e 	bl	800970c <_fflush_r>
 80094b0:	bb30      	cbnz	r0, 8009500 <__swbuf_r+0x90>
 80094b2:	68a3      	ldr	r3, [r4, #8]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	60a3      	str	r3, [r4, #8]
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	6022      	str	r2, [r4, #0]
 80094be:	701e      	strb	r6, [r3, #0]
 80094c0:	6963      	ldr	r3, [r4, #20]
 80094c2:	3001      	adds	r0, #1
 80094c4:	4283      	cmp	r3, r0
 80094c6:	d004      	beq.n	80094d2 <__swbuf_r+0x62>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	07db      	lsls	r3, r3, #31
 80094cc:	d506      	bpl.n	80094dc <__swbuf_r+0x6c>
 80094ce:	2e0a      	cmp	r6, #10
 80094d0:	d104      	bne.n	80094dc <__swbuf_r+0x6c>
 80094d2:	4621      	mov	r1, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f000 f919 	bl	800970c <_fflush_r>
 80094da:	b988      	cbnz	r0, 8009500 <__swbuf_r+0x90>
 80094dc:	4638      	mov	r0, r7
 80094de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <__swbuf_r+0x9c>)
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d101      	bne.n	80094ea <__swbuf_r+0x7a>
 80094e6:	68ac      	ldr	r4, [r5, #8]
 80094e8:	e7cf      	b.n	800948a <__swbuf_r+0x1a>
 80094ea:	4b09      	ldr	r3, [pc, #36]	; (8009510 <__swbuf_r+0xa0>)
 80094ec:	429c      	cmp	r4, r3
 80094ee:	bf08      	it	eq
 80094f0:	68ec      	ldreq	r4, [r5, #12]
 80094f2:	e7ca      	b.n	800948a <__swbuf_r+0x1a>
 80094f4:	4621      	mov	r1, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f80c 	bl	8009514 <__swsetup_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0cb      	beq.n	8009498 <__swbuf_r+0x28>
 8009500:	f04f 37ff 	mov.w	r7, #4294967295
 8009504:	e7ea      	b.n	80094dc <__swbuf_r+0x6c>
 8009506:	bf00      	nop
 8009508:	0800a0d0 	.word	0x0800a0d0
 800950c:	0800a0f0 	.word	0x0800a0f0
 8009510:	0800a0b0 	.word	0x0800a0b0

08009514 <__swsetup_r>:
 8009514:	4b32      	ldr	r3, [pc, #200]	; (80095e0 <__swsetup_r+0xcc>)
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	681d      	ldr	r5, [r3, #0]
 800951a:	4606      	mov	r6, r0
 800951c:	460c      	mov	r4, r1
 800951e:	b125      	cbz	r5, 800952a <__swsetup_r+0x16>
 8009520:	69ab      	ldr	r3, [r5, #24]
 8009522:	b913      	cbnz	r3, 800952a <__swsetup_r+0x16>
 8009524:	4628      	mov	r0, r5
 8009526:	f000 f985 	bl	8009834 <__sinit>
 800952a:	4b2e      	ldr	r3, [pc, #184]	; (80095e4 <__swsetup_r+0xd0>)
 800952c:	429c      	cmp	r4, r3
 800952e:	d10f      	bne.n	8009550 <__swsetup_r+0x3c>
 8009530:	686c      	ldr	r4, [r5, #4]
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009538:	0719      	lsls	r1, r3, #28
 800953a:	d42c      	bmi.n	8009596 <__swsetup_r+0x82>
 800953c:	06dd      	lsls	r5, r3, #27
 800953e:	d411      	bmi.n	8009564 <__swsetup_r+0x50>
 8009540:	2309      	movs	r3, #9
 8009542:	6033      	str	r3, [r6, #0]
 8009544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e03e      	b.n	80095ce <__swsetup_r+0xba>
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <__swsetup_r+0xd4>)
 8009552:	429c      	cmp	r4, r3
 8009554:	d101      	bne.n	800955a <__swsetup_r+0x46>
 8009556:	68ac      	ldr	r4, [r5, #8]
 8009558:	e7eb      	b.n	8009532 <__swsetup_r+0x1e>
 800955a:	4b24      	ldr	r3, [pc, #144]	; (80095ec <__swsetup_r+0xd8>)
 800955c:	429c      	cmp	r4, r3
 800955e:	bf08      	it	eq
 8009560:	68ec      	ldreq	r4, [r5, #12]
 8009562:	e7e6      	b.n	8009532 <__swsetup_r+0x1e>
 8009564:	0758      	lsls	r0, r3, #29
 8009566:	d512      	bpl.n	800958e <__swsetup_r+0x7a>
 8009568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800956a:	b141      	cbz	r1, 800957e <__swsetup_r+0x6a>
 800956c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <__swsetup_r+0x66>
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff fdcd 	bl	8009114 <_free_r>
 800957a:	2300      	movs	r3, #0
 800957c:	6363      	str	r3, [r4, #52]	; 0x34
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	2300      	movs	r3, #0
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f043 0308 	orr.w	r3, r3, #8
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	b94b      	cbnz	r3, 80095ae <__swsetup_r+0x9a>
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a4:	d003      	beq.n	80095ae <__swsetup_r+0x9a>
 80095a6:	4621      	mov	r1, r4
 80095a8:	4630      	mov	r0, r6
 80095aa:	f000 fa09 	bl	80099c0 <__smakebuf_r>
 80095ae:	89a0      	ldrh	r0, [r4, #12]
 80095b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095b4:	f010 0301 	ands.w	r3, r0, #1
 80095b8:	d00a      	beq.n	80095d0 <__swsetup_r+0xbc>
 80095ba:	2300      	movs	r3, #0
 80095bc:	60a3      	str	r3, [r4, #8]
 80095be:	6963      	ldr	r3, [r4, #20]
 80095c0:	425b      	negs	r3, r3
 80095c2:	61a3      	str	r3, [r4, #24]
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	b943      	cbnz	r3, 80095da <__swsetup_r+0xc6>
 80095c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095cc:	d1ba      	bne.n	8009544 <__swsetup_r+0x30>
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	0781      	lsls	r1, r0, #30
 80095d2:	bf58      	it	pl
 80095d4:	6963      	ldrpl	r3, [r4, #20]
 80095d6:	60a3      	str	r3, [r4, #8]
 80095d8:	e7f4      	b.n	80095c4 <__swsetup_r+0xb0>
 80095da:	2000      	movs	r0, #0
 80095dc:	e7f7      	b.n	80095ce <__swsetup_r+0xba>
 80095de:	bf00      	nop
 80095e0:	20000018 	.word	0x20000018
 80095e4:	0800a0d0 	.word	0x0800a0d0
 80095e8:	0800a0f0 	.word	0x0800a0f0
 80095ec:	0800a0b0 	.word	0x0800a0b0

080095f0 <abort>:
 80095f0:	b508      	push	{r3, lr}
 80095f2:	2006      	movs	r0, #6
 80095f4:	f000 fa4c 	bl	8009a90 <raise>
 80095f8:	2001      	movs	r0, #1
 80095fa:	f7f8 fedb 	bl	80023b4 <_exit>
	...

08009600 <__sflush_r>:
 8009600:	898a      	ldrh	r2, [r1, #12]
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	4605      	mov	r5, r0
 8009608:	0710      	lsls	r0, r2, #28
 800960a:	460c      	mov	r4, r1
 800960c:	d458      	bmi.n	80096c0 <__sflush_r+0xc0>
 800960e:	684b      	ldr	r3, [r1, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	dc05      	bgt.n	8009620 <__sflush_r+0x20>
 8009614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	dc02      	bgt.n	8009620 <__sflush_r+0x20>
 800961a:	2000      	movs	r0, #0
 800961c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009622:	2e00      	cmp	r6, #0
 8009624:	d0f9      	beq.n	800961a <__sflush_r+0x1a>
 8009626:	2300      	movs	r3, #0
 8009628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800962c:	682f      	ldr	r7, [r5, #0]
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	d032      	beq.n	8009698 <__sflush_r+0x98>
 8009632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	075a      	lsls	r2, r3, #29
 8009638:	d505      	bpl.n	8009646 <__sflush_r+0x46>
 800963a:	6863      	ldr	r3, [r4, #4]
 800963c:	1ac0      	subs	r0, r0, r3
 800963e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009640:	b10b      	cbz	r3, 8009646 <__sflush_r+0x46>
 8009642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009644:	1ac0      	subs	r0, r0, r3
 8009646:	2300      	movs	r3, #0
 8009648:	4602      	mov	r2, r0
 800964a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800964c:	6a21      	ldr	r1, [r4, #32]
 800964e:	4628      	mov	r0, r5
 8009650:	47b0      	blx	r6
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	d106      	bne.n	8009666 <__sflush_r+0x66>
 8009658:	6829      	ldr	r1, [r5, #0]
 800965a:	291d      	cmp	r1, #29
 800965c:	d82c      	bhi.n	80096b8 <__sflush_r+0xb8>
 800965e:	4a2a      	ldr	r2, [pc, #168]	; (8009708 <__sflush_r+0x108>)
 8009660:	40ca      	lsrs	r2, r1
 8009662:	07d6      	lsls	r6, r2, #31
 8009664:	d528      	bpl.n	80096b8 <__sflush_r+0xb8>
 8009666:	2200      	movs	r2, #0
 8009668:	6062      	str	r2, [r4, #4]
 800966a:	04d9      	lsls	r1, r3, #19
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	6022      	str	r2, [r4, #0]
 8009670:	d504      	bpl.n	800967c <__sflush_r+0x7c>
 8009672:	1c42      	adds	r2, r0, #1
 8009674:	d101      	bne.n	800967a <__sflush_r+0x7a>
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	b903      	cbnz	r3, 800967c <__sflush_r+0x7c>
 800967a:	6560      	str	r0, [r4, #84]	; 0x54
 800967c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800967e:	602f      	str	r7, [r5, #0]
 8009680:	2900      	cmp	r1, #0
 8009682:	d0ca      	beq.n	800961a <__sflush_r+0x1a>
 8009684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <__sflush_r+0x92>
 800968c:	4628      	mov	r0, r5
 800968e:	f7ff fd41 	bl	8009114 <_free_r>
 8009692:	2000      	movs	r0, #0
 8009694:	6360      	str	r0, [r4, #52]	; 0x34
 8009696:	e7c1      	b.n	800961c <__sflush_r+0x1c>
 8009698:	6a21      	ldr	r1, [r4, #32]
 800969a:	2301      	movs	r3, #1
 800969c:	4628      	mov	r0, r5
 800969e:	47b0      	blx	r6
 80096a0:	1c41      	adds	r1, r0, #1
 80096a2:	d1c7      	bne.n	8009634 <__sflush_r+0x34>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0c4      	beq.n	8009634 <__sflush_r+0x34>
 80096aa:	2b1d      	cmp	r3, #29
 80096ac:	d001      	beq.n	80096b2 <__sflush_r+0xb2>
 80096ae:	2b16      	cmp	r3, #22
 80096b0:	d101      	bne.n	80096b6 <__sflush_r+0xb6>
 80096b2:	602f      	str	r7, [r5, #0]
 80096b4:	e7b1      	b.n	800961a <__sflush_r+0x1a>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	e7ad      	b.n	800961c <__sflush_r+0x1c>
 80096c0:	690f      	ldr	r7, [r1, #16]
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d0a9      	beq.n	800961a <__sflush_r+0x1a>
 80096c6:	0793      	lsls	r3, r2, #30
 80096c8:	680e      	ldr	r6, [r1, #0]
 80096ca:	bf08      	it	eq
 80096cc:	694b      	ldreq	r3, [r1, #20]
 80096ce:	600f      	str	r7, [r1, #0]
 80096d0:	bf18      	it	ne
 80096d2:	2300      	movne	r3, #0
 80096d4:	eba6 0807 	sub.w	r8, r6, r7
 80096d8:	608b      	str	r3, [r1, #8]
 80096da:	f1b8 0f00 	cmp.w	r8, #0
 80096de:	dd9c      	ble.n	800961a <__sflush_r+0x1a>
 80096e0:	6a21      	ldr	r1, [r4, #32]
 80096e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096e4:	4643      	mov	r3, r8
 80096e6:	463a      	mov	r2, r7
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b0      	blx	r6
 80096ec:	2800      	cmp	r0, #0
 80096ee:	dc06      	bgt.n	80096fe <__sflush_r+0xfe>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	e78e      	b.n	800961c <__sflush_r+0x1c>
 80096fe:	4407      	add	r7, r0
 8009700:	eba8 0800 	sub.w	r8, r8, r0
 8009704:	e7e9      	b.n	80096da <__sflush_r+0xda>
 8009706:	bf00      	nop
 8009708:	20400001 	.word	0x20400001

0800970c <_fflush_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	690b      	ldr	r3, [r1, #16]
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	b913      	cbnz	r3, 800971c <_fflush_r+0x10>
 8009716:	2500      	movs	r5, #0
 8009718:	4628      	mov	r0, r5
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	b118      	cbz	r0, 8009726 <_fflush_r+0x1a>
 800971e:	6983      	ldr	r3, [r0, #24]
 8009720:	b90b      	cbnz	r3, 8009726 <_fflush_r+0x1a>
 8009722:	f000 f887 	bl	8009834 <__sinit>
 8009726:	4b14      	ldr	r3, [pc, #80]	; (8009778 <_fflush_r+0x6c>)
 8009728:	429c      	cmp	r4, r3
 800972a:	d11b      	bne.n	8009764 <_fflush_r+0x58>
 800972c:	686c      	ldr	r4, [r5, #4]
 800972e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0ef      	beq.n	8009716 <_fflush_r+0xa>
 8009736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009738:	07d0      	lsls	r0, r2, #31
 800973a:	d404      	bmi.n	8009746 <_fflush_r+0x3a>
 800973c:	0599      	lsls	r1, r3, #22
 800973e:	d402      	bmi.n	8009746 <_fflush_r+0x3a>
 8009740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009742:	f000 f915 	bl	8009970 <__retarget_lock_acquire_recursive>
 8009746:	4628      	mov	r0, r5
 8009748:	4621      	mov	r1, r4
 800974a:	f7ff ff59 	bl	8009600 <__sflush_r>
 800974e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009750:	07da      	lsls	r2, r3, #31
 8009752:	4605      	mov	r5, r0
 8009754:	d4e0      	bmi.n	8009718 <_fflush_r+0xc>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	059b      	lsls	r3, r3, #22
 800975a:	d4dd      	bmi.n	8009718 <_fflush_r+0xc>
 800975c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800975e:	f000 f908 	bl	8009972 <__retarget_lock_release_recursive>
 8009762:	e7d9      	b.n	8009718 <_fflush_r+0xc>
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <_fflush_r+0x70>)
 8009766:	429c      	cmp	r4, r3
 8009768:	d101      	bne.n	800976e <_fflush_r+0x62>
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	e7df      	b.n	800972e <_fflush_r+0x22>
 800976e:	4b04      	ldr	r3, [pc, #16]	; (8009780 <_fflush_r+0x74>)
 8009770:	429c      	cmp	r4, r3
 8009772:	bf08      	it	eq
 8009774:	68ec      	ldreq	r4, [r5, #12]
 8009776:	e7da      	b.n	800972e <_fflush_r+0x22>
 8009778:	0800a0d0 	.word	0x0800a0d0
 800977c:	0800a0f0 	.word	0x0800a0f0
 8009780:	0800a0b0 	.word	0x0800a0b0

08009784 <std>:
 8009784:	2300      	movs	r3, #0
 8009786:	b510      	push	{r4, lr}
 8009788:	4604      	mov	r4, r0
 800978a:	e9c0 3300 	strd	r3, r3, [r0]
 800978e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009792:	6083      	str	r3, [r0, #8]
 8009794:	8181      	strh	r1, [r0, #12]
 8009796:	6643      	str	r3, [r0, #100]	; 0x64
 8009798:	81c2      	strh	r2, [r0, #14]
 800979a:	6183      	str	r3, [r0, #24]
 800979c:	4619      	mov	r1, r3
 800979e:	2208      	movs	r2, #8
 80097a0:	305c      	adds	r0, #92	; 0x5c
 80097a2:	f7fc f9bf 	bl	8005b24 <memset>
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <std+0x38>)
 80097a8:	6263      	str	r3, [r4, #36]	; 0x24
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <std+0x3c>)
 80097ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <std+0x40>)
 80097b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <std+0x44>)
 80097b4:	6224      	str	r4, [r4, #32]
 80097b6:	6323      	str	r3, [r4, #48]	; 0x30
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	bf00      	nop
 80097bc:	08009ac9 	.word	0x08009ac9
 80097c0:	08009aeb 	.word	0x08009aeb
 80097c4:	08009b23 	.word	0x08009b23
 80097c8:	08009b47 	.word	0x08009b47

080097cc <_cleanup_r>:
 80097cc:	4901      	ldr	r1, [pc, #4]	; (80097d4 <_cleanup_r+0x8>)
 80097ce:	f000 b8af 	b.w	8009930 <_fwalk_reent>
 80097d2:	bf00      	nop
 80097d4:	0800970d 	.word	0x0800970d

080097d8 <__sfmoreglue>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	2268      	movs	r2, #104	; 0x68
 80097dc:	1e4d      	subs	r5, r1, #1
 80097de:	4355      	muls	r5, r2
 80097e0:	460e      	mov	r6, r1
 80097e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097e6:	f7fe f9e7 	bl	8007bb8 <_malloc_r>
 80097ea:	4604      	mov	r4, r0
 80097ec:	b140      	cbz	r0, 8009800 <__sfmoreglue+0x28>
 80097ee:	2100      	movs	r1, #0
 80097f0:	e9c0 1600 	strd	r1, r6, [r0]
 80097f4:	300c      	adds	r0, #12
 80097f6:	60a0      	str	r0, [r4, #8]
 80097f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097fc:	f7fc f992 	bl	8005b24 <memset>
 8009800:	4620      	mov	r0, r4
 8009802:	bd70      	pop	{r4, r5, r6, pc}

08009804 <__sfp_lock_acquire>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__sfp_lock_acquire+0x8>)
 8009806:	f000 b8b3 	b.w	8009970 <__retarget_lock_acquire_recursive>
 800980a:	bf00      	nop
 800980c:	200004e5 	.word	0x200004e5

08009810 <__sfp_lock_release>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__sfp_lock_release+0x8>)
 8009812:	f000 b8ae 	b.w	8009972 <__retarget_lock_release_recursive>
 8009816:	bf00      	nop
 8009818:	200004e5 	.word	0x200004e5

0800981c <__sinit_lock_acquire>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__sinit_lock_acquire+0x8>)
 800981e:	f000 b8a7 	b.w	8009970 <__retarget_lock_acquire_recursive>
 8009822:	bf00      	nop
 8009824:	200004e6 	.word	0x200004e6

08009828 <__sinit_lock_release>:
 8009828:	4801      	ldr	r0, [pc, #4]	; (8009830 <__sinit_lock_release+0x8>)
 800982a:	f000 b8a2 	b.w	8009972 <__retarget_lock_release_recursive>
 800982e:	bf00      	nop
 8009830:	200004e6 	.word	0x200004e6

08009834 <__sinit>:
 8009834:	b510      	push	{r4, lr}
 8009836:	4604      	mov	r4, r0
 8009838:	f7ff fff0 	bl	800981c <__sinit_lock_acquire>
 800983c:	69a3      	ldr	r3, [r4, #24]
 800983e:	b11b      	cbz	r3, 8009848 <__sinit+0x14>
 8009840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009844:	f7ff bff0 	b.w	8009828 <__sinit_lock_release>
 8009848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800984c:	6523      	str	r3, [r4, #80]	; 0x50
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <__sinit+0x68>)
 8009850:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <__sinit+0x6c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	62a2      	str	r2, [r4, #40]	; 0x28
 8009856:	42a3      	cmp	r3, r4
 8009858:	bf04      	itt	eq
 800985a:	2301      	moveq	r3, #1
 800985c:	61a3      	streq	r3, [r4, #24]
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f820 	bl	80098a4 <__sfp>
 8009864:	6060      	str	r0, [r4, #4]
 8009866:	4620      	mov	r0, r4
 8009868:	f000 f81c 	bl	80098a4 <__sfp>
 800986c:	60a0      	str	r0, [r4, #8]
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f818 	bl	80098a4 <__sfp>
 8009874:	2200      	movs	r2, #0
 8009876:	60e0      	str	r0, [r4, #12]
 8009878:	2104      	movs	r1, #4
 800987a:	6860      	ldr	r0, [r4, #4]
 800987c:	f7ff ff82 	bl	8009784 <std>
 8009880:	68a0      	ldr	r0, [r4, #8]
 8009882:	2201      	movs	r2, #1
 8009884:	2109      	movs	r1, #9
 8009886:	f7ff ff7d 	bl	8009784 <std>
 800988a:	68e0      	ldr	r0, [r4, #12]
 800988c:	2202      	movs	r2, #2
 800988e:	2112      	movs	r1, #18
 8009890:	f7ff ff78 	bl	8009784 <std>
 8009894:	2301      	movs	r3, #1
 8009896:	61a3      	str	r3, [r4, #24]
 8009898:	e7d2      	b.n	8009840 <__sinit+0xc>
 800989a:	bf00      	nop
 800989c:	08009c78 	.word	0x08009c78
 80098a0:	080097cd 	.word	0x080097cd

080098a4 <__sfp>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	4607      	mov	r7, r0
 80098a8:	f7ff ffac 	bl	8009804 <__sfp_lock_acquire>
 80098ac:	4b1e      	ldr	r3, [pc, #120]	; (8009928 <__sfp+0x84>)
 80098ae:	681e      	ldr	r6, [r3, #0]
 80098b0:	69b3      	ldr	r3, [r6, #24]
 80098b2:	b913      	cbnz	r3, 80098ba <__sfp+0x16>
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff ffbd 	bl	8009834 <__sinit>
 80098ba:	3648      	adds	r6, #72	; 0x48
 80098bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	d503      	bpl.n	80098cc <__sfp+0x28>
 80098c4:	6833      	ldr	r3, [r6, #0]
 80098c6:	b30b      	cbz	r3, 800990c <__sfp+0x68>
 80098c8:	6836      	ldr	r6, [r6, #0]
 80098ca:	e7f7      	b.n	80098bc <__sfp+0x18>
 80098cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098d0:	b9d5      	cbnz	r5, 8009908 <__sfp+0x64>
 80098d2:	4b16      	ldr	r3, [pc, #88]	; (800992c <__sfp+0x88>)
 80098d4:	60e3      	str	r3, [r4, #12]
 80098d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098da:	6665      	str	r5, [r4, #100]	; 0x64
 80098dc:	f000 f847 	bl	800996e <__retarget_lock_init_recursive>
 80098e0:	f7ff ff96 	bl	8009810 <__sfp_lock_release>
 80098e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098ec:	6025      	str	r5, [r4, #0]
 80098ee:	61a5      	str	r5, [r4, #24]
 80098f0:	2208      	movs	r2, #8
 80098f2:	4629      	mov	r1, r5
 80098f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098f8:	f7fc f914 	bl	8005b24 <memset>
 80098fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009904:	4620      	mov	r0, r4
 8009906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009908:	3468      	adds	r4, #104	; 0x68
 800990a:	e7d9      	b.n	80098c0 <__sfp+0x1c>
 800990c:	2104      	movs	r1, #4
 800990e:	4638      	mov	r0, r7
 8009910:	f7ff ff62 	bl	80097d8 <__sfmoreglue>
 8009914:	4604      	mov	r4, r0
 8009916:	6030      	str	r0, [r6, #0]
 8009918:	2800      	cmp	r0, #0
 800991a:	d1d5      	bne.n	80098c8 <__sfp+0x24>
 800991c:	f7ff ff78 	bl	8009810 <__sfp_lock_release>
 8009920:	230c      	movs	r3, #12
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	e7ee      	b.n	8009904 <__sfp+0x60>
 8009926:	bf00      	nop
 8009928:	08009c78 	.word	0x08009c78
 800992c:	ffff0001 	.word	0xffff0001

08009930 <_fwalk_reent>:
 8009930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009934:	4606      	mov	r6, r0
 8009936:	4688      	mov	r8, r1
 8009938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800993c:	2700      	movs	r7, #0
 800993e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009942:	f1b9 0901 	subs.w	r9, r9, #1
 8009946:	d505      	bpl.n	8009954 <_fwalk_reent+0x24>
 8009948:	6824      	ldr	r4, [r4, #0]
 800994a:	2c00      	cmp	r4, #0
 800994c:	d1f7      	bne.n	800993e <_fwalk_reent+0xe>
 800994e:	4638      	mov	r0, r7
 8009950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009954:	89ab      	ldrh	r3, [r5, #12]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d907      	bls.n	800996a <_fwalk_reent+0x3a>
 800995a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800995e:	3301      	adds	r3, #1
 8009960:	d003      	beq.n	800996a <_fwalk_reent+0x3a>
 8009962:	4629      	mov	r1, r5
 8009964:	4630      	mov	r0, r6
 8009966:	47c0      	blx	r8
 8009968:	4307      	orrs	r7, r0
 800996a:	3568      	adds	r5, #104	; 0x68
 800996c:	e7e9      	b.n	8009942 <_fwalk_reent+0x12>

0800996e <__retarget_lock_init_recursive>:
 800996e:	4770      	bx	lr

08009970 <__retarget_lock_acquire_recursive>:
 8009970:	4770      	bx	lr

08009972 <__retarget_lock_release_recursive>:
 8009972:	4770      	bx	lr

08009974 <__swhatbuf_r>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	460e      	mov	r6, r1
 8009978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997c:	2900      	cmp	r1, #0
 800997e:	b096      	sub	sp, #88	; 0x58
 8009980:	4614      	mov	r4, r2
 8009982:	461d      	mov	r5, r3
 8009984:	da08      	bge.n	8009998 <__swhatbuf_r+0x24>
 8009986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	061a      	lsls	r2, r3, #24
 8009990:	d410      	bmi.n	80099b4 <__swhatbuf_r+0x40>
 8009992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009996:	e00e      	b.n	80099b6 <__swhatbuf_r+0x42>
 8009998:	466a      	mov	r2, sp
 800999a:	f000 f8fb 	bl	8009b94 <_fstat_r>
 800999e:	2800      	cmp	r0, #0
 80099a0:	dbf1      	blt.n	8009986 <__swhatbuf_r+0x12>
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ac:	425a      	negs	r2, r3
 80099ae:	415a      	adcs	r2, r3
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	e7ee      	b.n	8009992 <__swhatbuf_r+0x1e>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	2000      	movs	r0, #0
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	b016      	add	sp, #88	; 0x58
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080099c0 <__smakebuf_r>:
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c4:	079d      	lsls	r5, r3, #30
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	d507      	bpl.n	80099dc <__smakebuf_r+0x1c>
 80099cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	2301      	movs	r3, #1
 80099d6:	6163      	str	r3, [r4, #20]
 80099d8:	b002      	add	sp, #8
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	ab01      	add	r3, sp, #4
 80099de:	466a      	mov	r2, sp
 80099e0:	f7ff ffc8 	bl	8009974 <__swhatbuf_r>
 80099e4:	9900      	ldr	r1, [sp, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7fe f8e5 	bl	8007bb8 <_malloc_r>
 80099ee:	b948      	cbnz	r0, 8009a04 <__smakebuf_r+0x44>
 80099f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d4ef      	bmi.n	80099d8 <__smakebuf_r+0x18>
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	f043 0302 	orr.w	r3, r3, #2
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7e3      	b.n	80099cc <__smakebuf_r+0xc>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <__smakebuf_r+0x7c>)
 8009a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	6020      	str	r0, [r4, #0]
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a10:	81a3      	strh	r3, [r4, #12]
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	6163      	str	r3, [r4, #20]
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	6120      	str	r0, [r4, #16]
 8009a1a:	b15b      	cbz	r3, 8009a34 <__smakebuf_r+0x74>
 8009a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 f8c9 	bl	8009bb8 <_isatty_r>
 8009a26:	b128      	cbz	r0, 8009a34 <__smakebuf_r+0x74>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	89a0      	ldrh	r0, [r4, #12]
 8009a36:	4305      	orrs	r5, r0
 8009a38:	81a5      	strh	r5, [r4, #12]
 8009a3a:	e7cd      	b.n	80099d8 <__smakebuf_r+0x18>
 8009a3c:	080097cd 	.word	0x080097cd

08009a40 <_raise_r>:
 8009a40:	291f      	cmp	r1, #31
 8009a42:	b538      	push	{r3, r4, r5, lr}
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	d904      	bls.n	8009a54 <_raise_r+0x14>
 8009a4a:	2316      	movs	r3, #22
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a56:	b112      	cbz	r2, 8009a5e <_raise_r+0x1e>
 8009a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a5c:	b94b      	cbnz	r3, 8009a72 <_raise_r+0x32>
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 f830 	bl	8009ac4 <_getpid_r>
 8009a64:	462a      	mov	r2, r5
 8009a66:	4601      	mov	r1, r0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a6e:	f000 b817 	b.w	8009aa0 <_kill_r>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d00a      	beq.n	8009a8c <_raise_r+0x4c>
 8009a76:	1c59      	adds	r1, r3, #1
 8009a78:	d103      	bne.n	8009a82 <_raise_r+0x42>
 8009a7a:	2316      	movs	r3, #22
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	e7e7      	b.n	8009a52 <_raise_r+0x12>
 8009a82:	2400      	movs	r4, #0
 8009a84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a88:	4628      	mov	r0, r5
 8009a8a:	4798      	blx	r3
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7e0      	b.n	8009a52 <_raise_r+0x12>

08009a90 <raise>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <raise+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f7ff bfd3 	b.w	8009a40 <_raise_r>
 8009a9a:	bf00      	nop
 8009a9c:	20000018 	.word	0x20000018

08009aa0 <_kill_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	; (8009ac0 <_kill_r+0x20>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4611      	mov	r1, r2
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	f7f8 fc71 	bl	8002394 <_kill>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	d102      	bne.n	8009abc <_kill_r+0x1c>
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	b103      	cbz	r3, 8009abc <_kill_r+0x1c>
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
 8009abe:	bf00      	nop
 8009ac0:	200004e0 	.word	0x200004e0

08009ac4 <_getpid_r>:
 8009ac4:	f7f8 bc5e 	b.w	8002384 <_getpid>

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f000 f894 	bl	8009bfc <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bfab      	itete	ge
 8009ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ada:	89a3      	ldrhlt	r3, [r4, #12]
 8009adc:	181b      	addge	r3, r3, r0
 8009ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ae2:	bfac      	ite	ge
 8009ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ae6:	81a3      	strhlt	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__swrite>:
 8009aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	461f      	mov	r7, r3
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	05db      	lsls	r3, r3, #23
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	4616      	mov	r6, r2
 8009afa:	d505      	bpl.n	8009b08 <__swrite+0x1e>
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	2302      	movs	r3, #2
 8009b02:	2200      	movs	r2, #0
 8009b04:	f000 f868 	bl	8009bd8 <_lseek_r>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	f000 b817 	b.w	8009b50 <_write_r>

08009b22 <__sseek>:
 8009b22:	b510      	push	{r4, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2a:	f000 f855 	bl	8009bd8 <_lseek_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	bf15      	itete	ne
 8009b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b3e:	81a3      	strheq	r3, [r4, #12]
 8009b40:	bf18      	it	ne
 8009b42:	81a3      	strhne	r3, [r4, #12]
 8009b44:	bd10      	pop	{r4, pc}

08009b46 <__sclose>:
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 b813 	b.w	8009b74 <_close_r>
	...

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_write_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f8 fc4f 	bl	8002402 <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	200004e0 	.word	0x200004e0

08009b74 <_close_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_close_r+0x1c>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f8 fc5b 	bl	800243a <_close>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_close_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_close_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	200004e0 	.word	0x200004e0

08009b94 <_fstat_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	; (8009bb4 <_fstat_r+0x20>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	f7f8 fc56 	bl	8002452 <_fstat>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d102      	bne.n	8009bb0 <_fstat_r+0x1c>
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	b103      	cbz	r3, 8009bb0 <_fstat_r+0x1c>
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	bd38      	pop	{r3, r4, r5, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200004e0 	.word	0x200004e0

08009bb8 <_isatty_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_isatty_r+0x1c>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f8 fc55 	bl	8002472 <_isatty>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_isatty_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_isatty_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	200004e0 	.word	0x200004e0

08009bd8 <_lseek_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	; (8009bf8 <_lseek_r+0x20>)
 8009bdc:	4604      	mov	r4, r0
 8009bde:	4608      	mov	r0, r1
 8009be0:	4611      	mov	r1, r2
 8009be2:	2200      	movs	r2, #0
 8009be4:	602a      	str	r2, [r5, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f7f8 fc4e 	bl	8002488 <_lseek>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_lseek_r+0x1e>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_lseek_r+0x1e>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	200004e0 	.word	0x200004e0

08009bfc <_read_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d07      	ldr	r5, [pc, #28]	; (8009c1c <_read_r+0x20>)
 8009c00:	4604      	mov	r4, r0
 8009c02:	4608      	mov	r0, r1
 8009c04:	4611      	mov	r1, r2
 8009c06:	2200      	movs	r2, #0
 8009c08:	602a      	str	r2, [r5, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f7f8 fbdc 	bl	80023c8 <_read>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_read_r+0x1e>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_read_r+0x1e>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	200004e0 	.word	0x200004e0

08009c20 <_init>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	bf00      	nop
 8009c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c26:	bc08      	pop	{r3}
 8009c28:	469e      	mov	lr, r3
 8009c2a:	4770      	bx	lr

08009c2c <_fini>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr
