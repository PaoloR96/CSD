
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009cd8  08009cd8  00019cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1b0  0800a1b0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1b0  0800a1b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a1b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000002fc  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfdc  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002231  00000000  00000000  0002d1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000868  00000000  00000000  0002fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ecb6  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db1d  00000000  00000000  0004f2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af9a0  00000000  00000000  0005cdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c763  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa4  00000000  00000000  0010c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cc0 	.word	0x08009cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009cc0 	.word	0x08009cc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff39 	bl	8000adc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff6f 	bl	8000b7c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff60 	bl	8000b7c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <CutString>:
 *  Created on: Jun 22, 2023
 *      Author: Utente
 */
# include "ManageStr.h"
Stringa_TypeDef str;
Stringa_TypeDef CutString(char* buffer){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]

	// Troviamo l'indice dei caratteri '+' e '-' nel buffer
	    int plus_index = strchr(buffer, '+') - buffer;
 8000cd2:	212b      	movs	r1, #43	; 0x2b
 8000cd4:	6838      	ldr	r0, [r7, #0]
 8000cd6:	f004 ff11 	bl	8005afc <strchr>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
	    int minus_index = strchr(buffer, '-') - buffer;
 8000ce2:	212d      	movs	r1, #45	; 0x2d
 8000ce4:	6838      	ldr	r0, [r7, #0]
 8000ce6:	f004 ff09 	bl	8005afc <strchr>
 8000cea:	4602      	mov	r2, r0
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	653b      	str	r3, [r7, #80]	; 0x50

	    // Estraiamo la stringa contenente il valore della temperatura
	    char temp_str[MAX_BUFFER_LENGTH];
	    strncpy(temp_str, buffer, plus_index);
 8000cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf8:	6839      	ldr	r1, [r7, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 ff0b 	bl	8005b16 <strncpy>
	    temp_str[plus_index] = '\0';
 8000d00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d06:	4413      	add	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

	    // Estraiamo la stringa contenente il valore dell'umidità
	    char hmdy_str[MAX_BUFFER_LENGTH];
	    strncpy(hmdy_str, buffer + plus_index + 1, minus_index - plus_index - 1);
 8000d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d0e:	3301      	adds	r3, #1
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	18d1      	adds	r1, r2, r3
 8000d14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fef7 	bl	8005b16 <strncpy>
	    hmdy_str[minus_index - plus_index - 1] = '\0';
 8000d28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	3358      	adds	r3, #88	; 0x58
 8000d32:	443b      	add	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	f803 2c3c 	strb.w	r2, [r3, #-60]

	    // Estraiamo la stringa contenente il valore della modalità
	    char modo_str[MAX_BUFFER_LENGTH];
	    strncpy(modo_str, buffer + minus_index + 1, MAX_BUFFER_LENGTH - minus_index - 1);
 8000d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	18d1      	adds	r1, r2, r3
 8000d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d44:	f1c3 0313 	rsb	r3, r3, #19
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 fee1 	bl	8005b16 <strncpy>
	    modo_str[MAX_BUFFER_LENGTH - minus_index - 1] = '\0';
 8000d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d56:	f1c3 0313 	rsb	r3, r3, #19
 8000d5a:	3358      	adds	r3, #88	; 0x58
 8000d5c:	443b      	add	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f803 2c50 	strb.w	r2, [r3, #-80]



	   // Convertiamo le stringhe in valori di tipo float
	   float temp = atof(temp_str);
 8000d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 fe3b 	bl	80059e4 <atof>
 8000d6e:	ec53 2b10 	vmov	r2, r3, d0
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff ff21 	bl	8000bbc <__aeabi_d2f>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	   float hmdy = atof(hmdy_str);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f004 fe2e 	bl	80059e4 <atof>
 8000d88:	ec53 2b10 	vmov	r2, r3, d0
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff ff14 	bl	8000bbc <__aeabi_d2f>
 8000d94:	4603      	mov	r3, r0
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
	   int modo = atoi(modo_str);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fe24 	bl	80059ea <atoi>
 8000da2:	6478      	str	r0, [r7, #68]	; 0x44

	   str.Temp=temp;
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <CutString+0x100>)
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	6013      	str	r3, [r2, #0]
	   str.Hmdy=hmdy;
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <CutString+0x100>)
 8000dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dae:	6053      	str	r3, [r2, #4]
	   str.Mode = modo;
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <CutString+0x100>)
 8000db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db4:	6093      	str	r3, [r2, #8]


return str;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <CutString+0x100>)
 8000dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

}
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	3758      	adds	r7, #88	; 0x58
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000204 	.word	0x20000204

08000dcc <invio_tx>:

double TempSetpoint=25;
PID_TypeDef TPID;
double PIDOut=0;

void invio_tx(float temp0, float hmdy0, double intes, UART_HandleTypeDef huart4){
 8000dcc:	b084      	sub	sp, #16
 8000dce:	b5b0      	push	{r4, r5, r7, lr}
 8000dd0:	b092      	sub	sp, #72	; 0x48
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dd8:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ddc:	ed87 1b00 	vstr	d1, [r7]
 8000de0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char bufferT[50];

	//Trasmissione Temp
	gcvt(temp0, sizeof(temp0), bufferT);
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff fbad 	bl	8000548 <__aeabi_f2d>
 8000dee:	4604      	mov	r4, r0
 8000df0:	460d      	mov	r5, r1
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	2004      	movs	r0, #4
 8000dfa:	ec45 4b10 	vmov	d0, r4, r5
 8000dfe:	f004 fdf9 	bl	80059f4 <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9e2 	bl	80001d0 <strlen>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f107 0110 	add.w	r1, r7, #16
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e1c:	f003 fb7e 	bl	800451c <HAL_UART_Transmit>
	sprintf(bufferT, "+");
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4943      	ldr	r1, [pc, #268]	; (8000f34 <invio_tx+0x168>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 fe48 	bl	8005abc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f9cd 	bl	80001d0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f107 0110 	add.w	r1, r7, #16
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e46:	f003 fb69 	bl	800451c <HAL_UART_Transmit>

	//Trasmissione Umidità
	gcvt(hmdy0, sizeof(hmdy0), bufferT);
 8000e4a:	68b8      	ldr	r0, [r7, #8]
 8000e4c:	f7ff fb7c 	bl	8000548 <__aeabi_f2d>
 8000e50:	4604      	mov	r4, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2004      	movs	r0, #4
 8000e5c:	ec45 4b10 	vmov	d0, r4, r5
 8000e60:	f004 fdc8 	bl	80059f4 <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f9b1 	bl	80001d0 <strlen>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	f107 0110 	add.w	r1, r7, #16
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000e7e:	f003 fb4d 	bl	800451c <HAL_UART_Transmit>
	sprintf(bufferT, "+");
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	492b      	ldr	r1, [pc, #172]	; (8000f34 <invio_tx+0x168>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fe17 	bl	8005abc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f99c 	bl	80001d0 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f107 0110 	add.w	r1, r7, #16
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ea8:	f003 fb38 	bl	800451c <HAL_UART_Transmit>

	gcvt(intes, sizeof(intes), bufferT);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	ed97 0b00 	vldr	d0, [r7]
 8000eb8:	f004 fd9c 	bl	80059f4 <gcvt>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f985 	bl	80001d0 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f107 0110 	add.w	r1, r7, #16
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ed6:	f003 fb21 	bl	800451c <HAL_UART_Transmit>
	sprintf(bufferT, "\n");
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4916      	ldr	r1, [pc, #88]	; (8000f38 <invio_tx+0x16c>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fdeb 	bl	8005abc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f970 	bl	80001d0 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f107 0110 	add.w	r1, r7, #16
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000f00:	f003 fb0c 	bl	800451c <HAL_UART_Transmit>

	for(int i=0;i<50;i++)bufferT[i]=0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
 8000f08:	e008      	b.n	8000f1c <invio_tx+0x150>
 8000f0a:	f107 0210 	add.w	r2, r7, #16
 8000f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f10:	4413      	add	r3, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f18:	3301      	adds	r3, #1
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1e:	2b31      	cmp	r3, #49	; 0x31
 8000f20:	ddf3      	ble.n	8000f0a <invio_tx+0x13e>
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3748      	adds	r7, #72	; 0x48
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	08009cd8 	.word	0x08009cd8
 8000f38:	08009cdc 	.word	0x08009cdc
 8000f3c:	00000000 	.word	0x00000000

08000f40 <calcola_parametri>:

double calcola_parametri(float Temp, float Hmdy, int StatoC, int modo){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	if(StatoC>0 && modo==0){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd30      	ble.n	8000fba <calcola_parametri+0x7a>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d12d      	bne.n	8000fba <calcola_parametri+0x7a>
		double Tem= Temp;
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff faf2 	bl	8000548 <__aeabi_f2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PID(&TPID, &Tem, &PIDOut, &TempSetpoint, PID_KP, PID_KD, PID_KI, _PID_P_ON_E, _PID_CD_DIRECT);
 8000f6c:	f107 0110 	add.w	r1, r7, #16
 8000f70:	2300      	movs	r3, #0
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8000ff0 <calcola_parametri+0xb0>
 8000f7c:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000ff8 <calcola_parametri+0xb8>
 8000f80:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001000 <calcola_parametri+0xc0>
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <calcola_parametri+0xe0>)
 8000f86:	4a27      	ldr	r2, [pc, #156]	; (8001024 <calcola_parametri+0xe4>)
 8000f88:	4827      	ldr	r0, [pc, #156]	; (8001028 <calcola_parametri+0xe8>)
 8000f8a:	f000 f9d9 	bl	8001340 <PID>
		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4825      	ldr	r0, [pc, #148]	; (8001028 <calcola_parametri+0xe8>)
 8000f92:	f000 fb0b 	bl	80015ac <PID_SetMode>
		PID_SetSampleTime(&TPID, SAMPLE_TIME);
 8000f96:	2100      	movs	r1, #0
 8000f98:	4823      	ldr	r0, [pc, #140]	; (8001028 <calcola_parametri+0xe8>)
 8000f9a:	f000 fc7b 	bl	8001894 <PID_SetSampleTime>
		PID_SetOutputLimits(&TPID, PID_LIM_MIN, PID_LIM_MAX);
 8000f9e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001008 <calcola_parametri+0xc8>
 8000fa2:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001010 <calcola_parametri+0xd0>
 8000fa6:	4820      	ldr	r0, [pc, #128]	; (8001028 <calcola_parametri+0xe8>)
 8000fa8:	f000 fb1e 	bl	80015e8 <PID_SetOutputLimits>
	 	PID_Compute(&TPID);
 8000fac:	481e      	ldr	r0, [pc, #120]	; (8001028 <calcola_parametri+0xe8>)
 8000fae:	f000 fa13 	bl	80013d8 <PID_Compute>
	 	return PIDOut;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <calcola_parametri+0xe4>)
 8000fb4:	ed93 7b00 	vldr	d7, [r3]
 8000fb8:	e012      	b.n	8000fe0 <calcola_parametri+0xa0>
	}else if(StatoC>0 && modo==1){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dd0d      	ble.n	8000fdc <calcola_parametri+0x9c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10a      	bne.n	8000fdc <calcola_parametri+0x9c>
		//funzione fuzzy
		return calcola_fuzzy(Temp, Hmdy);
 8000fc6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000fca:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fce:	f000 f82d 	bl	800102c <calcola_fuzzy>
 8000fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd6:	eef0 7a60 	vmov.f32	s15, s1
 8000fda:	e001      	b.n	8000fe0 <calcola_parametri+0xa0>
	}
	return 0;
 8000fdc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8001018 <calcola_parametri+0xd8>
}
 8000fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe4:	eef0 0a67 	vmov.f32	s1, s15
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	3fe00000 	.word	0x3fe00000
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	3fd00000 	.word	0x3fd00000
 8001000:	00000000 	.word	0x00000000
 8001004:	40000000 	.word	0x40000000
 8001008:	00000000 	.word	0x00000000
 800100c:	40590000 	.word	0x40590000
 8001010:	00000000 	.word	0x00000000
 8001014:	c0590000 	.word	0xc0590000
	...
 8001020:	20000000 	.word	0x20000000
 8001024:	20000280 	.word	0x20000280
 8001028:	20000210 	.word	0x20000210

0800102c <calcola_fuzzy>:
 *      Author: Utente
 */

#include "fuzzy.h"

double calcola_fuzzy(float inputA, float inputB){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	ed87 0a01 	vstr	s0, [r7, #4]
 8001036:	edc7 0a00 	vstr	s1, [r7]
	    // Valuta le funzioni di appartenenza per A e B
	    float mA = membershipA(inputA);
 800103a:	ed97 0a01 	vldr	s0, [r7, #4]
 800103e:	f000 f8cb 	bl	80011d8 <membershipA>
 8001042:	ed87 0a03 	vstr	s0, [r7, #12]
	    float mB = membershipB(inputB);
 8001046:	ed97 0a00 	vldr	s0, [r7]
 800104a:	f000 f901 	bl	8001250 <membershipB>
 800104e:	ed87 0a02 	vstr	s0, [r7, #8]

	    if ((mA == 0 && mB == 0) || (mA == 2 && mB == 2)){
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	eef5 7a40 	vcmp.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d106      	bne.n	800106e <calcola_fuzzy+0x42>
 8001060:	edd7 7a02 	vldr	s15, [r7, #8]
 8001064:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d011      	beq.n	8001092 <calcola_fuzzy+0x66>
 800106e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001072:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001076:	eef4 7a47 	vcmp.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d10c      	bne.n	800109a <calcola_fuzzy+0x6e>
 8001080:	edd7 7a02 	vldr	s15, [r7, #8]
 8001084:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001088:	eef4 7a47 	vcmp.f32	s15, s14
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d103      	bne.n	800109a <calcola_fuzzy+0x6e>
	        return -70; //forte
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <calcola_fuzzy+0x1a0>)
 8001098:	e08e      	b.n	80011b8 <calcola_fuzzy+0x18c>
	    } else if ((mA == 0 && mB == 1) || (mA == 1 && mB == 0) || (mA == 1 && mB == 1) || (mA == 2 && mB == 1)) {
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	d108      	bne.n	80010ba <calcola_fuzzy+0x8e>
 80010a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010b0:	eef4 7a47 	vcmp.f32	s15, s14
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d033      	beq.n	8001122 <calcola_fuzzy+0xf6>
 80010ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80010be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c2:	eef4 7a47 	vcmp.f32	s15, s14
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d106      	bne.n	80010da <calcola_fuzzy+0xae>
 80010cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d023      	beq.n	8001122 <calcola_fuzzy+0xf6>
 80010da:	edd7 7a03 	vldr	s15, [r7, #12]
 80010de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010e2:	eef4 7a47 	vcmp.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d108      	bne.n	80010fe <calcola_fuzzy+0xd2>
 80010ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f4:	eef4 7a47 	vcmp.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d011      	beq.n	8001122 <calcola_fuzzy+0xf6>
 80010fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001102:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001106:	eef4 7a47 	vcmp.f32	s15, s14
 800110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110e:	d10c      	bne.n	800112a <calcola_fuzzy+0xfe>
 8001110:	edd7 7a02 	vldr	s15, [r7, #8]
 8001114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001118:	eef4 7a47 	vcmp.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d103      	bne.n	800112a <calcola_fuzzy+0xfe>
	        return -35; //medio
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <calcola_fuzzy+0x1a4>)
 8001128:	e046      	b.n	80011b8 <calcola_fuzzy+0x18c>
	    } else if ((mA == 0 && mB == 2) || (mA == 1 && mB == 2) || (mA == 2 && mB == 0)){
 800112a:	edd7 7a03 	vldr	s15, [r7, #12]
 800112e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d108      	bne.n	800114a <calcola_fuzzy+0x11e>
 8001138:	edd7 7a02 	vldr	s15, [r7, #8]
 800113c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001140:	eef4 7a47 	vcmp.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d021      	beq.n	800118e <calcola_fuzzy+0x162>
 800114a:	edd7 7a03 	vldr	s15, [r7, #12]
 800114e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001152:	eef4 7a47 	vcmp.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d108      	bne.n	800116e <calcola_fuzzy+0x142>
 800115c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001160:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001164:	eef4 7a47 	vcmp.f32	s15, s14
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d00f      	beq.n	800118e <calcola_fuzzy+0x162>
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001176:	eef4 7a47 	vcmp.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d10a      	bne.n	8001196 <calcola_fuzzy+0x16a>
 8001180:	edd7 7a02 	vldr	s15, [r7, #8]
 8001184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d103      	bne.n	8001196 <calcola_fuzzy+0x16a>
	        return -5; //debole
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <calcola_fuzzy+0x1a8>)
 8001194:	e010      	b.n	80011b8 <calcola_fuzzy+0x18c>
	    }


	    // Restituisci l'operatore MIN per aggregare i risultati
	    return (mA < mB) ? mA : mB;
 8001196:	ed97 7a03 	vldr	s14, [r7, #12]
 800119a:	edd7 7a02 	vldr	s15, [r7, #8]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d501      	bpl.n	80011ac <calcola_fuzzy+0x180>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e000      	b.n	80011ae <calcola_fuzzy+0x182>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9ca 	bl	8000548 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
}
 80011b8:	ec43 2b17 	vmov	d7, r2, r3
 80011bc:	eeb0 0a47 	vmov.f32	s0, s14
 80011c0:	eef0 0a67 	vmov.f32	s1, s15
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	c0518000 	.word	0xc0518000
 80011d0:	c0418000 	.word	0xc0418000
 80011d4:	c0140000 	.word	0xc0140000

080011d8 <membershipA>:

float membershipA(float x) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x <= 15) {
 80011e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d802      	bhi.n	80011fa <membershipA+0x22>
        return 0; //freddo
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e021      	b.n	800123e <membershipA+0x66>
    } else if (x > 15 && x <= 25) {
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	dd0b      	ble.n	8001224 <membershipA+0x4c>
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d802      	bhi.n	8001224 <membershipA+0x4c>
        return 1; //mite
 800121e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001222:	e00c      	b.n	800123e <membershipA+0x66>
    } else if (x > 25) {
 8001224:	edd7 7a01 	vldr	s15, [r7, #4]
 8001228:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd02      	ble.n	800123c <membershipA+0x64>
        return 2; //caldo
 8001236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123a:	e000      	b.n	800123e <membershipA+0x66>
    }
}
 800123c:	e001      	b.n	8001242 <membershipA+0x6a>
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <membershipB>:

float membershipB(float x) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x <= 30) {
 800125a:	edd7 7a01 	vldr	s15, [r7, #4]
 800125e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	d802      	bhi.n	8001272 <membershipB+0x22>
        return 0; //asciutto
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	e021      	b.n	80012b6 <membershipB+0x66>
    } else if (x > 20 && x <= 50) {
 8001272:	edd7 7a01 	vldr	s15, [r7, #4]
 8001276:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800127a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	dd0b      	ble.n	800129c <membershipB+0x4c>
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012c8 <membershipB+0x78>
 800128c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d802      	bhi.n	800129c <membershipB+0x4c>
        return 1; //normale
 8001296:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800129a:	e00c      	b.n	80012b6 <membershipB+0x66>
    } else if (x > 50) {
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80012c8 <membershipB+0x78>
 80012a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	dd02      	ble.n	80012b4 <membershipB+0x64>
        return 2; //umido
 80012ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b2:	e000      	b.n	80012b6 <membershipB+0x66>
    }
}
 80012b4:	e001      	b.n	80012ba <membershipB+0x6a>
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb0 0a67 	vmov.f32	s0, s15
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	42480000 	.word	0x42480000

080012cc <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80012fc:	f7ff fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001312:	e011      	b.n	8001338 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001320:	f7ff fbdc 	bl	8000adc <__aeabi_dcmplt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <PID_Init+0x60>
}
 800132a:	e005      	b.n	8001338 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6278      	str	r0, [r7, #36]	; 0x24
 8001348:	6239      	str	r1, [r7, #32]
 800134a:	61fa      	str	r2, [r7, #28]
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001352:	ed87 1b02 	vstr	d1, [r7, #8]
 8001356:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	6a3a      	ldr	r2, [r7, #32]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001372:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80013c8 <PID+0x88>
 8001376:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80013d0 <PID+0x90>
 800137a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137c:	f000 f934 	bl	80015e8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001386:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800138a:	4619      	mov	r1, r3
 800138c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800138e:	f000 fa41 	bl	8001814 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001392:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001396:	4619      	mov	r1, r3
 8001398:	ed97 2b00 	vldr	d2, [r7]
 800139c:	ed97 1b02 	vldr	d1, [r7, #8]
 80013a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f000 f98d 	bl	80016c4 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80013aa:	f001 f8fb 	bl	80025a4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	605a      	str	r2, [r3, #4]
	
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	406fe000 	.word	0x406fe000
	...

080013d8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <PID_Compute+0x14>
	{
		return _FALSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e0db      	b.n	80015a4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80013ec:	f001 f8da 	bl	80025a4 <HAL_GetTick>
 80013f0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	6a3a      	ldr	r2, [r7, #32]
 8001402:	429a      	cmp	r2, r3
 8001404:	f0c0 80cd 	bcc.w	80015a2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001420:	f7fe ff32 	bl	8000288 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001432:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001436:	f7fe ff27 	bl	8000288 <__aeabi_dsub>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800144e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001452:	f7ff f8d1 	bl	80005f8 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe ff15 	bl	800028c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d114      	bne.n	800149e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	f7ff f8b8 	bl	80005f8 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4620      	mov	r0, r4
 800148e:	4629      	mov	r1, r5
 8001490:	f7fe fefa 	bl	8000288 <__aeabi_dsub>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80014aa:	f7ff fb35 	bl	8000b18 <__aeabi_dcmpgt>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014c0:	e010      	b.n	80014e4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014ce:	f7ff fb05 	bl	8000adc <__aeabi_dcmplt>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001502:	e005      	b.n	8001510 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800151c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001520:	f7ff f86a 	bl	80005f8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe feac 	bl	8000288 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001538:	f7fe fea8 	bl	800028c <__adddf3>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800154a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800154e:	f7ff fae3 	bl	8000b18 <__aeabi_dcmpgt>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800155e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001562:	e00e      	b.n	8001582 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800156a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800156e:	f7ff fab5 	bl	8000adc <__aeabi_dcmplt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800157e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800158a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001594:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80015a2:	2300      	movs	r3, #0
	}
	
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3730      	adds	r7, #48	; 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}

080015ac <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <PID_SetMode+0x2e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe79 	bl	80012cc <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	705a      	strb	r2, [r3, #1]
	
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6178      	str	r0, [r7, #20]
 80015f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80015f4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80015f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001600:	f7ff fa80 	bl	8000b04 <__aeabi_dcmpge>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d158      	bne.n	80016bc <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001610:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d04b      	beq.n	80016be <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001634:	f7ff fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001648:	e9c1 2300 	strd	r2, r3, [r1]
 800164c:	e012      	b.n	8001674 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800165c:	f7ff fa3e 	bl	8000adc <__aeabi_dcmplt>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001680:	f7ff fa4a 	bl	8000b18 <__aeabi_dcmpgt>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001690:	6979      	ldr	r1, [r7, #20]
 8001692:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001696:	e012      	b.n	80016be <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80016a4:	f7ff fa1a 	bl	8000adc <__aeabi_dcmplt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80016b4:	6979      	ldr	r1, [r7, #20]
 80016b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80016ba:	e000      	b.n	80016be <PID_SetOutputLimits+0xd6>
		return;
 80016bc:	bf00      	nop
		}
		else { }
		
	}
	
}
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	61f8      	str	r0, [r7, #28]
 80016cc:	ed87 0b04 	vstr	d0, [r7, #16]
 80016d0:	ed87 1b02 	vstr	d1, [r7, #8]
 80016d4:	ed87 2b00 	vstr	d2, [r7]
 80016d8:	460b      	mov	r3, r1
 80016da:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e8:	f7ff f9f8 	bl	8000adc <__aeabi_dcmplt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8089 	bne.w	8001806 <PID_SetTunings2+0x142>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001700:	f7ff f9ec 	bl	8000adc <__aeabi_dcmplt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d17d      	bne.n	8001806 <PID_SetTunings2+0x142>
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001716:	f7ff f9e1 	bl	8000adc <__aeabi_dcmplt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d172      	bne.n	8001806 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	7efa      	ldrb	r2, [r7, #27]
 8001724:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001726:	7efb      	ldrb	r3, [r7, #27]
 8001728:	2b01      	cmp	r3, #1
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001738:	69f9      	ldr	r1, [r7, #28]
 800173a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800173e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001742:	69f9      	ldr	r1, [r7, #28]
 8001744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001748:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001752:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fed2 	bl	8000504 <__aeabi_ui2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <PID_SetTunings2+0x14c>)
 8001766:	f7ff f871 	bl	800084c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001778:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800177c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001784:	f7fe ff38 	bl	80005f8 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	69f9      	ldr	r1, [r7, #28]
 800178e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800179a:	f7ff f857 	bl	800084c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	69f9      	ldr	r1, [r7, #28]
 80017a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d12b      	bne.n	8001808 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	f7fe fd63 	bl	8000288 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	69f9      	ldr	r1, [r7, #28]
 80017c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f7fe fd55 	bl	8000288 <__aeabi_dsub>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	69f9      	ldr	r1, [r7, #28]
 80017e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	f7fe fd47 	bl	8000288 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	69f9      	ldr	r1, [r7, #28]
 8001800:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001804:	e000      	b.n	8001808 <PID_SetTunings2+0x144>
		return;
 8001806:	bf00      	nop
		
	}
	
}
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	408f4000 	.word	0x408f4000

08001814 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02e      	beq.n	8001886 <PID_SetControllerDirection+0x72>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	429a      	cmp	r2, r3
 8001830:	d029      	beq.n	8001886 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	f7fe fd22 	bl	8000288 <__aeabi_dsub>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	f7fe fd14 	bl	8000288 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	f7fe fd06 	bl	8000288 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	70da      	strb	r2, [r3, #3]
	
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	dd2e      	ble.n	8001902 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f7fe fe3d 	bl	8000524 <__aeabi_i2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe26 	bl	8000504 <__aeabi_ui2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe ffc4 	bl	800084c <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80018d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d6:	f7fe fe8f 	bl	80005f8 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80018ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ee:	f7fe ffad 	bl	800084c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800190c <HAL_UART_RxCpltCallback>:
float temp0=0,temp1=0,hmdy0=0,hmdy1=0;
double uscita0 = 0;
Stringa_TypeDef valS0,valS1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	ed2d 8b04 	vpush	{d8-d9}
 8001912:	b0a9      	sub	sp, #164	; 0xa4
 8001914:	af1e      	add	r7, sp, #120	; 0x78
 8001916:	6178      	str	r0, [r7, #20]
    if(huart->Instance == huart1.Instance)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_UART_RxCpltCallback+0x210>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d13f      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0x98>
    {
		HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8001924:	2201      	movs	r2, #1
 8001926:	497e      	ldr	r1, [pc, #504]	; (8001b20 <HAL_UART_RxCpltCallback+0x214>)
 8001928:	487c      	ldr	r0, [pc, #496]	; (8001b1c <HAL_UART_RxCpltCallback+0x210>)
 800192a:	f002 fe81 	bl	8004630 <HAL_UART_Receive_IT>
		if (RX_BUFFER[0] == stop) {
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_UART_RxCpltCallback+0x214>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b73      	cmp	r3, #115	; 0x73
 8001934:	d12b      	bne.n	800198e <HAL_UART_RxCpltCallback+0x82>
				   rx_complete = true;
 8001936:	4b7b      	ldr	r3, [pc, #492]	; (8001b24 <HAL_UART_RxCpltCallback+0x218>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
					valS1=CutString(&rx_buffer);
 800193c:	4c7a      	ldr	r4, [pc, #488]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 800193e:	463b      	mov	r3, r7
 8001940:	497a      	ldr	r1, [pc, #488]	; (8001b2c <HAL_UART_RxCpltCallback+0x220>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f9c0 	bl	8000cc8 <CutString>
 8001948:	463b      	mov	r3, r7
 800194a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					 temp0=valS1.Temp;
 8001952:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a76      	ldr	r2, [pc, #472]	; (8001b30 <HAL_UART_RxCpltCallback+0x224>)
 8001958:	6013      	str	r3, [r2, #0]
					 hmdy0=valS1.Hmdy;
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <HAL_UART_RxCpltCallback+0x228>)
 8001960:	6013      	str	r3, [r2, #0]
					 modo=valS1.Mode;
 8001962:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4a74      	ldr	r2, [pc, #464]	; (8001b38 <HAL_UART_RxCpltCallback+0x22c>)
 8001968:	6013      	str	r3, [r2, #0]
					rx_index = 0;
 800196a:	4b74      	ldr	r3, [pc, #464]	; (8001b3c <HAL_UART_RxCpltCallback+0x230>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
					for(int i=0;i<50;i++)rx_buffer[i]=0;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e007      	b.n	8001986 <HAL_UART_RxCpltCallback+0x7a>
 8001976:	4a6d      	ldr	r2, [pc, #436]	; (8001b2c <HAL_UART_RxCpltCallback+0x220>)
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	4413      	add	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3301      	adds	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	2b31      	cmp	r3, #49	; 0x31
 800198a:	ddf4      	ble.n	8001976 <HAL_UART_RxCpltCallback+0x6a>
 800198c:	e00a      	b.n	80019a4 <HAL_UART_RxCpltCallback+0x98>
			   } else {
				   rx_buffer[rx_index] = RX_BUFFER[0];
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_UART_RxCpltCallback+0x230>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <HAL_UART_RxCpltCallback+0x214>)
 8001994:	7811      	ldrb	r1, [r2, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_UART_RxCpltCallback+0x220>)
 8001998:	54d1      	strb	r1, [r2, r3]
				   rx_index++;
 800199a:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_UART_RxCpltCallback+0x230>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <HAL_UART_RxCpltCallback+0x230>)
 80019a2:	6013      	str	r3, [r2, #0]
			   }

    }
    if(huart->Instance == huart2.Instance)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_UART_RxCpltCallback+0x234>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d13f      	bne.n	8001a30 <HAL_UART_RxCpltCallback+0x124>
    {
       HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4964      	ldr	r1, [pc, #400]	; (8001b44 <HAL_UART_RxCpltCallback+0x238>)
 80019b4:	4862      	ldr	r0, [pc, #392]	; (8001b40 <HAL_UART_RxCpltCallback+0x234>)
 80019b6:	f002 fe3b 	bl	8004630 <HAL_UART_Receive_IT>
       if (RX_BUFFER1[0] == stop) {
 80019ba:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_UART_RxCpltCallback+0x238>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b73      	cmp	r3, #115	; 0x73
 80019c0:	d12b      	bne.n	8001a1a <HAL_UART_RxCpltCallback+0x10e>
                   rx_complete1 = true;
 80019c2:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_UART_RxCpltCallback+0x23c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
    	   	   	   valS1=CutString(&rx_buffer1);
 80019c8:	4c57      	ldr	r4, [pc, #348]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 80019ca:	463b      	mov	r3, r7
 80019cc:	495f      	ldr	r1, [pc, #380]	; (8001b4c <HAL_UART_RxCpltCallback+0x240>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f97a 	bl	8000cc8 <CutString>
 80019d4:	463b      	mov	r3, r7
 80019d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	       	    temp1=valS1.Temp;
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5b      	ldr	r2, [pc, #364]	; (8001b50 <HAL_UART_RxCpltCallback+0x244>)
 80019e4:	6013      	str	r3, [r2, #0]
    	       	    hmdy1=valS1.Hmdy;
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_UART_RxCpltCallback+0x248>)
 80019ec:	6013      	str	r3, [r2, #0]
    	       	    modo=valS1.Mode;
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_UART_RxCpltCallback+0x21c>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_UART_RxCpltCallback+0x22c>)
 80019f4:	6013      	str	r3, [r2, #0]
    	       	   rx_index1 = 0;
 80019f6:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_UART_RxCpltCallback+0x24c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    	       	for(int i=0;i<50;i++)rx_buffer1[i]=0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	e007      	b.n	8001a12 <HAL_UART_RxCpltCallback+0x106>
 8001a02:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_UART_RxCpltCallback+0x240>)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	4413      	add	r3, r2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2b31      	cmp	r3, #49	; 0x31
 8001a16:	ddf4      	ble.n	8001a02 <HAL_UART_RxCpltCallback+0xf6>
 8001a18:	e00a      	b.n	8001a30 <HAL_UART_RxCpltCallback+0x124>
                } else {
                    rx_buffer1[rx_index1] = RX_BUFFER1[0];
 8001a1a:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <HAL_UART_RxCpltCallback+0x24c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_UART_RxCpltCallback+0x238>)
 8001a20:	7811      	ldrb	r1, [r2, #0]
 8001a22:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_UART_RxCpltCallback+0x240>)
 8001a24:	54d1      	strb	r1, [r2, r3]
                    rx_index1++;
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_UART_RxCpltCallback+0x24c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_UART_RxCpltCallback+0x24c>)
 8001a2e:	6013      	str	r3, [r2, #0]
                }
    }
    if(rx_complete == true &&  rx_complete1 == true){
 8001a30:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <HAL_UART_RxCpltCallback+0x218>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d06b      	beq.n	8001b10 <HAL_UART_RxCpltCallback+0x204>
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_UART_RxCpltCallback+0x23c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d067      	beq.n	8001b10 <HAL_UART_RxCpltCallback+0x204>
		//funzione calcola_psrsmetri
		uscita0 = calcola_parametri(temp0, hmdy0, StatoC, modo);
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_UART_RxCpltCallback+0x224>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_UART_RxCpltCallback+0x228>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_UART_RxCpltCallback+0x250>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <HAL_UART_RxCpltCallback+0x22c>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	eef0 0a47 	vmov.f32	s1, s14
 8001a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a60:	f7ff fa6e 	bl	8000f40 <calcola_parametri>
 8001a64:	eeb0 7a40 	vmov.f32	s14, s0
 8001a68:	eef0 7a60 	vmov.f32	s15, s1
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <HAL_UART_RxCpltCallback+0x254>)
 8001a6e:	ed83 7b00 	vstr	d7, [r3]
		double uscita1 = calcola_parametri(temp1, hmdy1, StatoC, modo);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_UART_RxCpltCallback+0x244>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_UART_RxCpltCallback+0x248>)
 8001a7a:	ed93 7a00 	vldr	s14, [r3]
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_UART_RxCpltCallback+0x250>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_UART_RxCpltCallback+0x22c>)
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	eef0 0a47 	vmov.f32	s1, s14
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	f7ff fa55 	bl	8000f40 <calcola_parametri>
 8001a96:	ed87 0b06 	vstr	d0, [r7, #24]
		//funzione invio
    	invio_tx(temp0, hmdy0, uscita0, huart4);
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_UART_RxCpltCallback+0x224>)
 8001a9c:	ed93 9a00 	vldr	s18, [r3]
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_UART_RxCpltCallback+0x228>)
 8001aa2:	edd3 9a00 	vldr	s19, [r3]
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_UART_RxCpltCallback+0x254>)
 8001aa8:	ed93 8b00 	vldr	d8, [r3]
 8001aac:	4c2d      	ldr	r4, [pc, #180]	; (8001b64 <HAL_UART_RxCpltCallback+0x258>)
 8001aae:	4668      	mov	r0, sp
 8001ab0:	f104 0310 	add.w	r3, r4, #16
 8001ab4:	2278      	movs	r2, #120	; 0x78
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f003 ffea 	bl	8005a90 <memcpy>
 8001abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac0:	eeb0 1a48 	vmov.f32	s2, s16
 8001ac4:	eef0 1a68 	vmov.f32	s3, s17
 8001ac8:	eef0 0a69 	vmov.f32	s1, s19
 8001acc:	eeb0 0a49 	vmov.f32	s0, s18
 8001ad0:	f7ff f97c 	bl	8000dcc <invio_tx>
    	invio_tx(temp1, hmdy1, uscita1, huart4);
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_UART_RxCpltCallback+0x244>)
 8001ad6:	ed93 8a00 	vldr	s16, [r3]
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_UART_RxCpltCallback+0x248>)
 8001adc:	edd3 8a00 	vldr	s17, [r3]
 8001ae0:	4c20      	ldr	r4, [pc, #128]	; (8001b64 <HAL_UART_RxCpltCallback+0x258>)
 8001ae2:	4668      	mov	r0, sp
 8001ae4:	f104 0310 	add.w	r3, r4, #16
 8001ae8:	2278      	movs	r2, #120	; 0x78
 8001aea:	4619      	mov	r1, r3
 8001aec:	f003 ffd0 	bl	8005a90 <memcpy>
 8001af0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001af4:	ed97 1b06 	vldr	d1, [r7, #24]
 8001af8:	eef0 0a68 	vmov.f32	s1, s17
 8001afc:	eeb0 0a48 	vmov.f32	s0, s16
 8001b00:	f7ff f964 	bl	8000dcc <invio_tx>
    	rx_complete = false;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_UART_RxCpltCallback+0x218>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
    	rx_complete1 = false;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_UART_RxCpltCallback+0x23c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    }
}
 8001b10:	bf00      	nop
 8001b12:	372c      	adds	r7, #44	; 0x2c
 8001b14:	46bd      	mov	sp, r7
 8001b16:	ecbd 8b04 	vpop	{d8-d9}
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	20000390 	.word	0x20000390
 8001b20:	20000288 	.word	0x20000288
 8001b24:	200002c8 	.word	0x200002c8
 8001b28:	200004c0 	.word	0x200004c0
 8001b2c:	20000290 	.word	0x20000290
 8001b30:	200004a8 	.word	0x200004a8
 8001b34:	200004b0 	.word	0x200004b0
 8001b38:	200004a0 	.word	0x200004a0
 8001b3c:	200002c4 	.word	0x200002c4
 8001b40:	20000418 	.word	0x20000418
 8001b44:	2000028c 	.word	0x2000028c
 8001b48:	20000304 	.word	0x20000304
 8001b4c:	200002cc 	.word	0x200002cc
 8001b50:	200004ac 	.word	0x200004ac
 8001b54:	200004b4 	.word	0x200004b4
 8001b58:	20000300 	.word	0x20000300
 8001b5c:	200004a4 	.word	0x200004a4
 8001b60:	200004b8 	.word	0x200004b8
 8001b64:	20000308 	.word	0x20000308

08001b68 <main>:


int main(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	HAL_Init();
 8001b6e:	f000 fcbf 	bl	80024f0 <HAL_Init>
	SystemClock_Config();
 8001b72:	f000 f919 	bl	8001da8 <SystemClock_Config>
	MX_GPIO_Init();
 8001b76:	f000 f9fb 	bl	8001f70 <MX_GPIO_Init>
	MX_UART4_Init();
 8001b7a:	f000 f969 	bl	8001e50 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8001b7e:	f000 f997 	bl	8001eb0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001b82:	f000 f9c5 	bl	8001f10 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, RX_BUFFER1, BUFFER_LEN);
 8001b86:	2201      	movs	r2, #1
 8001b88:	4977      	ldr	r1, [pc, #476]	; (8001d68 <main+0x200>)
 8001b8a:	4878      	ldr	r0, [pc, #480]	; (8001d6c <main+0x204>)
 8001b8c:	f002 fd50 	bl	8004630 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4977      	ldr	r1, [pc, #476]	; (8001d70 <main+0x208>)
 8001b94:	4877      	ldr	r0, [pc, #476]	; (8001d74 <main+0x20c>)
 8001b96:	f002 fd4b 	bl	8004630 <HAL_UART_Receive_IT>
	for(int i=0;i<50;i++)rx_buffer[i]=0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e007      	b.n	8001bb0 <main+0x48>
 8001ba0:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <main+0x210>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b31      	cmp	r3, #49	; 0x31
 8001bb4:	ddf4      	ble.n	8001ba0 <main+0x38>

while (1)
{
				if (StatoC == 1){
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <main+0x214>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d1fb      	bne.n	8001bb6 <main+0x4e>
	 	      	    	   if (uscita0 <= -5) {
 8001bbe:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <main+0x218>)
 8001bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b6e      	ldr	r3, [pc, #440]	; (8001d84 <main+0x21c>)
 8001bca:	f7fe ff91 	bl	8000af0 <__aeabi_dcmple>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <main+0x84>
	 	      	    		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001bda:	486b      	ldr	r0, [pc, #428]	; (8001d88 <main+0x220>)
 8001bdc:	f000 fff0 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be6:	4868      	ldr	r0, [pc, #416]	; (8001d88 <main+0x220>)
 8001be8:	f000 ffea 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -15.0) {
 8001bec:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <main+0x218>)
 8001bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <main+0x224>)
 8001bf8:	f7fe ff7a 	bl	8000af0 <__aeabi_dcmple>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <main+0xb2>
	 	      	    	        // Accendi il LED 2
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001c08:	485f      	ldr	r0, [pc, #380]	; (8001d88 <main+0x220>)
 8001c0a:	f000 ffd9 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c14:	485c      	ldr	r0, [pc, #368]	; (8001d88 <main+0x220>)
 8001c16:	f000 ffd3 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -25.0) {
 8001c1a:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <main+0x218>)
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <main+0x228>)
 8001c26:	f7fe ff63 	bl	8000af0 <__aeabi_dcmple>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <main+0xe0>
	 	      	    	        // Accendi il LED 3
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001c36:	4854      	ldr	r0, [pc, #336]	; (8001d88 <main+0x220>)
 8001c38:	f000 ffc2 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001c42:	4851      	ldr	r0, [pc, #324]	; (8001d88 <main+0x220>)
 8001c44:	f000 ffbc 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -35.0) {
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <main+0x218>)
 8001c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <main+0x22c>)
 8001c54:	f7fe ff4c 	bl	8000af0 <__aeabi_dcmple>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <main+0x10e>
	 	      	    	        // Accendi il LED 4
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001c64:	4848      	ldr	r0, [pc, #288]	; (8001d88 <main+0x220>)
 8001c66:	f000 ffab 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c70:	4845      	ldr	r0, [pc, #276]	; (8001d88 <main+0x220>)
 8001c72:	f000 ffa5 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -45.0) {
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <main+0x218>)
 8001c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <main+0x230>)
 8001c82:	f7fe ff35 	bl	8000af0 <__aeabi_dcmple>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <main+0x13c>
	 	      	    	        // Accendi il LED 5
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001c92:	483d      	ldr	r0, [pc, #244]	; (8001d88 <main+0x220>)
 8001c94:	f000 ff94 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001c9e:	483a      	ldr	r0, [pc, #232]	; (8001d88 <main+0x220>)
 8001ca0:	f000 ff8e 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -52.0) {
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <main+0x218>)
 8001ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <main+0x234>)
 8001cb0:	f7fe ff1e 	bl	8000af0 <__aeabi_dcmple>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <main+0x16a>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001cc0:	4831      	ldr	r0, [pc, #196]	; (8001d88 <main+0x220>)
 8001cc2:	f000 ff7d 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001ccc:	482e      	ldr	r0, [pc, #184]	; (8001d88 <main+0x220>)
 8001cce:	f000 ff77 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -55.0) {
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <main+0x218>)
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <main+0x238>)
 8001cde:	f7fe ff07 	bl	8000af0 <__aeabi_dcmple>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <main+0x198>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001cee:	4826      	ldr	r0, [pc, #152]	; (8001d88 <main+0x220>)
 8001cf0:	f000 ff66 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <main+0x220>)
 8001cfc:	f000 ff60 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -60.0) {
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <main+0x218>)
 8001d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <main+0x23c>)
 8001d0c:	f7fe fef0 	bl	8000af0 <__aeabi_dcmple>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <main+0x1c6>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d1c:	481a      	ldr	r0, [pc, #104]	; (8001d88 <main+0x220>)
 8001d1e:	f000 ff4f 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8001d28:	4817      	ldr	r0, [pc, #92]	; (8001d88 <main+0x220>)
 8001d2a:	f000 ff49 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    } if (uscita0 <= -65.0){
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <main+0x218>)
 8001d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d34:	a30a      	add	r3, pc, #40	; (adr r3, 8001d60 <main+0x1f8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fed9 	bl	8000af0 <__aeabi_dcmple>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <main+0x1f4>
	 	      	    	        // Accendi il LED 9
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <main+0x220>)
 8001d4c:	f000 ff38 	bl	8002bc0 <HAL_GPIO_WritePin>
	 	      	    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	f644 31f8 	movw	r1, #19448	; 0x4bf8
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <main+0x220>)
 8001d58:	f000 ff32 	bl	8002bc0 <HAL_GPIO_WritePin>
				if (StatoC == 1){
 8001d5c:	e72b      	b.n	8001bb6 <main+0x4e>
 8001d5e:	bf00      	nop
 8001d60:	00000000 	.word	0x00000000
 8001d64:	c0504000 	.word	0xc0504000
 8001d68:	2000028c 	.word	0x2000028c
 8001d6c:	20000418 	.word	0x20000418
 8001d70:	20000288 	.word	0x20000288
 8001d74:	20000390 	.word	0x20000390
 8001d78:	20000290 	.word	0x20000290
 8001d7c:	200004a4 	.word	0x200004a4
 8001d80:	200004b8 	.word	0x200004b8
 8001d84:	c0140000 	.word	0xc0140000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	c02e0000 	.word	0xc02e0000
 8001d90:	c0390000 	.word	0xc0390000
 8001d94:	c0418000 	.word	0xc0418000
 8001d98:	c0468000 	.word	0xc0468000
 8001d9c:	c04a0000 	.word	0xc04a0000
 8001da0:	c04b8000 	.word	0xc04b8000
 8001da4:	c04e0000 	.word	0xc04e0000

08001da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b09e      	sub	sp, #120	; 0x78
 8001dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001db2:	2228      	movs	r2, #40	; 0x28
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fe78 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	223c      	movs	r2, #60	; 0x3c
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fe6a 	bl	8005aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2310      	movs	r3, #16
 8001de2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 ff23 	bl	8002c38 <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001df8:	f000 f940 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ff4c 	bl	8003cb4 <HAL_RCC_ClockConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001e22:	f000 f92b 	bl	800207c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001e26:	230b      	movs	r3, #11
 8001e28:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 f971 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001e44:	f000 f91a 	bl	800207c <Error_Handler>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3778      	adds	r7, #120	; 0x78
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <MX_UART4_Init+0x5c>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_UART4_Init+0x58>)
 8001e94:	f002 faf4 	bl	8004480 <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e9e:	f000 f8ed 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000308 	.word	0x20000308
 8001eac:	40004c00 	.word	0x40004c00

08001eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <MX_USART1_UART_Init+0x5c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ebc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ef4:	f002 fac4 	bl	8004480 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001efe:	f000 f8bd 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000390 	.word	0x20000390
 8001f0c:	40013800 	.word	0x40013800

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <MX_USART2_UART_Init+0x5c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART2_UART_Init+0x58>)
 8001f54:	f002 fa94 	bl	8004480 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f5e:	f000 f88d 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000418 	.word	0x20000418
 8001f6c:	40004400 	.word	0x40004400

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <MX_GPIO_Init+0x100>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4a39      	ldr	r2, [pc, #228]	; (8002070 <MX_GPIO_Init+0x100>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6153      	str	r3, [r2, #20]
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <MX_GPIO_Init+0x100>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fa8:	6153      	str	r3, [r2, #20]
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6153      	str	r3, [r2, #20]
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <MX_GPIO_Init+0x100>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8001fec:	4821      	ldr	r0, [pc, #132]	; (8002074 <MX_GPIO_Init+0x104>)
 8001fee:	f000 fde7 	bl	8002bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 8001ff8:	481f      	ldr	r0, [pc, #124]	; (8002078 <MX_GPIO_Init+0x108>)
 8001ffa:	f000 fde1 	bl	8002bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002002:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f000 fc59 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800201a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800201e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <MX_GPIO_Init+0x104>)
 8002034:	f000 fc4a 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002038:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 800203c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <MX_GPIO_Init+0x108>)
 8002052:	f000 fc3b 	bl	80028cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2006      	movs	r0, #6
 800205c:	f000 fb89 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002060:	2006      	movs	r0, #6
 8002062:	f000 fba2 	bl	80027aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	48001000 	.word	0x48001000
 8002078:	48000400 	.word	0x48000400

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>
	...

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x44>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_MspInit+0x44>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x44>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_MspInit+0x44>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_MspInit+0x44>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_MspInit+0x44>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_UART_MspInit+0x168>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d131      	bne.n	8002156 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020f2:	4b52      	ldr	r3, [pc, #328]	; (800223c <HAL_UART_MspInit+0x16c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_UART_MspInit+0x16c>)
 80020f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_UART_MspInit+0x16c>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002114:	6153      	str	r3, [r2, #20]
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002122:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002134:	2305      	movs	r3, #5
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4840      	ldr	r0, [pc, #256]	; (8002240 <HAL_UART_MspInit+0x170>)
 8002140:	f000 fbc4 	bl	80028cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2101      	movs	r1, #1
 8002148:	2034      	movs	r0, #52	; 0x34
 800214a:	f000 fb12 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800214e:	2034      	movs	r0, #52	; 0x34
 8002150:	f000 fb2b 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002154:	e06b      	b.n	800222e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_UART_MspInit+0x174>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d130      	bne.n	80021c2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a35      	ldr	r2, [pc, #212]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_UART_MspInit+0x16c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_UART_MspInit+0x16c>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	4a2f      	ldr	r2, [pc, #188]	; (800223c <HAL_UART_MspInit+0x16c>)
 800217e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002182:	6153      	str	r3, [r2, #20]
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002190:	2330      	movs	r3, #48	; 0x30
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a0:	2307      	movs	r3, #7
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4825      	ldr	r0, [pc, #148]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021ac:	f000 fb8e 	bl	80028cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2103      	movs	r1, #3
 80021b4:	2025      	movs	r0, #37	; 0x25
 80021b6:	f000 fadc 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ba:	2025      	movs	r0, #37	; 0x25
 80021bc:	f000 faf5 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 80021c0:	e035      	b.n	800222e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_UART_MspInit+0x178>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d130      	bne.n	800222e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	6153      	str	r3, [r2, #20]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_UART_MspInit+0x16c>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021fc:	230c      	movs	r3, #12
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220c:	2307      	movs	r3, #7
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f000 fb57 	bl	80028cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2102      	movs	r1, #2
 8002222:	2026      	movs	r0, #38	; 0x26
 8002224:	f000 faa5 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002228:	2026      	movs	r0, #38	; 0x26
 800222a:	f000 fabe 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3738      	adds	r7, #56	; 0x38
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40004c00 	.word	0x40004c00
 800223c:	40021000 	.word	0x40021000
 8002240:	48000800 	.word	0x48000800
 8002244:	40013800 	.word	0x40013800
 8002248:	40004400 	.word	0x40004400

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002298:	f000 f970 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 fca3 	bl	8002bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <USART1_IRQHandler+0x10>)
 80022b6:	f002 f9ff 	bl	80046b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000390 	.word	0x20000390

080022c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <USART2_IRQHandler+0x10>)
 80022ca:	f002 f9f5 	bl	80046b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000418 	.word	0x20000418

080022d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <UART4_IRQHandler+0x10>)
 80022de:	f002 f9eb 	bl	80046b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000308 	.word	0x20000308

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002306:	f003 fb99 	bl	8005a3c <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800232e:	e7fe      	b.n	800232e <_exit+0x12>

08002330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e00a      	b.n	8002358 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002342:	f3af 8000 	nop.w
 8002346:	4601      	mov	r1, r0
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60ba      	str	r2, [r7, #8]
 800234e:	b2ca      	uxtb	r2, r1
 8002350:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf0      	blt.n	8002342 <_read+0x12>
  }

  return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e009      	b.n	8002390 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf1      	blt.n	800237c <_write+0x12>
  }
  return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f003 fafe 	bl	8005a3c <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000a000 	.word	0x2000a000
 800246c:	00000400 	.word	0x00000400
 8002470:	200004cc 	.word	0x200004cc
 8002474:	200004e8 	.word	0x200004e8

08002478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff ffea 	bl	8002478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	; (80024dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	; (80024e8 <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f003 fabd 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7ff fb4b 	bl	8001b68 <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024e0:	0800a1b8 	.word	0x0800a1b8
  ldr r2, =_sbss
 80024e4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024e8:	200004e4 	.word	0x200004e4

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_Init+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_Init+0x28>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f000 f92b 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002506:	200f      	movs	r0, #15
 8002508:	f000 f808 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250c:	f7ff fdbc 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f943 	bl	80027c6 <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 f90b 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000008 	.word	0x20000008
 8002574:	20000010 	.word	0x20000010
 8002578:	2000000c 	.word	0x2000000c

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000010 	.word	0x20000010
 80025a0:	200004d0 	.word	0x200004d0

080025a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	200004d0 	.word	0x200004d0

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2204      	movs	r2, #4
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e020      	b.n	8002844 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020e 	bic.w	r2, r2, #14
 8002810:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002862:	2b02      	cmp	r3, #2
 8002864:	d005      	beq.n	8002872 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e027      	b.n	80028c2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020e 	bic.w	r2, r2, #14
 8002880:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
    } 
  }
  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	e154      	b.n	8002b86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8146 	beq.w	8002b80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_GPIO_Init+0x40>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d017      	beq.n	80029aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d123      	bne.n	80029fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a0 	beq.w	8002b80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a58:	4a53      	ldr	r2, [pc, #332]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a82:	d019      	beq.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a49      	ldr	r2, [pc, #292]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_GPIO_Init+0x1e8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a48      	ldr	r2, [pc, #288]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00d      	beq.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <HAL_GPIO_Init+0x1e0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a46      	ldr	r2, [pc, #280]	; (8002bb8 <HAL_GPIO_Init+0x2ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_GPIO_Init+0x1dc>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e008      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002aa8:	2305      	movs	r3, #5
 8002aaa:	e006      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002aac:	2303      	movs	r3, #3
 8002aae:	e004      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	f002 0203 	and.w	r2, r2, #3
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	4093      	lsls	r3, r2
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aca:	4937      	ldr	r1, [pc, #220]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002afc:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b50:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f aea3 	bne.w	80028dc <HAL_GPIO_Init+0x10>
  }
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	48000800 	.word	0x48000800
 8002bb4:	48000c00 	.word	0x48000c00
 8002bb8:	48001000 	.word	0x48001000
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f806 	bl	8002c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f001 b823 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 817d 	beq.w	8002f6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c74:	4bbc      	ldr	r3, [pc, #752]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c80:	4bb9      	ldr	r3, [pc, #740]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d15c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x10e>
 8002c8c:	4bb6      	ldr	r3, [pc, #728]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d155      	bne.n	8002d46 <HAL_RCC_OscConfig+0x10e>
 8002c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_OscConfig+0x94>
 8002cc6:	4ba8      	ldr	r3, [pc, #672]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ce8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cf4:	4b9c      	ldr	r3, [pc, #624]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f042 0220 	orr.w	r2, r2, #32
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f002 021f 	and.w	r2, r2, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 811f 	beq.w	8002f6c <HAL_RCC_OscConfig+0x334>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8116 	bne.w	8002f6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f000 bfaf 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12e>
 8002d58:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a82      	ldr	r2, [pc, #520]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e036      	b.n	8002dd4 <HAL_RCC_OscConfig+0x19c>
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x158>
 8002d76:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7b      	ldr	r2, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a78      	ldr	r2, [pc, #480]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e021      	b.n	8002dd4 <HAL_RCC_OscConfig+0x19c>
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x184>
 8002da2:	4b71      	ldr	r3, [pc, #452]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a70      	ldr	r2, [pc, #448]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6e      	ldr	r3, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6d      	ldr	r2, [pc, #436]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x19c>
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	f023 020f 	bic.w	r2, r3, #15
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	495f      	ldr	r1, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d059      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7ff fbd1 	bl	80025a4 <HAL_GetTick>
 8002e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7ff fbcc 	bl	80025a4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d902      	bls.n	8002e1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f000 bf43 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 8002e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x218>
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	e015      	b.n	8002e7c <HAL_RCC_OscConfig+0x244>
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e88:	fa92 f2a2 	rbit	r2, r2
 8002e8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ab      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1d0>
 8002eb0:	e05d      	b.n	8002f6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7ff fb77 	bl	80025a4 <HAL_GetTick>
 8002eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7ff fb72 	bl	80025a4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d902      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	f000 bee9 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 8002ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ee6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2cc>
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e015      	b.n	8002f30 <HAL_RCC_OscConfig+0x2f8>
 8002f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x330>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f48:	fab2 f282 	clz	r2, r2
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f002 021f 	and.w	r2, r2, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ab      	bne.n	8002ebc <HAL_RCC_OscConfig+0x284>
 8002f64:	e003      	b.n	8002f6e <HAL_RCC_OscConfig+0x336>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 817d 	beq.w	800327e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f84:	4ba6      	ldr	r3, [pc, #664]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f90:	4ba3      	ldr	r3, [pc, #652]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d172      	bne.n	8003082 <HAL_RCC_OscConfig+0x44a>
 8002f9c:	4ba0      	ldr	r3, [pc, #640]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d16c      	bne.n	8003082 <HAL_RCC_OscConfig+0x44a>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3a0>
 8002fd2:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e013      	b.n	8003000 <HAL_RCC_OscConfig+0x3c8>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ff0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ffc:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2202      	movs	r2, #2
 8003002:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003006:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003012:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCC_OscConfig+0x410>
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d002      	beq.n	8003048 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f000 be2e 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b75      	ldr	r3, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	21f8      	movs	r1, #248	; 0xf8
 800305e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003066:	fa91 f1a1 	rbit	r1, r1
 800306a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800306e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003072:	fab1 f181 	clz	r1, r1
 8003076:	b2c9      	uxtb	r1, r1
 8003078:	408b      	lsls	r3, r1
 800307a:	4969      	ldr	r1, [pc, #420]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003080:	e0fd      	b.n	800327e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8088 	beq.w	80031a4 <HAL_RCC_OscConfig+0x56c>
 8003094:	2301      	movs	r3, #1
 8003096:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2301      	movs	r3, #1
 80030be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fa70 	bl	80025a4 <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7ff fa6b 	bl	80025a4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	f000 bde2 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0x4d8>
 800310a:	4b45      	ldr	r3, [pc, #276]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0x500>
 8003110:	2302      	movs	r3, #2
 8003112:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003128:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003134:	4b3a      	ldr	r3, [pc, #232]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2202      	movs	r2, #2
 800313a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800313e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003142:	fa92 f2a2 	rbit	r2, r2
 8003146:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800314a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800314e:	fab2 f282 	clz	r2, r2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f042 0220 	orr.w	r2, r2, #32
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	f002 021f 	and.w	r2, r2, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0af      	beq.n	80030ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	21f8      	movs	r1, #248	; 0xf8
 8003180:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003188:	fa91 f1a1 	rbit	r1, r1
 800318c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003190:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003194:	fab1 f181 	clz	r1, r1
 8003198:	b2c9      	uxtb	r1, r1
 800319a:	408b      	lsls	r3, r1
 800319c:	4920      	ldr	r1, [pc, #128]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
 80031a2:	e06c      	b.n	800327e <HAL_RCC_OscConfig+0x646>
 80031a4:	2301      	movs	r3, #1
 80031a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	461a      	mov	r2, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7ff f9e8 	bl	80025a4 <HAL_GetTick>
 80031d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031da:	f7ff f9e3 	bl	80025a4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	f000 bd5a 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d104      	bne.n	8003224 <HAL_RCC_OscConfig+0x5ec>
 800321a:	4b01      	ldr	r3, [pc, #4]	; (8003220 <HAL_RCC_OscConfig+0x5e8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	e015      	b.n	800324c <HAL_RCC_OscConfig+0x614>
 8003220:	40021000 	.word	0x40021000
 8003224:	2302      	movs	r3, #2
 8003226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003236:	2302      	movs	r3, #2
 8003238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800323c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003248:	4bc8      	ldr	r3, [pc, #800]	; (800356c <HAL_RCC_OscConfig+0x934>)
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2202      	movs	r2, #2
 800324e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003252:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003256:	fa92 f2a2 	rbit	r2, r2
 800325a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800325e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003262:	fab2 f282 	clz	r2, r2
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f042 0220 	orr.w	r2, r2, #32
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f002 021f 	and.w	r2, r2, #31
 8003272:	2101      	movs	r1, #1
 8003274:	fa01 f202 	lsl.w	r2, r1, r2
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ad      	bne.n	80031da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8110 	beq.w	80034b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d079      	beq.n	8003398 <HAL_RCC_OscConfig+0x760>
 80032a4:	2301      	movs	r3, #1
 80032a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4bab      	ldr	r3, [pc, #684]	; (8003570 <HAL_RCC_OscConfig+0x938>)
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	461a      	mov	r2, r3
 80032ca:	2301      	movs	r3, #1
 80032cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7ff f969 	bl	80025a4 <HAL_GetTick>
 80032d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d8:	f7ff f964 	bl	80025a4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f000 bcdb 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x934>)
 800334a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003354:	2102      	movs	r1, #2
 8003356:	6019      	str	r1, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f1a3 	rbit	r1, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800336e:	6019      	str	r1, [r3, #0]
  return result;
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0a0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x6a0>
 8003396:	e08d      	b.n	80034b4 <HAL_RCC_OscConfig+0x87c>
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033ba:	601a      	str	r2, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b68      	ldr	r3, [pc, #416]	; (8003570 <HAL_RCC_OscConfig+0x938>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	2300      	movs	r3, #0
 80033d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7ff f8e3 	bl	80025a4 <HAL_GetTick>
 80033de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e4:	f7ff f8de 	bl	80025a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d902      	bls.n	80033fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f000 bc55 	b.w	8003ca4 <HAL_RCC_OscConfig+0x106c>
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003402:	2202      	movs	r2, #2
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003426:	2202      	movs	r2, #2
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	fa93 f2a3 	rbit	r2, r3
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800344a:	2202      	movs	r2, #2
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x934>)
 8003468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003472:	2102      	movs	r1, #2
 8003474:	6019      	str	r1, [r3, #0]
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f1a3 	rbit	r1, r3
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800348c:	6019      	str	r1, [r3, #0]
  return result;
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d197      	bne.n	80033e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 81a1 	beq.w	800380c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d0:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x934>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_RCC_OscConfig+0x934>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_RCC_OscConfig+0x934>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_OscConfig+0x934>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <HAL_RCC_OscConfig+0x93c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11a      	bne.n	800354c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b17      	ldr	r3, [pc, #92]	; (8003574 <HAL_RCC_OscConfig+0x93c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_RCC_OscConfig+0x93c>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7ff f83f 	bl	80025a4 <HAL_GetTick>
 8003526:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	e009      	b.n	8003540 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7ff f83a 	bl	80025a4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b64      	cmp	r3, #100	; 0x64
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e3b1      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_RCC_OscConfig+0x93c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10d      	bne.n	8003578 <HAL_RCC_OscConfig+0x940>
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_RCC_OscConfig+0x934>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a02      	ldr	r2, [pc, #8]	; (800356c <HAL_RCC_OscConfig+0x934>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e03c      	b.n	80035e4 <HAL_RCC_OscConfig+0x9ac>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	10908120 	.word	0x10908120
 8003574:	40007000 	.word	0x40007000
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x96a>
 8003588:	4bc1      	ldr	r3, [pc, #772]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4ac0      	ldr	r2, [pc, #768]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	4bbe      	ldr	r3, [pc, #760]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4abd      	ldr	r2, [pc, #756]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 800359a:	f023 0304 	bic.w	r3, r3, #4
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	e020      	b.n	80035e4 <HAL_RCC_OscConfig+0x9ac>
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x994>
 80035b2:	4bb7      	ldr	r3, [pc, #732]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4ab6      	ldr	r2, [pc, #728]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	4bb4      	ldr	r3, [pc, #720]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4ab3      	ldr	r2, [pc, #716]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6213      	str	r3, [r2, #32]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x9ac>
 80035cc:	4bb0      	ldr	r3, [pc, #704]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4aaf      	ldr	r2, [pc, #700]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	4bad      	ldr	r3, [pc, #692]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4aac      	ldr	r2, [pc, #688]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8081 	beq.w	80036f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fe ffd5 	bl	80025a4 <HAL_GetTick>
 80035fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fe ffd0 	bl	80025a4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e345      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003620:	2202      	movs	r2, #2
 8003622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003644:	2202      	movs	r2, #2
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fa93 f2a3 	rbit	r2, r3
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800365e:	601a      	str	r2, [r3, #0]
  return result;
 8003660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003664:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d102      	bne.n	8003684 <HAL_RCC_OscConfig+0xa4c>
 800367e:	4b84      	ldr	r3, [pc, #528]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	e013      	b.n	80036ac <HAL_RCC_OscConfig+0xa74>
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b79      	ldr	r3, [pc, #484]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036b4:	2102      	movs	r1, #2
 80036b6:	6011      	str	r1, [r2, #0]
 80036b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	fa92 f1a2 	rbit	r1, r2
 80036c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036ce:	6011      	str	r1, [r2, #0]
  return result;
 80036d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d084      	beq.n	8003600 <HAL_RCC_OscConfig+0x9c8>
 80036f6:	e07f      	b.n	80037f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f8:	f7fe ff54 	bl	80025a4 <HAL_GetTick>
 80036fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	e00b      	b.n	800371a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe ff4f 	bl	80025a4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e2c4      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003722:	2202      	movs	r2, #2
 8003724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fa93 f2a3 	rbit	r2, r3
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003746:	2202      	movs	r2, #2
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f2a3 	rbit	r2, r3
 8003758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003760:	601a      	str	r2, [r3, #0]
  return result;
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800376a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0302 	orr.w	r3, r3, #2
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0xb4e>
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	e013      	b.n	80037ae <HAL_RCC_OscConfig+0xb76>
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037b6:	2102      	movs	r1, #2
 80037b8:	6011      	str	r1, [r2, #0]
 80037ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	fa92 f1a2 	rbit	r1, r2
 80037c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037d0:	6011      	str	r1, [r2, #0]
  return result;
 80037d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d184      	bne.n	8003702 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8242 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_RCC_OscConfig+0xc58>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b08      	cmp	r3, #8
 8003828:	f000 8213 	beq.w	8003c52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f040 8162 	bne.w	8003b02 <HAL_RCC_OscConfig+0xeca>
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003850:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003862:	601a      	str	r2, [r3, #0]
  return result;
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800386c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	461a      	mov	r2, r3
 8003880:	2300      	movs	r3, #0
 8003882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fe8e 	bl	80025a4 <HAL_GetTick>
 8003888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388c:	e00c      	b.n	80038a8 <HAL_RCC_OscConfig+0xc70>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fe86 	bl	80025a4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1fd      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038cc:	601a      	str	r2, [r3, #0]
  return result;
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0xcba>
 80038ec:	4bb0      	ldr	r3, [pc, #704]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e027      	b.n	8003942 <HAL_RCC_OscConfig+0xd0a>
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	4b9c      	ldr	r3, [pc, #624]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003946:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800394a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800394e:	6011      	str	r1, [r2, #0]
 8003950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003954:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	fa92 f1a2 	rbit	r1, r2
 800395e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003962:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003966:	6011      	str	r1, [r2, #0]
  return result;
 8003968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800396c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d182      	bne.n	8003894 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398e:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	497f      	ldr	r1, [pc, #508]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039da:	601a      	str	r2, [r3, #0]
  return result;
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	461a      	mov	r2, r3
 80039f8:	2301      	movs	r3, #1
 80039fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe fdd2 	bl	80025a4 <HAL_GetTick>
 8003a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	e009      	b.n	8003a1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fe fdcd 	bl	80025a4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e144      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a3e:	601a      	str	r2, [r3, #0]
  return result;
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCC_OscConfig+0xe2c>
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e027      	b.n	8003ab4 <HAL_RCC_OscConfig+0xe7c>
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	fa92 f1a2 	rbit	r1, r2
 8003ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ad8:	6011      	str	r1, [r2, #0]
  return result;
 8003ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ade:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d082      	beq.n	8003a06 <HAL_RCC_OscConfig+0xdce>
 8003b00:	e0cf      	b.n	8003ca2 <HAL_RCC_OscConfig+0x106a>
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	fa93 f2a3 	rbit	r2, r3
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b26:	601a      	str	r2, [r3, #0]
  return result;
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fd2c 	bl	80025a4 <HAL_GetTick>
 8003b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b50:	e009      	b.n	8003b66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fe fd27 	bl	80025a4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e09e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b8a:	601a      	str	r2, [r3, #0]
  return result;
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d104      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xf7c>
 8003baa:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <HAL_RCC_OscConfig+0xf78>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e029      	b.n	8003c04 <HAL_RCC_OscConfig+0xfcc>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fa93 f2a3 	rbit	r2, r3
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_OscConfig+0x1078>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	fa92 f1a2 	rbit	r1, r2
 8003c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c28:	6011      	str	r1, [r2, #0]
  return result;
 8003c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	fab2 f282 	clz	r2, r2
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	f042 0220 	orr.w	r2, r2, #32
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	f002 021f 	and.w	r2, r2, #31
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d180      	bne.n	8003b52 <HAL_RCC_OscConfig+0xf1a>
 8003c50:	e027      	b.n	8003ca2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e01e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_OscConfig+0x1078>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b09e      	sub	sp, #120	; 0x78
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e162      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b90      	ldr	r3, [pc, #576]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b8d      	ldr	r3, [pc, #564]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	498b      	ldr	r1, [pc, #556]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e14a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	497f      	ldr	r1, [pc, #508]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80dc 	beq.w	8003ee0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d13c      	bne.n	8003daa <HAL_RCC_ClockConfig+0xf6>
 8003d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xa6>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e00f      	b.n	8003d7a <HAL_RCC_ClockConfig+0xc6>
 8003d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	667b      	str	r3, [r7, #100]	; 0x64
 8003d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d76:	4b67      	ldr	r3, [pc, #412]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d8a:	fab2 f282 	clz	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	f042 0220 	orr.w	r2, r2, #32
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	f002 021f 	and.w	r2, r2, #31
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d17b      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0f3      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d13c      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x178>
 8003db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x128>
 8003dd6:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	e00f      	b.n	8003dfc <HAL_RCC_ClockConfig+0x148>
 8003ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40
 8003df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df8:	4b46      	ldr	r3, [pc, #280]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e00:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e04:	fa92 f2a2 	rbit	r2, r2
 8003e08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0c:	fab2 f282 	clz	r2, r2
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	f002 021f 	and.w	r2, r2, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13a      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b2      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x1a0>
 8003e4e:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	e00d      	b.n	8003e70 <HAL_RCC_ClockConfig+0x1bc>
 8003e54:	2302      	movs	r3, #2
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	2302      	movs	r3, #2
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2202      	movs	r2, #2
 8003e72:	61ba      	str	r2, [r7, #24]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	fa92 f2a2 	rbit	r2, r2
 8003e7a:	617a      	str	r2, [r7, #20]
  return result;
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	fab2 f282 	clz	r2, r2
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	f042 0220 	orr.w	r2, r2, #32
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f002 021f 	and.w	r2, r2, #31
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e079      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	491a      	ldr	r1, [pc, #104]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fb78 	bl	80025a4 <HAL_GetTick>
 8003eb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fe fb74 	bl	80025a4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e061      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 020c 	and.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1eb      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d214      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4906      	ldr	r1, [pc, #24]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_RCC_ClockConfig+0x25c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e040      	b.n	8003f92 <HAL_RCC_ClockConfig+0x2de>
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_ClockConfig+0x2e8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	491a      	ldr	r1, [pc, #104]	; (8003f9c <HAL_RCC_ClockConfig+0x2e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x2e8>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4912      	ldr	r1, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x2e8>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f56:	f000 f829 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_RCC_ClockConfig+0x2e8>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f64:	22f0      	movs	r2, #240	; 0xf0
 8003f66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	fa92 f2a2 	rbit	r2, r2
 8003f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	fab2 f282 	clz	r2, r2
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	40d3      	lsrs	r3, r2
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x2ec>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_RCC_ClockConfig+0x2f0>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_RCC_ClockConfig+0x2f4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fac6 	bl	800251c <HAL_InitTick>
  
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3778      	adds	r7, #120	; 0x78
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	08009ce0 	.word	0x08009ce0
 8003fa4:	20000008 	.word	0x20000008
 8003fa8:	2000000c 	.word	0x2000000c

08003fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b08b      	sub	sp, #44	; 0x2c
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x30>
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8003fda:	e03c      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fde:	623b      	str	r3, [r7, #32]
      break;
 8003fe0:	e03c      	b.n	800405c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fe8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	fa92 f2a2 	rbit	r2, r2
 8003ff4:	607a      	str	r2, [r7, #4]
  return result;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	fab2 f282 	clz	r2, r2
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	40d3      	lsrs	r3, r2
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	220f      	movs	r2, #15
 8004010:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	60fa      	str	r2, [r7, #12]
  return result;
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	fab2 f282 	clz	r2, r2
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	40d3      	lsrs	r3, r2
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004034:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	fbb2 f2f3 	udiv	r2, r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	e004      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <HAL_RCC_GetSysClockFreq+0xd0>)
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	623b      	str	r3, [r7, #32]
      break;
 8004054:	e002      	b.n	800405c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004058:	623b      	str	r3, [r7, #32]
      break;
 800405a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405c:	6a3b      	ldr	r3, [r7, #32]
}
 800405e:	4618      	mov	r0, r3
 8004060:	372c      	adds	r7, #44	; 0x2c
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	007a1200 	.word	0x007a1200
 8004074:	08009cf8 	.word	0x08009cf8
 8004078:	08009d08 	.word	0x08009d08
 800407c:	003d0900 	.word	0x003d0900

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000008 	.word	0x20000008

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800409e:	f7ff ffef 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a2:	4601      	mov	r1, r0
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	fa92 f2a2 	rbit	r2, r2
 80040b8:	603a      	str	r2, [r7, #0]
  return result;
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	40d3      	lsrs	r3, r2
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08009cf0 	.word	0x08009cf0

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040e2:	f7ff ffcd 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040e6:	4601      	mov	r1, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	fa92 f2a2 	rbit	r2, r2
 80040fc:	603a      	str	r2, [r7, #0]
  return result;
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	fab2 f282 	clz	r2, r2
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	40d3      	lsrs	r3, r2
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_RCC_GetPCLK2Freq+0x40>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	08009cf0 	.word	0x08009cf0

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b092      	sub	sp, #72	; 0x48
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80d4 	beq.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004144:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10e      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	61d3      	str	r3, [r2, #28]
 800415c:	4b48      	ldr	r3, [pc, #288]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b45      	ldr	r3, [pc, #276]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a41      	ldr	r2, [pc, #260]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe fa0d 	bl	80025a4 <HAL_GetTick>
 800418a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe fa09 	bl	80025a4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	; 0x64
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e169      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ac:	4b34      	ldr	r3, [pc, #208]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8084 	beq.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d07c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041cc:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	461a      	mov	r2, r3
 80041f6:	2301      	movs	r3, #1
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	461a      	mov	r2, r3
 800421a:	2300      	movs	r3, #0
 800421c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800421e:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004222:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04b      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fe f9b9 	bl	80025a4 <HAL_GetTick>
 8004232:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe f9b5 	bl	80025a4 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e113      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800424c:	2302      	movs	r3, #2
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	2302      	movs	r3, #2
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	61fb      	str	r3, [r7, #28]
  return result;
 8004264:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d108      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800427a:	4b01      	ldr	r3, [pc, #4]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	e00d      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
 8004288:	10908100 	.word	0x10908100
 800428c:	2302      	movs	r3, #2
 800428e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	4b78      	ldr	r3, [pc, #480]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2202      	movs	r2, #2
 800429e:	613a      	str	r2, [r7, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	fa92 f2a2 	rbit	r2, r2
 80042a6:	60fa      	str	r2, [r7, #12]
  return result;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	fab2 f282 	clz	r2, r2
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	f002 021f 	and.w	r2, r2, #31
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0b7      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042c6:	4b6d      	ldr	r3, [pc, #436]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	496a      	ldr	r1, [pc, #424]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f8:	4b60      	ldr	r3, [pc, #384]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f023 0203 	bic.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	495d      	ldr	r1, [pc, #372]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004316:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4956      	ldr	r1, [pc, #344]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004334:	4b51      	ldr	r3, [pc, #324]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	494e      	ldr	r1, [pc, #312]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f023 0210 	bic.w	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4947      	ldr	r1, [pc, #284]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	493f      	ldr	r1, [pc, #252]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f023 0220 	bic.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4938      	ldr	r1, [pc, #224]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ac:	4b33      	ldr	r3, [pc, #204]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	4930      	ldr	r1, [pc, #192]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4929      	ldr	r1, [pc, #164]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e8:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4921      	ldr	r1, [pc, #132]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	491a      	ldr	r1, [pc, #104]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	4912      	ldr	r1, [pc, #72]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	490b      	ldr	r1, [pc, #44]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	4903      	ldr	r1, [pc, #12]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3748      	adds	r7, #72	; 0x48
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e040      	b.n	8004514 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fe14 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2224      	movs	r2, #36	; 0x24
 80044ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fc00 	bl	8004cc4 <UART_SetConfig>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e022      	b.n	8004514 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fdc8 	bl	800506c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fe4f 	bl	80051b0 <UART_CheckIdleState>
 8004512:	4603      	mov	r3, r0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004530:	2b20      	cmp	r3, #32
 8004532:	d178      	bne.n	8004626 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_UART_Transmit+0x24>
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e071      	b.n	8004628 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2221      	movs	r2, #33	; 0x21
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004552:	f7fe f827 	bl	80025a4 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x68>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800458c:	e030      	b.n	80045f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 feb1 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e03c      	b.n	8004628 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c0:	b292      	uxth	r2, r2
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	3302      	adds	r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e008      	b.n	80045de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b292      	uxth	r2, r2
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1c8      	bne.n	800458e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	2140      	movs	r1, #64	; 0x40
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fe7a 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e005      	b.n	8004628 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004644:	2b20      	cmp	r3, #32
 8004646:	d132      	bne.n	80046ae <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Receive_IT+0x24>
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e02b      	b.n	80046b0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	613b      	str	r3, [r7, #16]
   return(result);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	69f9      	ldr	r1, [r7, #28]
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	61bb      	str	r3, [r7, #24]
   return(result);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e6      	bne.n	800466c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fe93 	bl	80053d0 <UART_Start_Receive_IT>
 80046aa:	4603      	mov	r3, r0
 80046ac:	e000      	b.n	80046b0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b0ba      	sub	sp, #232	; 0xe8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046e6:	4013      	ands	r3, r2
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d115      	bne.n	8004720 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 82ab 	beq.w	8004c6c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      }
      return;
 800471e:	e2a5      	b.n	8004c6c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8117 	beq.w	8004958 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004736:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_UART_IRQHandler+0x298>)
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 810a 	beq.w	8004958 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HAL_UART_IRQHandler+0xbc>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	f043 0201 	orr.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d011      	beq.n	80047a4 <HAL_UART_IRQHandler+0xec>
 8004780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2202      	movs	r2, #2
 8004792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <HAL_UART_IRQHandler+0x11c>
 80047b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2204      	movs	r2, #4
 80047c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004806:	f043 0208 	orr.w	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <HAL_UART_IRQHandler+0x18a>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8211 	beq.w	8004c70 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800488e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004892:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04f      	beq.n	800493a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fe4c 	bl	8005538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d141      	bne.n	8004932 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1d9      	bne.n	80048ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <HAL_UART_IRQHandler+0x29c>)
 8004908:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd ff9e 	bl	8002850 <HAL_DMA_Abort_IT>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d017      	beq.n	800494a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e00f      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9b4 	bl	8004c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00b      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9b0 	bl	8004c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e007      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9ac 	bl	8004c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004948:	e192      	b.n	8004c70 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494a:	bf00      	nop
    return;
 800494c:	e190      	b.n	8004c70 <HAL_UART_IRQHandler+0x5b8>
 800494e:	bf00      	nop
 8004950:	04000120 	.word	0x04000120
 8004954:	08005601 	.word	0x08005601

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	2b01      	cmp	r3, #1
 800495e:	f040 814b 	bne.w	8004bf8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8144 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 813d 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	f040 80b5 	bne.w	8004b00 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8164 	beq.w	8004c74 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049b6:	429a      	cmp	r2, r3
 80049b8:	f080 815c 	bcs.w	8004c74 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f000 8086 	beq.w	8004ade <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1da      	bne.n	80049d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e1      	bne.n	8004a1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e3      	bne.n	8004a58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ac2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e4      	bne.n	8004a9e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd fe80 	bl	80027de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8d7 	bl	8004cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004afe:	e0b9      	b.n	8004c74 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80ab 	beq.w	8004c78 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a6 	beq.w	8004c78 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e4      	bne.n	8004b2c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	623b      	str	r3, [r7, #32]
   return(result);
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b86:	633a      	str	r2, [r7, #48]	; 0x30
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e3      	bne.n	8004b62 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e4      	bne.n	8004bae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f85b 	bl	8004cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bf6:	e03f      	b.n	8004c78 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_UART_IRQHandler+0x56a>
 8004c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fed8 	bl	80059d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c20:	e02d      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01c      	beq.n	8004c7c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
    }
    return;
 8004c4a:	e017      	b.n	8004c7c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fce1 	bl	800562c <UART_EndTransmit_IT>
    return;
 8004c6a:	e008      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c6c:	bf00      	nop
 8004c6e:	e006      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c70:	bf00      	nop
 8004c72:	e004      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c74:	bf00      	nop
 8004c76:	e002      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c7c:	bf00      	nop
  }

}
 8004c7e:	37e8      	adds	r7, #232	; 0xe8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cf2:	f023 030c 	bic.w	r3, r3, #12
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4aa7      	ldr	r2, [pc, #668]	; (8004fdc <UART_SetConfig+0x318>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d120      	bne.n	8004d86 <UART_SetConfig+0xc2>
 8004d44:	4ba6      	ldr	r3, [pc, #664]	; (8004fe0 <UART_SetConfig+0x31c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0xbc>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x94>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d6f 	.word	0x08004d6f
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0b5      	b.n	8004eda <UART_SetConfig+0x216>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0b2      	b.n	8004eda <UART_SetConfig+0x216>
 8004d74:	2304      	movs	r3, #4
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e0af      	b.n	8004eda <UART_SetConfig+0x216>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e0ac      	b.n	8004eda <UART_SetConfig+0x216>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e0a9      	b.n	8004eda <UART_SetConfig+0x216>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a96      	ldr	r2, [pc, #600]	; (8004fe4 <UART_SetConfig+0x320>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d124      	bne.n	8004dda <UART_SetConfig+0x116>
 8004d90:	4b93      	ldr	r3, [pc, #588]	; (8004fe0 <UART_SetConfig+0x31c>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9c:	d011      	beq.n	8004dc2 <UART_SetConfig+0xfe>
 8004d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da2:	d817      	bhi.n	8004dd4 <UART_SetConfig+0x110>
 8004da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da8:	d011      	beq.n	8004dce <UART_SetConfig+0x10a>
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d811      	bhi.n	8004dd4 <UART_SetConfig+0x110>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <UART_SetConfig+0xf8>
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d006      	beq.n	8004dc8 <UART_SetConfig+0x104>
 8004dba:	e00b      	b.n	8004dd4 <UART_SetConfig+0x110>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e08b      	b.n	8004eda <UART_SetConfig+0x216>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e088      	b.n	8004eda <UART_SetConfig+0x216>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e085      	b.n	8004eda <UART_SetConfig+0x216>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e082      	b.n	8004eda <UART_SetConfig+0x216>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e07f      	b.n	8004eda <UART_SetConfig+0x216>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a82      	ldr	r2, [pc, #520]	; (8004fe8 <UART_SetConfig+0x324>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d124      	bne.n	8004e2e <UART_SetConfig+0x16a>
 8004de4:	4b7e      	ldr	r3, [pc, #504]	; (8004fe0 <UART_SetConfig+0x31c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004dec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df0:	d011      	beq.n	8004e16 <UART_SetConfig+0x152>
 8004df2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df6:	d817      	bhi.n	8004e28 <UART_SetConfig+0x164>
 8004df8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dfc:	d011      	beq.n	8004e22 <UART_SetConfig+0x15e>
 8004dfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e02:	d811      	bhi.n	8004e28 <UART_SetConfig+0x164>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <UART_SetConfig+0x14c>
 8004e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e0c:	d006      	beq.n	8004e1c <UART_SetConfig+0x158>
 8004e0e:	e00b      	b.n	8004e28 <UART_SetConfig+0x164>
 8004e10:	2300      	movs	r3, #0
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e061      	b.n	8004eda <UART_SetConfig+0x216>
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e05e      	b.n	8004eda <UART_SetConfig+0x216>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e05b      	b.n	8004eda <UART_SetConfig+0x216>
 8004e22:	2308      	movs	r3, #8
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e058      	b.n	8004eda <UART_SetConfig+0x216>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e055      	b.n	8004eda <UART_SetConfig+0x216>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6e      	ldr	r2, [pc, #440]	; (8004fec <UART_SetConfig+0x328>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d124      	bne.n	8004e82 <UART_SetConfig+0x1be>
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <UART_SetConfig+0x31c>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e44:	d011      	beq.n	8004e6a <UART_SetConfig+0x1a6>
 8004e46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e4a:	d817      	bhi.n	8004e7c <UART_SetConfig+0x1b8>
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e50:	d011      	beq.n	8004e76 <UART_SetConfig+0x1b2>
 8004e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e56:	d811      	bhi.n	8004e7c <UART_SetConfig+0x1b8>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <UART_SetConfig+0x1a0>
 8004e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e60:	d006      	beq.n	8004e70 <UART_SetConfig+0x1ac>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x1b8>
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e037      	b.n	8004eda <UART_SetConfig+0x216>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e034      	b.n	8004eda <UART_SetConfig+0x216>
 8004e70:	2304      	movs	r3, #4
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e031      	b.n	8004eda <UART_SetConfig+0x216>
 8004e76:	2308      	movs	r3, #8
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e02e      	b.n	8004eda <UART_SetConfig+0x216>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e02b      	b.n	8004eda <UART_SetConfig+0x216>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5a      	ldr	r2, [pc, #360]	; (8004ff0 <UART_SetConfig+0x32c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d124      	bne.n	8004ed6 <UART_SetConfig+0x212>
 8004e8c:	4b54      	ldr	r3, [pc, #336]	; (8004fe0 <UART_SetConfig+0x31c>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e98:	d011      	beq.n	8004ebe <UART_SetConfig+0x1fa>
 8004e9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e9e:	d817      	bhi.n	8004ed0 <UART_SetConfig+0x20c>
 8004ea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ea4:	d011      	beq.n	8004eca <UART_SetConfig+0x206>
 8004ea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eaa:	d811      	bhi.n	8004ed0 <UART_SetConfig+0x20c>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x1f4>
 8004eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb4:	d006      	beq.n	8004ec4 <UART_SetConfig+0x200>
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x20c>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x216>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e00a      	b.n	8004eda <UART_SetConfig+0x216>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e007      	b.n	8004eda <UART_SetConfig+0x216>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e004      	b.n	8004eda <UART_SetConfig+0x216>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e001      	b.n	8004eda <UART_SetConfig+0x216>
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee2:	d15b      	bne.n	8004f9c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d827      	bhi.n	8004f3a <UART_SetConfig+0x276>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x22c>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f3b 	.word	0x08004f3b
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f3b 	.word	0x08004f3b
 8004f08:	08004f3b 	.word	0x08004f3b
 8004f0c:	08004f3b 	.word	0x08004f3b
 8004f10:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7ff f8c0 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004f18:	61b8      	str	r0, [r7, #24]
        break;
 8004f1a:	e013      	b.n	8004f44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7ff f8de 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 8004f20:	61b8      	str	r0, [r7, #24]
        break;
 8004f22:	e00f      	b.n	8004f44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b33      	ldr	r3, [pc, #204]	; (8004ff4 <UART_SetConfig+0x330>)
 8004f26:	61bb      	str	r3, [r7, #24]
        break;
 8004f28:	e00c      	b.n	8004f44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7ff f83f 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8004f2e:	61b8      	str	r0, [r7, #24]
        break;
 8004f30:	e008      	b.n	8004f44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f36:	61bb      	str	r3, [r7, #24]
        break;
 8004f38:	e004      	b.n	8004f44 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	77bb      	strb	r3, [r7, #30]
        break;
 8004f42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 8082 	beq.w	8005050 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	005a      	lsls	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	441a      	add	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b0f      	cmp	r3, #15
 8004f66:	d916      	bls.n	8004f96 <UART_SetConfig+0x2d2>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6e:	d212      	bcs.n	8004f96 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f023 030f 	bic.w	r3, r3, #15
 8004f78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	89fa      	ldrh	r2, [r7, #14]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	e05c      	b.n	8005050 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	77bb      	strb	r3, [r7, #30]
 8004f9a:	e059      	b.n	8005050 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9c:	7ffb      	ldrb	r3, [r7, #31]
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d835      	bhi.n	800500e <UART_SetConfig+0x34a>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x2e4>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	0800500f 	.word	0x0800500f
 8004fb8:	08004fff 	.word	0x08004fff
 8004fbc:	0800500f 	.word	0x0800500f
 8004fc0:	0800500f 	.word	0x0800500f
 8004fc4:	0800500f 	.word	0x0800500f
 8004fc8:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7ff f864 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004fd0:	61b8      	str	r0, [r7, #24]
        break;
 8004fd2:	e021      	b.n	8005018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7ff f882 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 8004fd8:	61b8      	str	r0, [r7, #24]
        break;
 8004fda:	e01d      	b.n	8005018 <UART_SetConfig+0x354>
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40004800 	.word	0x40004800
 8004fec:	40004c00 	.word	0x40004c00
 8004ff0:	40005000 	.word	0x40005000
 8004ff4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <UART_SetConfig+0x3a4>)
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe ffd5 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8005002:	61b8      	str	r0, [r7, #24]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61bb      	str	r3, [r7, #24]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	77bb      	strb	r3, [r7, #30]
        break;
 8005016:	bf00      	nop
    }

    if (pclk != 0U)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085a      	lsrs	r2, r3, #1
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b0f      	cmp	r3, #15
 8005036:	d909      	bls.n	800504c <UART_SetConfig+0x388>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503e:	d205      	bcs.n	800504c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	e001      	b.n	8005050 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800505c:	7fbb      	ldrb	r3, [r7, #30]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	007a1200 	.word	0x007a1200

0800506c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516a:	d10a      	bne.n	8005182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b098      	sub	sp, #96	; 0x60
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c0:	f7fd f9f0 	bl	80025a4 <HAL_GetTick>
 80051c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d12e      	bne.n	8005232 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f88c 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d021      	beq.n	8005232 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005202:	653b      	str	r3, [r7, #80]	; 0x50
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
 800520e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800521a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e062      	b.n	80052f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b04      	cmp	r3, #4
 800523e:	d149      	bne.n	80052d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005248:	2200      	movs	r2, #0
 800524a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f856 	bl	8005300 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d03c      	beq.n	80052d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	623b      	str	r3, [r7, #32]
   return(result);
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
 800527a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800527e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60fb      	str	r3, [r7, #12]
   return(result);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ac:	61fa      	str	r2, [r7, #28]
 80052ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e011      	b.n	80052f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3758      	adds	r7, #88	; 0x58
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005310:	e049      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d045      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fd f943 	bl	80025a4 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <UART_WaitOnFlagUntilTimeout+0x30>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e048      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d031      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d110      	bne.n	8005372 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2208      	movs	r2, #8
 8005356:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f8ed 	bl	8005538 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2208      	movs	r2, #8
 8005362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e029      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d111      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800538a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f8d3 	bl	8005538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e00f      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d0a6      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b097      	sub	sp, #92	; 0x5c
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	d10e      	bne.n	8005422 <UART_Start_Receive_IT+0x52>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <UART_Start_Receive_IT+0x48>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005416:	e01a      	b.n	800544e <UART_Start_Receive_IT+0x7e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	22ff      	movs	r2, #255	; 0xff
 800541c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005420:	e015      	b.n	800544e <UART_Start_Receive_IT+0x7e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <UART_Start_Receive_IT+0x76>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <UART_Start_Receive_IT+0x6c>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	22ff      	movs	r2, #255	; 0xff
 8005436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800543a:	e008      	b.n	800544e <UART_Start_Receive_IT+0x7e>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	227f      	movs	r2, #127	; 0x7f
 8005440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005444:	e003      	b.n	800544e <UART_Start_Receive_IT+0x7e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2222      	movs	r2, #34	; 0x22
 800545a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	657b      	str	r3, [r7, #84]	; 0x54
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800547e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005480:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	d107      	bne.n	80054ac <UART_Start_Receive_IT+0xdc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a22      	ldr	r2, [pc, #136]	; (8005530 <UART_Start_Receive_IT+0x160>)
 80054a8:	669a      	str	r2, [r3, #104]	; 0x68
 80054aa:	e002      	b.n	80054b2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <UART_Start_Receive_IT+0x164>)
 80054b0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d019      	beq.n	80054ee <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_Start_Receive_IT+0xea>
 80054ec:	e018      	b.n	8005520 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f043 0320 	orr.w	r3, r3, #32
 8005502:	653b      	str	r3, [r7, #80]	; 0x50
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	623b      	str	r3, [r7, #32]
 800550e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	61bb      	str	r3, [r7, #24]
   return(result);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	375c      	adds	r7, #92	; 0x5c
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	08005829 	.word	0x08005829
 8005534:	08005681 	.word	0x08005681

08005538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b095      	sub	sp, #84	; 0x54
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
 8005560:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	61fb      	str	r3, [r7, #28]
   return(result);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d118      	bne.n	80055e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	647b      	str	r3, [r7, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055f4:	bf00      	nop
 80055f6:	3754      	adds	r7, #84	; 0x54
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fb3a 	bl	8004c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	60bb      	str	r3, [r7, #8]
   return(result);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	613b      	str	r3, [r7, #16]
   return(result);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e6      	bne.n	8005634 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fb06 	bl	8004c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005678:	bf00      	nop
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b09c      	sub	sp, #112	; 0x70
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800568e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005698:	2b22      	cmp	r3, #34	; 0x22
 800569a:	f040 80b9 	bne.w	8005810 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80056ac:	b2d9      	uxtb	r1, r3
 80056ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	400a      	ands	r2, r1
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 809c 	bne.w	8005820 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005706:	65bb      	str	r3, [r7, #88]	; 0x58
 8005708:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800570c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	667b      	str	r3, [r7, #100]	; 0x64
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800573a:	647a      	str	r2, [r7, #68]	; 0x44
 800573c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005784:	663b      	str	r3, [r7, #96]	; 0x60
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
 8005790:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d12e      	bne.n	8005808 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	69b9      	ldr	r1, [r7, #24]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	617b      	str	r3, [r7, #20]
   return(result);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d103      	bne.n	80057f8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2210      	movs	r2, #16
 80057f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fa53 	bl	8004cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005806:	e00b      	b.n	8005820 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fc f87f 	bl	800190c <HAL_UART_RxCpltCallback>
}
 800580e:	e007      	b.n	8005820 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	619a      	str	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	3770      	adds	r7, #112	; 0x70
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b09c      	sub	sp, #112	; 0x70
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005836:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005840:	2b22      	cmp	r3, #34	; 0x22
 8005842:	f040 80b9 	bne.w	80059b8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800584c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005856:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800585a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800585e:	4013      	ands	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005864:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	1c9a      	adds	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 809c 	bne.w	80059c8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800589e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a4:	667b      	str	r3, [r7, #100]	; 0x64
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ae:	657b      	str	r3, [r7, #84]	; 0x54
 80058b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e6      	bne.n	8005890 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3308      	adds	r3, #8
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058e2:	643a      	str	r2, [r7, #64]	; 0x40
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e5      	bne.n	80058c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d018      	beq.n	800594a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	61fb      	str	r3, [r7, #28]
   return(result);
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800592c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005938:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e6      	bne.n	8005918 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594e:	2b01      	cmp	r3, #1
 8005950:	d12e      	bne.n	80059b0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	60bb      	str	r3, [r7, #8]
   return(result);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 0310 	bic.w	r3, r3, #16
 800596c:	65bb      	str	r3, [r7, #88]	; 0x58
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	613b      	str	r3, [r7, #16]
   return(result);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d103      	bne.n	80059a0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2210      	movs	r2, #16
 800599e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff f97f 	bl	8004cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ae:	e00b      	b.n	80059c8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fb ffab 	bl	800190c <HAL_UART_RxCpltCallback>
}
 80059b6:	e007      	b.n	80059c8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	619a      	str	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	3770      	adds	r7, #112	; 0x70
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <atof>:
 80059e4:	2100      	movs	r1, #0
 80059e6:	f000 becd 	b.w	8006784 <strtod>

080059ea <atoi>:
 80059ea:	220a      	movs	r2, #10
 80059ec:	2100      	movs	r1, #0
 80059ee:	f000 bf57 	b.w	80068a0 <strtol>
	...

080059f4 <gcvt>:
 80059f4:	b530      	push	{r4, r5, lr}
 80059f6:	2200      	movs	r2, #0
 80059f8:	b085      	sub	sp, #20
 80059fa:	460c      	mov	r4, r1
 80059fc:	4605      	mov	r5, r0
 80059fe:	2300      	movs	r3, #0
 8005a00:	ec51 0b10 	vmov	r0, r1, d0
 8005a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a08:	f7fb f868 	bl	8000adc <__aeabi_dcmplt>
 8005a0c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005a10:	4622      	mov	r2, r4
 8005a12:	b118      	cbz	r0, 8005a1c <gcvt+0x28>
 8005a14:	232d      	movs	r3, #45	; 0x2d
 8005a16:	f802 3b01 	strb.w	r3, [r2], #1
 8005a1a:	3d01      	subs	r5, #1
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4806      	ldr	r0, [pc, #24]	; (8005a38 <gcvt+0x44>)
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	4629      	mov	r1, r5
 8005a24:	2367      	movs	r3, #103	; 0x67
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	f000 ffbe 	bl	80069a8 <_gcvt>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	bf14      	ite	ne
 8005a30:	4620      	movne	r0, r4
 8005a32:	2000      	moveq	r0, #0
 8005a34:	b005      	add	sp, #20
 8005a36:	bd30      	pop	{r4, r5, pc}
 8005a38:	20000014 	.word	0x20000014

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	; (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000014 	.word	0x20000014

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	; (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	; (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2600      	movs	r6, #0
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4d0b      	ldr	r5, [pc, #44]	; (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	; (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f004 f930 	bl	8009cc0 <_init>
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2600      	movs	r6, #0
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	0800a1b0 	.word	0x0800a1b0
 8005a84:	0800a1b0 	.word	0x0800a1b0
 8005a88:	0800a1b0 	.word	0x0800a1b0
 8005a8c:	0800a1b4 	.word	0x0800a1b4

08005a90 <memcpy>:
 8005a90:	440a      	add	r2, r1
 8005a92:	4291      	cmp	r1, r2
 8005a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a98:	d100      	bne.n	8005a9c <memcpy+0xc>
 8005a9a:	4770      	bx	lr
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	d1f9      	bne.n	8005a9e <memcpy+0xe>
 8005aaa:	bd10      	pop	{r4, pc}

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <siprintf>:
 8005abc:	b40e      	push	{r1, r2, r3}
 8005abe:	b500      	push	{lr}
 8005ac0:	b09c      	sub	sp, #112	; 0x70
 8005ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ac4:	9002      	str	r0, [sp, #8]
 8005ac6:	9006      	str	r0, [sp, #24]
 8005ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005acc:	4809      	ldr	r0, [pc, #36]	; (8005af4 <siprintf+0x38>)
 8005ace:	9107      	str	r1, [sp, #28]
 8005ad0:	9104      	str	r1, [sp, #16]
 8005ad2:	4909      	ldr	r1, [pc, #36]	; (8005af8 <siprintf+0x3c>)
 8005ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad8:	9105      	str	r1, [sp, #20]
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	a902      	add	r1, sp, #8
 8005ae0:	f002 f9b8 	bl	8007e54 <_svfiprintf_r>
 8005ae4:	9b02      	ldr	r3, [sp, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	b01c      	add	sp, #112	; 0x70
 8005aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af0:	b003      	add	sp, #12
 8005af2:	4770      	bx	lr
 8005af4:	20000014 	.word	0x20000014
 8005af8:	ffff0208 	.word	0xffff0208

08005afc <strchr>:
 8005afc:	b2c9      	uxtb	r1, r1
 8005afe:	4603      	mov	r3, r0
 8005b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b04:	b11a      	cbz	r2, 8005b0e <strchr+0x12>
 8005b06:	428a      	cmp	r2, r1
 8005b08:	d1f9      	bne.n	8005afe <strchr+0x2>
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	4770      	bx	lr
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	bf18      	it	ne
 8005b12:	2300      	movne	r3, #0
 8005b14:	e7f9      	b.n	8005b0a <strchr+0xe>

08005b16 <strncpy>:
 8005b16:	b510      	push	{r4, lr}
 8005b18:	3901      	subs	r1, #1
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	b132      	cbz	r2, 8005b2c <strncpy+0x16>
 8005b1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b22:	f803 4b01 	strb.w	r4, [r3], #1
 8005b26:	3a01      	subs	r2, #1
 8005b28:	2c00      	cmp	r4, #0
 8005b2a:	d1f7      	bne.n	8005b1c <strncpy+0x6>
 8005b2c:	441a      	add	r2, r3
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <strncpy+0x20>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <strncpy+0x1a>

08005b3c <sulp>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	ec45 4b10 	vmov	d0, r4, r5
 8005b46:	4616      	mov	r6, r2
 8005b48:	f001 fee2 	bl	8007910 <__ulp>
 8005b4c:	ec51 0b10 	vmov	r0, r1, d0
 8005b50:	b17e      	cbz	r6, 8005b72 <sulp+0x36>
 8005b52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005b56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dd09      	ble.n	8005b72 <sulp+0x36>
 8005b5e:	051b      	lsls	r3, r3, #20
 8005b60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b64:	2400      	movs	r4, #0
 8005b66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	f7fa fd43 	bl	80005f8 <__aeabi_dmul>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	0000      	movs	r0, r0
	...

08005b78 <_strtod_l>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ed2d 8b02 	vpush	{d8}
 8005b80:	b09d      	sub	sp, #116	; 0x74
 8005b82:	461f      	mov	r7, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	9318      	str	r3, [sp, #96]	; 0x60
 8005b88:	4ba2      	ldr	r3, [pc, #648]	; (8005e14 <_strtod_l+0x29c>)
 8005b8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	4604      	mov	r4, r0
 8005b92:	4618      	mov	r0, r3
 8005b94:	4688      	mov	r8, r1
 8005b96:	f7fa fb1b 	bl	80001d0 <strlen>
 8005b9a:	f04f 0a00 	mov.w	sl, #0
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	f04f 0b00 	mov.w	fp, #0
 8005ba4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	2a2b      	cmp	r2, #43	; 0x2b
 8005bae:	d04e      	beq.n	8005c4e <_strtod_l+0xd6>
 8005bb0:	d83b      	bhi.n	8005c2a <_strtod_l+0xb2>
 8005bb2:	2a0d      	cmp	r2, #13
 8005bb4:	d834      	bhi.n	8005c20 <_strtod_l+0xa8>
 8005bb6:	2a08      	cmp	r2, #8
 8005bb8:	d834      	bhi.n	8005c24 <_strtod_l+0xac>
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d03e      	beq.n	8005c3c <_strtod_l+0xc4>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005bc4:	7833      	ldrb	r3, [r6, #0]
 8005bc6:	2b30      	cmp	r3, #48	; 0x30
 8005bc8:	f040 80b0 	bne.w	8005d2c <_strtod_l+0x1b4>
 8005bcc:	7873      	ldrb	r3, [r6, #1]
 8005bce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005bd2:	2b58      	cmp	r3, #88	; 0x58
 8005bd4:	d168      	bne.n	8005ca8 <_strtod_l+0x130>
 8005bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	ab18      	add	r3, sp, #96	; 0x60
 8005bdc:	9702      	str	r7, [sp, #8]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4a8d      	ldr	r2, [pc, #564]	; (8005e18 <_strtod_l+0x2a0>)
 8005be2:	ab19      	add	r3, sp, #100	; 0x64
 8005be4:	a917      	add	r1, sp, #92	; 0x5c
 8005be6:	4620      	mov	r0, r4
 8005be8:	f001 f806 	bl	8006bf8 <__gethex>
 8005bec:	f010 0707 	ands.w	r7, r0, #7
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	d005      	beq.n	8005c00 <_strtod_l+0x88>
 8005bf4:	2f06      	cmp	r7, #6
 8005bf6:	d12c      	bne.n	8005c52 <_strtod_l+0xda>
 8005bf8:	3601      	adds	r6, #1
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9617      	str	r6, [sp, #92]	; 0x5c
 8005bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8005c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 8590 	bne.w	8006728 <_strtod_l+0xbb0>
 8005c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0a:	b1eb      	cbz	r3, 8005c48 <_strtod_l+0xd0>
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c12:	ec43 2b10 	vmov	d0, r2, r3
 8005c16:	b01d      	add	sp, #116	; 0x74
 8005c18:	ecbd 8b02 	vpop	{d8}
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	2a20      	cmp	r2, #32
 8005c22:	d1cc      	bne.n	8005bbe <_strtod_l+0x46>
 8005c24:	3301      	adds	r3, #1
 8005c26:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c28:	e7be      	b.n	8005ba8 <_strtod_l+0x30>
 8005c2a:	2a2d      	cmp	r2, #45	; 0x2d
 8005c2c:	d1c7      	bne.n	8005bbe <_strtod_l+0x46>
 8005c2e:	2201      	movs	r2, #1
 8005c30:	920a      	str	r2, [sp, #40]	; 0x28
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1c2      	bne.n	8005bc2 <_strtod_l+0x4a>
 8005c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 856e 	bne.w	8006724 <_strtod_l+0xbac>
 8005c48:	4652      	mov	r2, sl
 8005c4a:	465b      	mov	r3, fp
 8005c4c:	e7e1      	b.n	8005c12 <_strtod_l+0x9a>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	e7ee      	b.n	8005c30 <_strtod_l+0xb8>
 8005c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c54:	b13a      	cbz	r2, 8005c66 <_strtod_l+0xee>
 8005c56:	2135      	movs	r1, #53	; 0x35
 8005c58:	a81a      	add	r0, sp, #104	; 0x68
 8005c5a:	f001 ff83 	bl	8007b64 <__copybits>
 8005c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c60:	4620      	mov	r0, r4
 8005c62:	f001 fb23 	bl	80072ac <_Bfree>
 8005c66:	3f01      	subs	r7, #1
 8005c68:	2f04      	cmp	r7, #4
 8005c6a:	d806      	bhi.n	8005c7a <_strtod_l+0x102>
 8005c6c:	e8df f007 	tbb	[pc, r7]
 8005c70:	1714030a 	.word	0x1714030a
 8005c74:	0a          	.byte	0x0a
 8005c75:	00          	.byte	0x00
 8005c76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005c7a:	0728      	lsls	r0, r5, #28
 8005c7c:	d5c0      	bpl.n	8005c00 <_strtod_l+0x88>
 8005c7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005c82:	e7bd      	b.n	8005c00 <_strtod_l+0x88>
 8005c84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005c88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c96:	e7f0      	b.n	8005c7a <_strtod_l+0x102>
 8005c98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005e1c <_strtod_l+0x2a4>
 8005c9c:	e7ed      	b.n	8005c7a <_strtod_l+0x102>
 8005c9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005ca2:	f04f 3aff 	mov.w	sl, #4294967295
 8005ca6:	e7e8      	b.n	8005c7a <_strtod_l+0x102>
 8005ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b30      	cmp	r3, #48	; 0x30
 8005cb2:	d0f9      	beq.n	8005ca8 <_strtod_l+0x130>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0a3      	beq.n	8005c00 <_strtod_l+0x88>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f04f 0900 	mov.w	r9, #0
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cc2:	9308      	str	r3, [sp, #32]
 8005cc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cc8:	464f      	mov	r7, r9
 8005cca:	220a      	movs	r2, #10
 8005ccc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005cce:	7806      	ldrb	r6, [r0, #0]
 8005cd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005cd4:	b2d9      	uxtb	r1, r3
 8005cd6:	2909      	cmp	r1, #9
 8005cd8:	d92a      	bls.n	8005d30 <_strtod_l+0x1b8>
 8005cda:	9905      	ldr	r1, [sp, #20]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	f002 fb6f 	bl	80083c0 <strncmp>
 8005ce2:	b398      	cbz	r0, 8005d4c <_strtod_l+0x1d4>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	463d      	mov	r5, r7
 8005cea:	9005      	str	r0, [sp, #20]
 8005cec:	4603      	mov	r3, r0
 8005cee:	2a65      	cmp	r2, #101	; 0x65
 8005cf0:	d001      	beq.n	8005cf6 <_strtod_l+0x17e>
 8005cf2:	2a45      	cmp	r2, #69	; 0x45
 8005cf4:	d118      	bne.n	8005d28 <_strtod_l+0x1b0>
 8005cf6:	b91d      	cbnz	r5, 8005d00 <_strtod_l+0x188>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	4302      	orrs	r2, r0
 8005cfc:	d09e      	beq.n	8005c3c <_strtod_l+0xc4>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005d04:	f108 0201 	add.w	r2, r8, #1
 8005d08:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005d0e:	2a2b      	cmp	r2, #43	; 0x2b
 8005d10:	d075      	beq.n	8005dfe <_strtod_l+0x286>
 8005d12:	2a2d      	cmp	r2, #45	; 0x2d
 8005d14:	d07b      	beq.n	8005e0e <_strtod_l+0x296>
 8005d16:	f04f 0c00 	mov.w	ip, #0
 8005d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d1e:	2909      	cmp	r1, #9
 8005d20:	f240 8082 	bls.w	8005e28 <_strtod_l+0x2b0>
 8005d24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005d28:	2600      	movs	r6, #0
 8005d2a:	e09d      	b.n	8005e68 <_strtod_l+0x2f0>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e7c4      	b.n	8005cba <_strtod_l+0x142>
 8005d30:	2f08      	cmp	r7, #8
 8005d32:	bfd8      	it	le
 8005d34:	9907      	ldrle	r1, [sp, #28]
 8005d36:	f100 0001 	add.w	r0, r0, #1
 8005d3a:	bfda      	itte	le
 8005d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d40:	9307      	strle	r3, [sp, #28]
 8005d42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005d46:	3701      	adds	r7, #1
 8005d48:	9017      	str	r0, [sp, #92]	; 0x5c
 8005d4a:	e7bf      	b.n	8005ccc <_strtod_l+0x154>
 8005d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d4e:	195a      	adds	r2, r3, r5
 8005d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d52:	5d5a      	ldrb	r2, [r3, r5]
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	d037      	beq.n	8005dc8 <_strtod_l+0x250>
 8005d58:	9005      	str	r0, [sp, #20]
 8005d5a:	463d      	mov	r5, r7
 8005d5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d912      	bls.n	8005d8a <_strtod_l+0x212>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e7c2      	b.n	8005cee <_strtod_l+0x176>
 8005d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d6e:	785a      	ldrb	r2, [r3, #1]
 8005d70:	3001      	adds	r0, #1
 8005d72:	2a30      	cmp	r2, #48	; 0x30
 8005d74:	d0f8      	beq.n	8005d68 <_strtod_l+0x1f0>
 8005d76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	f200 84d9 	bhi.w	8006732 <_strtod_l+0xbba>
 8005d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d82:	9005      	str	r0, [sp, #20]
 8005d84:	2000      	movs	r0, #0
 8005d86:	9308      	str	r3, [sp, #32]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	3a30      	subs	r2, #48	; 0x30
 8005d8c:	f100 0301 	add.w	r3, r0, #1
 8005d90:	d014      	beq.n	8005dbc <_strtod_l+0x244>
 8005d92:	9905      	ldr	r1, [sp, #20]
 8005d94:	4419      	add	r1, r3
 8005d96:	9105      	str	r1, [sp, #20]
 8005d98:	462b      	mov	r3, r5
 8005d9a:	eb00 0e05 	add.w	lr, r0, r5
 8005d9e:	210a      	movs	r1, #10
 8005da0:	4573      	cmp	r3, lr
 8005da2:	d113      	bne.n	8005dcc <_strtod_l+0x254>
 8005da4:	182b      	adds	r3, r5, r0
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	f105 0501 	add.w	r5, r5, #1
 8005dac:	4405      	add	r5, r0
 8005dae:	dc1c      	bgt.n	8005dea <_strtod_l+0x272>
 8005db0:	9907      	ldr	r1, [sp, #28]
 8005db2:	230a      	movs	r3, #10
 8005db4:	fb03 2301 	mla	r3, r3, r1, r2
 8005db8:	9307      	str	r3, [sp, #28]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dbe:	1c51      	adds	r1, r2, #1
 8005dc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005dc2:	7852      	ldrb	r2, [r2, #1]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	e7c9      	b.n	8005d5c <_strtod_l+0x1e4>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	e7d2      	b.n	8005d72 <_strtod_l+0x1fa>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	dc04      	bgt.n	8005dda <_strtod_l+0x262>
 8005dd0:	9e07      	ldr	r6, [sp, #28]
 8005dd2:	434e      	muls	r6, r1
 8005dd4:	9607      	str	r6, [sp, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7e2      	b.n	8005da0 <_strtod_l+0x228>
 8005dda:	f103 0c01 	add.w	ip, r3, #1
 8005dde:	f1bc 0f10 	cmp.w	ip, #16
 8005de2:	bfd8      	it	le
 8005de4:	fb01 f909 	mulle.w	r9, r1, r9
 8005de8:	e7f5      	b.n	8005dd6 <_strtod_l+0x25e>
 8005dea:	2d10      	cmp	r5, #16
 8005dec:	bfdc      	itt	le
 8005dee:	230a      	movle	r3, #10
 8005df0:	fb03 2909 	mlale	r9, r3, r9, r2
 8005df4:	e7e1      	b.n	8005dba <_strtod_l+0x242>
 8005df6:	2300      	movs	r3, #0
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e77c      	b.n	8005cf8 <_strtod_l+0x180>
 8005dfe:	f04f 0c00 	mov.w	ip, #0
 8005e02:	f108 0202 	add.w	r2, r8, #2
 8005e06:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005e0c:	e785      	b.n	8005d1a <_strtod_l+0x1a2>
 8005e0e:	f04f 0c01 	mov.w	ip, #1
 8005e12:	e7f6      	b.n	8005e02 <_strtod_l+0x28a>
 8005e14:	08009ef0 	.word	0x08009ef0
 8005e18:	08009d24 	.word	0x08009d24
 8005e1c:	7ff00000 	.word	0x7ff00000
 8005e20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e22:	1c51      	adds	r1, r2, #1
 8005e24:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e26:	7852      	ldrb	r2, [r2, #1]
 8005e28:	2a30      	cmp	r2, #48	; 0x30
 8005e2a:	d0f9      	beq.n	8005e20 <_strtod_l+0x2a8>
 8005e2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005e30:	2908      	cmp	r1, #8
 8005e32:	f63f af79 	bhi.w	8005d28 <_strtod_l+0x1b0>
 8005e36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e3c:	9206      	str	r2, [sp, #24]
 8005e3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e40:	1c51      	adds	r1, r2, #1
 8005e42:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e44:	7852      	ldrb	r2, [r2, #1]
 8005e46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005e4a:	2e09      	cmp	r6, #9
 8005e4c:	d937      	bls.n	8005ebe <_strtod_l+0x346>
 8005e4e:	9e06      	ldr	r6, [sp, #24]
 8005e50:	1b89      	subs	r1, r1, r6
 8005e52:	2908      	cmp	r1, #8
 8005e54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005e58:	dc02      	bgt.n	8005e60 <_strtod_l+0x2e8>
 8005e5a:	4576      	cmp	r6, lr
 8005e5c:	bfa8      	it	ge
 8005e5e:	4676      	movge	r6, lr
 8005e60:	f1bc 0f00 	cmp.w	ip, #0
 8005e64:	d000      	beq.n	8005e68 <_strtod_l+0x2f0>
 8005e66:	4276      	negs	r6, r6
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d14d      	bne.n	8005f08 <_strtod_l+0x390>
 8005e6c:	9904      	ldr	r1, [sp, #16]
 8005e6e:	4301      	orrs	r1, r0
 8005e70:	f47f aec6 	bne.w	8005c00 <_strtod_l+0x88>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f47f aee1 	bne.w	8005c3c <_strtod_l+0xc4>
 8005e7a:	2a69      	cmp	r2, #105	; 0x69
 8005e7c:	d027      	beq.n	8005ece <_strtod_l+0x356>
 8005e7e:	dc24      	bgt.n	8005eca <_strtod_l+0x352>
 8005e80:	2a49      	cmp	r2, #73	; 0x49
 8005e82:	d024      	beq.n	8005ece <_strtod_l+0x356>
 8005e84:	2a4e      	cmp	r2, #78	; 0x4e
 8005e86:	f47f aed9 	bne.w	8005c3c <_strtod_l+0xc4>
 8005e8a:	499f      	ldr	r1, [pc, #636]	; (8006108 <_strtod_l+0x590>)
 8005e8c:	a817      	add	r0, sp, #92	; 0x5c
 8005e8e:	f001 f90b 	bl	80070a8 <__match>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f43f aed2 	beq.w	8005c3c <_strtod_l+0xc4>
 8005e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b28      	cmp	r3, #40	; 0x28
 8005e9e:	d12d      	bne.n	8005efc <_strtod_l+0x384>
 8005ea0:	499a      	ldr	r1, [pc, #616]	; (800610c <_strtod_l+0x594>)
 8005ea2:	aa1a      	add	r2, sp, #104	; 0x68
 8005ea4:	a817      	add	r0, sp, #92	; 0x5c
 8005ea6:	f001 f913 	bl	80070d0 <__hexnan>
 8005eaa:	2805      	cmp	r0, #5
 8005eac:	d126      	bne.n	8005efc <_strtod_l+0x384>
 8005eae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005eb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005eb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005eb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ebc:	e6a0      	b.n	8005c00 <_strtod_l+0x88>
 8005ebe:	210a      	movs	r1, #10
 8005ec0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005ec4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005ec8:	e7b9      	b.n	8005e3e <_strtod_l+0x2c6>
 8005eca:	2a6e      	cmp	r2, #110	; 0x6e
 8005ecc:	e7db      	b.n	8005e86 <_strtod_l+0x30e>
 8005ece:	4990      	ldr	r1, [pc, #576]	; (8006110 <_strtod_l+0x598>)
 8005ed0:	a817      	add	r0, sp, #92	; 0x5c
 8005ed2:	f001 f8e9 	bl	80070a8 <__match>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f43f aeb0 	beq.w	8005c3c <_strtod_l+0xc4>
 8005edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ede:	498d      	ldr	r1, [pc, #564]	; (8006114 <_strtod_l+0x59c>)
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	a817      	add	r0, sp, #92	; 0x5c
 8005ee4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ee6:	f001 f8df 	bl	80070a8 <__match>
 8005eea:	b910      	cbnz	r0, 8005ef2 <_strtod_l+0x37a>
 8005eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eee:	3301      	adds	r3, #1
 8005ef0:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ef2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006124 <_strtod_l+0x5ac>
 8005ef6:	f04f 0a00 	mov.w	sl, #0
 8005efa:	e681      	b.n	8005c00 <_strtod_l+0x88>
 8005efc:	4886      	ldr	r0, [pc, #536]	; (8006118 <_strtod_l+0x5a0>)
 8005efe:	f002 fa3f 	bl	8008380 <nan>
 8005f02:	ec5b ab10 	vmov	sl, fp, d0
 8005f06:	e67b      	b.n	8005c00 <_strtod_l+0x88>
 8005f08:	9b05      	ldr	r3, [sp, #20]
 8005f0a:	9807      	ldr	r0, [sp, #28]
 8005f0c:	1af3      	subs	r3, r6, r3
 8005f0e:	2f00      	cmp	r7, #0
 8005f10:	bf08      	it	eq
 8005f12:	462f      	moveq	r7, r5
 8005f14:	2d10      	cmp	r5, #16
 8005f16:	9306      	str	r3, [sp, #24]
 8005f18:	46a8      	mov	r8, r5
 8005f1a:	bfa8      	it	ge
 8005f1c:	f04f 0810 	movge.w	r8, #16
 8005f20:	f7fa faf0 	bl	8000504 <__aeabi_ui2d>
 8005f24:	2d09      	cmp	r5, #9
 8005f26:	4682      	mov	sl, r0
 8005f28:	468b      	mov	fp, r1
 8005f2a:	dd13      	ble.n	8005f54 <_strtod_l+0x3dc>
 8005f2c:	4b7b      	ldr	r3, [pc, #492]	; (800611c <_strtod_l+0x5a4>)
 8005f2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005f32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	4682      	mov	sl, r0
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	468b      	mov	fp, r1
 8005f40:	f7fa fae0 	bl	8000504 <__aeabi_ui2d>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4650      	mov	r0, sl
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	f7fa f99e 	bl	800028c <__adddf3>
 8005f50:	4682      	mov	sl, r0
 8005f52:	468b      	mov	fp, r1
 8005f54:	2d0f      	cmp	r5, #15
 8005f56:	dc38      	bgt.n	8005fca <_strtod_l+0x452>
 8005f58:	9b06      	ldr	r3, [sp, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f43f ae50 	beq.w	8005c00 <_strtod_l+0x88>
 8005f60:	dd24      	ble.n	8005fac <_strtod_l+0x434>
 8005f62:	2b16      	cmp	r3, #22
 8005f64:	dc0b      	bgt.n	8005f7e <_strtod_l+0x406>
 8005f66:	496d      	ldr	r1, [pc, #436]	; (800611c <_strtod_l+0x5a4>)
 8005f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f70:	4652      	mov	r2, sl
 8005f72:	465b      	mov	r3, fp
 8005f74:	f7fa fb40 	bl	80005f8 <__aeabi_dmul>
 8005f78:	4682      	mov	sl, r0
 8005f7a:	468b      	mov	fp, r1
 8005f7c:	e640      	b.n	8005c00 <_strtod_l+0x88>
 8005f7e:	9a06      	ldr	r2, [sp, #24]
 8005f80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005f84:	4293      	cmp	r3, r2
 8005f86:	db20      	blt.n	8005fca <_strtod_l+0x452>
 8005f88:	4c64      	ldr	r4, [pc, #400]	; (800611c <_strtod_l+0x5a4>)
 8005f8a:	f1c5 050f 	rsb	r5, r5, #15
 8005f8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f92:	4652      	mov	r2, sl
 8005f94:	465b      	mov	r3, fp
 8005f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9a:	f7fa fb2d 	bl	80005f8 <__aeabi_dmul>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	1b5d      	subs	r5, r3, r5
 8005fa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005faa:	e7e3      	b.n	8005f74 <_strtod_l+0x3fc>
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	3316      	adds	r3, #22
 8005fb0:	db0b      	blt.n	8005fca <_strtod_l+0x452>
 8005fb2:	9b05      	ldr	r3, [sp, #20]
 8005fb4:	1b9e      	subs	r6, r3, r6
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <_strtod_l+0x5a4>)
 8005fb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005fbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fc42 	bl	800084c <__aeabi_ddiv>
 8005fc8:	e7d6      	b.n	8005f78 <_strtod_l+0x400>
 8005fca:	9b06      	ldr	r3, [sp, #24]
 8005fcc:	eba5 0808 	sub.w	r8, r5, r8
 8005fd0:	4498      	add	r8, r3
 8005fd2:	f1b8 0f00 	cmp.w	r8, #0
 8005fd6:	dd74      	ble.n	80060c2 <_strtod_l+0x54a>
 8005fd8:	f018 030f 	ands.w	r3, r8, #15
 8005fdc:	d00a      	beq.n	8005ff4 <_strtod_l+0x47c>
 8005fde:	494f      	ldr	r1, [pc, #316]	; (800611c <_strtod_l+0x5a4>)
 8005fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fe4:	4652      	mov	r2, sl
 8005fe6:	465b      	mov	r3, fp
 8005fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fec:	f7fa fb04 	bl	80005f8 <__aeabi_dmul>
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	468b      	mov	fp, r1
 8005ff4:	f038 080f 	bics.w	r8, r8, #15
 8005ff8:	d04f      	beq.n	800609a <_strtod_l+0x522>
 8005ffa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005ffe:	dd22      	ble.n	8006046 <_strtod_l+0x4ce>
 8006000:	2500      	movs	r5, #0
 8006002:	462e      	mov	r6, r5
 8006004:	9507      	str	r5, [sp, #28]
 8006006:	9505      	str	r5, [sp, #20]
 8006008:	2322      	movs	r3, #34	; 0x22
 800600a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006124 <_strtod_l+0x5ac>
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	f04f 0a00 	mov.w	sl, #0
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f43f adf2 	beq.w	8005c00 <_strtod_l+0x88>
 800601c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800601e:	4620      	mov	r0, r4
 8006020:	f001 f944 	bl	80072ac <_Bfree>
 8006024:	9905      	ldr	r1, [sp, #20]
 8006026:	4620      	mov	r0, r4
 8006028:	f001 f940 	bl	80072ac <_Bfree>
 800602c:	4631      	mov	r1, r6
 800602e:	4620      	mov	r0, r4
 8006030:	f001 f93c 	bl	80072ac <_Bfree>
 8006034:	9907      	ldr	r1, [sp, #28]
 8006036:	4620      	mov	r0, r4
 8006038:	f001 f938 	bl	80072ac <_Bfree>
 800603c:	4629      	mov	r1, r5
 800603e:	4620      	mov	r0, r4
 8006040:	f001 f934 	bl	80072ac <_Bfree>
 8006044:	e5dc      	b.n	8005c00 <_strtod_l+0x88>
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <_strtod_l+0x5a8>)
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	2300      	movs	r3, #0
 800604c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006050:	4650      	mov	r0, sl
 8006052:	4659      	mov	r1, fp
 8006054:	4699      	mov	r9, r3
 8006056:	f1b8 0f01 	cmp.w	r8, #1
 800605a:	dc21      	bgt.n	80060a0 <_strtod_l+0x528>
 800605c:	b10b      	cbz	r3, 8006062 <_strtod_l+0x4ea>
 800605e:	4682      	mov	sl, r0
 8006060:	468b      	mov	fp, r1
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <_strtod_l+0x5a8>)
 8006064:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006068:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800606c:	4652      	mov	r2, sl
 800606e:	465b      	mov	r3, fp
 8006070:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006074:	f7fa fac0 	bl	80005f8 <__aeabi_dmul>
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <_strtod_l+0x5ac>)
 800607a:	460a      	mov	r2, r1
 800607c:	400b      	ands	r3, r1
 800607e:	492a      	ldr	r1, [pc, #168]	; (8006128 <_strtod_l+0x5b0>)
 8006080:	428b      	cmp	r3, r1
 8006082:	4682      	mov	sl, r0
 8006084:	d8bc      	bhi.n	8006000 <_strtod_l+0x488>
 8006086:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800608a:	428b      	cmp	r3, r1
 800608c:	bf86      	itte	hi
 800608e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800612c <_strtod_l+0x5b4>
 8006092:	f04f 3aff 	movhi.w	sl, #4294967295
 8006096:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800609a:	2300      	movs	r3, #0
 800609c:	9304      	str	r3, [sp, #16]
 800609e:	e084      	b.n	80061aa <_strtod_l+0x632>
 80060a0:	f018 0f01 	tst.w	r8, #1
 80060a4:	d005      	beq.n	80060b2 <_strtod_l+0x53a>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fa faa4 	bl	80005f8 <__aeabi_dmul>
 80060b0:	2301      	movs	r3, #1
 80060b2:	9a04      	ldr	r2, [sp, #16]
 80060b4:	3208      	adds	r2, #8
 80060b6:	f109 0901 	add.w	r9, r9, #1
 80060ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060be:	9204      	str	r2, [sp, #16]
 80060c0:	e7c9      	b.n	8006056 <_strtod_l+0x4de>
 80060c2:	d0ea      	beq.n	800609a <_strtod_l+0x522>
 80060c4:	f1c8 0800 	rsb	r8, r8, #0
 80060c8:	f018 020f 	ands.w	r2, r8, #15
 80060cc:	d00a      	beq.n	80060e4 <_strtod_l+0x56c>
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <_strtod_l+0x5a4>)
 80060d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d4:	4650      	mov	r0, sl
 80060d6:	4659      	mov	r1, fp
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa fbb6 	bl	800084c <__aeabi_ddiv>
 80060e0:	4682      	mov	sl, r0
 80060e2:	468b      	mov	fp, r1
 80060e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80060e8:	d0d7      	beq.n	800609a <_strtod_l+0x522>
 80060ea:	f1b8 0f1f 	cmp.w	r8, #31
 80060ee:	dd1f      	ble.n	8006130 <_strtod_l+0x5b8>
 80060f0:	2500      	movs	r5, #0
 80060f2:	462e      	mov	r6, r5
 80060f4:	9507      	str	r5, [sp, #28]
 80060f6:	9505      	str	r5, [sp, #20]
 80060f8:	2322      	movs	r3, #34	; 0x22
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	f04f 0b00 	mov.w	fp, #0
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	e786      	b.n	8006014 <_strtod_l+0x49c>
 8006106:	bf00      	nop
 8006108:	08009d1f 	.word	0x08009d1f
 800610c:	08009d38 	.word	0x08009d38
 8006110:	08009d1c 	.word	0x08009d1c
 8006114:	0800a0e6 	.word	0x0800a0e6
 8006118:	0800a0e2 	.word	0x0800a0e2
 800611c:	08009fa0 	.word	0x08009fa0
 8006120:	08009f78 	.word	0x08009f78
 8006124:	7ff00000 	.word	0x7ff00000
 8006128:	7ca00000 	.word	0x7ca00000
 800612c:	7fefffff 	.word	0x7fefffff
 8006130:	f018 0310 	ands.w	r3, r8, #16
 8006134:	bf18      	it	ne
 8006136:	236a      	movne	r3, #106	; 0x6a
 8006138:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80064e8 <_strtod_l+0x970>
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	4650      	mov	r0, sl
 8006140:	4659      	mov	r1, fp
 8006142:	2300      	movs	r3, #0
 8006144:	f018 0f01 	tst.w	r8, #1
 8006148:	d004      	beq.n	8006154 <_strtod_l+0x5dc>
 800614a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800614e:	f7fa fa53 	bl	80005f8 <__aeabi_dmul>
 8006152:	2301      	movs	r3, #1
 8006154:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006158:	f109 0908 	add.w	r9, r9, #8
 800615c:	d1f2      	bne.n	8006144 <_strtod_l+0x5cc>
 800615e:	b10b      	cbz	r3, 8006164 <_strtod_l+0x5ec>
 8006160:	4682      	mov	sl, r0
 8006162:	468b      	mov	fp, r1
 8006164:	9b04      	ldr	r3, [sp, #16]
 8006166:	b1c3      	cbz	r3, 800619a <_strtod_l+0x622>
 8006168:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800616c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006170:	2b00      	cmp	r3, #0
 8006172:	4659      	mov	r1, fp
 8006174:	dd11      	ble.n	800619a <_strtod_l+0x622>
 8006176:	2b1f      	cmp	r3, #31
 8006178:	f340 8124 	ble.w	80063c4 <_strtod_l+0x84c>
 800617c:	2b34      	cmp	r3, #52	; 0x34
 800617e:	bfde      	ittt	le
 8006180:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006184:	f04f 33ff 	movle.w	r3, #4294967295
 8006188:	fa03 f202 	lslle.w	r2, r3, r2
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	bfcc      	ite	gt
 8006192:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006196:	ea02 0b01 	andle.w	fp, r2, r1
 800619a:	2200      	movs	r2, #0
 800619c:	2300      	movs	r3, #0
 800619e:	4650      	mov	r0, sl
 80061a0:	4659      	mov	r1, fp
 80061a2:	f7fa fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d1a2      	bne.n	80060f0 <_strtod_l+0x578>
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	9908      	ldr	r1, [sp, #32]
 80061b0:	462b      	mov	r3, r5
 80061b2:	463a      	mov	r2, r7
 80061b4:	4620      	mov	r0, r4
 80061b6:	f001 f8e1 	bl	800737c <__s2b>
 80061ba:	9007      	str	r0, [sp, #28]
 80061bc:	2800      	cmp	r0, #0
 80061be:	f43f af1f 	beq.w	8006000 <_strtod_l+0x488>
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	1b9e      	subs	r6, r3, r6
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfb4      	ite	lt
 80061cc:	4633      	movlt	r3, r6
 80061ce:	2300      	movge	r3, #0
 80061d0:	930c      	str	r3, [sp, #48]	; 0x30
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	2500      	movs	r5, #0
 80061d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80061da:	9312      	str	r3, [sp, #72]	; 0x48
 80061dc:	462e      	mov	r6, r5
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	4620      	mov	r0, r4
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	f001 f822 	bl	800722c <_Balloc>
 80061e8:	9005      	str	r0, [sp, #20]
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f af0c 	beq.w	8006008 <_strtod_l+0x490>
 80061f0:	9b07      	ldr	r3, [sp, #28]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	3202      	adds	r2, #2
 80061f6:	f103 010c 	add.w	r1, r3, #12
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	300c      	adds	r0, #12
 80061fe:	f7ff fc47 	bl	8005a90 <memcpy>
 8006202:	ec4b ab10 	vmov	d0, sl, fp
 8006206:	aa1a      	add	r2, sp, #104	; 0x68
 8006208:	a919      	add	r1, sp, #100	; 0x64
 800620a:	4620      	mov	r0, r4
 800620c:	f001 fbfc 	bl	8007a08 <__d2b>
 8006210:	ec4b ab18 	vmov	d8, sl, fp
 8006214:	9018      	str	r0, [sp, #96]	; 0x60
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f aef6 	beq.w	8006008 <_strtod_l+0x490>
 800621c:	2101      	movs	r1, #1
 800621e:	4620      	mov	r0, r4
 8006220:	f001 f946 	bl	80074b0 <__i2b>
 8006224:	4606      	mov	r6, r0
 8006226:	2800      	cmp	r0, #0
 8006228:	f43f aeee 	beq.w	8006008 <_strtod_l+0x490>
 800622c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800622e:	9904      	ldr	r1, [sp, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	bfab      	itete	ge
 8006234:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006236:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006238:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800623a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800623e:	bfac      	ite	ge
 8006240:	eb03 0902 	addge.w	r9, r3, r2
 8006244:	1ad7      	sublt	r7, r2, r3
 8006246:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006248:	eba3 0801 	sub.w	r8, r3, r1
 800624c:	4490      	add	r8, r2
 800624e:	4ba1      	ldr	r3, [pc, #644]	; (80064d4 <_strtod_l+0x95c>)
 8006250:	f108 38ff 	add.w	r8, r8, #4294967295
 8006254:	4598      	cmp	r8, r3
 8006256:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800625a:	f280 80c7 	bge.w	80063ec <_strtod_l+0x874>
 800625e:	eba3 0308 	sub.w	r3, r3, r8
 8006262:	2b1f      	cmp	r3, #31
 8006264:	eba2 0203 	sub.w	r2, r2, r3
 8006268:	f04f 0101 	mov.w	r1, #1
 800626c:	f300 80b1 	bgt.w	80063d2 <_strtod_l+0x85a>
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	930d      	str	r3, [sp, #52]	; 0x34
 8006276:	2300      	movs	r3, #0
 8006278:	9308      	str	r3, [sp, #32]
 800627a:	eb09 0802 	add.w	r8, r9, r2
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	45c1      	cmp	r9, r8
 8006282:	4417      	add	r7, r2
 8006284:	441f      	add	r7, r3
 8006286:	464b      	mov	r3, r9
 8006288:	bfa8      	it	ge
 800628a:	4643      	movge	r3, r8
 800628c:	42bb      	cmp	r3, r7
 800628e:	bfa8      	it	ge
 8006290:	463b      	movge	r3, r7
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfc2      	ittt	gt
 8006296:	eba8 0803 	subgt.w	r8, r8, r3
 800629a:	1aff      	subgt	r7, r7, r3
 800629c:	eba9 0903 	subgt.w	r9, r9, r3
 80062a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd17      	ble.n	80062d6 <_strtod_l+0x75e>
 80062a6:	4631      	mov	r1, r6
 80062a8:	461a      	mov	r2, r3
 80062aa:	4620      	mov	r0, r4
 80062ac:	f001 f9c0 	bl	8007630 <__pow5mult>
 80062b0:	4606      	mov	r6, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aea8 	beq.w	8006008 <_strtod_l+0x490>
 80062b8:	4601      	mov	r1, r0
 80062ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062bc:	4620      	mov	r0, r4
 80062be:	f001 f90d 	bl	80074dc <__multiply>
 80062c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f43f ae9f 	beq.w	8006008 <_strtod_l+0x490>
 80062ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 ffed 	bl	80072ac <_Bfree>
 80062d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d4:	9318      	str	r3, [sp, #96]	; 0x60
 80062d6:	f1b8 0f00 	cmp.w	r8, #0
 80062da:	f300 808c 	bgt.w	80063f6 <_strtod_l+0x87e>
 80062de:	9b06      	ldr	r3, [sp, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dd08      	ble.n	80062f6 <_strtod_l+0x77e>
 80062e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062e6:	9905      	ldr	r1, [sp, #20]
 80062e8:	4620      	mov	r0, r4
 80062ea:	f001 f9a1 	bl	8007630 <__pow5mult>
 80062ee:	9005      	str	r0, [sp, #20]
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f43f ae89 	beq.w	8006008 <_strtod_l+0x490>
 80062f6:	2f00      	cmp	r7, #0
 80062f8:	dd08      	ble.n	800630c <_strtod_l+0x794>
 80062fa:	9905      	ldr	r1, [sp, #20]
 80062fc:	463a      	mov	r2, r7
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 f9f0 	bl	80076e4 <__lshift>
 8006304:	9005      	str	r0, [sp, #20]
 8006306:	2800      	cmp	r0, #0
 8006308:	f43f ae7e 	beq.w	8006008 <_strtod_l+0x490>
 800630c:	f1b9 0f00 	cmp.w	r9, #0
 8006310:	dd08      	ble.n	8006324 <_strtod_l+0x7ac>
 8006312:	4631      	mov	r1, r6
 8006314:	464a      	mov	r2, r9
 8006316:	4620      	mov	r0, r4
 8006318:	f001 f9e4 	bl	80076e4 <__lshift>
 800631c:	4606      	mov	r6, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f ae72 	beq.w	8006008 <_strtod_l+0x490>
 8006324:	9a05      	ldr	r2, [sp, #20]
 8006326:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006328:	4620      	mov	r0, r4
 800632a:	f001 fa67 	bl	80077fc <__mdiff>
 800632e:	4605      	mov	r5, r0
 8006330:	2800      	cmp	r0, #0
 8006332:	f43f ae69 	beq.w	8006008 <_strtod_l+0x490>
 8006336:	68c3      	ldr	r3, [r0, #12]
 8006338:	930b      	str	r3, [sp, #44]	; 0x2c
 800633a:	2300      	movs	r3, #0
 800633c:	60c3      	str	r3, [r0, #12]
 800633e:	4631      	mov	r1, r6
 8006340:	f001 fa40 	bl	80077c4 <__mcmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	da60      	bge.n	800640a <_strtod_l+0x892>
 8006348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800634a:	ea53 030a 	orrs.w	r3, r3, sl
 800634e:	f040 8082 	bne.w	8006456 <_strtod_l+0x8de>
 8006352:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006356:	2b00      	cmp	r3, #0
 8006358:	d17d      	bne.n	8006456 <_strtod_l+0x8de>
 800635a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800635e:	0d1b      	lsrs	r3, r3, #20
 8006360:	051b      	lsls	r3, r3, #20
 8006362:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006366:	d976      	bls.n	8006456 <_strtod_l+0x8de>
 8006368:	696b      	ldr	r3, [r5, #20]
 800636a:	b913      	cbnz	r3, 8006372 <_strtod_l+0x7fa>
 800636c:	692b      	ldr	r3, [r5, #16]
 800636e:	2b01      	cmp	r3, #1
 8006370:	dd71      	ble.n	8006456 <_strtod_l+0x8de>
 8006372:	4629      	mov	r1, r5
 8006374:	2201      	movs	r2, #1
 8006376:	4620      	mov	r0, r4
 8006378:	f001 f9b4 	bl	80076e4 <__lshift>
 800637c:	4631      	mov	r1, r6
 800637e:	4605      	mov	r5, r0
 8006380:	f001 fa20 	bl	80077c4 <__mcmp>
 8006384:	2800      	cmp	r0, #0
 8006386:	dd66      	ble.n	8006456 <_strtod_l+0x8de>
 8006388:	9904      	ldr	r1, [sp, #16]
 800638a:	4a53      	ldr	r2, [pc, #332]	; (80064d8 <_strtod_l+0x960>)
 800638c:	465b      	mov	r3, fp
 800638e:	2900      	cmp	r1, #0
 8006390:	f000 8081 	beq.w	8006496 <_strtod_l+0x91e>
 8006394:	ea02 010b 	and.w	r1, r2, fp
 8006398:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800639c:	dc7b      	bgt.n	8006496 <_strtod_l+0x91e>
 800639e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80063a2:	f77f aea9 	ble.w	80060f8 <_strtod_l+0x580>
 80063a6:	4b4d      	ldr	r3, [pc, #308]	; (80064dc <_strtod_l+0x964>)
 80063a8:	4650      	mov	r0, sl
 80063aa:	4659      	mov	r1, fp
 80063ac:	2200      	movs	r2, #0
 80063ae:	f7fa f923 	bl	80005f8 <__aeabi_dmul>
 80063b2:	460b      	mov	r3, r1
 80063b4:	4303      	orrs	r3, r0
 80063b6:	bf08      	it	eq
 80063b8:	2322      	moveq	r3, #34	; 0x22
 80063ba:	4682      	mov	sl, r0
 80063bc:	468b      	mov	fp, r1
 80063be:	bf08      	it	eq
 80063c0:	6023      	streq	r3, [r4, #0]
 80063c2:	e62b      	b.n	800601c <_strtod_l+0x4a4>
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	ea03 0a0a 	and.w	sl, r3, sl
 80063d0:	e6e3      	b.n	800619a <_strtod_l+0x622>
 80063d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80063d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80063da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80063de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80063e2:	fa01 f308 	lsl.w	r3, r1, r8
 80063e6:	9308      	str	r3, [sp, #32]
 80063e8:	910d      	str	r1, [sp, #52]	; 0x34
 80063ea:	e746      	b.n	800627a <_strtod_l+0x702>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9308      	str	r3, [sp, #32]
 80063f0:	2301      	movs	r3, #1
 80063f2:	930d      	str	r3, [sp, #52]	; 0x34
 80063f4:	e741      	b.n	800627a <_strtod_l+0x702>
 80063f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063f8:	4642      	mov	r2, r8
 80063fa:	4620      	mov	r0, r4
 80063fc:	f001 f972 	bl	80076e4 <__lshift>
 8006400:	9018      	str	r0, [sp, #96]	; 0x60
 8006402:	2800      	cmp	r0, #0
 8006404:	f47f af6b 	bne.w	80062de <_strtod_l+0x766>
 8006408:	e5fe      	b.n	8006008 <_strtod_l+0x490>
 800640a:	465f      	mov	r7, fp
 800640c:	d16e      	bne.n	80064ec <_strtod_l+0x974>
 800640e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006414:	b342      	cbz	r2, 8006468 <_strtod_l+0x8f0>
 8006416:	4a32      	ldr	r2, [pc, #200]	; (80064e0 <_strtod_l+0x968>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d128      	bne.n	800646e <_strtod_l+0x8f6>
 800641c:	9b04      	ldr	r3, [sp, #16]
 800641e:	4651      	mov	r1, sl
 8006420:	b1eb      	cbz	r3, 800645e <_strtod_l+0x8e6>
 8006422:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <_strtod_l+0x960>)
 8006424:	403b      	ands	r3, r7
 8006426:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	d819      	bhi.n	8006464 <_strtod_l+0x8ec>
 8006430:	0d1b      	lsrs	r3, r3, #20
 8006432:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	4299      	cmp	r1, r3
 800643c:	d117      	bne.n	800646e <_strtod_l+0x8f6>
 800643e:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <_strtod_l+0x96c>)
 8006440:	429f      	cmp	r7, r3
 8006442:	d102      	bne.n	800644a <_strtod_l+0x8d2>
 8006444:	3101      	adds	r1, #1
 8006446:	f43f addf 	beq.w	8006008 <_strtod_l+0x490>
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <_strtod_l+0x960>)
 800644c:	403b      	ands	r3, r7
 800644e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006452:	f04f 0a00 	mov.w	sl, #0
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1a4      	bne.n	80063a6 <_strtod_l+0x82e>
 800645c:	e5de      	b.n	800601c <_strtod_l+0x4a4>
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	e7ea      	b.n	800643a <_strtod_l+0x8c2>
 8006464:	4613      	mov	r3, r2
 8006466:	e7e8      	b.n	800643a <_strtod_l+0x8c2>
 8006468:	ea53 030a 	orrs.w	r3, r3, sl
 800646c:	d08c      	beq.n	8006388 <_strtod_l+0x810>
 800646e:	9b08      	ldr	r3, [sp, #32]
 8006470:	b1db      	cbz	r3, 80064aa <_strtod_l+0x932>
 8006472:	423b      	tst	r3, r7
 8006474:	d0ef      	beq.n	8006456 <_strtod_l+0x8de>
 8006476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006478:	9a04      	ldr	r2, [sp, #16]
 800647a:	4650      	mov	r0, sl
 800647c:	4659      	mov	r1, fp
 800647e:	b1c3      	cbz	r3, 80064b2 <_strtod_l+0x93a>
 8006480:	f7ff fb5c 	bl	8005b3c <sulp>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	ec51 0b18 	vmov	r0, r1, d8
 800648c:	f7f9 fefe 	bl	800028c <__adddf3>
 8006490:	4682      	mov	sl, r0
 8006492:	468b      	mov	fp, r1
 8006494:	e7df      	b.n	8006456 <_strtod_l+0x8de>
 8006496:	4013      	ands	r3, r2
 8006498:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800649c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80064a4:	f04f 3aff 	mov.w	sl, #4294967295
 80064a8:	e7d5      	b.n	8006456 <_strtod_l+0x8de>
 80064aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ac:	ea13 0f0a 	tst.w	r3, sl
 80064b0:	e7e0      	b.n	8006474 <_strtod_l+0x8fc>
 80064b2:	f7ff fb43 	bl	8005b3c <sulp>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	ec51 0b18 	vmov	r0, r1, d8
 80064be:	f7f9 fee3 	bl	8000288 <__aeabi_dsub>
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	4682      	mov	sl, r0
 80064c8:	468b      	mov	fp, r1
 80064ca:	f7fa fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d0c1      	beq.n	8006456 <_strtod_l+0x8de>
 80064d2:	e611      	b.n	80060f8 <_strtod_l+0x580>
 80064d4:	fffffc02 	.word	0xfffffc02
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	39500000 	.word	0x39500000
 80064e0:	000fffff 	.word	0x000fffff
 80064e4:	7fefffff 	.word	0x7fefffff
 80064e8:	08009d50 	.word	0x08009d50
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	f001 fae6 	bl	8007ac0 <__ratio>
 80064f4:	ec59 8b10 	vmov	r8, r9, d0
 80064f8:	ee10 0a10 	vmov	r0, s0
 80064fc:	2200      	movs	r2, #0
 80064fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa faf4 	bl	8000af0 <__aeabi_dcmple>
 8006508:	2800      	cmp	r0, #0
 800650a:	d07a      	beq.n	8006602 <_strtod_l+0xa8a>
 800650c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04a      	beq.n	80065a8 <_strtod_l+0xa30>
 8006512:	4b95      	ldr	r3, [pc, #596]	; (8006768 <_strtod_l+0xbf0>)
 8006514:	2200      	movs	r2, #0
 8006516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800651a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006768 <_strtod_l+0xbf0>
 800651e:	f04f 0800 	mov.w	r8, #0
 8006522:	4b92      	ldr	r3, [pc, #584]	; (800676c <_strtod_l+0xbf4>)
 8006524:	403b      	ands	r3, r7
 8006526:	930d      	str	r3, [sp, #52]	; 0x34
 8006528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800652a:	4b91      	ldr	r3, [pc, #580]	; (8006770 <_strtod_l+0xbf8>)
 800652c:	429a      	cmp	r2, r3
 800652e:	f040 80b0 	bne.w	8006692 <_strtod_l+0xb1a>
 8006532:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006536:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800653a:	ec4b ab10 	vmov	d0, sl, fp
 800653e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006542:	f001 f9e5 	bl	8007910 <__ulp>
 8006546:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800654a:	ec53 2b10 	vmov	r2, r3, d0
 800654e:	f7fa f853 	bl	80005f8 <__aeabi_dmul>
 8006552:	4652      	mov	r2, sl
 8006554:	465b      	mov	r3, fp
 8006556:	f7f9 fe99 	bl	800028c <__adddf3>
 800655a:	460b      	mov	r3, r1
 800655c:	4983      	ldr	r1, [pc, #524]	; (800676c <_strtod_l+0xbf4>)
 800655e:	4a85      	ldr	r2, [pc, #532]	; (8006774 <_strtod_l+0xbfc>)
 8006560:	4019      	ands	r1, r3
 8006562:	4291      	cmp	r1, r2
 8006564:	4682      	mov	sl, r0
 8006566:	d960      	bls.n	800662a <_strtod_l+0xab2>
 8006568:	ee18 3a90 	vmov	r3, s17
 800656c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006570:	4293      	cmp	r3, r2
 8006572:	d104      	bne.n	800657e <_strtod_l+0xa06>
 8006574:	ee18 3a10 	vmov	r3, s16
 8006578:	3301      	adds	r3, #1
 800657a:	f43f ad45 	beq.w	8006008 <_strtod_l+0x490>
 800657e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006780 <_strtod_l+0xc08>
 8006582:	f04f 3aff 	mov.w	sl, #4294967295
 8006586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fe8f 	bl	80072ac <_Bfree>
 800658e:	9905      	ldr	r1, [sp, #20]
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fe8b 	bl	80072ac <_Bfree>
 8006596:	4631      	mov	r1, r6
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fe87 	bl	80072ac <_Bfree>
 800659e:	4629      	mov	r1, r5
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fe83 	bl	80072ac <_Bfree>
 80065a6:	e61a      	b.n	80061de <_strtod_l+0x666>
 80065a8:	f1ba 0f00 	cmp.w	sl, #0
 80065ac:	d11b      	bne.n	80065e6 <_strtod_l+0xa6e>
 80065ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065b2:	b9f3      	cbnz	r3, 80065f2 <_strtod_l+0xa7a>
 80065b4:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <_strtod_l+0xbf0>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	f7fa fa8e 	bl	8000adc <__aeabi_dcmplt>
 80065c0:	b9d0      	cbnz	r0, 80065f8 <_strtod_l+0xa80>
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <_strtod_l+0xc00>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	f7fa f815 	bl	80005f8 <__aeabi_dmul>
 80065ce:	4680      	mov	r8, r0
 80065d0:	4689      	mov	r9, r1
 80065d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80065d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80065da:	9315      	str	r3, [sp, #84]	; 0x54
 80065dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80065e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065e4:	e79d      	b.n	8006522 <_strtod_l+0x9aa>
 80065e6:	f1ba 0f01 	cmp.w	sl, #1
 80065ea:	d102      	bne.n	80065f2 <_strtod_l+0xa7a>
 80065ec:	2f00      	cmp	r7, #0
 80065ee:	f43f ad83 	beq.w	80060f8 <_strtod_l+0x580>
 80065f2:	4b62      	ldr	r3, [pc, #392]	; (800677c <_strtod_l+0xc04>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	e78e      	b.n	8006516 <_strtod_l+0x99e>
 80065f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006778 <_strtod_l+0xc00>
 80065fc:	f04f 0800 	mov.w	r8, #0
 8006600:	e7e7      	b.n	80065d2 <_strtod_l+0xa5a>
 8006602:	4b5d      	ldr	r3, [pc, #372]	; (8006778 <_strtod_l+0xc00>)
 8006604:	4640      	mov	r0, r8
 8006606:	4649      	mov	r1, r9
 8006608:	2200      	movs	r2, #0
 800660a:	f7f9 fff5 	bl	80005f8 <__aeabi_dmul>
 800660e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006610:	4680      	mov	r8, r0
 8006612:	4689      	mov	r9, r1
 8006614:	b933      	cbnz	r3, 8006624 <_strtod_l+0xaac>
 8006616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800661a:	900e      	str	r0, [sp, #56]	; 0x38
 800661c:	930f      	str	r3, [sp, #60]	; 0x3c
 800661e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006622:	e7dd      	b.n	80065e0 <_strtod_l+0xa68>
 8006624:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006628:	e7f9      	b.n	800661e <_strtod_l+0xaa6>
 800662a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800662e:	9b04      	ldr	r3, [sp, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1a8      	bne.n	8006586 <_strtod_l+0xa0e>
 8006634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006638:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800663a:	0d1b      	lsrs	r3, r3, #20
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	429a      	cmp	r2, r3
 8006640:	d1a1      	bne.n	8006586 <_strtod_l+0xa0e>
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f7fa fb09 	bl	8000c5c <__aeabi_d2lz>
 800664a:	f7f9 ffa7 	bl	800059c <__aeabi_l2d>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7f9 fe17 	bl	8000288 <__aeabi_dsub>
 800665a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800665c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006660:	ea43 030a 	orr.w	r3, r3, sl
 8006664:	4313      	orrs	r3, r2
 8006666:	4680      	mov	r8, r0
 8006668:	4689      	mov	r9, r1
 800666a:	d055      	beq.n	8006718 <_strtod_l+0xba0>
 800666c:	a336      	add	r3, pc, #216	; (adr r3, 8006748 <_strtod_l+0xbd0>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7fa fa33 	bl	8000adc <__aeabi_dcmplt>
 8006676:	2800      	cmp	r0, #0
 8006678:	f47f acd0 	bne.w	800601c <_strtod_l+0x4a4>
 800667c:	a334      	add	r3, pc, #208	; (adr r3, 8006750 <_strtod_l+0xbd8>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	f7fa fa47 	bl	8000b18 <__aeabi_dcmpgt>
 800668a:	2800      	cmp	r0, #0
 800668c:	f43f af7b 	beq.w	8006586 <_strtod_l+0xa0e>
 8006690:	e4c4      	b.n	800601c <_strtod_l+0x4a4>
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	b333      	cbz	r3, 80066e4 <_strtod_l+0xb6c>
 8006696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006698:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800669c:	d822      	bhi.n	80066e4 <_strtod_l+0xb6c>
 800669e:	a32e      	add	r3, pc, #184	; (adr r3, 8006758 <_strtod_l+0xbe0>)
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	4640      	mov	r0, r8
 80066a6:	4649      	mov	r1, r9
 80066a8:	f7fa fa22 	bl	8000af0 <__aeabi_dcmple>
 80066ac:	b1a0      	cbz	r0, 80066d8 <_strtod_l+0xb60>
 80066ae:	4649      	mov	r1, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	f7fa fa63 	bl	8000b7c <__aeabi_d2uiz>
 80066b6:	2801      	cmp	r0, #1
 80066b8:	bf38      	it	cc
 80066ba:	2001      	movcc	r0, #1
 80066bc:	f7f9 ff22 	bl	8000504 <__aeabi_ui2d>
 80066c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c2:	4680      	mov	r8, r0
 80066c4:	4689      	mov	r9, r1
 80066c6:	bb23      	cbnz	r3, 8006712 <_strtod_l+0xb9a>
 80066c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066cc:	9010      	str	r0, [sp, #64]	; 0x40
 80066ce:	9311      	str	r3, [sp, #68]	; 0x44
 80066d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	9309      	str	r3, [sp, #36]	; 0x24
 80066e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066e8:	eeb0 0a48 	vmov.f32	s0, s16
 80066ec:	eef0 0a68 	vmov.f32	s1, s17
 80066f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066f4:	f001 f90c 	bl	8007910 <__ulp>
 80066f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066fc:	ec53 2b10 	vmov	r2, r3, d0
 8006700:	f7f9 ff7a 	bl	80005f8 <__aeabi_dmul>
 8006704:	ec53 2b18 	vmov	r2, r3, d8
 8006708:	f7f9 fdc0 	bl	800028c <__adddf3>
 800670c:	4682      	mov	sl, r0
 800670e:	468b      	mov	fp, r1
 8006710:	e78d      	b.n	800662e <_strtod_l+0xab6>
 8006712:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006716:	e7db      	b.n	80066d0 <_strtod_l+0xb58>
 8006718:	a311      	add	r3, pc, #68	; (adr r3, 8006760 <_strtod_l+0xbe8>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7fa f9dd 	bl	8000adc <__aeabi_dcmplt>
 8006722:	e7b2      	b.n	800668a <_strtod_l+0xb12>
 8006724:	2300      	movs	r3, #0
 8006726:	930a      	str	r3, [sp, #40]	; 0x28
 8006728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800672a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	f7ff ba6b 	b.w	8005c08 <_strtod_l+0x90>
 8006732:	2a65      	cmp	r2, #101	; 0x65
 8006734:	f43f ab5f 	beq.w	8005df6 <_strtod_l+0x27e>
 8006738:	2a45      	cmp	r2, #69	; 0x45
 800673a:	f43f ab5c 	beq.w	8005df6 <_strtod_l+0x27e>
 800673e:	2301      	movs	r3, #1
 8006740:	f7ff bb94 	b.w	8005e6c <_strtod_l+0x2f4>
 8006744:	f3af 8000 	nop.w
 8006748:	94a03595 	.word	0x94a03595
 800674c:	3fdfffff 	.word	0x3fdfffff
 8006750:	35afe535 	.word	0x35afe535
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	ffc00000 	.word	0xffc00000
 800675c:	41dfffff 	.word	0x41dfffff
 8006760:	94a03595 	.word	0x94a03595
 8006764:	3fcfffff 	.word	0x3fcfffff
 8006768:	3ff00000 	.word	0x3ff00000
 800676c:	7ff00000 	.word	0x7ff00000
 8006770:	7fe00000 	.word	0x7fe00000
 8006774:	7c9fffff 	.word	0x7c9fffff
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	bff00000 	.word	0xbff00000
 8006780:	7fefffff 	.word	0x7fefffff

08006784 <strtod>:
 8006784:	460a      	mov	r2, r1
 8006786:	4601      	mov	r1, r0
 8006788:	4802      	ldr	r0, [pc, #8]	; (8006794 <strtod+0x10>)
 800678a:	4b03      	ldr	r3, [pc, #12]	; (8006798 <strtod+0x14>)
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f7ff b9f3 	b.w	8005b78 <_strtod_l>
 8006792:	bf00      	nop
 8006794:	20000014 	.word	0x20000014
 8006798:	2000007c 	.word	0x2000007c

0800679c <_strtol_l.constprop.0>:
 800679c:	2b01      	cmp	r3, #1
 800679e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a2:	d001      	beq.n	80067a8 <_strtol_l.constprop.0+0xc>
 80067a4:	2b24      	cmp	r3, #36	; 0x24
 80067a6:	d906      	bls.n	80067b6 <_strtol_l.constprop.0+0x1a>
 80067a8:	f7ff f948 	bl	8005a3c <__errno>
 80067ac:	2316      	movs	r3, #22
 80067ae:	6003      	str	r3, [r0, #0]
 80067b0:	2000      	movs	r0, #0
 80067b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800689c <_strtol_l.constprop.0+0x100>
 80067ba:	460d      	mov	r5, r1
 80067bc:	462e      	mov	r6, r5
 80067be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80067c6:	f017 0708 	ands.w	r7, r7, #8
 80067ca:	d1f7      	bne.n	80067bc <_strtol_l.constprop.0+0x20>
 80067cc:	2c2d      	cmp	r4, #45	; 0x2d
 80067ce:	d132      	bne.n	8006836 <_strtol_l.constprop.0+0x9a>
 80067d0:	782c      	ldrb	r4, [r5, #0]
 80067d2:	2701      	movs	r7, #1
 80067d4:	1cb5      	adds	r5, r6, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d05b      	beq.n	8006892 <_strtol_l.constprop.0+0xf6>
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d109      	bne.n	80067f2 <_strtol_l.constprop.0+0x56>
 80067de:	2c30      	cmp	r4, #48	; 0x30
 80067e0:	d107      	bne.n	80067f2 <_strtol_l.constprop.0+0x56>
 80067e2:	782c      	ldrb	r4, [r5, #0]
 80067e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80067e8:	2c58      	cmp	r4, #88	; 0x58
 80067ea:	d14d      	bne.n	8006888 <_strtol_l.constprop.0+0xec>
 80067ec:	786c      	ldrb	r4, [r5, #1]
 80067ee:	2310      	movs	r3, #16
 80067f0:	3502      	adds	r5, #2
 80067f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80067f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80067fa:	f04f 0c00 	mov.w	ip, #0
 80067fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8006802:	4666      	mov	r6, ip
 8006804:	fb03 8a19 	mls	sl, r3, r9, r8
 8006808:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800680c:	f1be 0f09 	cmp.w	lr, #9
 8006810:	d816      	bhi.n	8006840 <_strtol_l.constprop.0+0xa4>
 8006812:	4674      	mov	r4, lr
 8006814:	42a3      	cmp	r3, r4
 8006816:	dd24      	ble.n	8006862 <_strtol_l.constprop.0+0xc6>
 8006818:	f1bc 0f00 	cmp.w	ip, #0
 800681c:	db1e      	blt.n	800685c <_strtol_l.constprop.0+0xc0>
 800681e:	45b1      	cmp	r9, r6
 8006820:	d31c      	bcc.n	800685c <_strtol_l.constprop.0+0xc0>
 8006822:	d101      	bne.n	8006828 <_strtol_l.constprop.0+0x8c>
 8006824:	45a2      	cmp	sl, r4
 8006826:	db19      	blt.n	800685c <_strtol_l.constprop.0+0xc0>
 8006828:	fb06 4603 	mla	r6, r6, r3, r4
 800682c:	f04f 0c01 	mov.w	ip, #1
 8006830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006834:	e7e8      	b.n	8006808 <_strtol_l.constprop.0+0x6c>
 8006836:	2c2b      	cmp	r4, #43	; 0x2b
 8006838:	bf04      	itt	eq
 800683a:	782c      	ldrbeq	r4, [r5, #0]
 800683c:	1cb5      	addeq	r5, r6, #2
 800683e:	e7ca      	b.n	80067d6 <_strtol_l.constprop.0+0x3a>
 8006840:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006844:	f1be 0f19 	cmp.w	lr, #25
 8006848:	d801      	bhi.n	800684e <_strtol_l.constprop.0+0xb2>
 800684a:	3c37      	subs	r4, #55	; 0x37
 800684c:	e7e2      	b.n	8006814 <_strtol_l.constprop.0+0x78>
 800684e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006852:	f1be 0f19 	cmp.w	lr, #25
 8006856:	d804      	bhi.n	8006862 <_strtol_l.constprop.0+0xc6>
 8006858:	3c57      	subs	r4, #87	; 0x57
 800685a:	e7db      	b.n	8006814 <_strtol_l.constprop.0+0x78>
 800685c:	f04f 3cff 	mov.w	ip, #4294967295
 8006860:	e7e6      	b.n	8006830 <_strtol_l.constprop.0+0x94>
 8006862:	f1bc 0f00 	cmp.w	ip, #0
 8006866:	da05      	bge.n	8006874 <_strtol_l.constprop.0+0xd8>
 8006868:	2322      	movs	r3, #34	; 0x22
 800686a:	6003      	str	r3, [r0, #0]
 800686c:	4646      	mov	r6, r8
 800686e:	b942      	cbnz	r2, 8006882 <_strtol_l.constprop.0+0xe6>
 8006870:	4630      	mov	r0, r6
 8006872:	e79e      	b.n	80067b2 <_strtol_l.constprop.0+0x16>
 8006874:	b107      	cbz	r7, 8006878 <_strtol_l.constprop.0+0xdc>
 8006876:	4276      	negs	r6, r6
 8006878:	2a00      	cmp	r2, #0
 800687a:	d0f9      	beq.n	8006870 <_strtol_l.constprop.0+0xd4>
 800687c:	f1bc 0f00 	cmp.w	ip, #0
 8006880:	d000      	beq.n	8006884 <_strtol_l.constprop.0+0xe8>
 8006882:	1e69      	subs	r1, r5, #1
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	e7f3      	b.n	8006870 <_strtol_l.constprop.0+0xd4>
 8006888:	2430      	movs	r4, #48	; 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1b1      	bne.n	80067f2 <_strtol_l.constprop.0+0x56>
 800688e:	2308      	movs	r3, #8
 8006890:	e7af      	b.n	80067f2 <_strtol_l.constprop.0+0x56>
 8006892:	2c30      	cmp	r4, #48	; 0x30
 8006894:	d0a5      	beq.n	80067e2 <_strtol_l.constprop.0+0x46>
 8006896:	230a      	movs	r3, #10
 8006898:	e7ab      	b.n	80067f2 <_strtol_l.constprop.0+0x56>
 800689a:	bf00      	nop
 800689c:	08009d79 	.word	0x08009d79

080068a0 <strtol>:
 80068a0:	4613      	mov	r3, r2
 80068a2:	460a      	mov	r2, r1
 80068a4:	4601      	mov	r1, r0
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <strtol+0x10>)
 80068a8:	6800      	ldr	r0, [r0, #0]
 80068aa:	f7ff bf77 	b.w	800679c <_strtol_l.constprop.0>
 80068ae:	bf00      	nop
 80068b0:	20000014 	.word	0x20000014

080068b4 <print_e>:
 80068b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b6:	b087      	sub	sp, #28
 80068b8:	ec43 2b10 	vmov	d0, r2, r3
 80068bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80068be:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80068c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80068c4:	ab04      	add	r3, sp, #16
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	1c62      	adds	r2, r4, #1
 80068ce:	ab05      	add	r3, sp, #20
 80068d0:	460f      	mov	r7, r1
 80068d2:	2102      	movs	r1, #2
 80068d4:	f001 fe40 	bl	8008558 <_dtoa_r>
 80068d8:	9a05      	ldr	r2, [sp, #20]
 80068da:	f242 730f 	movw	r3, #9999	; 0x270f
 80068de:	429a      	cmp	r2, r3
 80068e0:	d105      	bne.n	80068ee <print_e+0x3a>
 80068e2:	4601      	mov	r1, r0
 80068e4:	4638      	mov	r0, r7
 80068e6:	f001 fd63 	bl	80083b0 <strcpy>
 80068ea:	b007      	add	sp, #28
 80068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ee:	463b      	mov	r3, r7
 80068f0:	7801      	ldrb	r1, [r0, #0]
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	bfc8      	it	gt
 80068fa:	2501      	movgt	r5, #1
 80068fc:	212e      	movs	r1, #46	; 0x2e
 80068fe:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006902:	b10f      	cbz	r7, 8006908 <print_e+0x54>
 8006904:	2c00      	cmp	r4, #0
 8006906:	dc37      	bgt.n	8006978 <print_e+0xc4>
 8006908:	2e67      	cmp	r6, #103	; 0x67
 800690a:	d046      	beq.n	800699a <print_e+0xe6>
 800690c:	2e47      	cmp	r6, #71	; 0x47
 800690e:	d046      	beq.n	800699e <print_e+0xea>
 8006910:	212e      	movs	r1, #46	; 0x2e
 8006912:	2030      	movs	r0, #48	; 0x30
 8006914:	2c00      	cmp	r4, #0
 8006916:	dc38      	bgt.n	800698a <print_e+0xd6>
 8006918:	1e51      	subs	r1, r2, #1
 800691a:	2900      	cmp	r1, #0
 800691c:	bfb8      	it	lt
 800691e:	f1c2 0201 	rsblt	r2, r2, #1
 8006922:	4618      	mov	r0, r3
 8006924:	9105      	str	r1, [sp, #20]
 8006926:	bfac      	ite	ge
 8006928:	222b      	movge	r2, #43	; 0x2b
 800692a:	9205      	strlt	r2, [sp, #20]
 800692c:	f800 6b02 	strb.w	r6, [r0], #2
 8006930:	bfa8      	it	ge
 8006932:	705a      	strbge	r2, [r3, #1]
 8006934:	9a05      	ldr	r2, [sp, #20]
 8006936:	bfbc      	itt	lt
 8006938:	212d      	movlt	r1, #45	; 0x2d
 800693a:	7059      	strblt	r1, [r3, #1]
 800693c:	2a63      	cmp	r2, #99	; 0x63
 800693e:	dd0b      	ble.n	8006958 <print_e+0xa4>
 8006940:	2164      	movs	r1, #100	; 0x64
 8006942:	fb92 f1f1 	sdiv	r1, r2, r1
 8006946:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800694a:	1cd8      	adds	r0, r3, #3
 800694c:	709c      	strb	r4, [r3, #2]
 800694e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006952:	fb03 2201 	mla	r2, r3, r1, r2
 8006956:	9205      	str	r2, [sp, #20]
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	220a      	movs	r2, #10
 800695c:	fb93 f2f2 	sdiv	r2, r3, r2
 8006960:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8006964:	7001      	strb	r1, [r0, #0]
 8006966:	f06f 0109 	mvn.w	r1, #9
 800696a:	fb01 3302 	mla	r3, r1, r2, r3
 800696e:	3330      	adds	r3, #48	; 0x30
 8006970:	7043      	strb	r3, [r0, #1]
 8006972:	2300      	movs	r3, #0
 8006974:	7083      	strb	r3, [r0, #2]
 8006976:	e7b8      	b.n	80068ea <print_e+0x36>
 8006978:	b10d      	cbz	r5, 800697e <print_e+0xca>
 800697a:	f803 1b01 	strb.w	r1, [r3], #1
 800697e:	7805      	ldrb	r5, [r0, #0]
 8006980:	f803 5b01 	strb.w	r5, [r3], #1
 8006984:	3c01      	subs	r4, #1
 8006986:	2500      	movs	r5, #0
 8006988:	e7b9      	b.n	80068fe <print_e+0x4a>
 800698a:	b10d      	cbz	r5, 8006990 <print_e+0xdc>
 800698c:	f803 1b01 	strb.w	r1, [r3], #1
 8006990:	f803 0b01 	strb.w	r0, [r3], #1
 8006994:	3c01      	subs	r4, #1
 8006996:	2500      	movs	r5, #0
 8006998:	e7bc      	b.n	8006914 <print_e+0x60>
 800699a:	2665      	movs	r6, #101	; 0x65
 800699c:	e7bc      	b.n	8006918 <print_e+0x64>
 800699e:	2645      	movs	r6, #69	; 0x45
 80069a0:	e7ba      	b.n	8006918 <print_e+0x64>
 80069a2:	0000      	movs	r0, r0
 80069a4:	0000      	movs	r0, r0
	...

080069a8 <_gcvt>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	ec55 4b10 	vmov	r4, r5, d0
 80069b0:	b088      	sub	sp, #32
 80069b2:	4681      	mov	r9, r0
 80069b4:	4688      	mov	r8, r1
 80069b6:	4616      	mov	r6, r2
 80069b8:	469a      	mov	sl, r3
 80069ba:	ee10 0a10 	vmov	r0, s0
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	4629      	mov	r1, r5
 80069c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80069c6:	f7fa f889 	bl	8000adc <__aeabi_dcmplt>
 80069ca:	b110      	cbz	r0, 80069d2 <_gcvt+0x2a>
 80069cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069d0:	461d      	mov	r5, r3
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7fa f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80069de:	b138      	cbz	r0, 80069f0 <_gcvt+0x48>
 80069e0:	2330      	movs	r3, #48	; 0x30
 80069e2:	7033      	strb	r3, [r6, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	7073      	strb	r3, [r6, #1]
 80069e8:	4630      	mov	r0, r6
 80069ea:	b008      	add	sp, #32
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	a34b      	add	r3, pc, #300	; (adr r3, 8006b20 <_gcvt+0x178>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7fa f879 	bl	8000af0 <__aeabi_dcmple>
 80069fe:	b158      	cbz	r0, 8006a18 <_gcvt+0x70>
 8006a00:	f108 31ff 	add.w	r1, r8, #4294967295
 8006a04:	9100      	str	r1, [sp, #0]
 8006a06:	e9cd a701 	strd	sl, r7, [sp, #4]
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4648      	mov	r0, r9
 8006a12:	f7ff ff4f 	bl	80068b4 <print_e>
 8006a16:	e7e7      	b.n	80069e8 <_gcvt+0x40>
 8006a18:	4640      	mov	r0, r8
 8006a1a:	f001 f885 	bl	8007b28 <_mprec_log10>
 8006a1e:	4622      	mov	r2, r4
 8006a20:	ec51 0b10 	vmov	r0, r1, d0
 8006a24:	462b      	mov	r3, r5
 8006a26:	f7fa f863 	bl	8000af0 <__aeabi_dcmple>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1e8      	bne.n	8006a00 <_gcvt+0x58>
 8006a2e:	ab07      	add	r3, sp, #28
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	ab06      	add	r3, sp, #24
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4642      	mov	r2, r8
 8006a38:	ab05      	add	r3, sp, #20
 8006a3a:	ec45 4b10 	vmov	d0, r4, r5
 8006a3e:	2102      	movs	r1, #2
 8006a40:	4648      	mov	r0, r9
 8006a42:	f001 fd89 	bl	8008558 <_dtoa_r>
 8006a46:	9a05      	ldr	r2, [sp, #20]
 8006a48:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d00e      	beq.n	8006a6e <_gcvt+0xc6>
 8006a50:	4633      	mov	r3, r6
 8006a52:	44b0      	add	r8, r6
 8006a54:	4605      	mov	r5, r0
 8006a56:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006a5a:	9c05      	ldr	r4, [sp, #20]
 8006a5c:	eba8 0203 	sub.w	r2, r8, r3
 8006a60:	b109      	cbz	r1, 8006a66 <_gcvt+0xbe>
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	dc08      	bgt.n	8006a78 <_gcvt+0xd0>
 8006a66:	2100      	movs	r1, #0
 8006a68:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8006a6c:	e00d      	b.n	8006a8a <_gcvt+0xe2>
 8006a6e:	4601      	mov	r1, r0
 8006a70:	4630      	mov	r0, r6
 8006a72:	f001 fc9d 	bl	80083b0 <strcpy>
 8006a76:	e7b7      	b.n	80069e8 <_gcvt+0x40>
 8006a78:	3c01      	subs	r4, #1
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	9405      	str	r4, [sp, #20]
 8006a80:	e7e8      	b.n	8006a54 <_gcvt+0xac>
 8006a82:	f803 cb01 	strb.w	ip, [r3], #1
 8006a86:	3a01      	subs	r2, #1
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	dc2a      	bgt.n	8006ae6 <_gcvt+0x13e>
 8006a90:	b101      	cbz	r1, 8006a94 <_gcvt+0xec>
 8006a92:	9405      	str	r4, [sp, #20]
 8006a94:	b90f      	cbnz	r7, 8006a9a <_gcvt+0xf2>
 8006a96:	7829      	ldrb	r1, [r5, #0]
 8006a98:	b311      	cbz	r1, 8006ae0 <_gcvt+0x138>
 8006a9a:	42b3      	cmp	r3, r6
 8006a9c:	bf04      	itt	eq
 8006a9e:	2130      	moveq	r1, #48	; 0x30
 8006aa0:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006aa4:	212e      	movs	r1, #46	; 0x2e
 8006aa6:	7019      	strb	r1, [r3, #0]
 8006aa8:	9905      	ldr	r1, [sp, #20]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	2400      	movs	r4, #0
 8006aae:	eba1 0c03 	sub.w	ip, r1, r3
 8006ab2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006ab6:	eb1c 0f00 	cmn.w	ip, r0
 8006aba:	d41c      	bmi.n	8006af6 <_gcvt+0x14e>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	f1c1 0000 	rsb	r0, r1, #0
 8006ac2:	bfc8      	it	gt
 8006ac4:	2000      	movgt	r0, #0
 8006ac6:	f100 0c01 	add.w	ip, r0, #1
 8006aca:	4463      	add	r3, ip
 8006acc:	4401      	add	r1, r0
 8006ace:	b104      	cbz	r4, 8006ad2 <_gcvt+0x12a>
 8006ad0:	9105      	str	r1, [sp, #20]
 8006ad2:	1e69      	subs	r1, r5, #1
 8006ad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ad8:	b108      	cbz	r0, 8006ade <_gcvt+0x136>
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	dc0f      	bgt.n	8006afe <_gcvt+0x156>
 8006ade:	b9df      	cbnz	r7, 8006b18 <_gcvt+0x170>
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	e780      	b.n	80069e8 <_gcvt+0x40>
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	f104 34ff 	add.w	r4, r4, #4294967295
 8006aec:	dcc9      	bgt.n	8006a82 <_gcvt+0xda>
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d0d0      	beq.n	8006a94 <_gcvt+0xec>
 8006af2:	9005      	str	r0, [sp, #20]
 8006af4:	e7ce      	b.n	8006a94 <_gcvt+0xec>
 8006af6:	f800 ef01 	strb.w	lr, [r0, #1]!
 8006afa:	2401      	movs	r4, #1
 8006afc:	e7db      	b.n	8006ab6 <_gcvt+0x10e>
 8006afe:	f803 0b01 	strb.w	r0, [r3], #1
 8006b02:	3a01      	subs	r2, #1
 8006b04:	e7e6      	b.n	8006ad4 <_gcvt+0x12c>
 8006b06:	f801 5b01 	strb.w	r5, [r1], #1
 8006b0a:	1a60      	subs	r0, r4, r1
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dcfa      	bgt.n	8006b06 <_gcvt+0x15e>
 8006b10:	2a00      	cmp	r2, #0
 8006b12:	bfa8      	it	ge
 8006b14:	189b      	addge	r3, r3, r2
 8006b16:	e7e3      	b.n	8006ae0 <_gcvt+0x138>
 8006b18:	4619      	mov	r1, r3
 8006b1a:	189c      	adds	r4, r3, r2
 8006b1c:	2530      	movs	r5, #48	; 0x30
 8006b1e:	e7f4      	b.n	8006b0a <_gcvt+0x162>
 8006b20:	eb1c432d 	.word	0xeb1c432d
 8006b24:	3f1a36e2 	.word	0x3f1a36e2

08006b28 <rshift>:
 8006b28:	6903      	ldr	r3, [r0, #16]
 8006b2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b36:	f100 0414 	add.w	r4, r0, #20
 8006b3a:	dd45      	ble.n	8006bc8 <rshift+0xa0>
 8006b3c:	f011 011f 	ands.w	r1, r1, #31
 8006b40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b48:	d10c      	bne.n	8006b64 <rshift+0x3c>
 8006b4a:	f100 0710 	add.w	r7, r0, #16
 8006b4e:	4629      	mov	r1, r5
 8006b50:	42b1      	cmp	r1, r6
 8006b52:	d334      	bcc.n	8006bbe <rshift+0x96>
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	1eea      	subs	r2, r5, #3
 8006b5a:	4296      	cmp	r6, r2
 8006b5c:	bf38      	it	cc
 8006b5e:	2300      	movcc	r3, #0
 8006b60:	4423      	add	r3, r4
 8006b62:	e015      	b.n	8006b90 <rshift+0x68>
 8006b64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b68:	f1c1 0820 	rsb	r8, r1, #32
 8006b6c:	40cf      	lsrs	r7, r1
 8006b6e:	f105 0e04 	add.w	lr, r5, #4
 8006b72:	46a1      	mov	r9, r4
 8006b74:	4576      	cmp	r6, lr
 8006b76:	46f4      	mov	ip, lr
 8006b78:	d815      	bhi.n	8006ba6 <rshift+0x7e>
 8006b7a:	1a9a      	subs	r2, r3, r2
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	3a04      	subs	r2, #4
 8006b80:	3501      	adds	r5, #1
 8006b82:	42ae      	cmp	r6, r5
 8006b84:	bf38      	it	cc
 8006b86:	2200      	movcc	r2, #0
 8006b88:	18a3      	adds	r3, r4, r2
 8006b8a:	50a7      	str	r7, [r4, r2]
 8006b8c:	b107      	cbz	r7, 8006b90 <rshift+0x68>
 8006b8e:	3304      	adds	r3, #4
 8006b90:	1b1a      	subs	r2, r3, r4
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b98:	bf08      	it	eq
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	6102      	str	r2, [r0, #16]
 8006b9e:	bf08      	it	eq
 8006ba0:	6143      	streq	r3, [r0, #20]
 8006ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	f8dc c000 	ldr.w	ip, [ip]
 8006baa:	fa0c fc08 	lsl.w	ip, ip, r8
 8006bae:	ea4c 0707 	orr.w	r7, ip, r7
 8006bb2:	f849 7b04 	str.w	r7, [r9], #4
 8006bb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bba:	40cf      	lsrs	r7, r1
 8006bbc:	e7da      	b.n	8006b74 <rshift+0x4c>
 8006bbe:	f851 cb04 	ldr.w	ip, [r1], #4
 8006bc2:	f847 cf04 	str.w	ip, [r7, #4]!
 8006bc6:	e7c3      	b.n	8006b50 <rshift+0x28>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	e7e1      	b.n	8006b90 <rshift+0x68>

08006bcc <__hexdig_fun>:
 8006bcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d802      	bhi.n	8006bda <__hexdig_fun+0xe>
 8006bd4:	3820      	subs	r0, #32
 8006bd6:	b2c0      	uxtb	r0, r0
 8006bd8:	4770      	bx	lr
 8006bda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d801      	bhi.n	8006be6 <__hexdig_fun+0x1a>
 8006be2:	3847      	subs	r0, #71	; 0x47
 8006be4:	e7f7      	b.n	8006bd6 <__hexdig_fun+0xa>
 8006be6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d801      	bhi.n	8006bf2 <__hexdig_fun+0x26>
 8006bee:	3827      	subs	r0, #39	; 0x27
 8006bf0:	e7f1      	b.n	8006bd6 <__hexdig_fun+0xa>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	4770      	bx	lr
	...

08006bf8 <__gethex>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	ed2d 8b02 	vpush	{d8}
 8006c00:	b089      	sub	sp, #36	; 0x24
 8006c02:	ee08 0a10 	vmov	s16, r0
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	4bb4      	ldr	r3, [pc, #720]	; (8006edc <__gethex+0x2e4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	468b      	mov	fp, r1
 8006c12:	4690      	mov	r8, r2
 8006c14:	f7f9 fadc 	bl	80001d0 <strlen>
 8006c18:	9b01      	ldr	r3, [sp, #4]
 8006c1a:	f8db 2000 	ldr.w	r2, [fp]
 8006c1e:	4403      	add	r3, r0
 8006c20:	4682      	mov	sl, r0
 8006c22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	1c93      	adds	r3, r2, #2
 8006c2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c32:	32fe      	adds	r2, #254	; 0xfe
 8006c34:	18d1      	adds	r1, r2, r3
 8006c36:	461f      	mov	r7, r3
 8006c38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c3c:	9100      	str	r1, [sp, #0]
 8006c3e:	2830      	cmp	r0, #48	; 0x30
 8006c40:	d0f8      	beq.n	8006c34 <__gethex+0x3c>
 8006c42:	f7ff ffc3 	bl	8006bcc <__hexdig_fun>
 8006c46:	4604      	mov	r4, r0
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d13a      	bne.n	8006cc2 <__gethex+0xca>
 8006c4c:	9901      	ldr	r1, [sp, #4]
 8006c4e:	4652      	mov	r2, sl
 8006c50:	4638      	mov	r0, r7
 8006c52:	f001 fbb5 	bl	80083c0 <strncmp>
 8006c56:	4605      	mov	r5, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d168      	bne.n	8006d2e <__gethex+0x136>
 8006c5c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c60:	eb07 060a 	add.w	r6, r7, sl
 8006c64:	f7ff ffb2 	bl	8006bcc <__hexdig_fun>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d062      	beq.n	8006d32 <__gethex+0x13a>
 8006c6c:	4633      	mov	r3, r6
 8006c6e:	7818      	ldrb	r0, [r3, #0]
 8006c70:	2830      	cmp	r0, #48	; 0x30
 8006c72:	461f      	mov	r7, r3
 8006c74:	f103 0301 	add.w	r3, r3, #1
 8006c78:	d0f9      	beq.n	8006c6e <__gethex+0x76>
 8006c7a:	f7ff ffa7 	bl	8006bcc <__hexdig_fun>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	fab0 f480 	clz	r4, r0
 8006c84:	0964      	lsrs	r4, r4, #5
 8006c86:	4635      	mov	r5, r6
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	3201      	adds	r2, #1
 8006c90:	7830      	ldrb	r0, [r6, #0]
 8006c92:	f7ff ff9b 	bl	8006bcc <__hexdig_fun>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d1f8      	bne.n	8006c8c <__gethex+0x94>
 8006c9a:	9901      	ldr	r1, [sp, #4]
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f001 fb8e 	bl	80083c0 <strncmp>
 8006ca4:	b980      	cbnz	r0, 8006cc8 <__gethex+0xd0>
 8006ca6:	b94d      	cbnz	r5, 8006cbc <__gethex+0xc4>
 8006ca8:	eb06 050a 	add.w	r5, r6, sl
 8006cac:	462a      	mov	r2, r5
 8006cae:	4616      	mov	r6, r2
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	7830      	ldrb	r0, [r6, #0]
 8006cb4:	f7ff ff8a 	bl	8006bcc <__hexdig_fun>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1f8      	bne.n	8006cae <__gethex+0xb6>
 8006cbc:	1bad      	subs	r5, r5, r6
 8006cbe:	00ad      	lsls	r5, r5, #2
 8006cc0:	e004      	b.n	8006ccc <__gethex+0xd4>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	4625      	mov	r5, r4
 8006cc6:	e7e0      	b.n	8006c8a <__gethex+0x92>
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	d1f7      	bne.n	8006cbc <__gethex+0xc4>
 8006ccc:	7833      	ldrb	r3, [r6, #0]
 8006cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cd2:	2b50      	cmp	r3, #80	; 0x50
 8006cd4:	d13b      	bne.n	8006d4e <__gethex+0x156>
 8006cd6:	7873      	ldrb	r3, [r6, #1]
 8006cd8:	2b2b      	cmp	r3, #43	; 0x2b
 8006cda:	d02c      	beq.n	8006d36 <__gethex+0x13e>
 8006cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8006cde:	d02e      	beq.n	8006d3e <__gethex+0x146>
 8006ce0:	1c71      	adds	r1, r6, #1
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	7808      	ldrb	r0, [r1, #0]
 8006ce8:	f7ff ff70 	bl	8006bcc <__hexdig_fun>
 8006cec:	1e43      	subs	r3, r0, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b18      	cmp	r3, #24
 8006cf2:	d82c      	bhi.n	8006d4e <__gethex+0x156>
 8006cf4:	f1a0 0210 	sub.w	r2, r0, #16
 8006cf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006cfc:	f7ff ff66 	bl	8006bcc <__hexdig_fun>
 8006d00:	1e43      	subs	r3, r0, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b18      	cmp	r3, #24
 8006d06:	d91d      	bls.n	8006d44 <__gethex+0x14c>
 8006d08:	f1b9 0f00 	cmp.w	r9, #0
 8006d0c:	d000      	beq.n	8006d10 <__gethex+0x118>
 8006d0e:	4252      	negs	r2, r2
 8006d10:	4415      	add	r5, r2
 8006d12:	f8cb 1000 	str.w	r1, [fp]
 8006d16:	b1e4      	cbz	r4, 8006d52 <__gethex+0x15a>
 8006d18:	9b00      	ldr	r3, [sp, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2700      	movne	r7, #0
 8006d20:	2706      	moveq	r7, #6
 8006d22:	4638      	mov	r0, r7
 8006d24:	b009      	add	sp, #36	; 0x24
 8006d26:	ecbd 8b02 	vpop	{d8}
 8006d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2e:	463e      	mov	r6, r7
 8006d30:	4625      	mov	r5, r4
 8006d32:	2401      	movs	r4, #1
 8006d34:	e7ca      	b.n	8006ccc <__gethex+0xd4>
 8006d36:	f04f 0900 	mov.w	r9, #0
 8006d3a:	1cb1      	adds	r1, r6, #2
 8006d3c:	e7d3      	b.n	8006ce6 <__gethex+0xee>
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	e7fa      	b.n	8006d3a <__gethex+0x142>
 8006d44:	230a      	movs	r3, #10
 8006d46:	fb03 0202 	mla	r2, r3, r2, r0
 8006d4a:	3a10      	subs	r2, #16
 8006d4c:	e7d4      	b.n	8006cf8 <__gethex+0x100>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	e7df      	b.n	8006d12 <__gethex+0x11a>
 8006d52:	1bf3      	subs	r3, r6, r7
 8006d54:	3b01      	subs	r3, #1
 8006d56:	4621      	mov	r1, r4
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	dc0b      	bgt.n	8006d74 <__gethex+0x17c>
 8006d5c:	ee18 0a10 	vmov	r0, s16
 8006d60:	f000 fa64 	bl	800722c <_Balloc>
 8006d64:	4604      	mov	r4, r0
 8006d66:	b940      	cbnz	r0, 8006d7a <__gethex+0x182>
 8006d68:	4b5d      	ldr	r3, [pc, #372]	; (8006ee0 <__gethex+0x2e8>)
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	21de      	movs	r1, #222	; 0xde
 8006d6e:	485d      	ldr	r0, [pc, #372]	; (8006ee4 <__gethex+0x2ec>)
 8006d70:	f001 fb48 	bl	8008404 <__assert_func>
 8006d74:	3101      	adds	r1, #1
 8006d76:	105b      	asrs	r3, r3, #1
 8006d78:	e7ee      	b.n	8006d58 <__gethex+0x160>
 8006d7a:	f100 0914 	add.w	r9, r0, #20
 8006d7e:	f04f 0b00 	mov.w	fp, #0
 8006d82:	f1ca 0301 	rsb	r3, sl, #1
 8006d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d8a:	f8cd b000 	str.w	fp, [sp]
 8006d8e:	9306      	str	r3, [sp, #24]
 8006d90:	42b7      	cmp	r7, r6
 8006d92:	d340      	bcc.n	8006e16 <__gethex+0x21e>
 8006d94:	9802      	ldr	r0, [sp, #8]
 8006d96:	9b00      	ldr	r3, [sp, #0]
 8006d98:	f840 3b04 	str.w	r3, [r0], #4
 8006d9c:	eba0 0009 	sub.w	r0, r0, r9
 8006da0:	1080      	asrs	r0, r0, #2
 8006da2:	0146      	lsls	r6, r0, #5
 8006da4:	6120      	str	r0, [r4, #16]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fb32 	bl	8007410 <__hi0bits>
 8006dac:	1a30      	subs	r0, r6, r0
 8006dae:	f8d8 6000 	ldr.w	r6, [r8]
 8006db2:	42b0      	cmp	r0, r6
 8006db4:	dd63      	ble.n	8006e7e <__gethex+0x286>
 8006db6:	1b87      	subs	r7, r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fef5 	bl	8007baa <__any_on>
 8006dc0:	4682      	mov	sl, r0
 8006dc2:	b1a8      	cbz	r0, 8006df0 <__gethex+0x1f8>
 8006dc4:	1e7b      	subs	r3, r7, #1
 8006dc6:	1159      	asrs	r1, r3, #5
 8006dc8:	f003 021f 	and.w	r2, r3, #31
 8006dcc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006dd0:	f04f 0a01 	mov.w	sl, #1
 8006dd4:	fa0a f202 	lsl.w	r2, sl, r2
 8006dd8:	420a      	tst	r2, r1
 8006dda:	d009      	beq.n	8006df0 <__gethex+0x1f8>
 8006ddc:	4553      	cmp	r3, sl
 8006dde:	dd05      	ble.n	8006dec <__gethex+0x1f4>
 8006de0:	1eb9      	subs	r1, r7, #2
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fee1 	bl	8007baa <__any_on>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d145      	bne.n	8006e78 <__gethex+0x280>
 8006dec:	f04f 0a02 	mov.w	sl, #2
 8006df0:	4639      	mov	r1, r7
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff fe98 	bl	8006b28 <rshift>
 8006df8:	443d      	add	r5, r7
 8006dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dfe:	42ab      	cmp	r3, r5
 8006e00:	da4c      	bge.n	8006e9c <__gethex+0x2a4>
 8006e02:	ee18 0a10 	vmov	r0, s16
 8006e06:	4621      	mov	r1, r4
 8006e08:	f000 fa50 	bl	80072ac <_Bfree>
 8006e0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	27a3      	movs	r7, #163	; 0xa3
 8006e14:	e785      	b.n	8006d22 <__gethex+0x12a>
 8006e16:	1e73      	subs	r3, r6, #1
 8006e18:	9a05      	ldr	r2, [sp, #20]
 8006e1a:	9303      	str	r3, [sp, #12]
 8006e1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d019      	beq.n	8006e58 <__gethex+0x260>
 8006e24:	f1bb 0f20 	cmp.w	fp, #32
 8006e28:	d107      	bne.n	8006e3a <__gethex+0x242>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	9a00      	ldr	r2, [sp, #0]
 8006e2e:	f843 2b04 	str.w	r2, [r3], #4
 8006e32:	9302      	str	r3, [sp, #8]
 8006e34:	2300      	movs	r3, #0
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	469b      	mov	fp, r3
 8006e3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e3e:	f7ff fec5 	bl	8006bcc <__hexdig_fun>
 8006e42:	9b00      	ldr	r3, [sp, #0]
 8006e44:	f000 000f 	and.w	r0, r0, #15
 8006e48:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e4c:	4303      	orrs	r3, r0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	f10b 0b04 	add.w	fp, fp, #4
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	e00d      	b.n	8006e74 <__gethex+0x27c>
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	9a06      	ldr	r2, [sp, #24]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	d3e0      	bcc.n	8006e24 <__gethex+0x22c>
 8006e62:	4618      	mov	r0, r3
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	9307      	str	r3, [sp, #28]
 8006e68:	4652      	mov	r2, sl
 8006e6a:	f001 faa9 	bl	80083c0 <strncmp>
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d1d7      	bne.n	8006e24 <__gethex+0x22c>
 8006e74:	461e      	mov	r6, r3
 8006e76:	e78b      	b.n	8006d90 <__gethex+0x198>
 8006e78:	f04f 0a03 	mov.w	sl, #3
 8006e7c:	e7b8      	b.n	8006df0 <__gethex+0x1f8>
 8006e7e:	da0a      	bge.n	8006e96 <__gethex+0x29e>
 8006e80:	1a37      	subs	r7, r6, r0
 8006e82:	4621      	mov	r1, r4
 8006e84:	ee18 0a10 	vmov	r0, s16
 8006e88:	463a      	mov	r2, r7
 8006e8a:	f000 fc2b 	bl	80076e4 <__lshift>
 8006e8e:	1bed      	subs	r5, r5, r7
 8006e90:	4604      	mov	r4, r0
 8006e92:	f100 0914 	add.w	r9, r0, #20
 8006e96:	f04f 0a00 	mov.w	sl, #0
 8006e9a:	e7ae      	b.n	8006dfa <__gethex+0x202>
 8006e9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ea0:	42a8      	cmp	r0, r5
 8006ea2:	dd72      	ble.n	8006f8a <__gethex+0x392>
 8006ea4:	1b45      	subs	r5, r0, r5
 8006ea6:	42ae      	cmp	r6, r5
 8006ea8:	dc36      	bgt.n	8006f18 <__gethex+0x320>
 8006eaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d02a      	beq.n	8006f08 <__gethex+0x310>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d02c      	beq.n	8006f10 <__gethex+0x318>
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11c      	bne.n	8006ef4 <__gethex+0x2fc>
 8006eba:	42ae      	cmp	r6, r5
 8006ebc:	d11a      	bne.n	8006ef4 <__gethex+0x2fc>
 8006ebe:	2e01      	cmp	r6, #1
 8006ec0:	d112      	bne.n	8006ee8 <__gethex+0x2f0>
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	f8c9 3000 	str.w	r3, [r9]
 8006ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ed4:	2762      	movs	r7, #98	; 0x62
 8006ed6:	601c      	str	r4, [r3, #0]
 8006ed8:	e723      	b.n	8006d22 <__gethex+0x12a>
 8006eda:	bf00      	nop
 8006edc:	08009ef0 	.word	0x08009ef0
 8006ee0:	08009e79 	.word	0x08009e79
 8006ee4:	08009e8a 	.word	0x08009e8a
 8006ee8:	1e71      	subs	r1, r6, #1
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fe5d 	bl	8007baa <__any_on>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d1e6      	bne.n	8006ec2 <__gethex+0x2ca>
 8006ef4:	ee18 0a10 	vmov	r0, s16
 8006ef8:	4621      	mov	r1, r4
 8006efa:	f000 f9d7 	bl	80072ac <_Bfree>
 8006efe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f00:	2300      	movs	r3, #0
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	2750      	movs	r7, #80	; 0x50
 8006f06:	e70c      	b.n	8006d22 <__gethex+0x12a>
 8006f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f2      	bne.n	8006ef4 <__gethex+0x2fc>
 8006f0e:	e7d8      	b.n	8006ec2 <__gethex+0x2ca>
 8006f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d5      	bne.n	8006ec2 <__gethex+0x2ca>
 8006f16:	e7ed      	b.n	8006ef4 <__gethex+0x2fc>
 8006f18:	1e6f      	subs	r7, r5, #1
 8006f1a:	f1ba 0f00 	cmp.w	sl, #0
 8006f1e:	d131      	bne.n	8006f84 <__gethex+0x38c>
 8006f20:	b127      	cbz	r7, 8006f2c <__gethex+0x334>
 8006f22:	4639      	mov	r1, r7
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 fe40 	bl	8007baa <__any_on>
 8006f2a:	4682      	mov	sl, r0
 8006f2c:	117b      	asrs	r3, r7, #5
 8006f2e:	2101      	movs	r1, #1
 8006f30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f34:	f007 071f 	and.w	r7, r7, #31
 8006f38:	fa01 f707 	lsl.w	r7, r1, r7
 8006f3c:	421f      	tst	r7, r3
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4620      	mov	r0, r4
 8006f42:	bf18      	it	ne
 8006f44:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f48:	1b76      	subs	r6, r6, r5
 8006f4a:	f7ff fded 	bl	8006b28 <rshift>
 8006f4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f52:	2702      	movs	r7, #2
 8006f54:	f1ba 0f00 	cmp.w	sl, #0
 8006f58:	d048      	beq.n	8006fec <__gethex+0x3f4>
 8006f5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d015      	beq.n	8006f8e <__gethex+0x396>
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d017      	beq.n	8006f96 <__gethex+0x39e>
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d109      	bne.n	8006f7e <__gethex+0x386>
 8006f6a:	f01a 0f02 	tst.w	sl, #2
 8006f6e:	d006      	beq.n	8006f7e <__gethex+0x386>
 8006f70:	f8d9 0000 	ldr.w	r0, [r9]
 8006f74:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f78:	f01a 0f01 	tst.w	sl, #1
 8006f7c:	d10e      	bne.n	8006f9c <__gethex+0x3a4>
 8006f7e:	f047 0710 	orr.w	r7, r7, #16
 8006f82:	e033      	b.n	8006fec <__gethex+0x3f4>
 8006f84:	f04f 0a01 	mov.w	sl, #1
 8006f88:	e7d0      	b.n	8006f2c <__gethex+0x334>
 8006f8a:	2701      	movs	r7, #1
 8006f8c:	e7e2      	b.n	8006f54 <__gethex+0x35c>
 8006f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f90:	f1c3 0301 	rsb	r3, r3, #1
 8006f94:	9315      	str	r3, [sp, #84]	; 0x54
 8006f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <__gethex+0x386>
 8006f9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006fa0:	f104 0314 	add.w	r3, r4, #20
 8006fa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006fa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006fac:	f04f 0c00 	mov.w	ip, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006fba:	d01c      	beq.n	8006ff6 <__gethex+0x3fe>
 8006fbc:	3201      	adds	r2, #1
 8006fbe:	6002      	str	r2, [r0, #0]
 8006fc0:	2f02      	cmp	r7, #2
 8006fc2:	f104 0314 	add.w	r3, r4, #20
 8006fc6:	d13f      	bne.n	8007048 <__gethex+0x450>
 8006fc8:	f8d8 2000 	ldr.w	r2, [r8]
 8006fcc:	3a01      	subs	r2, #1
 8006fce:	42b2      	cmp	r2, r6
 8006fd0:	d10a      	bne.n	8006fe8 <__gethex+0x3f0>
 8006fd2:	1171      	asrs	r1, r6, #5
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fda:	f006 061f 	and.w	r6, r6, #31
 8006fde:	fa02 f606 	lsl.w	r6, r2, r6
 8006fe2:	421e      	tst	r6, r3
 8006fe4:	bf18      	it	ne
 8006fe6:	4617      	movne	r7, r2
 8006fe8:	f047 0720 	orr.w	r7, r7, #32
 8006fec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fee:	601c      	str	r4, [r3, #0]
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	601d      	str	r5, [r3, #0]
 8006ff4:	e695      	b.n	8006d22 <__gethex+0x12a>
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ffc:	d8d8      	bhi.n	8006fb0 <__gethex+0x3b8>
 8006ffe:	68a3      	ldr	r3, [r4, #8]
 8007000:	459b      	cmp	fp, r3
 8007002:	db19      	blt.n	8007038 <__gethex+0x440>
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	ee18 0a10 	vmov	r0, s16
 800700a:	3101      	adds	r1, #1
 800700c:	f000 f90e 	bl	800722c <_Balloc>
 8007010:	4681      	mov	r9, r0
 8007012:	b918      	cbnz	r0, 800701c <__gethex+0x424>
 8007014:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <__gethex+0x488>)
 8007016:	4602      	mov	r2, r0
 8007018:	2184      	movs	r1, #132	; 0x84
 800701a:	e6a8      	b.n	8006d6e <__gethex+0x176>
 800701c:	6922      	ldr	r2, [r4, #16]
 800701e:	3202      	adds	r2, #2
 8007020:	f104 010c 	add.w	r1, r4, #12
 8007024:	0092      	lsls	r2, r2, #2
 8007026:	300c      	adds	r0, #12
 8007028:	f7fe fd32 	bl	8005a90 <memcpy>
 800702c:	4621      	mov	r1, r4
 800702e:	ee18 0a10 	vmov	r0, s16
 8007032:	f000 f93b 	bl	80072ac <_Bfree>
 8007036:	464c      	mov	r4, r9
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007040:	6122      	str	r2, [r4, #16]
 8007042:	2201      	movs	r2, #1
 8007044:	615a      	str	r2, [r3, #20]
 8007046:	e7bb      	b.n	8006fc0 <__gethex+0x3c8>
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	455a      	cmp	r2, fp
 800704c:	dd0b      	ble.n	8007066 <__gethex+0x46e>
 800704e:	2101      	movs	r1, #1
 8007050:	4620      	mov	r0, r4
 8007052:	f7ff fd69 	bl	8006b28 <rshift>
 8007056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800705a:	3501      	adds	r5, #1
 800705c:	42ab      	cmp	r3, r5
 800705e:	f6ff aed0 	blt.w	8006e02 <__gethex+0x20a>
 8007062:	2701      	movs	r7, #1
 8007064:	e7c0      	b.n	8006fe8 <__gethex+0x3f0>
 8007066:	f016 061f 	ands.w	r6, r6, #31
 800706a:	d0fa      	beq.n	8007062 <__gethex+0x46a>
 800706c:	4453      	add	r3, sl
 800706e:	f1c6 0620 	rsb	r6, r6, #32
 8007072:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007076:	f000 f9cb 	bl	8007410 <__hi0bits>
 800707a:	42b0      	cmp	r0, r6
 800707c:	dbe7      	blt.n	800704e <__gethex+0x456>
 800707e:	e7f0      	b.n	8007062 <__gethex+0x46a>
 8007080:	08009e79 	.word	0x08009e79

08007084 <L_shift>:
 8007084:	f1c2 0208 	rsb	r2, r2, #8
 8007088:	0092      	lsls	r2, r2, #2
 800708a:	b570      	push	{r4, r5, r6, lr}
 800708c:	f1c2 0620 	rsb	r6, r2, #32
 8007090:	6843      	ldr	r3, [r0, #4]
 8007092:	6804      	ldr	r4, [r0, #0]
 8007094:	fa03 f506 	lsl.w	r5, r3, r6
 8007098:	432c      	orrs	r4, r5
 800709a:	40d3      	lsrs	r3, r2
 800709c:	6004      	str	r4, [r0, #0]
 800709e:	f840 3f04 	str.w	r3, [r0, #4]!
 80070a2:	4288      	cmp	r0, r1
 80070a4:	d3f4      	bcc.n	8007090 <L_shift+0xc>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}

080070a8 <__match>:
 80070a8:	b530      	push	{r4, r5, lr}
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b2:	b914      	cbnz	r4, 80070ba <__match+0x12>
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	2001      	movs	r0, #1
 80070b8:	bd30      	pop	{r4, r5, pc}
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80070c2:	2d19      	cmp	r5, #25
 80070c4:	bf98      	it	ls
 80070c6:	3220      	addls	r2, #32
 80070c8:	42a2      	cmp	r2, r4
 80070ca:	d0f0      	beq.n	80070ae <__match+0x6>
 80070cc:	2000      	movs	r0, #0
 80070ce:	e7f3      	b.n	80070b8 <__match+0x10>

080070d0 <__hexnan>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	680b      	ldr	r3, [r1, #0]
 80070d6:	115e      	asrs	r6, r3, #5
 80070d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070dc:	f013 031f 	ands.w	r3, r3, #31
 80070e0:	b087      	sub	sp, #28
 80070e2:	bf18      	it	ne
 80070e4:	3604      	addne	r6, #4
 80070e6:	2500      	movs	r5, #0
 80070e8:	1f37      	subs	r7, r6, #4
 80070ea:	4690      	mov	r8, r2
 80070ec:	6802      	ldr	r2, [r0, #0]
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	4682      	mov	sl, r0
 80070f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80070f6:	46b9      	mov	r9, r7
 80070f8:	463c      	mov	r4, r7
 80070fa:	9502      	str	r5, [sp, #8]
 80070fc:	46ab      	mov	fp, r5
 80070fe:	7851      	ldrb	r1, [r2, #1]
 8007100:	1c53      	adds	r3, r2, #1
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	b341      	cbz	r1, 8007158 <__hexnan+0x88>
 8007106:	4608      	mov	r0, r1
 8007108:	9205      	str	r2, [sp, #20]
 800710a:	9104      	str	r1, [sp, #16]
 800710c:	f7ff fd5e 	bl	8006bcc <__hexdig_fun>
 8007110:	2800      	cmp	r0, #0
 8007112:	d14f      	bne.n	80071b4 <__hexnan+0xe4>
 8007114:	9904      	ldr	r1, [sp, #16]
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	2920      	cmp	r1, #32
 800711a:	d818      	bhi.n	800714e <__hexnan+0x7e>
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	459b      	cmp	fp, r3
 8007120:	dd13      	ble.n	800714a <__hexnan+0x7a>
 8007122:	454c      	cmp	r4, r9
 8007124:	d206      	bcs.n	8007134 <__hexnan+0x64>
 8007126:	2d07      	cmp	r5, #7
 8007128:	dc04      	bgt.n	8007134 <__hexnan+0x64>
 800712a:	462a      	mov	r2, r5
 800712c:	4649      	mov	r1, r9
 800712e:	4620      	mov	r0, r4
 8007130:	f7ff ffa8 	bl	8007084 <L_shift>
 8007134:	4544      	cmp	r4, r8
 8007136:	d950      	bls.n	80071da <__hexnan+0x10a>
 8007138:	2300      	movs	r3, #0
 800713a:	f1a4 0904 	sub.w	r9, r4, #4
 800713e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007142:	f8cd b008 	str.w	fp, [sp, #8]
 8007146:	464c      	mov	r4, r9
 8007148:	461d      	mov	r5, r3
 800714a:	9a03      	ldr	r2, [sp, #12]
 800714c:	e7d7      	b.n	80070fe <__hexnan+0x2e>
 800714e:	2929      	cmp	r1, #41	; 0x29
 8007150:	d156      	bne.n	8007200 <__hexnan+0x130>
 8007152:	3202      	adds	r2, #2
 8007154:	f8ca 2000 	str.w	r2, [sl]
 8007158:	f1bb 0f00 	cmp.w	fp, #0
 800715c:	d050      	beq.n	8007200 <__hexnan+0x130>
 800715e:	454c      	cmp	r4, r9
 8007160:	d206      	bcs.n	8007170 <__hexnan+0xa0>
 8007162:	2d07      	cmp	r5, #7
 8007164:	dc04      	bgt.n	8007170 <__hexnan+0xa0>
 8007166:	462a      	mov	r2, r5
 8007168:	4649      	mov	r1, r9
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff ff8a 	bl	8007084 <L_shift>
 8007170:	4544      	cmp	r4, r8
 8007172:	d934      	bls.n	80071de <__hexnan+0x10e>
 8007174:	f1a8 0204 	sub.w	r2, r8, #4
 8007178:	4623      	mov	r3, r4
 800717a:	f853 1b04 	ldr.w	r1, [r3], #4
 800717e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007182:	429f      	cmp	r7, r3
 8007184:	d2f9      	bcs.n	800717a <__hexnan+0xaa>
 8007186:	1b3b      	subs	r3, r7, r4
 8007188:	f023 0303 	bic.w	r3, r3, #3
 800718c:	3304      	adds	r3, #4
 800718e:	3401      	adds	r4, #1
 8007190:	3e03      	subs	r6, #3
 8007192:	42b4      	cmp	r4, r6
 8007194:	bf88      	it	hi
 8007196:	2304      	movhi	r3, #4
 8007198:	4443      	add	r3, r8
 800719a:	2200      	movs	r2, #0
 800719c:	f843 2b04 	str.w	r2, [r3], #4
 80071a0:	429f      	cmp	r7, r3
 80071a2:	d2fb      	bcs.n	800719c <__hexnan+0xcc>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	b91b      	cbnz	r3, 80071b0 <__hexnan+0xe0>
 80071a8:	4547      	cmp	r7, r8
 80071aa:	d127      	bne.n	80071fc <__hexnan+0x12c>
 80071ac:	2301      	movs	r3, #1
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	2005      	movs	r0, #5
 80071b2:	e026      	b.n	8007202 <__hexnan+0x132>
 80071b4:	3501      	adds	r5, #1
 80071b6:	2d08      	cmp	r5, #8
 80071b8:	f10b 0b01 	add.w	fp, fp, #1
 80071bc:	dd06      	ble.n	80071cc <__hexnan+0xfc>
 80071be:	4544      	cmp	r4, r8
 80071c0:	d9c3      	bls.n	800714a <__hexnan+0x7a>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80071c8:	2501      	movs	r5, #1
 80071ca:	3c04      	subs	r4, #4
 80071cc:	6822      	ldr	r2, [r4, #0]
 80071ce:	f000 000f 	and.w	r0, r0, #15
 80071d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	e7b7      	b.n	800714a <__hexnan+0x7a>
 80071da:	2508      	movs	r5, #8
 80071dc:	e7b5      	b.n	800714a <__hexnan+0x7a>
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0df      	beq.n	80071a4 <__hexnan+0xd4>
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295
 80071e8:	f1c3 0320 	rsb	r3, r3, #32
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
 80071f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071f4:	401a      	ands	r2, r3
 80071f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80071fa:	e7d3      	b.n	80071a4 <__hexnan+0xd4>
 80071fc:	3f04      	subs	r7, #4
 80071fe:	e7d1      	b.n	80071a4 <__hexnan+0xd4>
 8007200:	2004      	movs	r0, #4
 8007202:	b007      	add	sp, #28
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007208 <__ascii_mbtowc>:
 8007208:	b082      	sub	sp, #8
 800720a:	b901      	cbnz	r1, 800720e <__ascii_mbtowc+0x6>
 800720c:	a901      	add	r1, sp, #4
 800720e:	b142      	cbz	r2, 8007222 <__ascii_mbtowc+0x1a>
 8007210:	b14b      	cbz	r3, 8007226 <__ascii_mbtowc+0x1e>
 8007212:	7813      	ldrb	r3, [r2, #0]
 8007214:	600b      	str	r3, [r1, #0]
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	1e10      	subs	r0, r2, #0
 800721a:	bf18      	it	ne
 800721c:	2001      	movne	r0, #1
 800721e:	b002      	add	sp, #8
 8007220:	4770      	bx	lr
 8007222:	4610      	mov	r0, r2
 8007224:	e7fb      	b.n	800721e <__ascii_mbtowc+0x16>
 8007226:	f06f 0001 	mvn.w	r0, #1
 800722a:	e7f8      	b.n	800721e <__ascii_mbtowc+0x16>

0800722c <_Balloc>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	b976      	cbnz	r6, 8007254 <_Balloc+0x28>
 8007236:	2010      	movs	r0, #16
 8007238:	f001 ff8e 	bl	8009158 <malloc>
 800723c:	4602      	mov	r2, r0
 800723e:	6260      	str	r0, [r4, #36]	; 0x24
 8007240:	b920      	cbnz	r0, 800724c <_Balloc+0x20>
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <_Balloc+0x78>)
 8007244:	4818      	ldr	r0, [pc, #96]	; (80072a8 <_Balloc+0x7c>)
 8007246:	2166      	movs	r1, #102	; 0x66
 8007248:	f001 f8dc 	bl	8008404 <__assert_func>
 800724c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007250:	6006      	str	r6, [r0, #0]
 8007252:	60c6      	str	r6, [r0, #12]
 8007254:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007256:	68f3      	ldr	r3, [r6, #12]
 8007258:	b183      	cbz	r3, 800727c <_Balloc+0x50>
 800725a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007262:	b9b8      	cbnz	r0, 8007294 <_Balloc+0x68>
 8007264:	2101      	movs	r1, #1
 8007266:	fa01 f605 	lsl.w	r6, r1, r5
 800726a:	1d72      	adds	r2, r6, #5
 800726c:	0092      	lsls	r2, r2, #2
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fcbc 	bl	8007bec <_calloc_r>
 8007274:	b160      	cbz	r0, 8007290 <_Balloc+0x64>
 8007276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800727a:	e00e      	b.n	800729a <_Balloc+0x6e>
 800727c:	2221      	movs	r2, #33	; 0x21
 800727e:	2104      	movs	r1, #4
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fcb3 	bl	8007bec <_calloc_r>
 8007286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007288:	60f0      	str	r0, [r6, #12]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e4      	bne.n	800725a <_Balloc+0x2e>
 8007290:	2000      	movs	r0, #0
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	6802      	ldr	r2, [r0, #0]
 8007296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800729a:	2300      	movs	r3, #0
 800729c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a0:	e7f7      	b.n	8007292 <_Balloc+0x66>
 80072a2:	bf00      	nop
 80072a4:	08009f04 	.word	0x08009f04
 80072a8:	08009f1b 	.word	0x08009f1b

080072ac <_Bfree>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072b0:	4605      	mov	r5, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	b976      	cbnz	r6, 80072d4 <_Bfree+0x28>
 80072b6:	2010      	movs	r0, #16
 80072b8:	f001 ff4e 	bl	8009158 <malloc>
 80072bc:	4602      	mov	r2, r0
 80072be:	6268      	str	r0, [r5, #36]	; 0x24
 80072c0:	b920      	cbnz	r0, 80072cc <_Bfree+0x20>
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <_Bfree+0x3c>)
 80072c4:	4809      	ldr	r0, [pc, #36]	; (80072ec <_Bfree+0x40>)
 80072c6:	218a      	movs	r1, #138	; 0x8a
 80072c8:	f001 f89c 	bl	8008404 <__assert_func>
 80072cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d0:	6006      	str	r6, [r0, #0]
 80072d2:	60c6      	str	r6, [r0, #12]
 80072d4:	b13c      	cbz	r4, 80072e6 <_Bfree+0x3a>
 80072d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072d8:	6862      	ldr	r2, [r4, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e0:	6021      	str	r1, [r4, #0]
 80072e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	08009f04 	.word	0x08009f04
 80072ec:	08009f1b 	.word	0x08009f1b

080072f0 <__multadd>:
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	690d      	ldr	r5, [r1, #16]
 80072f6:	4607      	mov	r7, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	461e      	mov	r6, r3
 80072fc:	f101 0c14 	add.w	ip, r1, #20
 8007300:	2000      	movs	r0, #0
 8007302:	f8dc 3000 	ldr.w	r3, [ip]
 8007306:	b299      	uxth	r1, r3
 8007308:	fb02 6101 	mla	r1, r2, r1, r6
 800730c:	0c1e      	lsrs	r6, r3, #16
 800730e:	0c0b      	lsrs	r3, r1, #16
 8007310:	fb02 3306 	mla	r3, r2, r6, r3
 8007314:	b289      	uxth	r1, r1
 8007316:	3001      	adds	r0, #1
 8007318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800731c:	4285      	cmp	r5, r0
 800731e:	f84c 1b04 	str.w	r1, [ip], #4
 8007322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007326:	dcec      	bgt.n	8007302 <__multadd+0x12>
 8007328:	b30e      	cbz	r6, 800736e <__multadd+0x7e>
 800732a:	68a3      	ldr	r3, [r4, #8]
 800732c:	42ab      	cmp	r3, r5
 800732e:	dc19      	bgt.n	8007364 <__multadd+0x74>
 8007330:	6861      	ldr	r1, [r4, #4]
 8007332:	4638      	mov	r0, r7
 8007334:	3101      	adds	r1, #1
 8007336:	f7ff ff79 	bl	800722c <_Balloc>
 800733a:	4680      	mov	r8, r0
 800733c:	b928      	cbnz	r0, 800734a <__multadd+0x5a>
 800733e:	4602      	mov	r2, r0
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <__multadd+0x84>)
 8007342:	480d      	ldr	r0, [pc, #52]	; (8007378 <__multadd+0x88>)
 8007344:	21b5      	movs	r1, #181	; 0xb5
 8007346:	f001 f85d 	bl	8008404 <__assert_func>
 800734a:	6922      	ldr	r2, [r4, #16]
 800734c:	3202      	adds	r2, #2
 800734e:	f104 010c 	add.w	r1, r4, #12
 8007352:	0092      	lsls	r2, r2, #2
 8007354:	300c      	adds	r0, #12
 8007356:	f7fe fb9b 	bl	8005a90 <memcpy>
 800735a:	4621      	mov	r1, r4
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff ffa5 	bl	80072ac <_Bfree>
 8007362:	4644      	mov	r4, r8
 8007364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007368:	3501      	adds	r5, #1
 800736a:	615e      	str	r6, [r3, #20]
 800736c:	6125      	str	r5, [r4, #16]
 800736e:	4620      	mov	r0, r4
 8007370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007374:	08009e79 	.word	0x08009e79
 8007378:	08009f1b 	.word	0x08009f1b

0800737c <__s2b>:
 800737c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007380:	460c      	mov	r4, r1
 8007382:	4615      	mov	r5, r2
 8007384:	461f      	mov	r7, r3
 8007386:	2209      	movs	r2, #9
 8007388:	3308      	adds	r3, #8
 800738a:	4606      	mov	r6, r0
 800738c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007390:	2100      	movs	r1, #0
 8007392:	2201      	movs	r2, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	db09      	blt.n	80073ac <__s2b+0x30>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ff47 	bl	800722c <_Balloc>
 800739e:	b940      	cbnz	r0, 80073b2 <__s2b+0x36>
 80073a0:	4602      	mov	r2, r0
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <__s2b+0x8c>)
 80073a4:	4819      	ldr	r0, [pc, #100]	; (800740c <__s2b+0x90>)
 80073a6:	21ce      	movs	r1, #206	; 0xce
 80073a8:	f001 f82c 	bl	8008404 <__assert_func>
 80073ac:	0052      	lsls	r2, r2, #1
 80073ae:	3101      	adds	r1, #1
 80073b0:	e7f0      	b.n	8007394 <__s2b+0x18>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	6143      	str	r3, [r0, #20]
 80073b6:	2d09      	cmp	r5, #9
 80073b8:	f04f 0301 	mov.w	r3, #1
 80073bc:	6103      	str	r3, [r0, #16]
 80073be:	dd16      	ble.n	80073ee <__s2b+0x72>
 80073c0:	f104 0909 	add.w	r9, r4, #9
 80073c4:	46c8      	mov	r8, r9
 80073c6:	442c      	add	r4, r5
 80073c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073cc:	4601      	mov	r1, r0
 80073ce:	3b30      	subs	r3, #48	; 0x30
 80073d0:	220a      	movs	r2, #10
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7ff ff8c 	bl	80072f0 <__multadd>
 80073d8:	45a0      	cmp	r8, r4
 80073da:	d1f5      	bne.n	80073c8 <__s2b+0x4c>
 80073dc:	f1a5 0408 	sub.w	r4, r5, #8
 80073e0:	444c      	add	r4, r9
 80073e2:	1b2d      	subs	r5, r5, r4
 80073e4:	1963      	adds	r3, r4, r5
 80073e6:	42bb      	cmp	r3, r7
 80073e8:	db04      	blt.n	80073f4 <__s2b+0x78>
 80073ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ee:	340a      	adds	r4, #10
 80073f0:	2509      	movs	r5, #9
 80073f2:	e7f6      	b.n	80073e2 <__s2b+0x66>
 80073f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073f8:	4601      	mov	r1, r0
 80073fa:	3b30      	subs	r3, #48	; 0x30
 80073fc:	220a      	movs	r2, #10
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ff76 	bl	80072f0 <__multadd>
 8007404:	e7ee      	b.n	80073e4 <__s2b+0x68>
 8007406:	bf00      	nop
 8007408:	08009e79 	.word	0x08009e79
 800740c:	08009f1b 	.word	0x08009f1b

08007410 <__hi0bits>:
 8007410:	0c03      	lsrs	r3, r0, #16
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	b9d3      	cbnz	r3, 800744c <__hi0bits+0x3c>
 8007416:	0400      	lsls	r0, r0, #16
 8007418:	2310      	movs	r3, #16
 800741a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800741e:	bf04      	itt	eq
 8007420:	0200      	lsleq	r0, r0, #8
 8007422:	3308      	addeq	r3, #8
 8007424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007428:	bf04      	itt	eq
 800742a:	0100      	lsleq	r0, r0, #4
 800742c:	3304      	addeq	r3, #4
 800742e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007432:	bf04      	itt	eq
 8007434:	0080      	lsleq	r0, r0, #2
 8007436:	3302      	addeq	r3, #2
 8007438:	2800      	cmp	r0, #0
 800743a:	db05      	blt.n	8007448 <__hi0bits+0x38>
 800743c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007440:	f103 0301 	add.w	r3, r3, #1
 8007444:	bf08      	it	eq
 8007446:	2320      	moveq	r3, #32
 8007448:	4618      	mov	r0, r3
 800744a:	4770      	bx	lr
 800744c:	2300      	movs	r3, #0
 800744e:	e7e4      	b.n	800741a <__hi0bits+0xa>

08007450 <__lo0bits>:
 8007450:	6803      	ldr	r3, [r0, #0]
 8007452:	f013 0207 	ands.w	r2, r3, #7
 8007456:	4601      	mov	r1, r0
 8007458:	d00b      	beq.n	8007472 <__lo0bits+0x22>
 800745a:	07da      	lsls	r2, r3, #31
 800745c:	d423      	bmi.n	80074a6 <__lo0bits+0x56>
 800745e:	0798      	lsls	r0, r3, #30
 8007460:	bf49      	itett	mi
 8007462:	085b      	lsrmi	r3, r3, #1
 8007464:	089b      	lsrpl	r3, r3, #2
 8007466:	2001      	movmi	r0, #1
 8007468:	600b      	strmi	r3, [r1, #0]
 800746a:	bf5c      	itt	pl
 800746c:	600b      	strpl	r3, [r1, #0]
 800746e:	2002      	movpl	r0, #2
 8007470:	4770      	bx	lr
 8007472:	b298      	uxth	r0, r3
 8007474:	b9a8      	cbnz	r0, 80074a2 <__lo0bits+0x52>
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	2010      	movs	r0, #16
 800747a:	b2da      	uxtb	r2, r3
 800747c:	b90a      	cbnz	r2, 8007482 <__lo0bits+0x32>
 800747e:	3008      	adds	r0, #8
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	071a      	lsls	r2, r3, #28
 8007484:	bf04      	itt	eq
 8007486:	091b      	lsreq	r3, r3, #4
 8007488:	3004      	addeq	r0, #4
 800748a:	079a      	lsls	r2, r3, #30
 800748c:	bf04      	itt	eq
 800748e:	089b      	lsreq	r3, r3, #2
 8007490:	3002      	addeq	r0, #2
 8007492:	07da      	lsls	r2, r3, #31
 8007494:	d403      	bmi.n	800749e <__lo0bits+0x4e>
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	f100 0001 	add.w	r0, r0, #1
 800749c:	d005      	beq.n	80074aa <__lo0bits+0x5a>
 800749e:	600b      	str	r3, [r1, #0]
 80074a0:	4770      	bx	lr
 80074a2:	4610      	mov	r0, r2
 80074a4:	e7e9      	b.n	800747a <__lo0bits+0x2a>
 80074a6:	2000      	movs	r0, #0
 80074a8:	4770      	bx	lr
 80074aa:	2020      	movs	r0, #32
 80074ac:	4770      	bx	lr
	...

080074b0 <__i2b>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	460c      	mov	r4, r1
 80074b4:	2101      	movs	r1, #1
 80074b6:	f7ff feb9 	bl	800722c <_Balloc>
 80074ba:	4602      	mov	r2, r0
 80074bc:	b928      	cbnz	r0, 80074ca <__i2b+0x1a>
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <__i2b+0x24>)
 80074c0:	4805      	ldr	r0, [pc, #20]	; (80074d8 <__i2b+0x28>)
 80074c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074c6:	f000 ff9d 	bl	8008404 <__assert_func>
 80074ca:	2301      	movs	r3, #1
 80074cc:	6144      	str	r4, [r0, #20]
 80074ce:	6103      	str	r3, [r0, #16]
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	08009e79 	.word	0x08009e79
 80074d8:	08009f1b 	.word	0x08009f1b

080074dc <__multiply>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	4691      	mov	r9, r2
 80074e2:	690a      	ldr	r2, [r1, #16]
 80074e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bfb8      	it	lt
 80074ec:	460b      	movlt	r3, r1
 80074ee:	460c      	mov	r4, r1
 80074f0:	bfbc      	itt	lt
 80074f2:	464c      	movlt	r4, r9
 80074f4:	4699      	movlt	r9, r3
 80074f6:	6927      	ldr	r7, [r4, #16]
 80074f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074fc:	68a3      	ldr	r3, [r4, #8]
 80074fe:	6861      	ldr	r1, [r4, #4]
 8007500:	eb07 060a 	add.w	r6, r7, sl
 8007504:	42b3      	cmp	r3, r6
 8007506:	b085      	sub	sp, #20
 8007508:	bfb8      	it	lt
 800750a:	3101      	addlt	r1, #1
 800750c:	f7ff fe8e 	bl	800722c <_Balloc>
 8007510:	b930      	cbnz	r0, 8007520 <__multiply+0x44>
 8007512:	4602      	mov	r2, r0
 8007514:	4b44      	ldr	r3, [pc, #272]	; (8007628 <__multiply+0x14c>)
 8007516:	4845      	ldr	r0, [pc, #276]	; (800762c <__multiply+0x150>)
 8007518:	f240 115d 	movw	r1, #349	; 0x15d
 800751c:	f000 ff72 	bl	8008404 <__assert_func>
 8007520:	f100 0514 	add.w	r5, r0, #20
 8007524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007528:	462b      	mov	r3, r5
 800752a:	2200      	movs	r2, #0
 800752c:	4543      	cmp	r3, r8
 800752e:	d321      	bcc.n	8007574 <__multiply+0x98>
 8007530:	f104 0314 	add.w	r3, r4, #20
 8007534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007538:	f109 0314 	add.w	r3, r9, #20
 800753c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007540:	9202      	str	r2, [sp, #8]
 8007542:	1b3a      	subs	r2, r7, r4
 8007544:	3a15      	subs	r2, #21
 8007546:	f022 0203 	bic.w	r2, r2, #3
 800754a:	3204      	adds	r2, #4
 800754c:	f104 0115 	add.w	r1, r4, #21
 8007550:	428f      	cmp	r7, r1
 8007552:	bf38      	it	cc
 8007554:	2204      	movcc	r2, #4
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9a02      	ldr	r2, [sp, #8]
 800755a:	9303      	str	r3, [sp, #12]
 800755c:	429a      	cmp	r2, r3
 800755e:	d80c      	bhi.n	800757a <__multiply+0x9e>
 8007560:	2e00      	cmp	r6, #0
 8007562:	dd03      	ble.n	800756c <__multiply+0x90>
 8007564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05a      	beq.n	8007622 <__multiply+0x146>
 800756c:	6106      	str	r6, [r0, #16]
 800756e:	b005      	add	sp, #20
 8007570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007574:	f843 2b04 	str.w	r2, [r3], #4
 8007578:	e7d8      	b.n	800752c <__multiply+0x50>
 800757a:	f8b3 a000 	ldrh.w	sl, [r3]
 800757e:	f1ba 0f00 	cmp.w	sl, #0
 8007582:	d024      	beq.n	80075ce <__multiply+0xf2>
 8007584:	f104 0e14 	add.w	lr, r4, #20
 8007588:	46a9      	mov	r9, r5
 800758a:	f04f 0c00 	mov.w	ip, #0
 800758e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007592:	f8d9 1000 	ldr.w	r1, [r9]
 8007596:	fa1f fb82 	uxth.w	fp, r2
 800759a:	b289      	uxth	r1, r1
 800759c:	fb0a 110b 	mla	r1, sl, fp, r1
 80075a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075a4:	f8d9 2000 	ldr.w	r2, [r9]
 80075a8:	4461      	add	r1, ip
 80075aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80075b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075b6:	b289      	uxth	r1, r1
 80075b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075bc:	4577      	cmp	r7, lr
 80075be:	f849 1b04 	str.w	r1, [r9], #4
 80075c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075c6:	d8e2      	bhi.n	800758e <__multiply+0xb2>
 80075c8:	9a01      	ldr	r2, [sp, #4]
 80075ca:	f845 c002 	str.w	ip, [r5, r2]
 80075ce:	9a03      	ldr	r2, [sp, #12]
 80075d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075d4:	3304      	adds	r3, #4
 80075d6:	f1b9 0f00 	cmp.w	r9, #0
 80075da:	d020      	beq.n	800761e <__multiply+0x142>
 80075dc:	6829      	ldr	r1, [r5, #0]
 80075de:	f104 0c14 	add.w	ip, r4, #20
 80075e2:	46ae      	mov	lr, r5
 80075e4:	f04f 0a00 	mov.w	sl, #0
 80075e8:	f8bc b000 	ldrh.w	fp, [ip]
 80075ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075f0:	fb09 220b 	mla	r2, r9, fp, r2
 80075f4:	4492      	add	sl, r2
 80075f6:	b289      	uxth	r1, r1
 80075f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007600:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007604:	f8be 1000 	ldrh.w	r1, [lr]
 8007608:	0c12      	lsrs	r2, r2, #16
 800760a:	fb09 1102 	mla	r1, r9, r2, r1
 800760e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007612:	4567      	cmp	r7, ip
 8007614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007618:	d8e6      	bhi.n	80075e8 <__multiply+0x10c>
 800761a:	9a01      	ldr	r2, [sp, #4]
 800761c:	50a9      	str	r1, [r5, r2]
 800761e:	3504      	adds	r5, #4
 8007620:	e79a      	b.n	8007558 <__multiply+0x7c>
 8007622:	3e01      	subs	r6, #1
 8007624:	e79c      	b.n	8007560 <__multiply+0x84>
 8007626:	bf00      	nop
 8007628:	08009e79 	.word	0x08009e79
 800762c:	08009f1b 	.word	0x08009f1b

08007630 <__pow5mult>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	4615      	mov	r5, r2
 8007636:	f012 0203 	ands.w	r2, r2, #3
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	d007      	beq.n	8007650 <__pow5mult+0x20>
 8007640:	4c25      	ldr	r4, [pc, #148]	; (80076d8 <__pow5mult+0xa8>)
 8007642:	3a01      	subs	r2, #1
 8007644:	2300      	movs	r3, #0
 8007646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800764a:	f7ff fe51 	bl	80072f0 <__multadd>
 800764e:	4607      	mov	r7, r0
 8007650:	10ad      	asrs	r5, r5, #2
 8007652:	d03d      	beq.n	80076d0 <__pow5mult+0xa0>
 8007654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007656:	b97c      	cbnz	r4, 8007678 <__pow5mult+0x48>
 8007658:	2010      	movs	r0, #16
 800765a:	f001 fd7d 	bl	8009158 <malloc>
 800765e:	4602      	mov	r2, r0
 8007660:	6270      	str	r0, [r6, #36]	; 0x24
 8007662:	b928      	cbnz	r0, 8007670 <__pow5mult+0x40>
 8007664:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <__pow5mult+0xac>)
 8007666:	481e      	ldr	r0, [pc, #120]	; (80076e0 <__pow5mult+0xb0>)
 8007668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800766c:	f000 feca 	bl	8008404 <__assert_func>
 8007670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007674:	6004      	str	r4, [r0, #0]
 8007676:	60c4      	str	r4, [r0, #12]
 8007678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800767c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007680:	b94c      	cbnz	r4, 8007696 <__pow5mult+0x66>
 8007682:	f240 2171 	movw	r1, #625	; 0x271
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff ff12 	bl	80074b0 <__i2b>
 800768c:	2300      	movs	r3, #0
 800768e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007692:	4604      	mov	r4, r0
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	07eb      	lsls	r3, r5, #31
 800769c:	d50a      	bpl.n	80076b4 <__pow5mult+0x84>
 800769e:	4639      	mov	r1, r7
 80076a0:	4622      	mov	r2, r4
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff1a 	bl	80074dc <__multiply>
 80076a8:	4639      	mov	r1, r7
 80076aa:	4680      	mov	r8, r0
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff fdfd 	bl	80072ac <_Bfree>
 80076b2:	4647      	mov	r7, r8
 80076b4:	106d      	asrs	r5, r5, #1
 80076b6:	d00b      	beq.n	80076d0 <__pow5mult+0xa0>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	b938      	cbnz	r0, 80076cc <__pow5mult+0x9c>
 80076bc:	4622      	mov	r2, r4
 80076be:	4621      	mov	r1, r4
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ff0b 	bl	80074dc <__multiply>
 80076c6:	6020      	str	r0, [r4, #0]
 80076c8:	f8c0 9000 	str.w	r9, [r0]
 80076cc:	4604      	mov	r4, r0
 80076ce:	e7e4      	b.n	800769a <__pow5mult+0x6a>
 80076d0:	4638      	mov	r0, r7
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	bf00      	nop
 80076d8:	0800a068 	.word	0x0800a068
 80076dc:	08009f04 	.word	0x08009f04
 80076e0:	08009f1b 	.word	0x08009f1b

080076e4 <__lshift>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	460c      	mov	r4, r1
 80076ea:	6849      	ldr	r1, [r1, #4]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	4607      	mov	r7, r0
 80076f6:	4691      	mov	r9, r2
 80076f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076fc:	f108 0601 	add.w	r6, r8, #1
 8007700:	42b3      	cmp	r3, r6
 8007702:	db0b      	blt.n	800771c <__lshift+0x38>
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff fd91 	bl	800722c <_Balloc>
 800770a:	4605      	mov	r5, r0
 800770c:	b948      	cbnz	r0, 8007722 <__lshift+0x3e>
 800770e:	4602      	mov	r2, r0
 8007710:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <__lshift+0xd8>)
 8007712:	482b      	ldr	r0, [pc, #172]	; (80077c0 <__lshift+0xdc>)
 8007714:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007718:	f000 fe74 	bl	8008404 <__assert_func>
 800771c:	3101      	adds	r1, #1
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	e7ee      	b.n	8007700 <__lshift+0x1c>
 8007722:	2300      	movs	r3, #0
 8007724:	f100 0114 	add.w	r1, r0, #20
 8007728:	f100 0210 	add.w	r2, r0, #16
 800772c:	4618      	mov	r0, r3
 800772e:	4553      	cmp	r3, sl
 8007730:	db37      	blt.n	80077a2 <__lshift+0xbe>
 8007732:	6920      	ldr	r0, [r4, #16]
 8007734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007738:	f104 0314 	add.w	r3, r4, #20
 800773c:	f019 091f 	ands.w	r9, r9, #31
 8007740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007748:	d02f      	beq.n	80077aa <__lshift+0xc6>
 800774a:	f1c9 0e20 	rsb	lr, r9, #32
 800774e:	468a      	mov	sl, r1
 8007750:	f04f 0c00 	mov.w	ip, #0
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	fa02 f209 	lsl.w	r2, r2, r9
 800775a:	ea42 020c 	orr.w	r2, r2, ip
 800775e:	f84a 2b04 	str.w	r2, [sl], #4
 8007762:	f853 2b04 	ldr.w	r2, [r3], #4
 8007766:	4298      	cmp	r0, r3
 8007768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800776c:	d8f2      	bhi.n	8007754 <__lshift+0x70>
 800776e:	1b03      	subs	r3, r0, r4
 8007770:	3b15      	subs	r3, #21
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	3304      	adds	r3, #4
 8007778:	f104 0215 	add.w	r2, r4, #21
 800777c:	4290      	cmp	r0, r2
 800777e:	bf38      	it	cc
 8007780:	2304      	movcc	r3, #4
 8007782:	f841 c003 	str.w	ip, [r1, r3]
 8007786:	f1bc 0f00 	cmp.w	ip, #0
 800778a:	d001      	beq.n	8007790 <__lshift+0xac>
 800778c:	f108 0602 	add.w	r6, r8, #2
 8007790:	3e01      	subs	r6, #1
 8007792:	4638      	mov	r0, r7
 8007794:	612e      	str	r6, [r5, #16]
 8007796:	4621      	mov	r1, r4
 8007798:	f7ff fd88 	bl	80072ac <_Bfree>
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077a6:	3301      	adds	r3, #1
 80077a8:	e7c1      	b.n	800772e <__lshift+0x4a>
 80077aa:	3904      	subs	r1, #4
 80077ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077b4:	4298      	cmp	r0, r3
 80077b6:	d8f9      	bhi.n	80077ac <__lshift+0xc8>
 80077b8:	e7ea      	b.n	8007790 <__lshift+0xac>
 80077ba:	bf00      	nop
 80077bc:	08009e79 	.word	0x08009e79
 80077c0:	08009f1b 	.word	0x08009f1b

080077c4 <__mcmp>:
 80077c4:	b530      	push	{r4, r5, lr}
 80077c6:	6902      	ldr	r2, [r0, #16]
 80077c8:	690c      	ldr	r4, [r1, #16]
 80077ca:	1b12      	subs	r2, r2, r4
 80077cc:	d10e      	bne.n	80077ec <__mcmp+0x28>
 80077ce:	f100 0314 	add.w	r3, r0, #20
 80077d2:	3114      	adds	r1, #20
 80077d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077e4:	42a5      	cmp	r5, r4
 80077e6:	d003      	beq.n	80077f0 <__mcmp+0x2c>
 80077e8:	d305      	bcc.n	80077f6 <__mcmp+0x32>
 80077ea:	2201      	movs	r2, #1
 80077ec:	4610      	mov	r0, r2
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	4283      	cmp	r3, r0
 80077f2:	d3f3      	bcc.n	80077dc <__mcmp+0x18>
 80077f4:	e7fa      	b.n	80077ec <__mcmp+0x28>
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	e7f7      	b.n	80077ec <__mcmp+0x28>

080077fc <__mdiff>:
 80077fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	4606      	mov	r6, r0
 8007804:	4611      	mov	r1, r2
 8007806:	4620      	mov	r0, r4
 8007808:	4690      	mov	r8, r2
 800780a:	f7ff ffdb 	bl	80077c4 <__mcmp>
 800780e:	1e05      	subs	r5, r0, #0
 8007810:	d110      	bne.n	8007834 <__mdiff+0x38>
 8007812:	4629      	mov	r1, r5
 8007814:	4630      	mov	r0, r6
 8007816:	f7ff fd09 	bl	800722c <_Balloc>
 800781a:	b930      	cbnz	r0, 800782a <__mdiff+0x2e>
 800781c:	4b3a      	ldr	r3, [pc, #232]	; (8007908 <__mdiff+0x10c>)
 800781e:	4602      	mov	r2, r0
 8007820:	f240 2132 	movw	r1, #562	; 0x232
 8007824:	4839      	ldr	r0, [pc, #228]	; (800790c <__mdiff+0x110>)
 8007826:	f000 fded 	bl	8008404 <__assert_func>
 800782a:	2301      	movs	r3, #1
 800782c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	bfa4      	itt	ge
 8007836:	4643      	movge	r3, r8
 8007838:	46a0      	movge	r8, r4
 800783a:	4630      	mov	r0, r6
 800783c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007840:	bfa6      	itte	ge
 8007842:	461c      	movge	r4, r3
 8007844:	2500      	movge	r5, #0
 8007846:	2501      	movlt	r5, #1
 8007848:	f7ff fcf0 	bl	800722c <_Balloc>
 800784c:	b920      	cbnz	r0, 8007858 <__mdiff+0x5c>
 800784e:	4b2e      	ldr	r3, [pc, #184]	; (8007908 <__mdiff+0x10c>)
 8007850:	4602      	mov	r2, r0
 8007852:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007856:	e7e5      	b.n	8007824 <__mdiff+0x28>
 8007858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800785c:	6926      	ldr	r6, [r4, #16]
 800785e:	60c5      	str	r5, [r0, #12]
 8007860:	f104 0914 	add.w	r9, r4, #20
 8007864:	f108 0514 	add.w	r5, r8, #20
 8007868:	f100 0e14 	add.w	lr, r0, #20
 800786c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007874:	f108 0210 	add.w	r2, r8, #16
 8007878:	46f2      	mov	sl, lr
 800787a:	2100      	movs	r1, #0
 800787c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007884:	fa1f f883 	uxth.w	r8, r3
 8007888:	fa11 f18b 	uxtah	r1, r1, fp
 800788c:	0c1b      	lsrs	r3, r3, #16
 800788e:	eba1 0808 	sub.w	r8, r1, r8
 8007892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800789a:	fa1f f888 	uxth.w	r8, r8
 800789e:	1419      	asrs	r1, r3, #16
 80078a0:	454e      	cmp	r6, r9
 80078a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078a6:	f84a 3b04 	str.w	r3, [sl], #4
 80078aa:	d8e7      	bhi.n	800787c <__mdiff+0x80>
 80078ac:	1b33      	subs	r3, r6, r4
 80078ae:	3b15      	subs	r3, #21
 80078b0:	f023 0303 	bic.w	r3, r3, #3
 80078b4:	3304      	adds	r3, #4
 80078b6:	3415      	adds	r4, #21
 80078b8:	42a6      	cmp	r6, r4
 80078ba:	bf38      	it	cc
 80078bc:	2304      	movcc	r3, #4
 80078be:	441d      	add	r5, r3
 80078c0:	4473      	add	r3, lr
 80078c2:	469e      	mov	lr, r3
 80078c4:	462e      	mov	r6, r5
 80078c6:	4566      	cmp	r6, ip
 80078c8:	d30e      	bcc.n	80078e8 <__mdiff+0xec>
 80078ca:	f10c 0203 	add.w	r2, ip, #3
 80078ce:	1b52      	subs	r2, r2, r5
 80078d0:	f022 0203 	bic.w	r2, r2, #3
 80078d4:	3d03      	subs	r5, #3
 80078d6:	45ac      	cmp	ip, r5
 80078d8:	bf38      	it	cc
 80078da:	2200      	movcc	r2, #0
 80078dc:	441a      	add	r2, r3
 80078de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078e2:	b17b      	cbz	r3, 8007904 <__mdiff+0x108>
 80078e4:	6107      	str	r7, [r0, #16]
 80078e6:	e7a3      	b.n	8007830 <__mdiff+0x34>
 80078e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078ec:	fa11 f288 	uxtah	r2, r1, r8
 80078f0:	1414      	asrs	r4, r2, #16
 80078f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078f6:	b292      	uxth	r2, r2
 80078f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078fc:	f84e 2b04 	str.w	r2, [lr], #4
 8007900:	1421      	asrs	r1, r4, #16
 8007902:	e7e0      	b.n	80078c6 <__mdiff+0xca>
 8007904:	3f01      	subs	r7, #1
 8007906:	e7ea      	b.n	80078de <__mdiff+0xe2>
 8007908:	08009e79 	.word	0x08009e79
 800790c:	08009f1b 	.word	0x08009f1b

08007910 <__ulp>:
 8007910:	b082      	sub	sp, #8
 8007912:	ed8d 0b00 	vstr	d0, [sp]
 8007916:	9b01      	ldr	r3, [sp, #4]
 8007918:	4912      	ldr	r1, [pc, #72]	; (8007964 <__ulp+0x54>)
 800791a:	4019      	ands	r1, r3
 800791c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007920:	2900      	cmp	r1, #0
 8007922:	dd05      	ble.n	8007930 <__ulp+0x20>
 8007924:	2200      	movs	r2, #0
 8007926:	460b      	mov	r3, r1
 8007928:	ec43 2b10 	vmov	d0, r2, r3
 800792c:	b002      	add	sp, #8
 800792e:	4770      	bx	lr
 8007930:	4249      	negs	r1, r1
 8007932:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007936:	ea4f 5021 	mov.w	r0, r1, asr #20
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	da04      	bge.n	800794e <__ulp+0x3e>
 8007944:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007948:	fa41 f300 	asr.w	r3, r1, r0
 800794c:	e7ec      	b.n	8007928 <__ulp+0x18>
 800794e:	f1a0 0114 	sub.w	r1, r0, #20
 8007952:	291e      	cmp	r1, #30
 8007954:	bfda      	itte	le
 8007956:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800795a:	fa20 f101 	lsrle.w	r1, r0, r1
 800795e:	2101      	movgt	r1, #1
 8007960:	460a      	mov	r2, r1
 8007962:	e7e1      	b.n	8007928 <__ulp+0x18>
 8007964:	7ff00000 	.word	0x7ff00000

08007968 <__b2d>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	6905      	ldr	r5, [r0, #16]
 800796c:	f100 0714 	add.w	r7, r0, #20
 8007970:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007974:	1f2e      	subs	r6, r5, #4
 8007976:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff fd48 	bl	8007410 <__hi0bits>
 8007980:	f1c0 0320 	rsb	r3, r0, #32
 8007984:	280a      	cmp	r0, #10
 8007986:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007a04 <__b2d+0x9c>
 800798a:	600b      	str	r3, [r1, #0]
 800798c:	dc14      	bgt.n	80079b8 <__b2d+0x50>
 800798e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007992:	fa24 f10e 	lsr.w	r1, r4, lr
 8007996:	42b7      	cmp	r7, r6
 8007998:	ea41 030c 	orr.w	r3, r1, ip
 800799c:	bf34      	ite	cc
 800799e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079a2:	2100      	movcs	r1, #0
 80079a4:	3015      	adds	r0, #21
 80079a6:	fa04 f000 	lsl.w	r0, r4, r0
 80079aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80079ae:	ea40 0201 	orr.w	r2, r0, r1
 80079b2:	ec43 2b10 	vmov	d0, r2, r3
 80079b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b8:	42b7      	cmp	r7, r6
 80079ba:	bf3a      	itte	cc
 80079bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80079c4:	2100      	movcs	r1, #0
 80079c6:	380b      	subs	r0, #11
 80079c8:	d017      	beq.n	80079fa <__b2d+0x92>
 80079ca:	f1c0 0c20 	rsb	ip, r0, #32
 80079ce:	fa04 f500 	lsl.w	r5, r4, r0
 80079d2:	42be      	cmp	r6, r7
 80079d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80079d8:	ea45 0504 	orr.w	r5, r5, r4
 80079dc:	bf8c      	ite	hi
 80079de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80079e2:	2400      	movls	r4, #0
 80079e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80079e8:	fa01 f000 	lsl.w	r0, r1, r0
 80079ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80079f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079f4:	ea40 0204 	orr.w	r2, r0, r4
 80079f8:	e7db      	b.n	80079b2 <__b2d+0x4a>
 80079fa:	ea44 030c 	orr.w	r3, r4, ip
 80079fe:	460a      	mov	r2, r1
 8007a00:	e7d7      	b.n	80079b2 <__b2d+0x4a>
 8007a02:	bf00      	nop
 8007a04:	3ff00000 	.word	0x3ff00000

08007a08 <__d2b>:
 8007a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	2101      	movs	r1, #1
 8007a10:	ec57 6b10 	vmov	r6, r7, d0
 8007a14:	4690      	mov	r8, r2
 8007a16:	f7ff fc09 	bl	800722c <_Balloc>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	b930      	cbnz	r0, 8007a2c <__d2b+0x24>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <__d2b+0xb0>)
 8007a22:	4826      	ldr	r0, [pc, #152]	; (8007abc <__d2b+0xb4>)
 8007a24:	f240 310a 	movw	r1, #778	; 0x30a
 8007a28:	f000 fcec 	bl	8008404 <__assert_func>
 8007a2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a34:	bb35      	cbnz	r5, 8007a84 <__d2b+0x7c>
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	d028      	beq.n	8007a8e <__d2b+0x86>
 8007a3c:	4668      	mov	r0, sp
 8007a3e:	9600      	str	r6, [sp, #0]
 8007a40:	f7ff fd06 	bl	8007450 <__lo0bits>
 8007a44:	9900      	ldr	r1, [sp, #0]
 8007a46:	b300      	cbz	r0, 8007a8a <__d2b+0x82>
 8007a48:	9a01      	ldr	r2, [sp, #4]
 8007a4a:	f1c0 0320 	rsb	r3, r0, #32
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	430b      	orrs	r3, r1
 8007a54:	40c2      	lsrs	r2, r0
 8007a56:	6163      	str	r3, [r4, #20]
 8007a58:	9201      	str	r2, [sp, #4]
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	61a3      	str	r3, [r4, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2202      	movne	r2, #2
 8007a64:	2201      	moveq	r2, #1
 8007a66:	6122      	str	r2, [r4, #16]
 8007a68:	b1d5      	cbz	r5, 8007aa0 <__d2b+0x98>
 8007a6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a6e:	4405      	add	r5, r0
 8007a70:	f8c9 5000 	str.w	r5, [r9]
 8007a74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a78:	f8c8 0000 	str.w	r0, [r8]
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	b003      	add	sp, #12
 8007a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a88:	e7d5      	b.n	8007a36 <__d2b+0x2e>
 8007a8a:	6161      	str	r1, [r4, #20]
 8007a8c:	e7e5      	b.n	8007a5a <__d2b+0x52>
 8007a8e:	a801      	add	r0, sp, #4
 8007a90:	f7ff fcde 	bl	8007450 <__lo0bits>
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	6122      	str	r2, [r4, #16]
 8007a9c:	3020      	adds	r0, #32
 8007a9e:	e7e3      	b.n	8007a68 <__d2b+0x60>
 8007aa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007aa8:	f8c9 0000 	str.w	r0, [r9]
 8007aac:	6918      	ldr	r0, [r3, #16]
 8007aae:	f7ff fcaf 	bl	8007410 <__hi0bits>
 8007ab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ab6:	e7df      	b.n	8007a78 <__d2b+0x70>
 8007ab8:	08009e79 	.word	0x08009e79
 8007abc:	08009f1b 	.word	0x08009f1b

08007ac0 <__ratio>:
 8007ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	4688      	mov	r8, r1
 8007ac6:	4669      	mov	r1, sp
 8007ac8:	4681      	mov	r9, r0
 8007aca:	f7ff ff4d 	bl	8007968 <__b2d>
 8007ace:	a901      	add	r1, sp, #4
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	ec55 4b10 	vmov	r4, r5, d0
 8007ad6:	f7ff ff47 	bl	8007968 <__b2d>
 8007ada:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ade:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ae2:	eba3 0c02 	sub.w	ip, r3, r2
 8007ae6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007af0:	ec51 0b10 	vmov	r0, r1, d0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfd6      	itet	le
 8007af8:	460a      	movle	r2, r1
 8007afa:	462a      	movgt	r2, r5
 8007afc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b00:	468b      	mov	fp, r1
 8007b02:	462f      	mov	r7, r5
 8007b04:	bfd4      	ite	le
 8007b06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b0e:	4620      	mov	r0, r4
 8007b10:	ee10 2a10 	vmov	r2, s0
 8007b14:	465b      	mov	r3, fp
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fe98 	bl	800084c <__aeabi_ddiv>
 8007b1c:	ec41 0b10 	vmov	d0, r0, r1
 8007b20:	b003      	add	sp, #12
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007b28 <_mprec_log10>:
 8007b28:	2817      	cmp	r0, #23
 8007b2a:	b5d0      	push	{r4, r6, r7, lr}
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	dc07      	bgt.n	8007b40 <_mprec_log10+0x18>
 8007b30:	4809      	ldr	r0, [pc, #36]	; (8007b58 <_mprec_log10+0x30>)
 8007b32:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007b36:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007b3a:	ec41 0b10 	vmov	d0, r0, r1
 8007b3e:	bdd0      	pop	{r4, r6, r7, pc}
 8007b40:	4906      	ldr	r1, [pc, #24]	; (8007b5c <_mprec_log10+0x34>)
 8007b42:	4f07      	ldr	r7, [pc, #28]	; (8007b60 <_mprec_log10+0x38>)
 8007b44:	2000      	movs	r0, #0
 8007b46:	2600      	movs	r6, #0
 8007b48:	4632      	mov	r2, r6
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	3c01      	subs	r4, #1
 8007b52:	d1f9      	bne.n	8007b48 <_mprec_log10+0x20>
 8007b54:	e7f1      	b.n	8007b3a <_mprec_log10+0x12>
 8007b56:	bf00      	nop
 8007b58:	08009fa0 	.word	0x08009fa0
 8007b5c:	3ff00000 	.word	0x3ff00000
 8007b60:	40240000 	.word	0x40240000

08007b64 <__copybits>:
 8007b64:	3901      	subs	r1, #1
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	1149      	asrs	r1, r1, #5
 8007b6a:	6914      	ldr	r4, [r2, #16]
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	f102 0314 	add.w	r3, r2, #20
 8007b72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b7a:	1f05      	subs	r5, r0, #4
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d30c      	bcc.n	8007b9a <__copybits+0x36>
 8007b80:	1aa3      	subs	r3, r4, r2
 8007b82:	3b11      	subs	r3, #17
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	3211      	adds	r2, #17
 8007b8a:	42a2      	cmp	r2, r4
 8007b8c:	bf88      	it	hi
 8007b8e:	2300      	movhi	r3, #0
 8007b90:	4418      	add	r0, r3
 8007b92:	2300      	movs	r3, #0
 8007b94:	4288      	cmp	r0, r1
 8007b96:	d305      	bcc.n	8007ba4 <__copybits+0x40>
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ba2:	e7eb      	b.n	8007b7c <__copybits+0x18>
 8007ba4:	f840 3b04 	str.w	r3, [r0], #4
 8007ba8:	e7f4      	b.n	8007b94 <__copybits+0x30>

08007baa <__any_on>:
 8007baa:	f100 0214 	add.w	r2, r0, #20
 8007bae:	6900      	ldr	r0, [r0, #16]
 8007bb0:	114b      	asrs	r3, r1, #5
 8007bb2:	4298      	cmp	r0, r3
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	db11      	blt.n	8007bdc <__any_on+0x32>
 8007bb8:	dd0a      	ble.n	8007bd0 <__any_on+0x26>
 8007bba:	f011 011f 	ands.w	r1, r1, #31
 8007bbe:	d007      	beq.n	8007bd0 <__any_on+0x26>
 8007bc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bc4:	fa24 f001 	lsr.w	r0, r4, r1
 8007bc8:	fa00 f101 	lsl.w	r1, r0, r1
 8007bcc:	428c      	cmp	r4, r1
 8007bce:	d10b      	bne.n	8007be8 <__any_on+0x3e>
 8007bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d803      	bhi.n	8007be0 <__any_on+0x36>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	bd10      	pop	{r4, pc}
 8007bdc:	4603      	mov	r3, r0
 8007bde:	e7f7      	b.n	8007bd0 <__any_on+0x26>
 8007be0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d0f5      	beq.n	8007bd4 <__any_on+0x2a>
 8007be8:	2001      	movs	r0, #1
 8007bea:	e7f6      	b.n	8007bda <__any_on+0x30>

08007bec <_calloc_r>:
 8007bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bee:	fba1 2402 	umull	r2, r4, r1, r2
 8007bf2:	b94c      	cbnz	r4, 8007c08 <_calloc_r+0x1c>
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	f000 f82e 	bl	8007c58 <_malloc_r>
 8007bfc:	9a01      	ldr	r2, [sp, #4]
 8007bfe:	4605      	mov	r5, r0
 8007c00:	b930      	cbnz	r0, 8007c10 <_calloc_r+0x24>
 8007c02:	4628      	mov	r0, r5
 8007c04:	b003      	add	sp, #12
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	220c      	movs	r2, #12
 8007c0a:	6002      	str	r2, [r0, #0]
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	e7f8      	b.n	8007c02 <_calloc_r+0x16>
 8007c10:	4621      	mov	r1, r4
 8007c12:	f7fd ff4b 	bl	8005aac <memset>
 8007c16:	e7f4      	b.n	8007c02 <_calloc_r+0x16>

08007c18 <sbrk_aligned>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4e0e      	ldr	r6, [pc, #56]	; (8007c54 <sbrk_aligned+0x3c>)
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	6831      	ldr	r1, [r6, #0]
 8007c20:	4605      	mov	r5, r0
 8007c22:	b911      	cbnz	r1, 8007c2a <sbrk_aligned+0x12>
 8007c24:	f000 fbb4 	bl	8008390 <_sbrk_r>
 8007c28:	6030      	str	r0, [r6, #0]
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 fbaf 	bl	8008390 <_sbrk_r>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d00a      	beq.n	8007c4c <sbrk_aligned+0x34>
 8007c36:	1cc4      	adds	r4, r0, #3
 8007c38:	f024 0403 	bic.w	r4, r4, #3
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d007      	beq.n	8007c50 <sbrk_aligned+0x38>
 8007c40:	1a21      	subs	r1, r4, r0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 fba4 	bl	8008390 <_sbrk_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d101      	bne.n	8007c50 <sbrk_aligned+0x38>
 8007c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c50:	4620      	mov	r0, r4
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	200004d8 	.word	0x200004d8

08007c58 <_malloc_r>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	1ccd      	adds	r5, r1, #3
 8007c5e:	f025 0503 	bic.w	r5, r5, #3
 8007c62:	3508      	adds	r5, #8
 8007c64:	2d0c      	cmp	r5, #12
 8007c66:	bf38      	it	cc
 8007c68:	250c      	movcc	r5, #12
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	db01      	blt.n	8007c74 <_malloc_r+0x1c>
 8007c70:	42a9      	cmp	r1, r5
 8007c72:	d905      	bls.n	8007c80 <_malloc_r+0x28>
 8007c74:	230c      	movs	r3, #12
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	2600      	movs	r6, #0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c80:	4e2e      	ldr	r6, [pc, #184]	; (8007d3c <_malloc_r+0xe4>)
 8007c82:	f001 fa8b 	bl	800919c <__malloc_lock>
 8007c86:	6833      	ldr	r3, [r6, #0]
 8007c88:	461c      	mov	r4, r3
 8007c8a:	bb34      	cbnz	r4, 8007cda <_malloc_r+0x82>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7ff ffc2 	bl	8007c18 <sbrk_aligned>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	4604      	mov	r4, r0
 8007c98:	d14d      	bne.n	8007d36 <_malloc_r+0xde>
 8007c9a:	6834      	ldr	r4, [r6, #0]
 8007c9c:	4626      	mov	r6, r4
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	d140      	bne.n	8007d24 <_malloc_r+0xcc>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	eb04 0803 	add.w	r8, r4, r3
 8007cac:	f000 fb70 	bl	8008390 <_sbrk_r>
 8007cb0:	4580      	cmp	r8, r0
 8007cb2:	d13a      	bne.n	8007d2a <_malloc_r+0xd2>
 8007cb4:	6821      	ldr	r1, [r4, #0]
 8007cb6:	3503      	adds	r5, #3
 8007cb8:	1a6d      	subs	r5, r5, r1
 8007cba:	f025 0503 	bic.w	r5, r5, #3
 8007cbe:	3508      	adds	r5, #8
 8007cc0:	2d0c      	cmp	r5, #12
 8007cc2:	bf38      	it	cc
 8007cc4:	250c      	movcc	r5, #12
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ffa5 	bl	8007c18 <sbrk_aligned>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d02b      	beq.n	8007d2a <_malloc_r+0xd2>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	442b      	add	r3, r5
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	e00e      	b.n	8007cf8 <_malloc_r+0xa0>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	1b52      	subs	r2, r2, r5
 8007cde:	d41e      	bmi.n	8007d1e <_malloc_r+0xc6>
 8007ce0:	2a0b      	cmp	r2, #11
 8007ce2:	d916      	bls.n	8007d12 <_malloc_r+0xba>
 8007ce4:	1961      	adds	r1, r4, r5
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	6025      	str	r5, [r4, #0]
 8007cea:	bf18      	it	ne
 8007cec:	6059      	strne	r1, [r3, #4]
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	bf08      	it	eq
 8007cf2:	6031      	streq	r1, [r6, #0]
 8007cf4:	5162      	str	r2, [r4, r5]
 8007cf6:	604b      	str	r3, [r1, #4]
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f104 060b 	add.w	r6, r4, #11
 8007cfe:	f001 fa53 	bl	80091a8 <__malloc_unlock>
 8007d02:	f026 0607 	bic.w	r6, r6, #7
 8007d06:	1d23      	adds	r3, r4, #4
 8007d08:	1af2      	subs	r2, r6, r3
 8007d0a:	d0b6      	beq.n	8007c7a <_malloc_r+0x22>
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	50a3      	str	r3, [r4, r2]
 8007d10:	e7b3      	b.n	8007c7a <_malloc_r+0x22>
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	bf0c      	ite	eq
 8007d18:	6032      	streq	r2, [r6, #0]
 8007d1a:	605a      	strne	r2, [r3, #4]
 8007d1c:	e7ec      	b.n	8007cf8 <_malloc_r+0xa0>
 8007d1e:	4623      	mov	r3, r4
 8007d20:	6864      	ldr	r4, [r4, #4]
 8007d22:	e7b2      	b.n	8007c8a <_malloc_r+0x32>
 8007d24:	4634      	mov	r4, r6
 8007d26:	6876      	ldr	r6, [r6, #4]
 8007d28:	e7b9      	b.n	8007c9e <_malloc_r+0x46>
 8007d2a:	230c      	movs	r3, #12
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f001 fa3a 	bl	80091a8 <__malloc_unlock>
 8007d34:	e7a1      	b.n	8007c7a <_malloc_r+0x22>
 8007d36:	6025      	str	r5, [r4, #0]
 8007d38:	e7de      	b.n	8007cf8 <_malloc_r+0xa0>
 8007d3a:	bf00      	nop
 8007d3c:	200004d4 	.word	0x200004d4

08007d40 <_realloc_r>:
 8007d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d44:	4680      	mov	r8, r0
 8007d46:	4614      	mov	r4, r2
 8007d48:	460e      	mov	r6, r1
 8007d4a:	b921      	cbnz	r1, 8007d56 <_realloc_r+0x16>
 8007d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d50:	4611      	mov	r1, r2
 8007d52:	f7ff bf81 	b.w	8007c58 <_malloc_r>
 8007d56:	b92a      	cbnz	r2, 8007d64 <_realloc_r+0x24>
 8007d58:	f001 fa2c 	bl	80091b4 <_free_r>
 8007d5c:	4625      	mov	r5, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d64:	f001 fa72 	bl	800924c <_malloc_usable_size_r>
 8007d68:	4284      	cmp	r4, r0
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	d802      	bhi.n	8007d74 <_realloc_r+0x34>
 8007d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d72:	d812      	bhi.n	8007d9a <_realloc_r+0x5a>
 8007d74:	4621      	mov	r1, r4
 8007d76:	4640      	mov	r0, r8
 8007d78:	f7ff ff6e 	bl	8007c58 <_malloc_r>
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d0ed      	beq.n	8007d5e <_realloc_r+0x1e>
 8007d82:	42bc      	cmp	r4, r7
 8007d84:	4622      	mov	r2, r4
 8007d86:	4631      	mov	r1, r6
 8007d88:	bf28      	it	cs
 8007d8a:	463a      	movcs	r2, r7
 8007d8c:	f7fd fe80 	bl	8005a90 <memcpy>
 8007d90:	4631      	mov	r1, r6
 8007d92:	4640      	mov	r0, r8
 8007d94:	f001 fa0e 	bl	80091b4 <_free_r>
 8007d98:	e7e1      	b.n	8007d5e <_realloc_r+0x1e>
 8007d9a:	4635      	mov	r5, r6
 8007d9c:	e7df      	b.n	8007d5e <_realloc_r+0x1e>

08007d9e <__ssputs_r>:
 8007d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da2:	688e      	ldr	r6, [r1, #8]
 8007da4:	429e      	cmp	r6, r3
 8007da6:	4682      	mov	sl, r0
 8007da8:	460c      	mov	r4, r1
 8007daa:	4690      	mov	r8, r2
 8007dac:	461f      	mov	r7, r3
 8007dae:	d838      	bhi.n	8007e22 <__ssputs_r+0x84>
 8007db0:	898a      	ldrh	r2, [r1, #12]
 8007db2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007db6:	d032      	beq.n	8007e1e <__ssputs_r+0x80>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	6909      	ldr	r1, [r1, #16]
 8007dbc:	eba5 0901 	sub.w	r9, r5, r1
 8007dc0:	6965      	ldr	r5, [r4, #20]
 8007dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dca:	3301      	adds	r3, #1
 8007dcc:	444b      	add	r3, r9
 8007dce:	106d      	asrs	r5, r5, #1
 8007dd0:	429d      	cmp	r5, r3
 8007dd2:	bf38      	it	cc
 8007dd4:	461d      	movcc	r5, r3
 8007dd6:	0553      	lsls	r3, r2, #21
 8007dd8:	d531      	bpl.n	8007e3e <__ssputs_r+0xa0>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7ff ff3c 	bl	8007c58 <_malloc_r>
 8007de0:	4606      	mov	r6, r0
 8007de2:	b950      	cbnz	r0, 8007dfa <__ssputs_r+0x5c>
 8007de4:	230c      	movs	r3, #12
 8007de6:	f8ca 3000 	str.w	r3, [sl]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	f04f 30ff 	mov.w	r0, #4294967295
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	6921      	ldr	r1, [r4, #16]
 8007dfc:	464a      	mov	r2, r9
 8007dfe:	f7fd fe47 	bl	8005a90 <memcpy>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	6126      	str	r6, [r4, #16]
 8007e10:	6165      	str	r5, [r4, #20]
 8007e12:	444e      	add	r6, r9
 8007e14:	eba5 0509 	sub.w	r5, r5, r9
 8007e18:	6026      	str	r6, [r4, #0]
 8007e1a:	60a5      	str	r5, [r4, #8]
 8007e1c:	463e      	mov	r6, r7
 8007e1e:	42be      	cmp	r6, r7
 8007e20:	d900      	bls.n	8007e24 <__ssputs_r+0x86>
 8007e22:	463e      	mov	r6, r7
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	4632      	mov	r2, r6
 8007e28:	4641      	mov	r1, r8
 8007e2a:	f001 f99d 	bl	8009168 <memmove>
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	1b9b      	subs	r3, r3, r6
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	4433      	add	r3, r6
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7db      	b.n	8007df6 <__ssputs_r+0x58>
 8007e3e:	462a      	mov	r2, r5
 8007e40:	f7ff ff7e 	bl	8007d40 <_realloc_r>
 8007e44:	4606      	mov	r6, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1e1      	bne.n	8007e0e <__ssputs_r+0x70>
 8007e4a:	6921      	ldr	r1, [r4, #16]
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f001 f9b1 	bl	80091b4 <_free_r>
 8007e52:	e7c7      	b.n	8007de4 <__ssputs_r+0x46>

08007e54 <_svfiprintf_r>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	4698      	mov	r8, r3
 8007e5a:	898b      	ldrh	r3, [r1, #12]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	b09d      	sub	sp, #116	; 0x74
 8007e60:	4607      	mov	r7, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	d50e      	bpl.n	8007e86 <_svfiprintf_r+0x32>
 8007e68:	690b      	ldr	r3, [r1, #16]
 8007e6a:	b963      	cbnz	r3, 8007e86 <_svfiprintf_r+0x32>
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	f7ff fef3 	bl	8007c58 <_malloc_r>
 8007e72:	6028      	str	r0, [r5, #0]
 8007e74:	6128      	str	r0, [r5, #16]
 8007e76:	b920      	cbnz	r0, 8007e82 <_svfiprintf_r+0x2e>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e0d1      	b.n	8008026 <_svfiprintf_r+0x1d2>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	616b      	str	r3, [r5, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8a:	2320      	movs	r3, #32
 8007e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e94:	2330      	movs	r3, #48	; 0x30
 8007e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008040 <_svfiprintf_r+0x1ec>
 8007e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e9e:	f04f 0901 	mov.w	r9, #1
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	469a      	mov	sl, r3
 8007ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eaa:	b10a      	cbz	r2, 8007eb0 <_svfiprintf_r+0x5c>
 8007eac:	2a25      	cmp	r2, #37	; 0x25
 8007eae:	d1f9      	bne.n	8007ea4 <_svfiprintf_r+0x50>
 8007eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb4:	d00b      	beq.n	8007ece <_svfiprintf_r+0x7a>
 8007eb6:	465b      	mov	r3, fp
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ff6e 	bl	8007d9e <__ssputs_r>
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f000 80aa 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eca:	445a      	add	r2, fp
 8007ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a2 	beq.w	800801c <_svfiprintf_r+0x1c8>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee2:	f10a 0a01 	add.w	sl, sl, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eee:	931a      	str	r3, [sp, #104]	; 0x68
 8007ef0:	4654      	mov	r4, sl
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef8:	4851      	ldr	r0, [pc, #324]	; (8008040 <_svfiprintf_r+0x1ec>)
 8007efa:	f7f8 f971 	bl	80001e0 <memchr>
 8007efe:	9a04      	ldr	r2, [sp, #16]
 8007f00:	b9d8      	cbnz	r0, 8007f3a <_svfiprintf_r+0xe6>
 8007f02:	06d0      	lsls	r0, r2, #27
 8007f04:	bf44      	itt	mi
 8007f06:	2320      	movmi	r3, #32
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0c:	0711      	lsls	r1, r2, #28
 8007f0e:	bf44      	itt	mi
 8007f10:	232b      	movmi	r3, #43	; 0x2b
 8007f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f16:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1c:	d015      	beq.n	8007f4a <_svfiprintf_r+0xf6>
 8007f1e:	9a07      	ldr	r2, [sp, #28]
 8007f20:	4654      	mov	r4, sl
 8007f22:	2000      	movs	r0, #0
 8007f24:	f04f 0c0a 	mov.w	ip, #10
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2e:	3b30      	subs	r3, #48	; 0x30
 8007f30:	2b09      	cmp	r3, #9
 8007f32:	d94e      	bls.n	8007fd2 <_svfiprintf_r+0x17e>
 8007f34:	b1b0      	cbz	r0, 8007f64 <_svfiprintf_r+0x110>
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	e014      	b.n	8007f64 <_svfiprintf_r+0x110>
 8007f3a:	eba0 0308 	sub.w	r3, r0, r8
 8007f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	46a2      	mov	sl, r4
 8007f48:	e7d2      	b.n	8007ef0 <_svfiprintf_r+0x9c>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	1d19      	adds	r1, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	9103      	str	r1, [sp, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfbb      	ittet	lt
 8007f56:	425b      	neglt	r3, r3
 8007f58:	f042 0202 	orrlt.w	r2, r2, #2
 8007f5c:	9307      	strge	r3, [sp, #28]
 8007f5e:	9307      	strlt	r3, [sp, #28]
 8007f60:	bfb8      	it	lt
 8007f62:	9204      	strlt	r2, [sp, #16]
 8007f64:	7823      	ldrb	r3, [r4, #0]
 8007f66:	2b2e      	cmp	r3, #46	; 0x2e
 8007f68:	d10c      	bne.n	8007f84 <_svfiprintf_r+0x130>
 8007f6a:	7863      	ldrb	r3, [r4, #1]
 8007f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6e:	d135      	bne.n	8007fdc <_svfiprintf_r+0x188>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9203      	str	r2, [sp, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfb8      	it	lt
 8007f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f80:	3402      	adds	r4, #2
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008050 <_svfiprintf_r+0x1fc>
 8007f88:	7821      	ldrb	r1, [r4, #0]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f7f8 f927 	bl	80001e0 <memchr>
 8007f92:	b140      	cbz	r0, 8007fa6 <_svfiprintf_r+0x152>
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	eba0 000a 	sub.w	r0, r0, sl
 8007f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	4303      	orrs	r3, r0
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	4826      	ldr	r0, [pc, #152]	; (8008044 <_svfiprintf_r+0x1f0>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	f7f8 f915 	bl	80001e0 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d038      	beq.n	800802c <_svfiprintf_r+0x1d8>
 8007fba:	4b23      	ldr	r3, [pc, #140]	; (8008048 <_svfiprintf_r+0x1f4>)
 8007fbc:	bb1b      	cbnz	r3, 8008006 <_svfiprintf_r+0x1b2>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	4433      	add	r3, r6
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	e767      	b.n	8007ea2 <_svfiprintf_r+0x4e>
 8007fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7a5      	b.n	8007f28 <_svfiprintf_r+0xd4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f04f 0c0a 	mov.w	ip, #10
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	3a30      	subs	r2, #48	; 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_svfiprintf_r+0x1a8>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c5      	beq.n	8007f84 <_svfiprintf_r+0x130>
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	e7c3      	b.n	8007f84 <_svfiprintf_r+0x130>
 8007ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008000:	4604      	mov	r4, r0
 8008002:	2301      	movs	r3, #1
 8008004:	e7f0      	b.n	8007fe8 <_svfiprintf_r+0x194>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <_svfiprintf_r+0x1f8>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4638      	mov	r0, r7
 8008012:	f3af 8000 	nop.w
 8008016:	1c42      	adds	r2, r0, #1
 8008018:	4606      	mov	r6, r0
 800801a:	d1d6      	bne.n	8007fca <_svfiprintf_r+0x176>
 800801c:	89ab      	ldrh	r3, [r5, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af2c 	bmi.w	8007e7c <_svfiprintf_r+0x28>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	b01d      	add	sp, #116	; 0x74
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <_svfiprintf_r+0x1f8>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	4638      	mov	r0, r7
 8008038:	f000 f87a 	bl	8008130 <_printf_i>
 800803c:	e7eb      	b.n	8008016 <_svfiprintf_r+0x1c2>
 800803e:	bf00      	nop
 8008040:	0800a074 	.word	0x0800a074
 8008044:	0800a07e 	.word	0x0800a07e
 8008048:	00000000 	.word	0x00000000
 800804c:	08007d9f 	.word	0x08007d9f
 8008050:	0800a07a 	.word	0x0800a07a

08008054 <_printf_common>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	4616      	mov	r6, r2
 800805a:	4699      	mov	r9, r3
 800805c:	688a      	ldr	r2, [r1, #8]
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008064:	4293      	cmp	r3, r2
 8008066:	bfb8      	it	lt
 8008068:	4613      	movlt	r3, r2
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008070:	4607      	mov	r7, r0
 8008072:	460c      	mov	r4, r1
 8008074:	b10a      	cbz	r2, 800807a <_printf_common+0x26>
 8008076:	3301      	adds	r3, #1
 8008078:	6033      	str	r3, [r6, #0]
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	0699      	lsls	r1, r3, #26
 800807e:	bf42      	ittt	mi
 8008080:	6833      	ldrmi	r3, [r6, #0]
 8008082:	3302      	addmi	r3, #2
 8008084:	6033      	strmi	r3, [r6, #0]
 8008086:	6825      	ldr	r5, [r4, #0]
 8008088:	f015 0506 	ands.w	r5, r5, #6
 800808c:	d106      	bne.n	800809c <_printf_common+0x48>
 800808e:	f104 0a19 	add.w	sl, r4, #25
 8008092:	68e3      	ldr	r3, [r4, #12]
 8008094:	6832      	ldr	r2, [r6, #0]
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	42ab      	cmp	r3, r5
 800809a:	dc26      	bgt.n	80080ea <_printf_common+0x96>
 800809c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080a0:	1e13      	subs	r3, r2, #0
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	bf18      	it	ne
 80080a6:	2301      	movne	r3, #1
 80080a8:	0692      	lsls	r2, r2, #26
 80080aa:	d42b      	bmi.n	8008104 <_printf_common+0xb0>
 80080ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080b0:	4649      	mov	r1, r9
 80080b2:	4638      	mov	r0, r7
 80080b4:	47c0      	blx	r8
 80080b6:	3001      	adds	r0, #1
 80080b8:	d01e      	beq.n	80080f8 <_printf_common+0xa4>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	68e5      	ldr	r5, [r4, #12]
 80080be:	6832      	ldr	r2, [r6, #0]
 80080c0:	f003 0306 	and.w	r3, r3, #6
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	bf08      	it	eq
 80080c8:	1aad      	subeq	r5, r5, r2
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	6922      	ldr	r2, [r4, #16]
 80080ce:	bf0c      	ite	eq
 80080d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d4:	2500      	movne	r5, #0
 80080d6:	4293      	cmp	r3, r2
 80080d8:	bfc4      	itt	gt
 80080da:	1a9b      	subgt	r3, r3, r2
 80080dc:	18ed      	addgt	r5, r5, r3
 80080de:	2600      	movs	r6, #0
 80080e0:	341a      	adds	r4, #26
 80080e2:	42b5      	cmp	r5, r6
 80080e4:	d11a      	bne.n	800811c <_printf_common+0xc8>
 80080e6:	2000      	movs	r0, #0
 80080e8:	e008      	b.n	80080fc <_printf_common+0xa8>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4652      	mov	r2, sl
 80080ee:	4649      	mov	r1, r9
 80080f0:	4638      	mov	r0, r7
 80080f2:	47c0      	blx	r8
 80080f4:	3001      	adds	r0, #1
 80080f6:	d103      	bne.n	8008100 <_printf_common+0xac>
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	3501      	adds	r5, #1
 8008102:	e7c6      	b.n	8008092 <_printf_common+0x3e>
 8008104:	18e1      	adds	r1, r4, r3
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	2030      	movs	r0, #48	; 0x30
 800810a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800810e:	4422      	add	r2, r4
 8008110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008118:	3302      	adds	r3, #2
 800811a:	e7c7      	b.n	80080ac <_printf_common+0x58>
 800811c:	2301      	movs	r3, #1
 800811e:	4622      	mov	r2, r4
 8008120:	4649      	mov	r1, r9
 8008122:	4638      	mov	r0, r7
 8008124:	47c0      	blx	r8
 8008126:	3001      	adds	r0, #1
 8008128:	d0e6      	beq.n	80080f8 <_printf_common+0xa4>
 800812a:	3601      	adds	r6, #1
 800812c:	e7d9      	b.n	80080e2 <_printf_common+0x8e>
	...

08008130 <_printf_i>:
 8008130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	7e0f      	ldrb	r7, [r1, #24]
 8008136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008138:	2f78      	cmp	r7, #120	; 0x78
 800813a:	4691      	mov	r9, r2
 800813c:	4680      	mov	r8, r0
 800813e:	460c      	mov	r4, r1
 8008140:	469a      	mov	sl, r3
 8008142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008146:	d807      	bhi.n	8008158 <_printf_i+0x28>
 8008148:	2f62      	cmp	r7, #98	; 0x62
 800814a:	d80a      	bhi.n	8008162 <_printf_i+0x32>
 800814c:	2f00      	cmp	r7, #0
 800814e:	f000 80d8 	beq.w	8008302 <_printf_i+0x1d2>
 8008152:	2f58      	cmp	r7, #88	; 0x58
 8008154:	f000 80a3 	beq.w	800829e <_printf_i+0x16e>
 8008158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800815c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008160:	e03a      	b.n	80081d8 <_printf_i+0xa8>
 8008162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008166:	2b15      	cmp	r3, #21
 8008168:	d8f6      	bhi.n	8008158 <_printf_i+0x28>
 800816a:	a101      	add	r1, pc, #4	; (adr r1, 8008170 <_printf_i+0x40>)
 800816c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008170:	080081c9 	.word	0x080081c9
 8008174:	080081dd 	.word	0x080081dd
 8008178:	08008159 	.word	0x08008159
 800817c:	08008159 	.word	0x08008159
 8008180:	08008159 	.word	0x08008159
 8008184:	08008159 	.word	0x08008159
 8008188:	080081dd 	.word	0x080081dd
 800818c:	08008159 	.word	0x08008159
 8008190:	08008159 	.word	0x08008159
 8008194:	08008159 	.word	0x08008159
 8008198:	08008159 	.word	0x08008159
 800819c:	080082e9 	.word	0x080082e9
 80081a0:	0800820d 	.word	0x0800820d
 80081a4:	080082cb 	.word	0x080082cb
 80081a8:	08008159 	.word	0x08008159
 80081ac:	08008159 	.word	0x08008159
 80081b0:	0800830b 	.word	0x0800830b
 80081b4:	08008159 	.word	0x08008159
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	08008159 	.word	0x08008159
 80081c0:	08008159 	.word	0x08008159
 80081c4:	080082d3 	.word	0x080082d3
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	1d1a      	adds	r2, r3, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	602a      	str	r2, [r5, #0]
 80081d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d8:	2301      	movs	r3, #1
 80081da:	e0a3      	b.n	8008324 <_printf_i+0x1f4>
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	6829      	ldr	r1, [r5, #0]
 80081e0:	0606      	lsls	r6, r0, #24
 80081e2:	f101 0304 	add.w	r3, r1, #4
 80081e6:	d50a      	bpl.n	80081fe <_printf_i+0xce>
 80081e8:	680e      	ldr	r6, [r1, #0]
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	2e00      	cmp	r6, #0
 80081ee:	da03      	bge.n	80081f8 <_printf_i+0xc8>
 80081f0:	232d      	movs	r3, #45	; 0x2d
 80081f2:	4276      	negs	r6, r6
 80081f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f8:	485e      	ldr	r0, [pc, #376]	; (8008374 <_printf_i+0x244>)
 80081fa:	230a      	movs	r3, #10
 80081fc:	e019      	b.n	8008232 <_printf_i+0x102>
 80081fe:	680e      	ldr	r6, [r1, #0]
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008206:	bf18      	it	ne
 8008208:	b236      	sxthne	r6, r6
 800820a:	e7ef      	b.n	80081ec <_printf_i+0xbc>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	6820      	ldr	r0, [r4, #0]
 8008210:	1d19      	adds	r1, r3, #4
 8008212:	6029      	str	r1, [r5, #0]
 8008214:	0601      	lsls	r1, r0, #24
 8008216:	d501      	bpl.n	800821c <_printf_i+0xec>
 8008218:	681e      	ldr	r6, [r3, #0]
 800821a:	e002      	b.n	8008222 <_printf_i+0xf2>
 800821c:	0646      	lsls	r6, r0, #25
 800821e:	d5fb      	bpl.n	8008218 <_printf_i+0xe8>
 8008220:	881e      	ldrh	r6, [r3, #0]
 8008222:	4854      	ldr	r0, [pc, #336]	; (8008374 <_printf_i+0x244>)
 8008224:	2f6f      	cmp	r7, #111	; 0x6f
 8008226:	bf0c      	ite	eq
 8008228:	2308      	moveq	r3, #8
 800822a:	230a      	movne	r3, #10
 800822c:	2100      	movs	r1, #0
 800822e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008232:	6865      	ldr	r5, [r4, #4]
 8008234:	60a5      	str	r5, [r4, #8]
 8008236:	2d00      	cmp	r5, #0
 8008238:	bfa2      	ittt	ge
 800823a:	6821      	ldrge	r1, [r4, #0]
 800823c:	f021 0104 	bicge.w	r1, r1, #4
 8008240:	6021      	strge	r1, [r4, #0]
 8008242:	b90e      	cbnz	r6, 8008248 <_printf_i+0x118>
 8008244:	2d00      	cmp	r5, #0
 8008246:	d04d      	beq.n	80082e4 <_printf_i+0x1b4>
 8008248:	4615      	mov	r5, r2
 800824a:	fbb6 f1f3 	udiv	r1, r6, r3
 800824e:	fb03 6711 	mls	r7, r3, r1, r6
 8008252:	5dc7      	ldrb	r7, [r0, r7]
 8008254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008258:	4637      	mov	r7, r6
 800825a:	42bb      	cmp	r3, r7
 800825c:	460e      	mov	r6, r1
 800825e:	d9f4      	bls.n	800824a <_printf_i+0x11a>
 8008260:	2b08      	cmp	r3, #8
 8008262:	d10b      	bne.n	800827c <_printf_i+0x14c>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	07de      	lsls	r6, r3, #31
 8008268:	d508      	bpl.n	800827c <_printf_i+0x14c>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	4299      	cmp	r1, r3
 8008270:	bfde      	ittt	le
 8008272:	2330      	movle	r3, #48	; 0x30
 8008274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800827c:	1b52      	subs	r2, r2, r5
 800827e:	6122      	str	r2, [r4, #16]
 8008280:	f8cd a000 	str.w	sl, [sp]
 8008284:	464b      	mov	r3, r9
 8008286:	aa03      	add	r2, sp, #12
 8008288:	4621      	mov	r1, r4
 800828a:	4640      	mov	r0, r8
 800828c:	f7ff fee2 	bl	8008054 <_printf_common>
 8008290:	3001      	adds	r0, #1
 8008292:	d14c      	bne.n	800832e <_printf_i+0x1fe>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	b004      	add	sp, #16
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	4835      	ldr	r0, [pc, #212]	; (8008374 <_printf_i+0x244>)
 80082a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082a4:	6829      	ldr	r1, [r5, #0]
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80082ac:	6029      	str	r1, [r5, #0]
 80082ae:	061d      	lsls	r5, r3, #24
 80082b0:	d514      	bpl.n	80082dc <_printf_i+0x1ac>
 80082b2:	07df      	lsls	r7, r3, #31
 80082b4:	bf44      	itt	mi
 80082b6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ba:	6023      	strmi	r3, [r4, #0]
 80082bc:	b91e      	cbnz	r6, 80082c6 <_printf_i+0x196>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	f023 0320 	bic.w	r3, r3, #32
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	2310      	movs	r3, #16
 80082c8:	e7b0      	b.n	800822c <_printf_i+0xfc>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	f043 0320 	orr.w	r3, r3, #32
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	2378      	movs	r3, #120	; 0x78
 80082d4:	4828      	ldr	r0, [pc, #160]	; (8008378 <_printf_i+0x248>)
 80082d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082da:	e7e3      	b.n	80082a4 <_printf_i+0x174>
 80082dc:	0659      	lsls	r1, r3, #25
 80082de:	bf48      	it	mi
 80082e0:	b2b6      	uxthmi	r6, r6
 80082e2:	e7e6      	b.n	80082b2 <_printf_i+0x182>
 80082e4:	4615      	mov	r5, r2
 80082e6:	e7bb      	b.n	8008260 <_printf_i+0x130>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	6826      	ldr	r6, [r4, #0]
 80082ec:	6961      	ldr	r1, [r4, #20]
 80082ee:	1d18      	adds	r0, r3, #4
 80082f0:	6028      	str	r0, [r5, #0]
 80082f2:	0635      	lsls	r5, r6, #24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0x1cc>
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0x1d2>
 80082fc:	0670      	lsls	r0, r6, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0x1c8>
 8008300:	8019      	strh	r1, [r3, #0]
 8008302:	2300      	movs	r3, #0
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	4615      	mov	r5, r2
 8008308:	e7ba      	b.n	8008280 <_printf_i+0x150>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	602a      	str	r2, [r5, #0]
 8008310:	681d      	ldr	r5, [r3, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	2100      	movs	r1, #0
 8008316:	4628      	mov	r0, r5
 8008318:	f7f7 ff62 	bl	80001e0 <memchr>
 800831c:	b108      	cbz	r0, 8008322 <_printf_i+0x1f2>
 800831e:	1b40      	subs	r0, r0, r5
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832c:	e7a8      	b.n	8008280 <_printf_i+0x150>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	462a      	mov	r2, r5
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d0ab      	beq.n	8008294 <_printf_i+0x164>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	079b      	lsls	r3, r3, #30
 8008340:	d413      	bmi.n	800836a <_printf_i+0x23a>
 8008342:	68e0      	ldr	r0, [r4, #12]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	4298      	cmp	r0, r3
 8008348:	bfb8      	it	lt
 800834a:	4618      	movlt	r0, r3
 800834c:	e7a4      	b.n	8008298 <_printf_i+0x168>
 800834e:	2301      	movs	r3, #1
 8008350:	4632      	mov	r2, r6
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	47d0      	blx	sl
 8008358:	3001      	adds	r0, #1
 800835a:	d09b      	beq.n	8008294 <_printf_i+0x164>
 800835c:	3501      	adds	r5, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	9903      	ldr	r1, [sp, #12]
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	42ab      	cmp	r3, r5
 8008366:	dcf2      	bgt.n	800834e <_printf_i+0x21e>
 8008368:	e7eb      	b.n	8008342 <_printf_i+0x212>
 800836a:	2500      	movs	r5, #0
 800836c:	f104 0619 	add.w	r6, r4, #25
 8008370:	e7f5      	b.n	800835e <_printf_i+0x22e>
 8008372:	bf00      	nop
 8008374:	0800a085 	.word	0x0800a085
 8008378:	0800a096 	.word	0x0800a096
 800837c:	00000000 	.word	0x00000000

08008380 <nan>:
 8008380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008388 <nan+0x8>
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	00000000 	.word	0x00000000
 800838c:	7ff80000 	.word	0x7ff80000

08008390 <_sbrk_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_sbrk_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7fa f836 	bl	800240c <_sbrk>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_sbrk_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_sbrk_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	200004dc 	.word	0x200004dc

080083b0 <strcpy>:
 80083b0:	4603      	mov	r3, r0
 80083b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b6:	f803 2b01 	strb.w	r2, [r3], #1
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d1f9      	bne.n	80083b2 <strcpy+0x2>
 80083be:	4770      	bx	lr

080083c0 <strncmp>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	b17a      	cbz	r2, 80083e4 <strncmp+0x24>
 80083c4:	4603      	mov	r3, r0
 80083c6:	3901      	subs	r1, #1
 80083c8:	1884      	adds	r4, r0, r2
 80083ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083d2:	4290      	cmp	r0, r2
 80083d4:	d101      	bne.n	80083da <strncmp+0x1a>
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	d101      	bne.n	80083de <strncmp+0x1e>
 80083da:	1a80      	subs	r0, r0, r2
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	2800      	cmp	r0, #0
 80083e0:	d1f3      	bne.n	80083ca <strncmp+0xa>
 80083e2:	e7fa      	b.n	80083da <strncmp+0x1a>
 80083e4:	4610      	mov	r0, r2
 80083e6:	e7f9      	b.n	80083dc <strncmp+0x1c>

080083e8 <__ascii_wctomb>:
 80083e8:	b149      	cbz	r1, 80083fe <__ascii_wctomb+0x16>
 80083ea:	2aff      	cmp	r2, #255	; 0xff
 80083ec:	bf85      	ittet	hi
 80083ee:	238a      	movhi	r3, #138	; 0x8a
 80083f0:	6003      	strhi	r3, [r0, #0]
 80083f2:	700a      	strbls	r2, [r1, #0]
 80083f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80083f8:	bf98      	it	ls
 80083fa:	2001      	movls	r0, #1
 80083fc:	4770      	bx	lr
 80083fe:	4608      	mov	r0, r1
 8008400:	4770      	bx	lr
	...

08008404 <__assert_func>:
 8008404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008406:	4614      	mov	r4, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4b09      	ldr	r3, [pc, #36]	; (8008430 <__assert_func+0x2c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	68d8      	ldr	r0, [r3, #12]
 8008412:	b14c      	cbz	r4, 8008428 <__assert_func+0x24>
 8008414:	4b07      	ldr	r3, [pc, #28]	; (8008434 <__assert_func+0x30>)
 8008416:	9100      	str	r1, [sp, #0]
 8008418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800841c:	4906      	ldr	r1, [pc, #24]	; (8008438 <__assert_func+0x34>)
 800841e:	462b      	mov	r3, r5
 8008420:	f000 fe88 	bl	8009134 <fiprintf>
 8008424:	f001 f934 	bl	8009690 <abort>
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <__assert_func+0x38>)
 800842a:	461c      	mov	r4, r3
 800842c:	e7f3      	b.n	8008416 <__assert_func+0x12>
 800842e:	bf00      	nop
 8008430:	20000014 	.word	0x20000014
 8008434:	0800a0a7 	.word	0x0800a0a7
 8008438:	0800a0b4 	.word	0x0800a0b4
 800843c:	0800a0e2 	.word	0x0800a0e2

08008440 <quorem>:
 8008440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	6903      	ldr	r3, [r0, #16]
 8008446:	690c      	ldr	r4, [r1, #16]
 8008448:	42a3      	cmp	r3, r4
 800844a:	4607      	mov	r7, r0
 800844c:	f2c0 8081 	blt.w	8008552 <quorem+0x112>
 8008450:	3c01      	subs	r4, #1
 8008452:	f101 0814 	add.w	r8, r1, #20
 8008456:	f100 0514 	add.w	r5, r0, #20
 800845a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008468:	3301      	adds	r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008474:	fbb2 f6f3 	udiv	r6, r2, r3
 8008478:	d331      	bcc.n	80084de <quorem+0x9e>
 800847a:	f04f 0e00 	mov.w	lr, #0
 800847e:	4640      	mov	r0, r8
 8008480:	46ac      	mov	ip, r5
 8008482:	46f2      	mov	sl, lr
 8008484:	f850 2b04 	ldr.w	r2, [r0], #4
 8008488:	b293      	uxth	r3, r2
 800848a:	fb06 e303 	mla	r3, r6, r3, lr
 800848e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008492:	b29b      	uxth	r3, r3
 8008494:	ebaa 0303 	sub.w	r3, sl, r3
 8008498:	f8dc a000 	ldr.w	sl, [ip]
 800849c:	0c12      	lsrs	r2, r2, #16
 800849e:	fa13 f38a 	uxtah	r3, r3, sl
 80084a2:	fb06 e202 	mla	r2, r6, r2, lr
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ae:	b292      	uxth	r2, r2
 80084b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80084bc:	4581      	cmp	r9, r0
 80084be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084c2:	f84c 3b04 	str.w	r3, [ip], #4
 80084c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084ca:	d2db      	bcs.n	8008484 <quorem+0x44>
 80084cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80084d0:	b92b      	cbnz	r3, 80084de <quorem+0x9e>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	429d      	cmp	r5, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	d32e      	bcc.n	800853a <quorem+0xfa>
 80084dc:	613c      	str	r4, [r7, #16]
 80084de:	4638      	mov	r0, r7
 80084e0:	f7ff f970 	bl	80077c4 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	db24      	blt.n	8008532 <quorem+0xf2>
 80084e8:	3601      	adds	r6, #1
 80084ea:	4628      	mov	r0, r5
 80084ec:	f04f 0c00 	mov.w	ip, #0
 80084f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80084f4:	f8d0 e000 	ldr.w	lr, [r0]
 80084f8:	b293      	uxth	r3, r2
 80084fa:	ebac 0303 	sub.w	r3, ip, r3
 80084fe:	0c12      	lsrs	r2, r2, #16
 8008500:	fa13 f38e 	uxtah	r3, r3, lr
 8008504:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800850c:	b29b      	uxth	r3, r3
 800850e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008512:	45c1      	cmp	r9, r8
 8008514:	f840 3b04 	str.w	r3, [r0], #4
 8008518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800851c:	d2e8      	bcs.n	80084f0 <quorem+0xb0>
 800851e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008526:	b922      	cbnz	r2, 8008532 <quorem+0xf2>
 8008528:	3b04      	subs	r3, #4
 800852a:	429d      	cmp	r5, r3
 800852c:	461a      	mov	r2, r3
 800852e:	d30a      	bcc.n	8008546 <quorem+0x106>
 8008530:	613c      	str	r4, [r7, #16]
 8008532:	4630      	mov	r0, r6
 8008534:	b003      	add	sp, #12
 8008536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	3b04      	subs	r3, #4
 800853e:	2a00      	cmp	r2, #0
 8008540:	d1cc      	bne.n	80084dc <quorem+0x9c>
 8008542:	3c01      	subs	r4, #1
 8008544:	e7c7      	b.n	80084d6 <quorem+0x96>
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	3b04      	subs	r3, #4
 800854a:	2a00      	cmp	r2, #0
 800854c:	d1f0      	bne.n	8008530 <quorem+0xf0>
 800854e:	3c01      	subs	r4, #1
 8008550:	e7eb      	b.n	800852a <quorem+0xea>
 8008552:	2000      	movs	r0, #0
 8008554:	e7ee      	b.n	8008534 <quorem+0xf4>
	...

08008558 <_dtoa_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	ed2d 8b04 	vpush	{d8-d9}
 8008560:	ec57 6b10 	vmov	r6, r7, d0
 8008564:	b093      	sub	sp, #76	; 0x4c
 8008566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800856c:	9106      	str	r1, [sp, #24]
 800856e:	ee10 aa10 	vmov	sl, s0
 8008572:	4604      	mov	r4, r0
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	930c      	str	r3, [sp, #48]	; 0x30
 8008578:	46bb      	mov	fp, r7
 800857a:	b975      	cbnz	r5, 800859a <_dtoa_r+0x42>
 800857c:	2010      	movs	r0, #16
 800857e:	f000 fdeb 	bl	8009158 <malloc>
 8008582:	4602      	mov	r2, r0
 8008584:	6260      	str	r0, [r4, #36]	; 0x24
 8008586:	b920      	cbnz	r0, 8008592 <_dtoa_r+0x3a>
 8008588:	4ba7      	ldr	r3, [pc, #668]	; (8008828 <_dtoa_r+0x2d0>)
 800858a:	21ea      	movs	r1, #234	; 0xea
 800858c:	48a7      	ldr	r0, [pc, #668]	; (800882c <_dtoa_r+0x2d4>)
 800858e:	f7ff ff39 	bl	8008404 <__assert_func>
 8008592:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008596:	6005      	str	r5, [r0, #0]
 8008598:	60c5      	str	r5, [r0, #12]
 800859a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859c:	6819      	ldr	r1, [r3, #0]
 800859e:	b151      	cbz	r1, 80085b6 <_dtoa_r+0x5e>
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	604a      	str	r2, [r1, #4]
 80085a4:	2301      	movs	r3, #1
 80085a6:	4093      	lsls	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7fe fe7e 	bl	80072ac <_Bfree>
 80085b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	1e3b      	subs	r3, r7, #0
 80085b8:	bfaa      	itet	ge
 80085ba:	2300      	movge	r3, #0
 80085bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085c0:	f8c8 3000 	strge.w	r3, [r8]
 80085c4:	4b9a      	ldr	r3, [pc, #616]	; (8008830 <_dtoa_r+0x2d8>)
 80085c6:	bfbc      	itt	lt
 80085c8:	2201      	movlt	r2, #1
 80085ca:	f8c8 2000 	strlt.w	r2, [r8]
 80085ce:	ea33 030b 	bics.w	r3, r3, fp
 80085d2:	d11b      	bne.n	800860c <_dtoa_r+0xb4>
 80085d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085e0:	4333      	orrs	r3, r6
 80085e2:	f000 8592 	beq.w	800910a <_dtoa_r+0xbb2>
 80085e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e8:	b963      	cbnz	r3, 8008604 <_dtoa_r+0xac>
 80085ea:	4b92      	ldr	r3, [pc, #584]	; (8008834 <_dtoa_r+0x2dc>)
 80085ec:	e022      	b.n	8008634 <_dtoa_r+0xdc>
 80085ee:	4b92      	ldr	r3, [pc, #584]	; (8008838 <_dtoa_r+0x2e0>)
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	3308      	adds	r3, #8
 80085f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	b013      	add	sp, #76	; 0x4c
 80085fc:	ecbd 8b04 	vpop	{d8-d9}
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4b8b      	ldr	r3, [pc, #556]	; (8008834 <_dtoa_r+0x2dc>)
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	3303      	adds	r3, #3
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x9c>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7f8 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008618:	ec4b ab19 	vmov	d9, sl, fp
 800861c:	4680      	mov	r8, r0
 800861e:	b158      	cbz	r0, 8008638 <_dtoa_r+0xe0>
 8008620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008622:	2301      	movs	r3, #1
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 856b 	beq.w	8009104 <_dtoa_r+0xbac>
 800862e:	4883      	ldr	r0, [pc, #524]	; (800883c <_dtoa_r+0x2e4>)
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	1e43      	subs	r3, r0, #1
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	e7df      	b.n	80085f8 <_dtoa_r+0xa0>
 8008638:	ec4b ab10 	vmov	d0, sl, fp
 800863c:	aa10      	add	r2, sp, #64	; 0x40
 800863e:	a911      	add	r1, sp, #68	; 0x44
 8008640:	4620      	mov	r0, r4
 8008642:	f7ff f9e1 	bl	8007a08 <__d2b>
 8008646:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800864a:	ee08 0a10 	vmov	s16, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	f000 8084 	beq.w	800875c <_dtoa_r+0x204>
 8008654:	ee19 3a90 	vmov	r3, s19
 8008658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800865c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008660:	4656      	mov	r6, sl
 8008662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800866a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <_dtoa_r+0x2e8>)
 8008670:	2200      	movs	r2, #0
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	a365      	add	r3, pc, #404	; (adr r3, 8008810 <_dtoa_r+0x2b8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 ffba 	bl	80005f8 <__aeabi_dmul>
 8008684:	a364      	add	r3, pc, #400	; (adr r3, 8008818 <_dtoa_r+0x2c0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fdff 	bl	800028c <__adddf3>
 800868e:	4606      	mov	r6, r0
 8008690:	4628      	mov	r0, r5
 8008692:	460f      	mov	r7, r1
 8008694:	f7f7 ff46 	bl	8000524 <__aeabi_i2d>
 8008698:	a361      	add	r3, pc, #388	; (adr r3, 8008820 <_dtoa_r+0x2c8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f7 fdef 	bl	800028c <__adddf3>
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	f7f8 fa3b 	bl	8000b2c <__aeabi_d2iz>
 80086b6:	2200      	movs	r2, #0
 80086b8:	9000      	str	r0, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80086c4:	b150      	cbz	r0, 80086dc <_dtoa_r+0x184>
 80086c6:	9800      	ldr	r0, [sp, #0]
 80086c8:	f7f7 ff2c 	bl	8000524 <__aeabi_i2d>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f8 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d4:	b910      	cbnz	r0, 80086dc <_dtoa_r+0x184>
 80086d6:	9b00      	ldr	r3, [sp, #0]
 80086d8:	3b01      	subs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	2b16      	cmp	r3, #22
 80086e0:	d85a      	bhi.n	8008798 <_dtoa_r+0x240>
 80086e2:	9a00      	ldr	r2, [sp, #0]
 80086e4:	4b57      	ldr	r3, [pc, #348]	; (8008844 <_dtoa_r+0x2ec>)
 80086e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	ec51 0b19 	vmov	r0, r1, d9
 80086f2:	f7f8 f9f3 	bl	8000adc <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d050      	beq.n	800879c <_dtoa_r+0x244>
 80086fa:	9b00      	ldr	r3, [sp, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	930b      	str	r3, [sp, #44]	; 0x2c
 8008704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008706:	1b5d      	subs	r5, r3, r5
 8008708:	1e6b      	subs	r3, r5, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	bf45      	ittet	mi
 800870e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008712:	9304      	strmi	r3, [sp, #16]
 8008714:	2300      	movpl	r3, #0
 8008716:	2300      	movmi	r3, #0
 8008718:	bf4c      	ite	mi
 800871a:	9305      	strmi	r3, [sp, #20]
 800871c:	9304      	strpl	r3, [sp, #16]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db3d      	blt.n	80087a0 <_dtoa_r+0x248>
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	9a00      	ldr	r2, [sp, #0]
 8008728:	920a      	str	r2, [sp, #40]	; 0x28
 800872a:	4413      	add	r3, r2
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	2300      	movs	r3, #0
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	2b09      	cmp	r3, #9
 8008736:	f200 8089 	bhi.w	800884c <_dtoa_r+0x2f4>
 800873a:	2b05      	cmp	r3, #5
 800873c:	bfc4      	itt	gt
 800873e:	3b04      	subgt	r3, #4
 8008740:	9306      	strgt	r3, [sp, #24]
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	f1a3 0302 	sub.w	r3, r3, #2
 8008748:	bfcc      	ite	gt
 800874a:	2500      	movgt	r5, #0
 800874c:	2501      	movle	r5, #1
 800874e:	2b03      	cmp	r3, #3
 8008750:	f200 8087 	bhi.w	8008862 <_dtoa_r+0x30a>
 8008754:	e8df f003 	tbb	[pc, r3]
 8008758:	59383a2d 	.word	0x59383a2d
 800875c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008760:	441d      	add	r5, r3
 8008762:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008766:	2b20      	cmp	r3, #32
 8008768:	bfc1      	itttt	gt
 800876a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800876e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008772:	fa0b f303 	lslgt.w	r3, fp, r3
 8008776:	fa26 f000 	lsrgt.w	r0, r6, r0
 800877a:	bfda      	itte	le
 800877c:	f1c3 0320 	rsble	r3, r3, #32
 8008780:	fa06 f003 	lslle.w	r0, r6, r3
 8008784:	4318      	orrgt	r0, r3
 8008786:	f7f7 febd 	bl	8000504 <__aeabi_ui2d>
 800878a:	2301      	movs	r3, #1
 800878c:	4606      	mov	r6, r0
 800878e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008792:	3d01      	subs	r5, #1
 8008794:	930e      	str	r3, [sp, #56]	; 0x38
 8008796:	e76a      	b.n	800866e <_dtoa_r+0x116>
 8008798:	2301      	movs	r3, #1
 800879a:	e7b2      	b.n	8008702 <_dtoa_r+0x1aa>
 800879c:	900b      	str	r0, [sp, #44]	; 0x2c
 800879e:	e7b1      	b.n	8008704 <_dtoa_r+0x1ac>
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	4253      	negs	r3, r2
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	e7bf      	b.n	8008732 <_dtoa_r+0x1da>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc55      	bgt.n	8008868 <_dtoa_r+0x310>
 80087bc:	2301      	movs	r3, #1
 80087be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087c2:	461a      	mov	r2, r3
 80087c4:	9209      	str	r2, [sp, #36]	; 0x24
 80087c6:	e00c      	b.n	80087e2 <_dtoa_r+0x28a>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7f3      	b.n	80087b4 <_dtoa_r+0x25c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	4413      	add	r3, r2
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	3301      	adds	r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	bfb8      	it	lt
 80087e0:	2301      	movlt	r3, #1
 80087e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087e4:	2200      	movs	r2, #0
 80087e6:	6042      	str	r2, [r0, #4]
 80087e8:	2204      	movs	r2, #4
 80087ea:	f102 0614 	add.w	r6, r2, #20
 80087ee:	429e      	cmp	r6, r3
 80087f0:	6841      	ldr	r1, [r0, #4]
 80087f2:	d93d      	bls.n	8008870 <_dtoa_r+0x318>
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7fe fd19 	bl	800722c <_Balloc>
 80087fa:	9001      	str	r0, [sp, #4]
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d13b      	bne.n	8008878 <_dtoa_r+0x320>
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <_dtoa_r+0x2f0>)
 8008802:	4602      	mov	r2, r0
 8008804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008808:	e6c0      	b.n	800858c <_dtoa_r+0x34>
 800880a:	2301      	movs	r3, #1
 800880c:	e7df      	b.n	80087ce <_dtoa_r+0x276>
 800880e:	bf00      	nop
 8008810:	636f4361 	.word	0x636f4361
 8008814:	3fd287a7 	.word	0x3fd287a7
 8008818:	8b60c8b3 	.word	0x8b60c8b3
 800881c:	3fc68a28 	.word	0x3fc68a28
 8008820:	509f79fb 	.word	0x509f79fb
 8008824:	3fd34413 	.word	0x3fd34413
 8008828:	08009f04 	.word	0x08009f04
 800882c:	0800a0f2 	.word	0x0800a0f2
 8008830:	7ff00000 	.word	0x7ff00000
 8008834:	0800a0ec 	.word	0x0800a0ec
 8008838:	0800a0e3 	.word	0x0800a0e3
 800883c:	0800a0f1 	.word	0x0800a0f1
 8008840:	3ff80000 	.word	0x3ff80000
 8008844:	08009fa0 	.word	0x08009fa0
 8008848:	08009e79 	.word	0x08009e79
 800884c:	2501      	movs	r5, #1
 800884e:	2300      	movs	r3, #0
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	9508      	str	r5, [sp, #32]
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
 8008858:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2312      	movs	r3, #18
 8008860:	e7b0      	b.n	80087c4 <_dtoa_r+0x26c>
 8008862:	2301      	movs	r3, #1
 8008864:	9308      	str	r3, [sp, #32]
 8008866:	e7f5      	b.n	8008854 <_dtoa_r+0x2fc>
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800886e:	e7b8      	b.n	80087e2 <_dtoa_r+0x28a>
 8008870:	3101      	adds	r1, #1
 8008872:	6041      	str	r1, [r0, #4]
 8008874:	0052      	lsls	r2, r2, #1
 8008876:	e7b8      	b.n	80087ea <_dtoa_r+0x292>
 8008878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887a:	9a01      	ldr	r2, [sp, #4]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 809d 	bhi.w	80089c0 <_dtoa_r+0x468>
 8008886:	2d00      	cmp	r5, #0
 8008888:	f000 809a 	beq.w	80089c0 <_dtoa_r+0x468>
 800888c:	9b00      	ldr	r3, [sp, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd32      	ble.n	80088f8 <_dtoa_r+0x3a0>
 8008892:	4ab7      	ldr	r2, [pc, #732]	; (8008b70 <_dtoa_r+0x618>)
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800889c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	05d8      	lsls	r0, r3, #23
 80088a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088a8:	d516      	bpl.n	80088d8 <_dtoa_r+0x380>
 80088aa:	4bb2      	ldr	r3, [pc, #712]	; (8008b74 <_dtoa_r+0x61c>)
 80088ac:	ec51 0b19 	vmov	r0, r1, d9
 80088b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088b4:	f7f7 ffca 	bl	800084c <__aeabi_ddiv>
 80088b8:	f007 070f 	and.w	r7, r7, #15
 80088bc:	4682      	mov	sl, r0
 80088be:	468b      	mov	fp, r1
 80088c0:	2503      	movs	r5, #3
 80088c2:	4eac      	ldr	r6, [pc, #688]	; (8008b74 <_dtoa_r+0x61c>)
 80088c4:	b957      	cbnz	r7, 80088dc <_dtoa_r+0x384>
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	f7f7 ffbd 	bl	800084c <__aeabi_ddiv>
 80088d2:	4682      	mov	sl, r0
 80088d4:	468b      	mov	fp, r1
 80088d6:	e028      	b.n	800892a <_dtoa_r+0x3d2>
 80088d8:	2502      	movs	r5, #2
 80088da:	e7f2      	b.n	80088c2 <_dtoa_r+0x36a>
 80088dc:	07f9      	lsls	r1, r7, #31
 80088de:	d508      	bpl.n	80088f2 <_dtoa_r+0x39a>
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e8:	f7f7 fe86 	bl	80005f8 <__aeabi_dmul>
 80088ec:	3501      	adds	r5, #1
 80088ee:	4680      	mov	r8, r0
 80088f0:	4689      	mov	r9, r1
 80088f2:	107f      	asrs	r7, r7, #1
 80088f4:	3608      	adds	r6, #8
 80088f6:	e7e5      	b.n	80088c4 <_dtoa_r+0x36c>
 80088f8:	f000 809b 	beq.w	8008a32 <_dtoa_r+0x4da>
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	4f9d      	ldr	r7, [pc, #628]	; (8008b74 <_dtoa_r+0x61c>)
 8008900:	425e      	negs	r6, r3
 8008902:	4b9b      	ldr	r3, [pc, #620]	; (8008b70 <_dtoa_r+0x618>)
 8008904:	f006 020f 	and.w	r2, r6, #15
 8008908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	ec51 0b19 	vmov	r0, r1, d9
 8008914:	f7f7 fe70 	bl	80005f8 <__aeabi_dmul>
 8008918:	1136      	asrs	r6, r6, #4
 800891a:	4682      	mov	sl, r0
 800891c:	468b      	mov	fp, r1
 800891e:	2300      	movs	r3, #0
 8008920:	2502      	movs	r5, #2
 8008922:	2e00      	cmp	r6, #0
 8008924:	d17a      	bne.n	8008a1c <_dtoa_r+0x4c4>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1d3      	bne.n	80088d2 <_dtoa_r+0x37a>
 800892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8082 	beq.w	8008a36 <_dtoa_r+0x4de>
 8008932:	4b91      	ldr	r3, [pc, #580]	; (8008b78 <_dtoa_r+0x620>)
 8008934:	2200      	movs	r2, #0
 8008936:	4650      	mov	r0, sl
 8008938:	4659      	mov	r1, fp
 800893a:	f7f8 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800893e:	2800      	cmp	r0, #0
 8008940:	d079      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d076      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd36      	ble.n	80089bc <_dtoa_r+0x464>
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	4650      	mov	r0, sl
 8008952:	4659      	mov	r1, fp
 8008954:	1e5f      	subs	r7, r3, #1
 8008956:	2200      	movs	r2, #0
 8008958:	4b88      	ldr	r3, [pc, #544]	; (8008b7c <_dtoa_r+0x624>)
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	9e02      	ldr	r6, [sp, #8]
 8008960:	4682      	mov	sl, r0
 8008962:	468b      	mov	fp, r1
 8008964:	3501      	adds	r5, #1
 8008966:	4628      	mov	r0, r5
 8008968:	f7f7 fddc 	bl	8000524 <__aeabi_i2d>
 800896c:	4652      	mov	r2, sl
 800896e:	465b      	mov	r3, fp
 8008970:	f7f7 fe42 	bl	80005f8 <__aeabi_dmul>
 8008974:	4b82      	ldr	r3, [pc, #520]	; (8008b80 <_dtoa_r+0x628>)
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fc88 	bl	800028c <__adddf3>
 800897c:	46d0      	mov	r8, sl
 800897e:	46d9      	mov	r9, fp
 8008980:	4682      	mov	sl, r0
 8008982:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008986:	2e00      	cmp	r6, #0
 8008988:	d158      	bne.n	8008a3c <_dtoa_r+0x4e4>
 800898a:	4b7e      	ldr	r3, [pc, #504]	; (8008b84 <_dtoa_r+0x62c>)
 800898c:	2200      	movs	r2, #0
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fc79 	bl	8000288 <__aeabi_dsub>
 8008996:	4652      	mov	r2, sl
 8008998:	465b      	mov	r3, fp
 800899a:	4680      	mov	r8, r0
 800899c:	4689      	mov	r9, r1
 800899e:	f7f8 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f040 8295 	bne.w	8008ed2 <_dtoa_r+0x97a>
 80089a8:	4652      	mov	r2, sl
 80089aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089ae:	4640      	mov	r0, r8
 80089b0:	4649      	mov	r1, r9
 80089b2:	f7f8 f893 	bl	8000adc <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f040 8289 	bne.w	8008ece <_dtoa_r+0x976>
 80089bc:	ec5b ab19 	vmov	sl, fp, d9
 80089c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f2c0 8148 	blt.w	8008c58 <_dtoa_r+0x700>
 80089c8:	9a00      	ldr	r2, [sp, #0]
 80089ca:	2a0e      	cmp	r2, #14
 80089cc:	f300 8144 	bgt.w	8008c58 <_dtoa_r+0x700>
 80089d0:	4b67      	ldr	r3, [pc, #412]	; (8008b70 <_dtoa_r+0x618>)
 80089d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f280 80d5 	bge.w	8008b8c <_dtoa_r+0x634>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f300 80d1 	bgt.w	8008b8c <_dtoa_r+0x634>
 80089ea:	f040 826f 	bne.w	8008ecc <_dtoa_r+0x974>
 80089ee:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <_dtoa_r+0x62c>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4652      	mov	r2, sl
 80089fc:	465b      	mov	r3, fp
 80089fe:	f7f8 f881 	bl	8000b04 <__aeabi_dcmpge>
 8008a02:	9e03      	ldr	r6, [sp, #12]
 8008a04:	4637      	mov	r7, r6
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 8245 	bne.w	8008e96 <_dtoa_r+0x93e>
 8008a0c:	9d01      	ldr	r5, [sp, #4]
 8008a0e:	2331      	movs	r3, #49	; 0x31
 8008a10:	f805 3b01 	strb.w	r3, [r5], #1
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	e240      	b.n	8008e9e <_dtoa_r+0x946>
 8008a1c:	07f2      	lsls	r2, r6, #31
 8008a1e:	d505      	bpl.n	8008a2c <_dtoa_r+0x4d4>
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	3501      	adds	r5, #1
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	1076      	asrs	r6, r6, #1
 8008a2e:	3708      	adds	r7, #8
 8008a30:	e777      	b.n	8008922 <_dtoa_r+0x3ca>
 8008a32:	2502      	movs	r5, #2
 8008a34:	e779      	b.n	800892a <_dtoa_r+0x3d2>
 8008a36:	9f00      	ldr	r7, [sp, #0]
 8008a38:	9e03      	ldr	r6, [sp, #12]
 8008a3a:	e794      	b.n	8008966 <_dtoa_r+0x40e>
 8008a3c:	9901      	ldr	r1, [sp, #4]
 8008a3e:	4b4c      	ldr	r3, [pc, #304]	; (8008b70 <_dtoa_r+0x618>)
 8008a40:	4431      	add	r1, r6
 8008a42:	910d      	str	r1, [sp, #52]	; 0x34
 8008a44:	9908      	ldr	r1, [sp, #32]
 8008a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d043      	beq.n	8008ada <_dtoa_r+0x582>
 8008a52:	494d      	ldr	r1, [pc, #308]	; (8008b88 <_dtoa_r+0x630>)
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f7 fef9 	bl	800084c <__aeabi_ddiv>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	f7f7 fc13 	bl	8000288 <__aeabi_dsub>
 8008a62:	9d01      	ldr	r5, [sp, #4]
 8008a64:	4682      	mov	sl, r0
 8008a66:	468b      	mov	fp, r1
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7f8 f85e 	bl	8000b2c <__aeabi_d2iz>
 8008a70:	4606      	mov	r6, r0
 8008a72:	f7f7 fd57 	bl	8000524 <__aeabi_i2d>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fc03 	bl	8000288 <__aeabi_dsub>
 8008a82:	3630      	adds	r6, #48	; 0x30
 8008a84:	f805 6b01 	strb.w	r6, [r5], #1
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4689      	mov	r9, r1
 8008a90:	f7f8 f824 	bl	8000adc <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d163      	bne.n	8008b60 <_dtoa_r+0x608>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4936      	ldr	r1, [pc, #216]	; (8008b78 <_dtoa_r+0x620>)
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f7f7 fbf2 	bl	8000288 <__aeabi_dsub>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f8 f818 	bl	8000adc <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 80b5 	bne.w	8008c1c <_dtoa_r+0x6c4>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	d081      	beq.n	80089bc <_dtoa_r+0x464>
 8008ab8:	4b30      	ldr	r3, [pc, #192]	; (8008b7c <_dtoa_r+0x624>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	4650      	mov	r0, sl
 8008abe:	4659      	mov	r1, fp
 8008ac0:	f7f7 fd9a 	bl	80005f8 <__aeabi_dmul>
 8008ac4:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <_dtoa_r+0x624>)
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	468b      	mov	fp, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fd92 	bl	80005f8 <__aeabi_dmul>
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	e7c6      	b.n	8008a68 <_dtoa_r+0x510>
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae4:	9d01      	ldr	r5, [sp, #4]
 8008ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	4649      	mov	r1, r9
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7f8 f81c 	bl	8000b2c <__aeabi_d2iz>
 8008af4:	4606      	mov	r6, r0
 8008af6:	f7f7 fd15 	bl	8000524 <__aeabi_i2d>
 8008afa:	3630      	adds	r6, #48	; 0x30
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4640      	mov	r0, r8
 8008b02:	4649      	mov	r1, r9
 8008b04:	f7f7 fbc0 	bl	8000288 <__aeabi_dsub>
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	4680      	mov	r8, r0
 8008b12:	4689      	mov	r9, r1
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	d124      	bne.n	8008b64 <_dtoa_r+0x60c>
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <_dtoa_r+0x630>)
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	4659      	mov	r1, fp
 8008b20:	f7f7 fbb4 	bl	800028c <__adddf3>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 fff4 	bl	8000b18 <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d173      	bne.n	8008c1c <_dtoa_r+0x6c4>
 8008b34:	4652      	mov	r2, sl
 8008b36:	465b      	mov	r3, fp
 8008b38:	4913      	ldr	r1, [pc, #76]	; (8008b88 <_dtoa_r+0x630>)
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f7f7 fba4 	bl	8000288 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4640      	mov	r0, r8
 8008b46:	4649      	mov	r1, r9
 8008b48:	f7f7 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f af35 	beq.w	80089bc <_dtoa_r+0x464>
 8008b52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b54:	1e6b      	subs	r3, r5, #1
 8008b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d0f8      	beq.n	8008b52 <_dtoa_r+0x5fa>
 8008b60:	9700      	str	r7, [sp, #0]
 8008b62:	e049      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_dtoa_r+0x624>)
 8008b66:	f7f7 fd47 	bl	80005f8 <__aeabi_dmul>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4689      	mov	r9, r1
 8008b6e:	e7bd      	b.n	8008aec <_dtoa_r+0x594>
 8008b70:	08009fa0 	.word	0x08009fa0
 8008b74:	08009f78 	.word	0x08009f78
 8008b78:	3ff00000 	.word	0x3ff00000
 8008b7c:	40240000 	.word	0x40240000
 8008b80:	401c0000 	.word	0x401c0000
 8008b84:	40140000 	.word	0x40140000
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	9d01      	ldr	r5, [sp, #4]
 8008b8e:	4656      	mov	r6, sl
 8008b90:	465f      	mov	r7, fp
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fe57 	bl	800084c <__aeabi_ddiv>
 8008b9e:	f7f7 ffc5 	bl	8000b2c <__aeabi_d2iz>
 8008ba2:	4682      	mov	sl, r0
 8008ba4:	f7f7 fcbe 	bl	8000524 <__aeabi_i2d>
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bbc:	f7f7 fb64 	bl	8000288 <__aeabi_dsub>
 8008bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc4:	9e01      	ldr	r6, [sp, #4]
 8008bc6:	9f03      	ldr	r7, [sp, #12]
 8008bc8:	1bae      	subs	r6, r5, r6
 8008bca:	42b7      	cmp	r7, r6
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	d135      	bne.n	8008c3e <_dtoa_r+0x6e6>
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	464b      	mov	r3, r9
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	f7f7 ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 8008be2:	b9d0      	cbnz	r0, 8008c1a <_dtoa_r+0x6c2>
 8008be4:	4642      	mov	r2, r8
 8008be6:	464b      	mov	r3, r9
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf0:	b110      	cbz	r0, 8008bf8 <_dtoa_r+0x6a0>
 8008bf2:	f01a 0f01 	tst.w	sl, #1
 8008bf6:	d110      	bne.n	8008c1a <_dtoa_r+0x6c2>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	f7fe fb55 	bl	80072ac <_Bfree>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9800      	ldr	r0, [sp, #0]
 8008c06:	702b      	strb	r3, [r5, #0]
 8008c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	6018      	str	r0, [r3, #0]
 8008c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f43f acf1 	beq.w	80085f8 <_dtoa_r+0xa0>
 8008c16:	601d      	str	r5, [r3, #0]
 8008c18:	e4ee      	b.n	80085f8 <_dtoa_r+0xa0>
 8008c1a:	9f00      	ldr	r7, [sp, #0]
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	461d      	mov	r5, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a39      	cmp	r2, #57	; 0x39
 8008c26:	d106      	bne.n	8008c36 <_dtoa_r+0x6de>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1f7      	bne.n	8008c1e <_dtoa_r+0x6c6>
 8008c2e:	9901      	ldr	r1, [sp, #4]
 8008c30:	2230      	movs	r2, #48	; 0x30
 8008c32:	3701      	adds	r7, #1
 8008c34:	700a      	strb	r2, [r1, #0]
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	3201      	adds	r2, #1
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e790      	b.n	8008b60 <_dtoa_r+0x608>
 8008c3e:	4ba6      	ldr	r3, [pc, #664]	; (8008ed8 <_dtoa_r+0x980>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	f7f7 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d09d      	beq.n	8008b92 <_dtoa_r+0x63a>
 8008c56:	e7cf      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008c58:	9a08      	ldr	r2, [sp, #32]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	f000 80d7 	beq.w	8008e0e <_dtoa_r+0x8b6>
 8008c60:	9a06      	ldr	r2, [sp, #24]
 8008c62:	2a01      	cmp	r2, #1
 8008c64:	f300 80ba 	bgt.w	8008ddc <_dtoa_r+0x884>
 8008c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	f000 80b2 	beq.w	8008dd4 <_dtoa_r+0x87c>
 8008c70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c74:	9e07      	ldr	r6, [sp, #28]
 8008c76:	9d04      	ldr	r5, [sp, #16]
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	9204      	str	r2, [sp, #16]
 8008c7e:	9a05      	ldr	r2, [sp, #20]
 8008c80:	2101      	movs	r1, #1
 8008c82:	441a      	add	r2, r3
 8008c84:	4620      	mov	r0, r4
 8008c86:	9205      	str	r2, [sp, #20]
 8008c88:	f7fe fc12 	bl	80074b0 <__i2b>
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	dd0c      	ble.n	8008cac <_dtoa_r+0x754>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd09      	ble.n	8008cac <_dtoa_r+0x754>
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	9a04      	ldr	r2, [sp, #16]
 8008c9c:	bfa8      	it	ge
 8008c9e:	462b      	movge	r3, r5
 8008ca0:	1ad2      	subs	r2, r2, r3
 8008ca2:	9204      	str	r2, [sp, #16]
 8008ca4:	9a05      	ldr	r2, [sp, #20]
 8008ca6:	1aed      	subs	r5, r5, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	b31b      	cbz	r3, 8008cf8 <_dtoa_r+0x7a0>
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80af 	beq.w	8008e16 <_dtoa_r+0x8be>
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	dd13      	ble.n	8008ce4 <_dtoa_r+0x78c>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4632      	mov	r2, r6
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7fe fcb5 	bl	8007630 <__pow5mult>
 8008cc6:	ee18 2a10 	vmov	r2, s16
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7fe fc04 	bl	80074dc <__multiply>
 8008cd4:	ee18 1a10 	vmov	r1, s16
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7fe fae6 	bl	80072ac <_Bfree>
 8008ce0:	ee08 8a10 	vmov	s16, r8
 8008ce4:	9b07      	ldr	r3, [sp, #28]
 8008ce6:	1b9a      	subs	r2, r3, r6
 8008ce8:	d006      	beq.n	8008cf8 <_dtoa_r+0x7a0>
 8008cea:	ee18 1a10 	vmov	r1, s16
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7fe fc9e 	bl	8007630 <__pow5mult>
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7fe fbd8 	bl	80074b0 <__i2b>
 8008d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	4606      	mov	r6, r0
 8008d06:	f340 8088 	ble.w	8008e1a <_dtoa_r+0x8c2>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fe fc8e 	bl	8007630 <__pow5mult>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f340 8081 	ble.w	8008e20 <_dtoa_r+0x8c8>
 8008d1e:	f04f 0800 	mov.w	r8, #0
 8008d22:	6933      	ldr	r3, [r6, #16]
 8008d24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d28:	6918      	ldr	r0, [r3, #16]
 8008d2a:	f7fe fb71 	bl	8007410 <__hi0bits>
 8008d2e:	f1c0 0020 	rsb	r0, r0, #32
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	4418      	add	r0, r3
 8008d36:	f010 001f 	ands.w	r0, r0, #31
 8008d3a:	f000 8092 	beq.w	8008e62 <_dtoa_r+0x90a>
 8008d3e:	f1c0 0320 	rsb	r3, r0, #32
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	f340 808a 	ble.w	8008e5c <_dtoa_r+0x904>
 8008d48:	f1c0 001c 	rsb	r0, r0, #28
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	4403      	add	r3, r0
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9b05      	ldr	r3, [sp, #20]
 8008d54:	4403      	add	r3, r0
 8008d56:	4405      	add	r5, r0
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd07      	ble.n	8008d70 <_dtoa_r+0x818>
 8008d60:	ee18 1a10 	vmov	r1, s16
 8008d64:	461a      	mov	r2, r3
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7fe fcbc 	bl	80076e4 <__lshift>
 8008d6c:	ee08 0a10 	vmov	s16, r0
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd05      	ble.n	8008d82 <_dtoa_r+0x82a>
 8008d76:	4631      	mov	r1, r6
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7fe fcb2 	bl	80076e4 <__lshift>
 8008d80:	4606      	mov	r6, r0
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d06e      	beq.n	8008e66 <_dtoa_r+0x90e>
 8008d88:	ee18 0a10 	vmov	r0, s16
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	f7fe fd19 	bl	80077c4 <__mcmp>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	da67      	bge.n	8008e66 <_dtoa_r+0x90e>
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	ee18 1a10 	vmov	r1, s16
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	220a      	movs	r2, #10
 8008da2:	2300      	movs	r3, #0
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7fe faa3 	bl	80072f0 <__multadd>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	ee08 0a10 	vmov	s16, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 81b1 	beq.w	8009118 <_dtoa_r+0xbc0>
 8008db6:	2300      	movs	r3, #0
 8008db8:	4639      	mov	r1, r7
 8008dba:	220a      	movs	r2, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7fe fa97 	bl	80072f0 <__multadd>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	f300 808e 	bgt.w	8008ee8 <_dtoa_r+0x990>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dc51      	bgt.n	8008e76 <_dtoa_r+0x91e>
 8008dd2:	e089      	b.n	8008ee8 <_dtoa_r+0x990>
 8008dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dda:	e74b      	b.n	8008c74 <_dtoa_r+0x71c>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1e5e      	subs	r6, r3, #1
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	42b3      	cmp	r3, r6
 8008de4:	bfbf      	itttt	lt
 8008de6:	9b07      	ldrlt	r3, [sp, #28]
 8008de8:	9607      	strlt	r6, [sp, #28]
 8008dea:	1af2      	sublt	r2, r6, r3
 8008dec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dee:	bfb6      	itet	lt
 8008df0:	189b      	addlt	r3, r3, r2
 8008df2:	1b9e      	subge	r6, r3, r6
 8008df4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	bfb8      	it	lt
 8008dfa:	2600      	movlt	r6, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfb7      	itett	lt
 8008e00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e08:	1a9d      	sublt	r5, r3, r2
 8008e0a:	2300      	movlt	r3, #0
 8008e0c:	e734      	b.n	8008c78 <_dtoa_r+0x720>
 8008e0e:	9e07      	ldr	r6, [sp, #28]
 8008e10:	9d04      	ldr	r5, [sp, #16]
 8008e12:	9f08      	ldr	r7, [sp, #32]
 8008e14:	e73b      	b.n	8008c8e <_dtoa_r+0x736>
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	e767      	b.n	8008cea <_dtoa_r+0x792>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	dc18      	bgt.n	8008e52 <_dtoa_r+0x8fa>
 8008e20:	f1ba 0f00 	cmp.w	sl, #0
 8008e24:	d115      	bne.n	8008e52 <_dtoa_r+0x8fa>
 8008e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e2a:	b993      	cbnz	r3, 8008e52 <_dtoa_r+0x8fa>
 8008e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	b183      	cbz	r3, 8008e58 <_dtoa_r+0x900>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	f04f 0801 	mov.w	r8, #1
 8008e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f47f af6a 	bne.w	8008d22 <_dtoa_r+0x7ca>
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e76f      	b.n	8008d32 <_dtoa_r+0x7da>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	e7f6      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e58:	4698      	mov	r8, r3
 8008e5a:	e7f4      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e5c:	f43f af7d 	beq.w	8008d5a <_dtoa_r+0x802>
 8008e60:	4618      	mov	r0, r3
 8008e62:	301c      	adds	r0, #28
 8008e64:	e772      	b.n	8008d4c <_dtoa_r+0x7f4>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc37      	bgt.n	8008edc <_dtoa_r+0x984>
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dd34      	ble.n	8008edc <_dtoa_r+0x984>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	b96b      	cbnz	r3, 8008e96 <_dtoa_r+0x93e>
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f7fe fa36 	bl	80072f0 <__multadd>
 8008e84:	4601      	mov	r1, r0
 8008e86:	4606      	mov	r6, r0
 8008e88:	ee18 0a10 	vmov	r0, s16
 8008e8c:	f7fe fc9a 	bl	80077c4 <__mcmp>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f73f adbb 	bgt.w	8008a0c <_dtoa_r+0x4b4>
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	9d01      	ldr	r5, [sp, #4]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	f04f 0800 	mov.w	r8, #0
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f7fe fa01 	bl	80072ac <_Bfree>
 8008eaa:	2f00      	cmp	r7, #0
 8008eac:	f43f aea4 	beq.w	8008bf8 <_dtoa_r+0x6a0>
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	d005      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eb6:	45b8      	cmp	r8, r7
 8008eb8:	d003      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7fe f9f5 	bl	80072ac <_Bfree>
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f7fe f9f1 	bl	80072ac <_Bfree>
 8008eca:	e695      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4637      	mov	r7, r6
 8008ed0:	e7e1      	b.n	8008e96 <_dtoa_r+0x93e>
 8008ed2:	9700      	str	r7, [sp, #0]
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	e599      	b.n	8008a0c <_dtoa_r+0x4b4>
 8008ed8:	40240000 	.word	0x40240000
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80ca 	beq.w	8009078 <_dtoa_r+0xb20>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	dd05      	ble.n	8008ef8 <_dtoa_r+0x9a0>
 8008eec:	4639      	mov	r1, r7
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f7fe fbf7 	bl	80076e4 <__lshift>
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	f1b8 0f00 	cmp.w	r8, #0
 8008efc:	d05b      	beq.n	8008fb6 <_dtoa_r+0xa5e>
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7fe f993 	bl	800722c <_Balloc>
 8008f06:	4605      	mov	r5, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <_dtoa_r+0x9be>
 8008f0a:	4b87      	ldr	r3, [pc, #540]	; (8009128 <_dtoa_r+0xbd0>)
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f12:	f7ff bb3b 	b.w	800858c <_dtoa_r+0x34>
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	0092      	lsls	r2, r2, #2
 8008f1c:	f107 010c 	add.w	r1, r7, #12
 8008f20:	300c      	adds	r0, #12
 8008f22:	f7fc fdb5 	bl	8005a90 <memcpy>
 8008f26:	2201      	movs	r2, #1
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7fe fbda 	bl	80076e4 <__lshift>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	f103 0901 	add.w	r9, r3, #1
 8008f36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	f00a 0301 	and.w	r3, sl, #1
 8008f42:	46b8      	mov	r8, r7
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	4607      	mov	r7, r0
 8008f48:	4631      	mov	r1, r6
 8008f4a:	ee18 0a10 	vmov	r0, s16
 8008f4e:	f7ff fa77 	bl	8008440 <quorem>
 8008f52:	4641      	mov	r1, r8
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f5a:	ee18 0a10 	vmov	r0, s16
 8008f5e:	f7fe fc31 	bl	80077c4 <__mcmp>
 8008f62:	463a      	mov	r2, r7
 8008f64:	9003      	str	r0, [sp, #12]
 8008f66:	4631      	mov	r1, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7fe fc47 	bl	80077fc <__mdiff>
 8008f6e:	68c2      	ldr	r2, [r0, #12]
 8008f70:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f74:	4605      	mov	r5, r0
 8008f76:	bb02      	cbnz	r2, 8008fba <_dtoa_r+0xa62>
 8008f78:	4601      	mov	r1, r0
 8008f7a:	ee18 0a10 	vmov	r0, s16
 8008f7e:	f7fe fc21 	bl	80077c4 <__mcmp>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4629      	mov	r1, r5
 8008f86:	4620      	mov	r0, r4
 8008f88:	9207      	str	r2, [sp, #28]
 8008f8a:	f7fe f98f 	bl	80072ac <_Bfree>
 8008f8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f92:	ea43 0102 	orr.w	r1, r3, r2
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	464d      	mov	r5, r9
 8008f9c:	d10f      	bne.n	8008fbe <_dtoa_r+0xa66>
 8008f9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008fa2:	d02a      	beq.n	8008ffa <_dtoa_r+0xaa2>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd02      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fb0:	f88b a000 	strb.w	sl, [fp]
 8008fb4:	e775      	b.n	8008ea2 <_dtoa_r+0x94a>
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	e7ba      	b.n	8008f30 <_dtoa_r+0x9d8>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	e7e2      	b.n	8008f84 <_dtoa_r+0xa2c>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db04      	blt.n	8008fce <_dtoa_r+0xa76>
 8008fc4:	9906      	ldr	r1, [sp, #24]
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	9904      	ldr	r1, [sp, #16]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	d122      	bne.n	8009014 <_dtoa_r+0xabc>
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	ddee      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008fd2:	ee18 1a10 	vmov	r1, s16
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7fe fb83 	bl	80076e4 <__lshift>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	ee08 0a10 	vmov	s16, r0
 8008fe4:	f7fe fbee 	bl	80077c4 <__mcmp>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dc03      	bgt.n	8008ff4 <_dtoa_r+0xa9c>
 8008fec:	d1e0      	bne.n	8008fb0 <_dtoa_r+0xa58>
 8008fee:	f01a 0f01 	tst.w	sl, #1
 8008ff2:	d0dd      	beq.n	8008fb0 <_dtoa_r+0xa58>
 8008ff4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ff8:	d1d7      	bne.n	8008faa <_dtoa_r+0xa52>
 8008ffa:	2339      	movs	r3, #57	; 0x39
 8008ffc:	f88b 3000 	strb.w	r3, [fp]
 8009000:	462b      	mov	r3, r5
 8009002:	461d      	mov	r5, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800900a:	2a39      	cmp	r2, #57	; 0x39
 800900c:	d071      	beq.n	80090f2 <_dtoa_r+0xb9a>
 800900e:	3201      	adds	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e746      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009014:	2a00      	cmp	r2, #0
 8009016:	dd07      	ble.n	8009028 <_dtoa_r+0xad0>
 8009018:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800901c:	d0ed      	beq.n	8008ffa <_dtoa_r+0xaa2>
 800901e:	f10a 0301 	add.w	r3, sl, #1
 8009022:	f88b 3000 	strb.w	r3, [fp]
 8009026:	e73c      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800902e:	4599      	cmp	r9, r3
 8009030:	d047      	beq.n	80090c2 <_dtoa_r+0xb6a>
 8009032:	ee18 1a10 	vmov	r1, s16
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f7fe f958 	bl	80072f0 <__multadd>
 8009040:	45b8      	cmp	r8, r7
 8009042:	ee08 0a10 	vmov	s16, r0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	f04f 020a 	mov.w	r2, #10
 800904e:	4641      	mov	r1, r8
 8009050:	4620      	mov	r0, r4
 8009052:	d106      	bne.n	8009062 <_dtoa_r+0xb0a>
 8009054:	f7fe f94c 	bl	80072f0 <__multadd>
 8009058:	4680      	mov	r8, r0
 800905a:	4607      	mov	r7, r0
 800905c:	f109 0901 	add.w	r9, r9, #1
 8009060:	e772      	b.n	8008f48 <_dtoa_r+0x9f0>
 8009062:	f7fe f945 	bl	80072f0 <__multadd>
 8009066:	4639      	mov	r1, r7
 8009068:	4680      	mov	r8, r0
 800906a:	2300      	movs	r3, #0
 800906c:	220a      	movs	r2, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f7fe f93e 	bl	80072f0 <__multadd>
 8009074:	4607      	mov	r7, r0
 8009076:	e7f1      	b.n	800905c <_dtoa_r+0xb04>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	9d01      	ldr	r5, [sp, #4]
 800907e:	ee18 0a10 	vmov	r0, s16
 8009082:	4631      	mov	r1, r6
 8009084:	f7ff f9dc 	bl	8008440 <quorem>
 8009088:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	f805 ab01 	strb.w	sl, [r5], #1
 8009092:	1aea      	subs	r2, r5, r3
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	4293      	cmp	r3, r2
 8009098:	dd09      	ble.n	80090ae <_dtoa_r+0xb56>
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	2300      	movs	r3, #0
 80090a0:	220a      	movs	r2, #10
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7fe f924 	bl	80072f0 <__multadd>
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	e7e7      	b.n	800907e <_dtoa_r+0xb26>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfc8      	it	gt
 80090b4:	461d      	movgt	r5, r3
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	bfd8      	it	le
 80090ba:	2501      	movle	r5, #1
 80090bc:	441d      	add	r5, r3
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	ee18 1a10 	vmov	r1, s16
 80090c6:	2201      	movs	r2, #1
 80090c8:	4620      	mov	r0, r4
 80090ca:	f7fe fb0b 	bl	80076e4 <__lshift>
 80090ce:	4631      	mov	r1, r6
 80090d0:	ee08 0a10 	vmov	s16, r0
 80090d4:	f7fe fb76 	bl	80077c4 <__mcmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	dc91      	bgt.n	8009000 <_dtoa_r+0xaa8>
 80090dc:	d102      	bne.n	80090e4 <_dtoa_r+0xb8c>
 80090de:	f01a 0f01 	tst.w	sl, #1
 80090e2:	d18d      	bne.n	8009000 <_dtoa_r+0xaa8>
 80090e4:	462b      	mov	r3, r5
 80090e6:	461d      	mov	r5, r3
 80090e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ec:	2a30      	cmp	r2, #48	; 0x30
 80090ee:	d0fa      	beq.n	80090e6 <_dtoa_r+0xb8e>
 80090f0:	e6d7      	b.n	8008ea2 <_dtoa_r+0x94a>
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d184      	bne.n	8009002 <_dtoa_r+0xaaa>
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	2331      	movs	r3, #49	; 0x31
 8009100:	7013      	strb	r3, [r2, #0]
 8009102:	e6ce      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <_dtoa_r+0xbd4>)
 8009106:	f7ff ba95 	b.w	8008634 <_dtoa_r+0xdc>
 800910a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	f47f aa6e 	bne.w	80085ee <_dtoa_r+0x96>
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_dtoa_r+0xbd8>)
 8009114:	f7ff ba8e 	b.w	8008634 <_dtoa_r+0xdc>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dcae      	bgt.n	800907c <_dtoa_r+0xb24>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f73f aea8 	bgt.w	8008e76 <_dtoa_r+0x91e>
 8009126:	e7a9      	b.n	800907c <_dtoa_r+0xb24>
 8009128:	08009e79 	.word	0x08009e79
 800912c:	0800a0f0 	.word	0x0800a0f0
 8009130:	0800a0e3 	.word	0x0800a0e3

08009134 <fiprintf>:
 8009134:	b40e      	push	{r1, r2, r3}
 8009136:	b503      	push	{r0, r1, lr}
 8009138:	4601      	mov	r1, r0
 800913a:	ab03      	add	r3, sp, #12
 800913c:	4805      	ldr	r0, [pc, #20]	; (8009154 <fiprintf+0x20>)
 800913e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009142:	6800      	ldr	r0, [r0, #0]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	f000 f8b3 	bl	80092b0 <_vfiprintf_r>
 800914a:	b002      	add	sp, #8
 800914c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009150:	b003      	add	sp, #12
 8009152:	4770      	bx	lr
 8009154:	20000014 	.word	0x20000014

08009158 <malloc>:
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <malloc+0xc>)
 800915a:	4601      	mov	r1, r0
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	f7fe bd7b 	b.w	8007c58 <_malloc_r>
 8009162:	bf00      	nop
 8009164:	20000014 	.word	0x20000014

08009168 <memmove>:
 8009168:	4288      	cmp	r0, r1
 800916a:	b510      	push	{r4, lr}
 800916c:	eb01 0402 	add.w	r4, r1, r2
 8009170:	d902      	bls.n	8009178 <memmove+0x10>
 8009172:	4284      	cmp	r4, r0
 8009174:	4623      	mov	r3, r4
 8009176:	d807      	bhi.n	8009188 <memmove+0x20>
 8009178:	1e43      	subs	r3, r0, #1
 800917a:	42a1      	cmp	r1, r4
 800917c:	d008      	beq.n	8009190 <memmove+0x28>
 800917e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009186:	e7f8      	b.n	800917a <memmove+0x12>
 8009188:	4402      	add	r2, r0
 800918a:	4601      	mov	r1, r0
 800918c:	428a      	cmp	r2, r1
 800918e:	d100      	bne.n	8009192 <memmove+0x2a>
 8009190:	bd10      	pop	{r4, pc}
 8009192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800919a:	e7f7      	b.n	800918c <memmove+0x24>

0800919c <__malloc_lock>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__malloc_lock+0x8>)
 800919e:	f000 bc37 	b.w	8009a10 <__retarget_lock_acquire_recursive>
 80091a2:	bf00      	nop
 80091a4:	200004e0 	.word	0x200004e0

080091a8 <__malloc_unlock>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__malloc_unlock+0x8>)
 80091aa:	f000 bc32 	b.w	8009a12 <__retarget_lock_release_recursive>
 80091ae:	bf00      	nop
 80091b0:	200004e0 	.word	0x200004e0

080091b4 <_free_r>:
 80091b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d044      	beq.n	8009244 <_free_r+0x90>
 80091ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091be:	9001      	str	r0, [sp, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f1a1 0404 	sub.w	r4, r1, #4
 80091c6:	bfb8      	it	lt
 80091c8:	18e4      	addlt	r4, r4, r3
 80091ca:	f7ff ffe7 	bl	800919c <__malloc_lock>
 80091ce:	4a1e      	ldr	r2, [pc, #120]	; (8009248 <_free_r+0x94>)
 80091d0:	9801      	ldr	r0, [sp, #4]
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	b933      	cbnz	r3, 80091e4 <_free_r+0x30>
 80091d6:	6063      	str	r3, [r4, #4]
 80091d8:	6014      	str	r4, [r2, #0]
 80091da:	b003      	add	sp, #12
 80091dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e0:	f7ff bfe2 	b.w	80091a8 <__malloc_unlock>
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d908      	bls.n	80091fa <_free_r+0x46>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf01      	itttt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	1949      	addeq	r1, r1, r5
 80091f6:	6021      	streq	r1, [r4, #0]
 80091f8:	e7ed      	b.n	80091d6 <_free_r+0x22>
 80091fa:	461a      	mov	r2, r3
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b10b      	cbz	r3, 8009204 <_free_r+0x50>
 8009200:	42a3      	cmp	r3, r4
 8009202:	d9fa      	bls.n	80091fa <_free_r+0x46>
 8009204:	6811      	ldr	r1, [r2, #0]
 8009206:	1855      	adds	r5, r2, r1
 8009208:	42a5      	cmp	r5, r4
 800920a:	d10b      	bne.n	8009224 <_free_r+0x70>
 800920c:	6824      	ldr	r4, [r4, #0]
 800920e:	4421      	add	r1, r4
 8009210:	1854      	adds	r4, r2, r1
 8009212:	42a3      	cmp	r3, r4
 8009214:	6011      	str	r1, [r2, #0]
 8009216:	d1e0      	bne.n	80091da <_free_r+0x26>
 8009218:	681c      	ldr	r4, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	6053      	str	r3, [r2, #4]
 800921e:	4421      	add	r1, r4
 8009220:	6011      	str	r1, [r2, #0]
 8009222:	e7da      	b.n	80091da <_free_r+0x26>
 8009224:	d902      	bls.n	800922c <_free_r+0x78>
 8009226:	230c      	movs	r3, #12
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7d6      	b.n	80091da <_free_r+0x26>
 800922c:	6825      	ldr	r5, [r4, #0]
 800922e:	1961      	adds	r1, r4, r5
 8009230:	428b      	cmp	r3, r1
 8009232:	bf04      	itt	eq
 8009234:	6819      	ldreq	r1, [r3, #0]
 8009236:	685b      	ldreq	r3, [r3, #4]
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	bf04      	itt	eq
 800923c:	1949      	addeq	r1, r1, r5
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	6054      	str	r4, [r2, #4]
 8009242:	e7ca      	b.n	80091da <_free_r+0x26>
 8009244:	b003      	add	sp, #12
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	200004d4 	.word	0x200004d4

0800924c <_malloc_usable_size_r>:
 800924c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009250:	1f18      	subs	r0, r3, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfbc      	itt	lt
 8009256:	580b      	ldrlt	r3, [r1, r0]
 8009258:	18c0      	addlt	r0, r0, r3
 800925a:	4770      	bx	lr

0800925c <__sfputc_r>:
 800925c:	6893      	ldr	r3, [r2, #8]
 800925e:	3b01      	subs	r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	b410      	push	{r4}
 8009264:	6093      	str	r3, [r2, #8]
 8009266:	da08      	bge.n	800927a <__sfputc_r+0x1e>
 8009268:	6994      	ldr	r4, [r2, #24]
 800926a:	42a3      	cmp	r3, r4
 800926c:	db01      	blt.n	8009272 <__sfputc_r+0x16>
 800926e:	290a      	cmp	r1, #10
 8009270:	d103      	bne.n	800927a <__sfputc_r+0x1e>
 8009272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009276:	f000 b94b 	b.w	8009510 <__swbuf_r>
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	1c58      	adds	r0, r3, #1
 800927e:	6010      	str	r0, [r2, #0]
 8009280:	7019      	strb	r1, [r3, #0]
 8009282:	4608      	mov	r0, r1
 8009284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009288:	4770      	bx	lr

0800928a <__sfputs_r>:
 800928a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	4614      	mov	r4, r2
 8009292:	18d5      	adds	r5, r2, r3
 8009294:	42ac      	cmp	r4, r5
 8009296:	d101      	bne.n	800929c <__sfputs_r+0x12>
 8009298:	2000      	movs	r0, #0
 800929a:	e007      	b.n	80092ac <__sfputs_r+0x22>
 800929c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a0:	463a      	mov	r2, r7
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffda 	bl	800925c <__sfputc_r>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d1f3      	bne.n	8009294 <__sfputs_r+0xa>
 80092ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092b0 <_vfiprintf_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	460d      	mov	r5, r1
 80092b6:	b09d      	sub	sp, #116	; 0x74
 80092b8:	4614      	mov	r4, r2
 80092ba:	4698      	mov	r8, r3
 80092bc:	4606      	mov	r6, r0
 80092be:	b118      	cbz	r0, 80092c8 <_vfiprintf_r+0x18>
 80092c0:	6983      	ldr	r3, [r0, #24]
 80092c2:	b90b      	cbnz	r3, 80092c8 <_vfiprintf_r+0x18>
 80092c4:	f000 fb06 	bl	80098d4 <__sinit>
 80092c8:	4b89      	ldr	r3, [pc, #548]	; (80094f0 <_vfiprintf_r+0x240>)
 80092ca:	429d      	cmp	r5, r3
 80092cc:	d11b      	bne.n	8009306 <_vfiprintf_r+0x56>
 80092ce:	6875      	ldr	r5, [r6, #4]
 80092d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d405      	bmi.n	80092e2 <_vfiprintf_r+0x32>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_vfiprintf_r+0x32>
 80092dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092de:	f000 fb97 	bl	8009a10 <__retarget_lock_acquire_recursive>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d501      	bpl.n	80092ec <_vfiprintf_r+0x3c>
 80092e8:	692b      	ldr	r3, [r5, #16]
 80092ea:	b9eb      	cbnz	r3, 8009328 <_vfiprintf_r+0x78>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 f960 	bl	80095b4 <__swsetup_r>
 80092f4:	b1c0      	cbz	r0, 8009328 <_vfiprintf_r+0x78>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f8:	07dc      	lsls	r4, r3, #31
 80092fa:	d50e      	bpl.n	800931a <_vfiprintf_r+0x6a>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b01d      	add	sp, #116	; 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	4b7b      	ldr	r3, [pc, #492]	; (80094f4 <_vfiprintf_r+0x244>)
 8009308:	429d      	cmp	r5, r3
 800930a:	d101      	bne.n	8009310 <_vfiprintf_r+0x60>
 800930c:	68b5      	ldr	r5, [r6, #8]
 800930e:	e7df      	b.n	80092d0 <_vfiprintf_r+0x20>
 8009310:	4b79      	ldr	r3, [pc, #484]	; (80094f8 <_vfiprintf_r+0x248>)
 8009312:	429d      	cmp	r5, r3
 8009314:	bf08      	it	eq
 8009316:	68f5      	ldreq	r5, [r6, #12]
 8009318:	e7da      	b.n	80092d0 <_vfiprintf_r+0x20>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	0598      	lsls	r0, r3, #22
 800931e:	d4ed      	bmi.n	80092fc <_vfiprintf_r+0x4c>
 8009320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009322:	f000 fb76 	bl	8009a12 <__retarget_lock_release_recursive>
 8009326:	e7e9      	b.n	80092fc <_vfiprintf_r+0x4c>
 8009328:	2300      	movs	r3, #0
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	2320      	movs	r3, #32
 800932e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009332:	f8cd 800c 	str.w	r8, [sp, #12]
 8009336:	2330      	movs	r3, #48	; 0x30
 8009338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094fc <_vfiprintf_r+0x24c>
 800933c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009340:	f04f 0901 	mov.w	r9, #1
 8009344:	4623      	mov	r3, r4
 8009346:	469a      	mov	sl, r3
 8009348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934c:	b10a      	cbz	r2, 8009352 <_vfiprintf_r+0xa2>
 800934e:	2a25      	cmp	r2, #37	; 0x25
 8009350:	d1f9      	bne.n	8009346 <_vfiprintf_r+0x96>
 8009352:	ebba 0b04 	subs.w	fp, sl, r4
 8009356:	d00b      	beq.n	8009370 <_vfiprintf_r+0xc0>
 8009358:	465b      	mov	r3, fp
 800935a:	4622      	mov	r2, r4
 800935c:	4629      	mov	r1, r5
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff93 	bl	800928a <__sfputs_r>
 8009364:	3001      	adds	r0, #1
 8009366:	f000 80aa 	beq.w	80094be <_vfiprintf_r+0x20e>
 800936a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936c:	445a      	add	r2, fp
 800936e:	9209      	str	r2, [sp, #36]	; 0x24
 8009370:	f89a 3000 	ldrb.w	r3, [sl]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80a2 	beq.w	80094be <_vfiprintf_r+0x20e>
 800937a:	2300      	movs	r3, #0
 800937c:	f04f 32ff 	mov.w	r2, #4294967295
 8009380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009384:	f10a 0a01 	add.w	sl, sl, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009390:	931a      	str	r3, [sp, #104]	; 0x68
 8009392:	4654      	mov	r4, sl
 8009394:	2205      	movs	r2, #5
 8009396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939a:	4858      	ldr	r0, [pc, #352]	; (80094fc <_vfiprintf_r+0x24c>)
 800939c:	f7f6 ff20 	bl	80001e0 <memchr>
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	b9d8      	cbnz	r0, 80093dc <_vfiprintf_r+0x12c>
 80093a4:	06d1      	lsls	r1, r2, #27
 80093a6:	bf44      	itt	mi
 80093a8:	2320      	movmi	r3, #32
 80093aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ae:	0713      	lsls	r3, r2, #28
 80093b0:	bf44      	itt	mi
 80093b2:	232b      	movmi	r3, #43	; 0x2b
 80093b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b8:	f89a 3000 	ldrb.w	r3, [sl]
 80093bc:	2b2a      	cmp	r3, #42	; 0x2a
 80093be:	d015      	beq.n	80093ec <_vfiprintf_r+0x13c>
 80093c0:	9a07      	ldr	r2, [sp, #28]
 80093c2:	4654      	mov	r4, sl
 80093c4:	2000      	movs	r0, #0
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4621      	mov	r1, r4
 80093cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d0:	3b30      	subs	r3, #48	; 0x30
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d94e      	bls.n	8009474 <_vfiprintf_r+0x1c4>
 80093d6:	b1b0      	cbz	r0, 8009406 <_vfiprintf_r+0x156>
 80093d8:	9207      	str	r2, [sp, #28]
 80093da:	e014      	b.n	8009406 <_vfiprintf_r+0x156>
 80093dc:	eba0 0308 	sub.w	r3, r0, r8
 80093e0:	fa09 f303 	lsl.w	r3, r9, r3
 80093e4:	4313      	orrs	r3, r2
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	46a2      	mov	sl, r4
 80093ea:	e7d2      	b.n	8009392 <_vfiprintf_r+0xe2>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1d19      	adds	r1, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	9103      	str	r1, [sp, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfbb      	ittet	lt
 80093f8:	425b      	neglt	r3, r3
 80093fa:	f042 0202 	orrlt.w	r2, r2, #2
 80093fe:	9307      	strge	r3, [sp, #28]
 8009400:	9307      	strlt	r3, [sp, #28]
 8009402:	bfb8      	it	lt
 8009404:	9204      	strlt	r2, [sp, #16]
 8009406:	7823      	ldrb	r3, [r4, #0]
 8009408:	2b2e      	cmp	r3, #46	; 0x2e
 800940a:	d10c      	bne.n	8009426 <_vfiprintf_r+0x176>
 800940c:	7863      	ldrb	r3, [r4, #1]
 800940e:	2b2a      	cmp	r3, #42	; 0x2a
 8009410:	d135      	bne.n	800947e <_vfiprintf_r+0x1ce>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	1d1a      	adds	r2, r3, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	9203      	str	r2, [sp, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfb8      	it	lt
 800941e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009422:	3402      	adds	r4, #2
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800950c <_vfiprintf_r+0x25c>
 800942a:	7821      	ldrb	r1, [r4, #0]
 800942c:	2203      	movs	r2, #3
 800942e:	4650      	mov	r0, sl
 8009430:	f7f6 fed6 	bl	80001e0 <memchr>
 8009434:	b140      	cbz	r0, 8009448 <_vfiprintf_r+0x198>
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	eba0 000a 	sub.w	r0, r0, sl
 800943c:	fa03 f000 	lsl.w	r0, r3, r0
 8009440:	9b04      	ldr	r3, [sp, #16]
 8009442:	4303      	orrs	r3, r0
 8009444:	3401      	adds	r4, #1
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944c:	482c      	ldr	r0, [pc, #176]	; (8009500 <_vfiprintf_r+0x250>)
 800944e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009452:	2206      	movs	r2, #6
 8009454:	f7f6 fec4 	bl	80001e0 <memchr>
 8009458:	2800      	cmp	r0, #0
 800945a:	d03f      	beq.n	80094dc <_vfiprintf_r+0x22c>
 800945c:	4b29      	ldr	r3, [pc, #164]	; (8009504 <_vfiprintf_r+0x254>)
 800945e:	bb1b      	cbnz	r3, 80094a8 <_vfiprintf_r+0x1f8>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	3307      	adds	r3, #7
 8009464:	f023 0307 	bic.w	r3, r3, #7
 8009468:	3308      	adds	r3, #8
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946e:	443b      	add	r3, r7
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	e767      	b.n	8009344 <_vfiprintf_r+0x94>
 8009474:	fb0c 3202 	mla	r2, ip, r2, r3
 8009478:	460c      	mov	r4, r1
 800947a:	2001      	movs	r0, #1
 800947c:	e7a5      	b.n	80093ca <_vfiprintf_r+0x11a>
 800947e:	2300      	movs	r3, #0
 8009480:	3401      	adds	r4, #1
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	4619      	mov	r1, r3
 8009486:	f04f 0c0a 	mov.w	ip, #10
 800948a:	4620      	mov	r0, r4
 800948c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009490:	3a30      	subs	r2, #48	; 0x30
 8009492:	2a09      	cmp	r2, #9
 8009494:	d903      	bls.n	800949e <_vfiprintf_r+0x1ee>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c5      	beq.n	8009426 <_vfiprintf_r+0x176>
 800949a:	9105      	str	r1, [sp, #20]
 800949c:	e7c3      	b.n	8009426 <_vfiprintf_r+0x176>
 800949e:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a2:	4604      	mov	r4, r0
 80094a4:	2301      	movs	r3, #1
 80094a6:	e7f0      	b.n	800948a <_vfiprintf_r+0x1da>
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4b16      	ldr	r3, [pc, #88]	; (8009508 <_vfiprintf_r+0x258>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	4630      	mov	r0, r6
 80094b4:	f3af 8000 	nop.w
 80094b8:	4607      	mov	r7, r0
 80094ba:	1c78      	adds	r0, r7, #1
 80094bc:	d1d6      	bne.n	800946c <_vfiprintf_r+0x1bc>
 80094be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c0:	07d9      	lsls	r1, r3, #31
 80094c2:	d405      	bmi.n	80094d0 <_vfiprintf_r+0x220>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	059a      	lsls	r2, r3, #22
 80094c8:	d402      	bmi.n	80094d0 <_vfiprintf_r+0x220>
 80094ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094cc:	f000 faa1 	bl	8009a12 <__retarget_lock_release_recursive>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	065b      	lsls	r3, r3, #25
 80094d4:	f53f af12 	bmi.w	80092fc <_vfiprintf_r+0x4c>
 80094d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094da:	e711      	b.n	8009300 <_vfiprintf_r+0x50>
 80094dc:	ab03      	add	r3, sp, #12
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <_vfiprintf_r+0x258>)
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7fe fe22 	bl	8008130 <_printf_i>
 80094ec:	e7e4      	b.n	80094b8 <_vfiprintf_r+0x208>
 80094ee:	bf00      	nop
 80094f0:	0800a170 	.word	0x0800a170
 80094f4:	0800a190 	.word	0x0800a190
 80094f8:	0800a150 	.word	0x0800a150
 80094fc:	0800a074 	.word	0x0800a074
 8009500:	0800a07e 	.word	0x0800a07e
 8009504:	00000000 	.word	0x00000000
 8009508:	0800928b 	.word	0x0800928b
 800950c:	0800a07a 	.word	0x0800a07a

08009510 <__swbuf_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	460e      	mov	r6, r1
 8009514:	4614      	mov	r4, r2
 8009516:	4605      	mov	r5, r0
 8009518:	b118      	cbz	r0, 8009522 <__swbuf_r+0x12>
 800951a:	6983      	ldr	r3, [r0, #24]
 800951c:	b90b      	cbnz	r3, 8009522 <__swbuf_r+0x12>
 800951e:	f000 f9d9 	bl	80098d4 <__sinit>
 8009522:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <__swbuf_r+0x98>)
 8009524:	429c      	cmp	r4, r3
 8009526:	d12b      	bne.n	8009580 <__swbuf_r+0x70>
 8009528:	686c      	ldr	r4, [r5, #4]
 800952a:	69a3      	ldr	r3, [r4, #24]
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	071a      	lsls	r2, r3, #28
 8009532:	d52f      	bpl.n	8009594 <__swbuf_r+0x84>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	b36b      	cbz	r3, 8009594 <__swbuf_r+0x84>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	1ac0      	subs	r0, r0, r3
 800953e:	6963      	ldr	r3, [r4, #20]
 8009540:	b2f6      	uxtb	r6, r6
 8009542:	4283      	cmp	r3, r0
 8009544:	4637      	mov	r7, r6
 8009546:	dc04      	bgt.n	8009552 <__swbuf_r+0x42>
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f92e 	bl	80097ac <_fflush_r>
 8009550:	bb30      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	3b01      	subs	r3, #1
 8009556:	60a3      	str	r3, [r4, #8]
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	6022      	str	r2, [r4, #0]
 800955e:	701e      	strb	r6, [r3, #0]
 8009560:	6963      	ldr	r3, [r4, #20]
 8009562:	3001      	adds	r0, #1
 8009564:	4283      	cmp	r3, r0
 8009566:	d004      	beq.n	8009572 <__swbuf_r+0x62>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	07db      	lsls	r3, r3, #31
 800956c:	d506      	bpl.n	800957c <__swbuf_r+0x6c>
 800956e:	2e0a      	cmp	r6, #10
 8009570:	d104      	bne.n	800957c <__swbuf_r+0x6c>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f919 	bl	80097ac <_fflush_r>
 800957a:	b988      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 800957c:	4638      	mov	r0, r7
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <__swbuf_r+0x9c>)
 8009582:	429c      	cmp	r4, r3
 8009584:	d101      	bne.n	800958a <__swbuf_r+0x7a>
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	e7cf      	b.n	800952a <__swbuf_r+0x1a>
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <__swbuf_r+0xa0>)
 800958c:	429c      	cmp	r4, r3
 800958e:	bf08      	it	eq
 8009590:	68ec      	ldreq	r4, [r5, #12]
 8009592:	e7ca      	b.n	800952a <__swbuf_r+0x1a>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f80c 	bl	80095b4 <__swsetup_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0cb      	beq.n	8009538 <__swbuf_r+0x28>
 80095a0:	f04f 37ff 	mov.w	r7, #4294967295
 80095a4:	e7ea      	b.n	800957c <__swbuf_r+0x6c>
 80095a6:	bf00      	nop
 80095a8:	0800a170 	.word	0x0800a170
 80095ac:	0800a190 	.word	0x0800a190
 80095b0:	0800a150 	.word	0x0800a150

080095b4 <__swsetup_r>:
 80095b4:	4b32      	ldr	r3, [pc, #200]	; (8009680 <__swsetup_r+0xcc>)
 80095b6:	b570      	push	{r4, r5, r6, lr}
 80095b8:	681d      	ldr	r5, [r3, #0]
 80095ba:	4606      	mov	r6, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	b125      	cbz	r5, 80095ca <__swsetup_r+0x16>
 80095c0:	69ab      	ldr	r3, [r5, #24]
 80095c2:	b913      	cbnz	r3, 80095ca <__swsetup_r+0x16>
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 f985 	bl	80098d4 <__sinit>
 80095ca:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <__swsetup_r+0xd0>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d10f      	bne.n	80095f0 <__swsetup_r+0x3c>
 80095d0:	686c      	ldr	r4, [r5, #4]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d8:	0719      	lsls	r1, r3, #28
 80095da:	d42c      	bmi.n	8009636 <__swsetup_r+0x82>
 80095dc:	06dd      	lsls	r5, r3, #27
 80095de:	d411      	bmi.n	8009604 <__swsetup_r+0x50>
 80095e0:	2309      	movs	r3, #9
 80095e2:	6033      	str	r3, [r6, #0]
 80095e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295
 80095ee:	e03e      	b.n	800966e <__swsetup_r+0xba>
 80095f0:	4b25      	ldr	r3, [pc, #148]	; (8009688 <__swsetup_r+0xd4>)
 80095f2:	429c      	cmp	r4, r3
 80095f4:	d101      	bne.n	80095fa <__swsetup_r+0x46>
 80095f6:	68ac      	ldr	r4, [r5, #8]
 80095f8:	e7eb      	b.n	80095d2 <__swsetup_r+0x1e>
 80095fa:	4b24      	ldr	r3, [pc, #144]	; (800968c <__swsetup_r+0xd8>)
 80095fc:	429c      	cmp	r4, r3
 80095fe:	bf08      	it	eq
 8009600:	68ec      	ldreq	r4, [r5, #12]
 8009602:	e7e6      	b.n	80095d2 <__swsetup_r+0x1e>
 8009604:	0758      	lsls	r0, r3, #29
 8009606:	d512      	bpl.n	800962e <__swsetup_r+0x7a>
 8009608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960a:	b141      	cbz	r1, 800961e <__swsetup_r+0x6a>
 800960c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009610:	4299      	cmp	r1, r3
 8009612:	d002      	beq.n	800961a <__swsetup_r+0x66>
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fdcd 	bl	80091b4 <_free_r>
 800961a:	2300      	movs	r3, #0
 800961c:	6363      	str	r3, [r4, #52]	; 0x34
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	2300      	movs	r3, #0
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	b94b      	cbnz	r3, 800964e <__swsetup_r+0x9a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009644:	d003      	beq.n	800964e <__swsetup_r+0x9a>
 8009646:	4621      	mov	r1, r4
 8009648:	4630      	mov	r0, r6
 800964a:	f000 fa09 	bl	8009a60 <__smakebuf_r>
 800964e:	89a0      	ldrh	r0, [r4, #12]
 8009650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009654:	f010 0301 	ands.w	r3, r0, #1
 8009658:	d00a      	beq.n	8009670 <__swsetup_r+0xbc>
 800965a:	2300      	movs	r3, #0
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6963      	ldr	r3, [r4, #20]
 8009660:	425b      	negs	r3, r3
 8009662:	61a3      	str	r3, [r4, #24]
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	b943      	cbnz	r3, 800967a <__swsetup_r+0xc6>
 8009668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800966c:	d1ba      	bne.n	80095e4 <__swsetup_r+0x30>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	0781      	lsls	r1, r0, #30
 8009672:	bf58      	it	pl
 8009674:	6963      	ldrpl	r3, [r4, #20]
 8009676:	60a3      	str	r3, [r4, #8]
 8009678:	e7f4      	b.n	8009664 <__swsetup_r+0xb0>
 800967a:	2000      	movs	r0, #0
 800967c:	e7f7      	b.n	800966e <__swsetup_r+0xba>
 800967e:	bf00      	nop
 8009680:	20000014 	.word	0x20000014
 8009684:	0800a170 	.word	0x0800a170
 8009688:	0800a190 	.word	0x0800a190
 800968c:	0800a150 	.word	0x0800a150

08009690 <abort>:
 8009690:	b508      	push	{r3, lr}
 8009692:	2006      	movs	r0, #6
 8009694:	f000 fa4c 	bl	8009b30 <raise>
 8009698:	2001      	movs	r0, #1
 800969a:	f7f8 fe3f 	bl	800231c <_exit>
	...

080096a0 <__sflush_r>:
 80096a0:	898a      	ldrh	r2, [r1, #12]
 80096a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	4605      	mov	r5, r0
 80096a8:	0710      	lsls	r0, r2, #28
 80096aa:	460c      	mov	r4, r1
 80096ac:	d458      	bmi.n	8009760 <__sflush_r+0xc0>
 80096ae:	684b      	ldr	r3, [r1, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dc05      	bgt.n	80096c0 <__sflush_r+0x20>
 80096b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dc02      	bgt.n	80096c0 <__sflush_r+0x20>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	d0f9      	beq.n	80096ba <__sflush_r+0x1a>
 80096c6:	2300      	movs	r3, #0
 80096c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096cc:	682f      	ldr	r7, [r5, #0]
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	d032      	beq.n	8009738 <__sflush_r+0x98>
 80096d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	075a      	lsls	r2, r3, #29
 80096d8:	d505      	bpl.n	80096e6 <__sflush_r+0x46>
 80096da:	6863      	ldr	r3, [r4, #4]
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096e0:	b10b      	cbz	r3, 80096e6 <__sflush_r+0x46>
 80096e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096e4:	1ac0      	subs	r0, r0, r3
 80096e6:	2300      	movs	r3, #0
 80096e8:	4602      	mov	r2, r0
 80096ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ec:	6a21      	ldr	r1, [r4, #32]
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b0      	blx	r6
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	d106      	bne.n	8009706 <__sflush_r+0x66>
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	291d      	cmp	r1, #29
 80096fc:	d82c      	bhi.n	8009758 <__sflush_r+0xb8>
 80096fe:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <__sflush_r+0x108>)
 8009700:	40ca      	lsrs	r2, r1
 8009702:	07d6      	lsls	r6, r2, #31
 8009704:	d528      	bpl.n	8009758 <__sflush_r+0xb8>
 8009706:	2200      	movs	r2, #0
 8009708:	6062      	str	r2, [r4, #4]
 800970a:	04d9      	lsls	r1, r3, #19
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	6022      	str	r2, [r4, #0]
 8009710:	d504      	bpl.n	800971c <__sflush_r+0x7c>
 8009712:	1c42      	adds	r2, r0, #1
 8009714:	d101      	bne.n	800971a <__sflush_r+0x7a>
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	b903      	cbnz	r3, 800971c <__sflush_r+0x7c>
 800971a:	6560      	str	r0, [r4, #84]	; 0x54
 800971c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971e:	602f      	str	r7, [r5, #0]
 8009720:	2900      	cmp	r1, #0
 8009722:	d0ca      	beq.n	80096ba <__sflush_r+0x1a>
 8009724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009728:	4299      	cmp	r1, r3
 800972a:	d002      	beq.n	8009732 <__sflush_r+0x92>
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff fd41 	bl	80091b4 <_free_r>
 8009732:	2000      	movs	r0, #0
 8009734:	6360      	str	r0, [r4, #52]	; 0x34
 8009736:	e7c1      	b.n	80096bc <__sflush_r+0x1c>
 8009738:	6a21      	ldr	r1, [r4, #32]
 800973a:	2301      	movs	r3, #1
 800973c:	4628      	mov	r0, r5
 800973e:	47b0      	blx	r6
 8009740:	1c41      	adds	r1, r0, #1
 8009742:	d1c7      	bne.n	80096d4 <__sflush_r+0x34>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0c4      	beq.n	80096d4 <__sflush_r+0x34>
 800974a:	2b1d      	cmp	r3, #29
 800974c:	d001      	beq.n	8009752 <__sflush_r+0xb2>
 800974e:	2b16      	cmp	r3, #22
 8009750:	d101      	bne.n	8009756 <__sflush_r+0xb6>
 8009752:	602f      	str	r7, [r5, #0]
 8009754:	e7b1      	b.n	80096ba <__sflush_r+0x1a>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	e7ad      	b.n	80096bc <__sflush_r+0x1c>
 8009760:	690f      	ldr	r7, [r1, #16]
 8009762:	2f00      	cmp	r7, #0
 8009764:	d0a9      	beq.n	80096ba <__sflush_r+0x1a>
 8009766:	0793      	lsls	r3, r2, #30
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	bf08      	it	eq
 800976c:	694b      	ldreq	r3, [r1, #20]
 800976e:	600f      	str	r7, [r1, #0]
 8009770:	bf18      	it	ne
 8009772:	2300      	movne	r3, #0
 8009774:	eba6 0807 	sub.w	r8, r6, r7
 8009778:	608b      	str	r3, [r1, #8]
 800977a:	f1b8 0f00 	cmp.w	r8, #0
 800977e:	dd9c      	ble.n	80096ba <__sflush_r+0x1a>
 8009780:	6a21      	ldr	r1, [r4, #32]
 8009782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009784:	4643      	mov	r3, r8
 8009786:	463a      	mov	r2, r7
 8009788:	4628      	mov	r0, r5
 800978a:	47b0      	blx	r6
 800978c:	2800      	cmp	r0, #0
 800978e:	dc06      	bgt.n	800979e <__sflush_r+0xfe>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	e78e      	b.n	80096bc <__sflush_r+0x1c>
 800979e:	4407      	add	r7, r0
 80097a0:	eba8 0800 	sub.w	r8, r8, r0
 80097a4:	e7e9      	b.n	800977a <__sflush_r+0xda>
 80097a6:	bf00      	nop
 80097a8:	20400001 	.word	0x20400001

080097ac <_fflush_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	4605      	mov	r5, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	b913      	cbnz	r3, 80097bc <_fflush_r+0x10>
 80097b6:	2500      	movs	r5, #0
 80097b8:	4628      	mov	r0, r5
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	b118      	cbz	r0, 80097c6 <_fflush_r+0x1a>
 80097be:	6983      	ldr	r3, [r0, #24]
 80097c0:	b90b      	cbnz	r3, 80097c6 <_fflush_r+0x1a>
 80097c2:	f000 f887 	bl	80098d4 <__sinit>
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <_fflush_r+0x6c>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	d11b      	bne.n	8009804 <_fflush_r+0x58>
 80097cc:	686c      	ldr	r4, [r5, #4]
 80097ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0ef      	beq.n	80097b6 <_fflush_r+0xa>
 80097d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d8:	07d0      	lsls	r0, r2, #31
 80097da:	d404      	bmi.n	80097e6 <_fflush_r+0x3a>
 80097dc:	0599      	lsls	r1, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_fflush_r+0x3a>
 80097e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e2:	f000 f915 	bl	8009a10 <__retarget_lock_acquire_recursive>
 80097e6:	4628      	mov	r0, r5
 80097e8:	4621      	mov	r1, r4
 80097ea:	f7ff ff59 	bl	80096a0 <__sflush_r>
 80097ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f0:	07da      	lsls	r2, r3, #31
 80097f2:	4605      	mov	r5, r0
 80097f4:	d4e0      	bmi.n	80097b8 <_fflush_r+0xc>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	059b      	lsls	r3, r3, #22
 80097fa:	d4dd      	bmi.n	80097b8 <_fflush_r+0xc>
 80097fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fe:	f000 f908 	bl	8009a12 <__retarget_lock_release_recursive>
 8009802:	e7d9      	b.n	80097b8 <_fflush_r+0xc>
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <_fflush_r+0x70>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d101      	bne.n	800980e <_fflush_r+0x62>
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	e7df      	b.n	80097ce <_fflush_r+0x22>
 800980e:	4b04      	ldr	r3, [pc, #16]	; (8009820 <_fflush_r+0x74>)
 8009810:	429c      	cmp	r4, r3
 8009812:	bf08      	it	eq
 8009814:	68ec      	ldreq	r4, [r5, #12]
 8009816:	e7da      	b.n	80097ce <_fflush_r+0x22>
 8009818:	0800a170 	.word	0x0800a170
 800981c:	0800a190 	.word	0x0800a190
 8009820:	0800a150 	.word	0x0800a150

08009824 <std>:
 8009824:	2300      	movs	r3, #0
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	e9c0 3300 	strd	r3, r3, [r0]
 800982e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009832:	6083      	str	r3, [r0, #8]
 8009834:	8181      	strh	r1, [r0, #12]
 8009836:	6643      	str	r3, [r0, #100]	; 0x64
 8009838:	81c2      	strh	r2, [r0, #14]
 800983a:	6183      	str	r3, [r0, #24]
 800983c:	4619      	mov	r1, r3
 800983e:	2208      	movs	r2, #8
 8009840:	305c      	adds	r0, #92	; 0x5c
 8009842:	f7fc f933 	bl	8005aac <memset>
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x38>)
 8009848:	6263      	str	r3, [r4, #36]	; 0x24
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <std+0x3c>)
 800984c:	62a3      	str	r3, [r4, #40]	; 0x28
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <std+0x40>)
 8009850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009852:	4b05      	ldr	r3, [pc, #20]	; (8009868 <std+0x44>)
 8009854:	6224      	str	r4, [r4, #32]
 8009856:	6323      	str	r3, [r4, #48]	; 0x30
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	08009b69 	.word	0x08009b69
 8009860:	08009b8b 	.word	0x08009b8b
 8009864:	08009bc3 	.word	0x08009bc3
 8009868:	08009be7 	.word	0x08009be7

0800986c <_cleanup_r>:
 800986c:	4901      	ldr	r1, [pc, #4]	; (8009874 <_cleanup_r+0x8>)
 800986e:	f000 b8af 	b.w	80099d0 <_fwalk_reent>
 8009872:	bf00      	nop
 8009874:	080097ad 	.word	0x080097ad

08009878 <__sfmoreglue>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	2268      	movs	r2, #104	; 0x68
 800987c:	1e4d      	subs	r5, r1, #1
 800987e:	4355      	muls	r5, r2
 8009880:	460e      	mov	r6, r1
 8009882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009886:	f7fe f9e7 	bl	8007c58 <_malloc_r>
 800988a:	4604      	mov	r4, r0
 800988c:	b140      	cbz	r0, 80098a0 <__sfmoreglue+0x28>
 800988e:	2100      	movs	r1, #0
 8009890:	e9c0 1600 	strd	r1, r6, [r0]
 8009894:	300c      	adds	r0, #12
 8009896:	60a0      	str	r0, [r4, #8]
 8009898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800989c:	f7fc f906 	bl	8005aac <memset>
 80098a0:	4620      	mov	r0, r4
 80098a2:	bd70      	pop	{r4, r5, r6, pc}

080098a4 <__sfp_lock_acquire>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sfp_lock_acquire+0x8>)
 80098a6:	f000 b8b3 	b.w	8009a10 <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	200004e1 	.word	0x200004e1

080098b0 <__sfp_lock_release>:
 80098b0:	4801      	ldr	r0, [pc, #4]	; (80098b8 <__sfp_lock_release+0x8>)
 80098b2:	f000 b8ae 	b.w	8009a12 <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	200004e1 	.word	0x200004e1

080098bc <__sinit_lock_acquire>:
 80098bc:	4801      	ldr	r0, [pc, #4]	; (80098c4 <__sinit_lock_acquire+0x8>)
 80098be:	f000 b8a7 	b.w	8009a10 <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	200004e2 	.word	0x200004e2

080098c8 <__sinit_lock_release>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__sinit_lock_release+0x8>)
 80098ca:	f000 b8a2 	b.w	8009a12 <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	200004e2 	.word	0x200004e2

080098d4 <__sinit>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	f7ff fff0 	bl	80098bc <__sinit_lock_acquire>
 80098dc:	69a3      	ldr	r3, [r4, #24]
 80098de:	b11b      	cbz	r3, 80098e8 <__sinit+0x14>
 80098e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e4:	f7ff bff0 	b.w	80098c8 <__sinit_lock_release>
 80098e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098ec:	6523      	str	r3, [r4, #80]	; 0x50
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <__sinit+0x68>)
 80098f0:	4a13      	ldr	r2, [pc, #76]	; (8009940 <__sinit+0x6c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098f6:	42a3      	cmp	r3, r4
 80098f8:	bf04      	itt	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	61a3      	streq	r3, [r4, #24]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f820 	bl	8009944 <__sfp>
 8009904:	6060      	str	r0, [r4, #4]
 8009906:	4620      	mov	r0, r4
 8009908:	f000 f81c 	bl	8009944 <__sfp>
 800990c:	60a0      	str	r0, [r4, #8]
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f818 	bl	8009944 <__sfp>
 8009914:	2200      	movs	r2, #0
 8009916:	60e0      	str	r0, [r4, #12]
 8009918:	2104      	movs	r1, #4
 800991a:	6860      	ldr	r0, [r4, #4]
 800991c:	f7ff ff82 	bl	8009824 <std>
 8009920:	68a0      	ldr	r0, [r4, #8]
 8009922:	2201      	movs	r2, #1
 8009924:	2109      	movs	r1, #9
 8009926:	f7ff ff7d 	bl	8009824 <std>
 800992a:	68e0      	ldr	r0, [r4, #12]
 800992c:	2202      	movs	r2, #2
 800992e:	2112      	movs	r1, #18
 8009930:	f7ff ff78 	bl	8009824 <std>
 8009934:	2301      	movs	r3, #1
 8009936:	61a3      	str	r3, [r4, #24]
 8009938:	e7d2      	b.n	80098e0 <__sinit+0xc>
 800993a:	bf00      	nop
 800993c:	08009d18 	.word	0x08009d18
 8009940:	0800986d 	.word	0x0800986d

08009944 <__sfp>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	4607      	mov	r7, r0
 8009948:	f7ff ffac 	bl	80098a4 <__sfp_lock_acquire>
 800994c:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <__sfp+0x84>)
 800994e:	681e      	ldr	r6, [r3, #0]
 8009950:	69b3      	ldr	r3, [r6, #24]
 8009952:	b913      	cbnz	r3, 800995a <__sfp+0x16>
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff ffbd 	bl	80098d4 <__sinit>
 800995a:	3648      	adds	r6, #72	; 0x48
 800995c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009960:	3b01      	subs	r3, #1
 8009962:	d503      	bpl.n	800996c <__sfp+0x28>
 8009964:	6833      	ldr	r3, [r6, #0]
 8009966:	b30b      	cbz	r3, 80099ac <__sfp+0x68>
 8009968:	6836      	ldr	r6, [r6, #0]
 800996a:	e7f7      	b.n	800995c <__sfp+0x18>
 800996c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009970:	b9d5      	cbnz	r5, 80099a8 <__sfp+0x64>
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <__sfp+0x88>)
 8009974:	60e3      	str	r3, [r4, #12]
 8009976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800997a:	6665      	str	r5, [r4, #100]	; 0x64
 800997c:	f000 f847 	bl	8009a0e <__retarget_lock_init_recursive>
 8009980:	f7ff ff96 	bl	80098b0 <__sfp_lock_release>
 8009984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800998c:	6025      	str	r5, [r4, #0]
 800998e:	61a5      	str	r5, [r4, #24]
 8009990:	2208      	movs	r2, #8
 8009992:	4629      	mov	r1, r5
 8009994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009998:	f7fc f888 	bl	8005aac <memset>
 800999c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099a4:	4620      	mov	r0, r4
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	3468      	adds	r4, #104	; 0x68
 80099aa:	e7d9      	b.n	8009960 <__sfp+0x1c>
 80099ac:	2104      	movs	r1, #4
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ff62 	bl	8009878 <__sfmoreglue>
 80099b4:	4604      	mov	r4, r0
 80099b6:	6030      	str	r0, [r6, #0]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1d5      	bne.n	8009968 <__sfp+0x24>
 80099bc:	f7ff ff78 	bl	80098b0 <__sfp_lock_release>
 80099c0:	230c      	movs	r3, #12
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	e7ee      	b.n	80099a4 <__sfp+0x60>
 80099c6:	bf00      	nop
 80099c8:	08009d18 	.word	0x08009d18
 80099cc:	ffff0001 	.word	0xffff0001

080099d0 <_fwalk_reent>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4606      	mov	r6, r0
 80099d6:	4688      	mov	r8, r1
 80099d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099dc:	2700      	movs	r7, #0
 80099de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099e2:	f1b9 0901 	subs.w	r9, r9, #1
 80099e6:	d505      	bpl.n	80099f4 <_fwalk_reent+0x24>
 80099e8:	6824      	ldr	r4, [r4, #0]
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d1f7      	bne.n	80099de <_fwalk_reent+0xe>
 80099ee:	4638      	mov	r0, r7
 80099f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f4:	89ab      	ldrh	r3, [r5, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d907      	bls.n	8009a0a <_fwalk_reent+0x3a>
 80099fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099fe:	3301      	adds	r3, #1
 8009a00:	d003      	beq.n	8009a0a <_fwalk_reent+0x3a>
 8009a02:	4629      	mov	r1, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	47c0      	blx	r8
 8009a08:	4307      	orrs	r7, r0
 8009a0a:	3568      	adds	r5, #104	; 0x68
 8009a0c:	e7e9      	b.n	80099e2 <_fwalk_reent+0x12>

08009a0e <__retarget_lock_init_recursive>:
 8009a0e:	4770      	bx	lr

08009a10 <__retarget_lock_acquire_recursive>:
 8009a10:	4770      	bx	lr

08009a12 <__retarget_lock_release_recursive>:
 8009a12:	4770      	bx	lr

08009a14 <__swhatbuf_r>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	460e      	mov	r6, r1
 8009a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	b096      	sub	sp, #88	; 0x58
 8009a20:	4614      	mov	r4, r2
 8009a22:	461d      	mov	r5, r3
 8009a24:	da08      	bge.n	8009a38 <__swhatbuf_r+0x24>
 8009a26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	061a      	lsls	r2, r3, #24
 8009a30:	d410      	bmi.n	8009a54 <__swhatbuf_r+0x40>
 8009a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a36:	e00e      	b.n	8009a56 <__swhatbuf_r+0x42>
 8009a38:	466a      	mov	r2, sp
 8009a3a:	f000 f8fb 	bl	8009c34 <_fstat_r>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	dbf1      	blt.n	8009a26 <__swhatbuf_r+0x12>
 8009a42:	9a01      	ldr	r2, [sp, #4]
 8009a44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a4c:	425a      	negs	r2, r3
 8009a4e:	415a      	adcs	r2, r3
 8009a50:	602a      	str	r2, [r5, #0]
 8009a52:	e7ee      	b.n	8009a32 <__swhatbuf_r+0x1e>
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	2000      	movs	r0, #0
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	b016      	add	sp, #88	; 0x58
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a60 <__smakebuf_r>:
 8009a60:	898b      	ldrh	r3, [r1, #12]
 8009a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a64:	079d      	lsls	r5, r3, #30
 8009a66:	4606      	mov	r6, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	d507      	bpl.n	8009a7c <__smakebuf_r+0x1c>
 8009a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	6123      	str	r3, [r4, #16]
 8009a74:	2301      	movs	r3, #1
 8009a76:	6163      	str	r3, [r4, #20]
 8009a78:	b002      	add	sp, #8
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	ab01      	add	r3, sp, #4
 8009a7e:	466a      	mov	r2, sp
 8009a80:	f7ff ffc8 	bl	8009a14 <__swhatbuf_r>
 8009a84:	9900      	ldr	r1, [sp, #0]
 8009a86:	4605      	mov	r5, r0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7fe f8e5 	bl	8007c58 <_malloc_r>
 8009a8e:	b948      	cbnz	r0, 8009aa4 <__smakebuf_r+0x44>
 8009a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a94:	059a      	lsls	r2, r3, #22
 8009a96:	d4ef      	bmi.n	8009a78 <__smakebuf_r+0x18>
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	f043 0302 	orr.w	r3, r3, #2
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	e7e3      	b.n	8009a6c <__smakebuf_r+0xc>
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <__smakebuf_r+0x7c>)
 8009aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	6020      	str	r0, [r4, #0]
 8009aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	9b00      	ldr	r3, [sp, #0]
 8009ab4:	6163      	str	r3, [r4, #20]
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	6120      	str	r0, [r4, #16]
 8009aba:	b15b      	cbz	r3, 8009ad4 <__smakebuf_r+0x74>
 8009abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f8c9 	bl	8009c58 <_isatty_r>
 8009ac6:	b128      	cbz	r0, 8009ad4 <__smakebuf_r+0x74>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	f043 0301 	orr.w	r3, r3, #1
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	89a0      	ldrh	r0, [r4, #12]
 8009ad6:	4305      	orrs	r5, r0
 8009ad8:	81a5      	strh	r5, [r4, #12]
 8009ada:	e7cd      	b.n	8009a78 <__smakebuf_r+0x18>
 8009adc:	0800986d 	.word	0x0800986d

08009ae0 <_raise_r>:
 8009ae0:	291f      	cmp	r1, #31
 8009ae2:	b538      	push	{r3, r4, r5, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	d904      	bls.n	8009af4 <_raise_r+0x14>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009af6:	b112      	cbz	r2, 8009afe <_raise_r+0x1e>
 8009af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009afc:	b94b      	cbnz	r3, 8009b12 <_raise_r+0x32>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f830 	bl	8009b64 <_getpid_r>
 8009b04:	462a      	mov	r2, r5
 8009b06:	4601      	mov	r1, r0
 8009b08:	4620      	mov	r0, r4
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f000 b817 	b.w	8009b40 <_kill_r>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d00a      	beq.n	8009b2c <_raise_r+0x4c>
 8009b16:	1c59      	adds	r1, r3, #1
 8009b18:	d103      	bne.n	8009b22 <_raise_r+0x42>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7e7      	b.n	8009af2 <_raise_r+0x12>
 8009b22:	2400      	movs	r4, #0
 8009b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b28:	4628      	mov	r0, r5
 8009b2a:	4798      	blx	r3
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7e0      	b.n	8009af2 <_raise_r+0x12>

08009b30 <raise>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <raise+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f7ff bfd3 	b.w	8009ae0 <_raise_r>
 8009b3a:	bf00      	nop
 8009b3c:	20000014 	.word	0x20000014

08009b40 <_kill_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_kill_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f8 fbd5 	bl	80022fc <_kill>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_kill_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_kill_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	200004dc 	.word	0x200004dc

08009b64 <_getpid_r>:
 8009b64:	f7f8 bbc2 	b.w	80022ec <_getpid>

08009b68 <__sread>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b70:	f000 f894 	bl	8009c9c <_read_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	bfab      	itete	ge
 8009b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b7c:	181b      	addge	r3, r3, r0
 8009b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b82:	bfac      	ite	ge
 8009b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b86:	81a3      	strhlt	r3, [r4, #12]
 8009b88:	bd10      	pop	{r4, pc}

08009b8a <__swrite>:
 8009b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8e:	461f      	mov	r7, r3
 8009b90:	898b      	ldrh	r3, [r1, #12]
 8009b92:	05db      	lsls	r3, r3, #23
 8009b94:	4605      	mov	r5, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	4616      	mov	r6, r2
 8009b9a:	d505      	bpl.n	8009ba8 <__swrite+0x1e>
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f000 f868 	bl	8009c78 <_lseek_r>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	4628      	mov	r0, r5
 8009bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	f000 b817 	b.w	8009bf0 <_write_r>

08009bc2 <__sseek>:
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bca:	f000 f855 	bl	8009c78 <_lseek_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	bf15      	itete	ne
 8009bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bde:	81a3      	strheq	r3, [r4, #12]
 8009be0:	bf18      	it	ne
 8009be2:	81a3      	strhne	r3, [r4, #12]
 8009be4:	bd10      	pop	{r4, pc}

08009be6 <__sclose>:
 8009be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bea:	f000 b813 	b.w	8009c14 <_close_r>
	...

08009bf0 <_write_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_write_r+0x20>)
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7f8 fbb3 	bl	800236a <_write>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_write_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_write_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	200004dc 	.word	0x200004dc

08009c14 <_close_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d06      	ldr	r5, [pc, #24]	; (8009c30 <_close_r+0x1c>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	602b      	str	r3, [r5, #0]
 8009c20:	f7f8 fbbf 	bl	80023a2 <_close>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_close_r+0x1a>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_close_r+0x1a>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	200004dc 	.word	0x200004dc

08009c34 <_fstat_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d07      	ldr	r5, [pc, #28]	; (8009c54 <_fstat_r+0x20>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	f7f8 fbba 	bl	80023ba <_fstat>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d102      	bne.n	8009c50 <_fstat_r+0x1c>
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	b103      	cbz	r3, 8009c50 <_fstat_r+0x1c>
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	bd38      	pop	{r3, r4, r5, pc}
 8009c52:	bf00      	nop
 8009c54:	200004dc 	.word	0x200004dc

08009c58 <_isatty_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d06      	ldr	r5, [pc, #24]	; (8009c74 <_isatty_r+0x1c>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	f7f8 fbb9 	bl	80023da <_isatty>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <_isatty_r+0x1a>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	b103      	cbz	r3, 8009c72 <_isatty_r+0x1a>
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	200004dc 	.word	0x200004dc

08009c78 <_lseek_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d07      	ldr	r5, [pc, #28]	; (8009c98 <_lseek_r+0x20>)
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	4608      	mov	r0, r1
 8009c80:	4611      	mov	r1, r2
 8009c82:	2200      	movs	r2, #0
 8009c84:	602a      	str	r2, [r5, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f7f8 fbb2 	bl	80023f0 <_lseek>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_lseek_r+0x1e>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_lseek_r+0x1e>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	200004dc 	.word	0x200004dc

08009c9c <_read_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	; (8009cbc <_read_r+0x20>)
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	602a      	str	r2, [r5, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f7f8 fb40 	bl	8002330 <_read>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_read_r+0x1e>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_read_r+0x1e>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	200004dc 	.word	0x200004dc

08009cc0 <_init>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	bf00      	nop
 8009cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc6:	bc08      	pop	{r3}
 8009cc8:	469e      	mov	lr, r3
 8009cca:	4770      	bx	lr

08009ccc <_fini>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr
