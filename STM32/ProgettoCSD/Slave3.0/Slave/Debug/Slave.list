
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008390  08008390  00018390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008690  08008690  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008690  08008690  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008690  08008690  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000294  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fb2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002530  00000000  00000000  00031052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  000343d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f126  00000000  00000000  00035120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122da  00000000  00000000  00054246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8d73  00000000  00000000  00066520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f293  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce0  00000000  00000000  0011f2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008374 	.word	0x08008374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008374 	.word	0x08008374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <DWT_Delay_Init+0x58>)
 8000c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c36:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000c56:	bf00      	nop
     __ASM volatile ("NOP");
 8000c58:	bf00      	nop
  __ASM volatile ("NOP");
 8000c5a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <DWT_Delay_Init+0x5c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000c64:	2300      	movs	r3, #0
 8000c66:	e000      	b.n	8000c6a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000c68:	2301      	movs	r3, #1
  }
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000edf0 	.word	0xe000edf0
 8000c78:	e0001000 	.word	0xe0001000

08000c7c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <delay+0x40>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c8a:	f002 fe6d 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <delay+0x44>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ca0:	bf00      	nop
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <delay+0x40>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3f8      	bcc.n	8000ca2 <delay+0x26>
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e0001000 	.word	0xe0001000
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fa6a 	bl	80021cc <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f001 fa4c 	bl	80021cc <HAL_GPIO_Init>
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DHT_Start>:


void DHT_Start (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000d40:	f7ff ff6c 	bl	8000c1c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000d44:	2120      	movs	r1, #32
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f7ff ffbb 	bl	8000cc4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f001 fbcb 	bl	80024f0 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000d5a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000d5e:	f7ff ff8d 	bl	8000c7c <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 fbc1 	bl	80024f0 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f7ff ff84 	bl	8000c7c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffc1 	bl	8000d00 <Set_Pin_Input>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000d8c:	2028      	movs	r0, #40	; 0x28
 8000d8e:	f7ff ff75 	bl	8000c7c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000d92:	2120      	movs	r1, #32
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fb92 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <DHT_Check_Response+0x40>
	{
		delay (80);
 8000da2:	2050      	movs	r0, #80	; 0x50
 8000da4:	f7ff ff6a 	bl	8000c7c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000da8:	2120      	movs	r1, #32
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f001 fb87 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <DHT_Check_Response+0x3c>
 8000db8:	2301      	movs	r3, #1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	e001      	b.n	8000dc2 <DHT_Check_Response+0x40>
		else Response = -1;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000dc2:	bf00      	nop
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fb79 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f7      	bne.n	8000dc4 <DHT_Check_Response+0x42>

	return Response;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	71bb      	strb	r3, [r7, #6]
 8000de8:	e03a      	b.n	8000e60 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000dea:	bf00      	nop
 8000dec:	2120      	movs	r1, #32
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 fb65 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f7      	beq.n	8000dec <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f7ff ff3d 	bl	8000c7c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000e02:	2120      	movs	r1, #32
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 fb5a 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	f1c3 0307 	rsb	r3, r3, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e00b      	b.n	8000e48 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000e48:	bf00      	nop
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 fb36 	bl	80024c0 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f7      	bne.n	8000e4a <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9c1      	bls.n	8000dea <DHT_Read+0xc>
	}
	return i;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000e78:	f7ff ff60 	bl	8000d3c <DHT_Start>
	Presence = DHT_Check_Response ();
 8000e7c:	f7ff ff81 	bl	8000d82 <DHT_Check_Response>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <DHT_GetData+0xc8>)
 8000e86:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000e88:	f7ff ffa9 	bl	8000dde <DHT_Read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <DHT_GetData+0xcc>)
 8000e92:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000e94:	f7ff ffa3 	bl	8000dde <DHT_Read>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <DHT_GetData+0xd0>)
 8000e9e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000ea0:	f7ff ff9d 	bl	8000dde <DHT_Read>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <DHT_GetData+0xd4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000eac:	f7ff ff97 	bl	8000dde <DHT_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <DHT_GetData+0xd8>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000eb8:	f7ff ff91 	bl	8000dde <DHT_Read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <DHT_GetData+0xdc>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <DHT_GetData+0xcc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <DHT_GetData+0xd0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <DHT_GetData+0xd4>)
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <DHT_GetData+0xd8>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d123      	bne.n	8000f2e <DHT_GetData+0xbe>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->TemperatureD = Temp_byte1;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <DHT_GetData+0xd4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->HumidityD = Rh_byte1;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <DHT_GetData+0xcc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edc3 7a02 	vstr	s15, [r3, #8]

			DHT_Data->TemperatureU = Temp_byte2;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <DHT_GetData+0xd8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->HumidityU = Rh_byte2;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <DHT_GetData+0xd0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a03 	vstr	s15, [r3, #12]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000092 	.word	0x20000092
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	2000008d 	.word	0x2000008d
 8000f44:	2000008e 	.word	0x2000008e
 8000f48:	2000008f 	.word	0x2000008f
 8000f4c:	20000090 	.word	0x20000090

08000f50 <TruncatedMean_Init>:
#include "TruncateMean.h"
void TruncatedMean_Init(TruncatedMeanData *data) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < SAMPLES; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e011      	b.n	8000f82 <TruncatedMean_Init+0x32>
    data->temperature[i] = 0;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
    data->humidity[i] = 0;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	331e      	adds	r3, #30
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES; i++) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b1d      	cmp	r3, #29
 8000f86:	ddea      	ble.n	8000f5e <TruncatedMean_Init+0xe>
  }
  data->index = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <TruncatedMean_AddSample>:

void TruncatedMean_AddSample(TruncatedMeanData *data, float temperature, float humidity) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa8:	edc7 0a01 	vstr	s1, [r7, #4]
  data->temperature[data->index] = temperature;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
  data->humidity[data->index] = humidity;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	331e      	adds	r3, #30
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
  data->index = (data->index + 1) % SAMPLES;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <TruncatedMean_AddSample+0x64>)
 8000fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fdc:	4413      	add	r3, r2
 8000fde:	1119      	asrs	r1, r3, #4
 8000fe0:	17d3      	asrs	r3, r2, #31
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	1a5b      	subs	r3, r3, r1
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	1ad1      	subs	r1, r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	88888889 	.word	0x88888889

08001004 <TruncatedMean_CalculateTemperature>:

float TruncatedMean_CalculateTemperature(TruncatedMeanData *data) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  float sum = 0;
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

  float min = data->temperature[0];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
  float max = data->temperature[0];
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	e034      	b.n	800108e <TruncatedMean_CalculateTemperature+0x8a>
    sum += data->temperature[i];
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ed97 7a05 	vldr	s14, [r7, #20]
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->temperature[i] < min) {
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ed97 7a04 	vldr	s14, [r7, #16]
 800104c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	dd05      	ble.n	8001062 <TruncatedMean_CalculateTemperature+0x5e>
      min = data->temperature[i];
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
    }
    if (data->temperature[i] > max) {
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d505      	bpl.n	8001088 <TruncatedMean_CalculateTemperature+0x84>
      max = data->temperature[i];
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b1d      	cmp	r3, #29
 8001092:	ddc7      	ble.n	8001024 <TruncatedMean_CalculateTemperature+0x20>
    }
  }
  sum -= min;
 8001094:	ed97 7a05 	vldr	s14, [r7, #20]
 8001098:	edd7 7a04 	vldr	s15, [r7, #16]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 80010a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80010bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <TruncatedMean_CalculateHumidity>:

float TruncatedMean_CalculateHumidity(TruncatedMeanData *data) {
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  float sum = 0;
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  float min = data->humidity[0];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010e4:	613b      	str	r3, [r7, #16]
  float max = data->humidity[0];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010ea:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	e039      	b.n	8001166 <TruncatedMean_CalculateHumidity+0x94>
    sum += data->humidity[i];
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	331e      	adds	r3, #30
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	edc7 7a05 	vstr	s15, [r7, #20]
    if (data->humidity[i] < min) {
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	331e      	adds	r3, #30
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed97 7a04 	vldr	s14, [r7, #16]
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd06      	ble.n	8001136 <TruncatedMean_CalculateHumidity+0x64>
      min = data->humidity[i];
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331e      	adds	r3, #30
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
    }
    if (data->humidity[i] > max) {
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	331e      	adds	r3, #30
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed97 7a03 	vldr	s14, [r7, #12]
 8001148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d506      	bpl.n	8001160 <TruncatedMean_CalculateHumidity+0x8e>
      max = data->humidity[i];
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	331e      	adds	r3, #30
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < SAMPLES; i++) {
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3301      	adds	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b1d      	cmp	r3, #29
 800116a:	ddc2      	ble.n	80010f2 <TruncatedMean_CalculateHumidity+0x20>
    }
  }
  sum -= min;
 800116c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001170:	edd7 7a04 	vldr	s15, [r7, #16]
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	edc7 7a05 	vstr	s15, [r7, #20]
  sum -= max;
 800117c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001180:	edd7 7a03 	vldr	s15, [r7, #12]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	edc7 7a05 	vstr	s15, [r7, #20]
  return sum / (SAMPLES - 2);
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001194:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001198:	eef0 7a66 	vmov.f32	s15, s13
}
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_UART_RxCpltCallback>:
char bufferH[10],bufferT[10];
char msgRx;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive_IT(&huart1, &msgRx, 1) == HAL_OK && msgRx==one) {
 80011b4:	2201      	movs	r2, #1
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <HAL_UART_RxCpltCallback+0x3c>)
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x40>)
 80011ba:	f003 f965 	bl	8004488 <HAL_UART_Receive_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <HAL_UART_RxCpltCallback+0x32>
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_UART_RxCpltCallback+0x3c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b31      	cmp	r3, #49	; 0x31
 80011ca:	d108      	bne.n	80011de <HAL_UART_RxCpltCallback+0x32>
			       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_UART_RxCpltCallback+0x44>)
 80011d4:	f001 f98c 	bl	80024f0 <HAL_GPIO_WritePin>
			       StartSystem=true;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_UART_RxCpltCallback+0x48>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]

	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200002ea 	.word	0x200002ea
 80011ec:	2000012c 	.word	0x2000012c
 80011f0:	48001000 	.word	0x48001000
 80011f4:	200002cc 	.word	0x200002cc

080011f8 <HAL_TIM_PeriodElapsedCallback>:

bool StartTx=false;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */


	if( StartSystem==true){
 8001200:	4b95      	ldr	r3, [pc, #596]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8222 	beq.w	800164e <HAL_TIM_PeriodElapsedCallback+0x456>
		//lettura dati
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001210:	4892      	ldr	r0, [pc, #584]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001212:	f001 f96d 	bl	80024f0 <HAL_GPIO_WritePin>
		   DHT_GetData(&DHT11_Data);
 8001216:	4892      	ldr	r0, [pc, #584]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001218:	f7ff fe2a 	bl	8000e70 <DHT_GetData>
			Temperature = DHT11_Data.TemperatureD +(0.1)*DHT11_Data.TemperatureU;
 800121c:	4b90      	ldr	r3, [pc, #576]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	4b8d      	ldr	r3, [pc, #564]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	a386      	add	r3, pc, #536	; (adr r3, 8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff f821 	bl	800028c <__adddf3>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc93 	bl	8000b7c <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a82      	ldr	r2, [pc, #520]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800125a:	6013      	str	r3, [r2, #0]
			Humidity =    DHT11_Data.HumidityD +(0.1)*DHT11_Data.HumidityU;
 800125c:	4b80      	ldr	r3, [pc, #512]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f96a 	bl	8000548 <__aeabi_f2d>
 8001274:	a376      	add	r3, pc, #472	; (adr r3, 8001450 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f801 	bl	800028c <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc73 	bl	8000b7c <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a73      	ldr	r2, [pc, #460]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800129a:	6013      	str	r3, [r2, #0]
		if(htim->Instance==htim16.Instance){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8174 	bne.w	8001592 <HAL_TIM_PeriodElapsedCallback+0x39a>
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
	//DHT_GetData(&DHT11_Data);
	//lettura dati
	//Temperature = DHT11_Data.TemperatureD +(0.1)*DHT11_Data.TemperatureU;
	//Humidity =    DHT11_Data.HumidityD +(0.1)*DHT11_Data.HumidityU;
	if(modo==0){
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 80f0 	bne.w	8001494 <HAL_TIM_PeriodElapsedCallback+0x29c>
            	if(i<=SAMPLES){
 80012b4:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b1e      	cmp	r3, #30
 80012ba:	dc6e      	bgt.n	800139a <HAL_TIM_PeriodElapsedCallback+0x1a2>
            			TruncatedMean_AddSample(&data,Temperature,Humidity);
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	4b69      	ldr	r3, [pc, #420]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	eef0 0a47 	vmov.f32	s1, s14
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	4869      	ldr	r0, [pc, #420]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80012d2:	f7ff fe63 	bl	8000f9c <TruncatedMean_AddSample>
            			//gcvt(Temperature, sizeof(Temperature), bufferT);
            			//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
            			//sprintf(bufferT, "\r\n");
            			//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);

						if(i==0 && StartTx==false){
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d157      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x196>
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d050      	beq.n	800138e <HAL_TIM_PeriodElapsedCallback+0x196>
							//Trasmissione Temp
							// sprintf(bufferT, "TMP:");
							//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
							  gcvt(Temperature, sizeof(Temperature), bufferT);
 80012ec:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f929 	bl	8000548 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4961      	ldr	r1, [pc, #388]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012fc:	2004      	movs	r0, #4
 80012fe:	ec43 2b10 	vmov	d0, r2, r3
 8001302:	f004 fa9b 	bl	800583c <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001306:	485e      	ldr	r0, [pc, #376]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001308:	f7fe ff62 	bl	80001d0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	495a      	ldr	r1, [pc, #360]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001316:	485b      	ldr	r0, [pc, #364]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001318:	f003 f82c 	bl	8004374 <HAL_UART_Transmit>
							   sprintf(bufferT, "+");
 800131c:	495a      	ldr	r1, [pc, #360]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800131e:	4858      	ldr	r0, [pc, #352]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001320:	f004 fae2 	bl	80058e8 <siprintf>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001324:	4856      	ldr	r0, [pc, #344]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001326:	f7fe ff53 	bl	80001d0 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	4953      	ldr	r1, [pc, #332]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001334:	4853      	ldr	r0, [pc, #332]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001336:	f003 f81d 	bl	8004374 <HAL_UART_Transmit>

							   //Trasmissione Umidità
							   //sprintf(bufferH, "HDY:");
							   //HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
							   gcvt(Humidity, sizeof(Humidity), bufferH);
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f902 	bl	8000548 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4950      	ldr	r1, [pc, #320]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800134a:	2004      	movs	r0, #4
 800134c:	ec43 2b10 	vmov	d0, r2, r3
 8001350:	f004 fa74 	bl	800583c <gcvt>
							   HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001356:	f7fe ff3b 	bl	80001d0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	494a      	ldr	r1, [pc, #296]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001364:	4847      	ldr	r0, [pc, #284]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001366:	f003 f805 	bl	8004374 <HAL_UART_Transmit>
							    sprintf(bufferH, "s");
 800136a:	4949      	ldr	r1, [pc, #292]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800136e:	f004 fabb 	bl	80058e8 <siprintf>
							     HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001372:	4846      	ldr	r0, [pc, #280]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001374:	f7fe ff2c 	bl	80001d0 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	b29a      	uxth	r2, r3
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	4942      	ldr	r1, [pc, #264]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001382:	4840      	ldr	r0, [pc, #256]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001384:	f002 fff6 	bl	8004374 <HAL_UART_Transmit>
							     StartTx=true;
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]

						}
						i++;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a37      	ldr	r2, [pc, #220]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e0fb      	b.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x39a>
            	}else{
						i=0;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
						float TmpMean= TruncatedMean_CalculateTemperature(&data);
 80013a0:	4835      	ldr	r0, [pc, #212]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80013a2:	f7ff fe2f 	bl	8001004 <TruncatedMean_CalculateTemperature>
 80013a6:	ed87 0a03 	vstr	s0, [r7, #12]
						float TmpHmdy= TruncatedMean_CalculateHumidity(&data);
 80013aa:	4833      	ldr	r0, [pc, #204]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80013ac:	f7ff fe91 	bl	80010d2 <TruncatedMean_CalculateHumidity>
 80013b0:	ed87 0a02 	vstr	s0, [r7, #8]

						//Trasmissione Temp
            			//sprintf(bufferT, "TMP:");
						//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
            			gcvt(TmpMean, sizeof(TmpMean), bufferT);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff f8c7 	bl	8000548 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4930      	ldr	r1, [pc, #192]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013c0:	2004      	movs	r0, #4
 80013c2:	ec43 2b10 	vmov	d0, r2, r3
 80013c6:	f004 fa39 	bl	800583c <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80013ca:	482d      	ldr	r0, [pc, #180]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013cc:	f7fe ff00 	bl	80001d0 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013da:	482a      	ldr	r0, [pc, #168]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80013dc:	f002 ffca 	bl	8004374 <HAL_UART_Transmit>
            			sprintf(bufferT, "+");
 80013e0:	4929      	ldr	r1, [pc, #164]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013e2:	4827      	ldr	r0, [pc, #156]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013e4:	f004 fa80 	bl	80058e8 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013ea:	f7fe fef1 	bl	80001d0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80013f8:	4822      	ldr	r0, [pc, #136]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80013fa:	f002 ffbb 	bl	8004374 <HAL_UART_Transmit>

            			//Trasmissione Umidità
            			//sprintf(bufferH, "HDY:");
            			//HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
            			gcvt(TmpHmdy, sizeof(TmpHmdy), bufferH);
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff f8a2 	bl	8000548 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4920      	ldr	r1, [pc, #128]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800140a:	2004      	movs	r0, #4
 800140c:	ec43 2b10 	vmov	d0, r2, r3
 8001410:	f004 fa14 	bl	800583c <gcvt>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001414:	481d      	ldr	r0, [pc, #116]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001416:	f7fe fedb 	bl	80001d0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001424:	4817      	ldr	r0, [pc, #92]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001426:	f002 ffa5 	bl	8004374 <HAL_UART_Transmit>
            			sprintf(bufferH, "s");
 800142a:	4919      	ldr	r1, [pc, #100]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800142e:	f004 fa5b 	bl	80058e8 <siprintf>
            			HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001434:	f7fe fecc 	bl	80001d0 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	b29a      	uxth	r2, r3
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	4912      	ldr	r1, [pc, #72]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001444:	f002 ff96 	bl	8004374 <HAL_UART_Transmit>
 8001448:	e0a3      	b.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x39a>
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	9999999a 	.word	0x9999999a
 8001454:	3fb99999 	.word	0x3fb99999
 8001458:	200002cc 	.word	0x200002cc
 800145c:	48001000 	.word	0x48001000
 8001460:	200001b4 	.word	0x200001b4
 8001464:	200002b8 	.word	0x200002b8
 8001468:	200002bc 	.word	0x200002bc
 800146c:	20000094 	.word	0x20000094
 8001470:	200002c8 	.word	0x200002c8
 8001474:	200002d0 	.word	0x200002d0
 8001478:	200001c4 	.word	0x200001c4
 800147c:	200002eb 	.word	0x200002eb
 8001480:	200002e0 	.word	0x200002e0
 8001484:	2000012c 	.word	0x2000012c
 8001488:	08008390 	.word	0x08008390
 800148c:	200002d4 	.word	0x200002d4
 8001490:	08008394 	.word	0x08008394
            	}

	}else{
					//if((Temperature!=LastTemperature)||(LastHumidity!=Humidity))
					if((Temperature!=LastTemperature)){
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d073      	beq.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x39a>
						if (Temperature - LastTemperature >= DT || LastTemperature - Temperature >= DT ) {
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	4b6a      	ldr	r3, [pc, #424]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	da0e      	bge.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 80014c8:	4b64      	ldr	r3, [pc, #400]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	db55      	blt.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x39a>
							//Trasmissione Temp
							//sprintf(bufferT, "TMP:");
							//HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
							gcvt(Temperature, sizeof(Temperature), bufferT);
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	495a      	ldr	r1, [pc, #360]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80014f6:	2004      	movs	r0, #4
 80014f8:	ec43 2b10 	vmov	d0, r2, r3
 80014fc:	f004 f99e 	bl	800583c <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 8001500:	4857      	ldr	r0, [pc, #348]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001502:	f7fe fe65 	bl	80001d0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	4954      	ldr	r1, [pc, #336]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001510:	4854      	ldr	r0, [pc, #336]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001512:	f002 ff2f 	bl	8004374 <HAL_UART_Transmit>
							sprintf(bufferT, "+");
 8001516:	4954      	ldr	r1, [pc, #336]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001518:	4851      	ldr	r0, [pc, #324]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800151a:	f004 f9e5 	bl	80058e8 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 800151e:	4850      	ldr	r0, [pc, #320]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	494c      	ldr	r1, [pc, #304]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800152e:	484d      	ldr	r0, [pc, #308]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001530:	f002 ff20 	bl	8004374 <HAL_UART_Transmit>
							//Trasmissione Umidità
							//sprintf(bufferH, "HDY:");
							//HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
							gcvt(Humidity, sizeof(Humidity), bufferH);
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	494b      	ldr	r1, [pc, #300]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001544:	2004      	movs	r0, #4
 8001546:	ec43 2b10 	vmov	d0, r2, r3
 800154a:	f004 f977 	bl	800583c <gcvt>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800154e:	4848      	ldr	r0, [pc, #288]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001550:	f7fe fe3e 	bl	80001d0 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	4944      	ldr	r1, [pc, #272]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800155e:	4841      	ldr	r0, [pc, #260]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001560:	f002 ff08 	bl	8004374 <HAL_UART_Transmit>
							sprintf(bufferH, "s");
 8001564:	4943      	ldr	r1, [pc, #268]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001566:	4842      	ldr	r0, [pc, #264]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001568:	f004 f9be 	bl	80058e8 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800156c:	4840      	ldr	r0, [pc, #256]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800156e:	f7fe fe2f 	bl	80001d0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	493d      	ldr	r1, [pc, #244]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800157e:	f002 fef9 	bl	8004374 <HAL_UART_Transmit>
							LastTemperature=Temperature;
 8001582:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a35      	ldr	r2, [pc, #212]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001588:	6013      	str	r3, [r2, #0]
							LastHumidity=Humidity;
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a3a      	ldr	r2, [pc, #232]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001590:	6013      	str	r3, [r2, #0]
					}
	}

 }

	if(htim->Instance==htim17.Instance && modo==1 && !(htim->Instance==htim16.Instance)){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d157      	bne.n	800164e <HAL_TIM_PeriodElapsedCallback+0x456>
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d153      	bne.n	800164e <HAL_TIM_PeriodElapsedCallback+0x456>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d04d      	beq.n	800164e <HAL_TIM_PeriodElapsedCallback+0x456>
								gcvt(Temperature, sizeof(Temperature), bufferT);
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffc6 	bl	8000548 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4927      	ldr	r1, [pc, #156]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015c2:	2004      	movs	r0, #4
 80015c4:	ec43 2b10 	vmov	d0, r2, r3
 80015c8:	f004 f938 	bl	800583c <gcvt>
								HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80015cc:	4824      	ldr	r0, [pc, #144]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015ce:	f7fe fdff 	bl	80001d0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	4921      	ldr	r1, [pc, #132]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80015de:	f002 fec9 	bl	8004374 <HAL_UART_Transmit>
								sprintf(bufferT, "+");
 80015e2:	4921      	ldr	r1, [pc, #132]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015e6:	f004 f97f 	bl	80058e8 <siprintf>
								HAL_UART_Transmit(&huart1, (uint8_t*)bufferT, strlen(bufferT), HAL_MAX_DELAY);
 80015ea:	481d      	ldr	r0, [pc, #116]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015ec:	f7fe fdf0 	bl	80001d0 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	4919      	ldr	r1, [pc, #100]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80015fc:	f002 feba 	bl	8004374 <HAL_UART_Transmit>
								//Trasmissione Umidità
								//sprintf(bufferH, "HDY:");
								//HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
								gcvt(Humidity, sizeof(Humidity), bufferH);
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff9f 	bl	8000548 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4918      	ldr	r1, [pc, #96]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001610:	2004      	movs	r0, #4
 8001612:	ec43 2b10 	vmov	d0, r2, r3
 8001616:	f004 f911 	bl	800583c <gcvt>
								HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800161c:	f7fe fdd8 	bl	80001d0 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	4911      	ldr	r1, [pc, #68]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800162c:	f002 fea2 	bl	8004374 <HAL_UART_Transmit>
								sprintf(bufferH, "s");
 8001630:	4910      	ldr	r1, [pc, #64]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001632:	480f      	ldr	r0, [pc, #60]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001634:	f004 f958 	bl	80058e8 <siprintf>
								HAL_UART_Transmit(&huart1, (uint8_t*)bufferH, strlen(bufferH), HAL_MAX_DELAY);
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800163a:	f7fe fdc9 	bl	80001d0 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	490a      	ldr	r1, [pc, #40]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800164a:	f002 fe93 	bl	8004374 <HAL_UART_Transmit>
	}
}

}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	200002b8 	.word	0x200002b8
 800165c:	200002c0 	.word	0x200002c0
 8001660:	200002e0 	.word	0x200002e0
 8001664:	2000012c 	.word	0x2000012c
 8001668:	08008390 	.word	0x08008390
 800166c:	200002bc 	.word	0x200002bc
 8001670:	200002d4 	.word	0x200002d4
 8001674:	08008394 	.word	0x08008394
 8001678:	200002c4 	.word	0x200002c4
 800167c:	200000e0 	.word	0x200000e0
 8001680:	200002c8 	.word	0x200002c8
 8001684:	20000094 	.word	0x20000094

08001688 <main>:
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f000 fbb0 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f882 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 f950 	bl	8001938 <MX_GPIO_Init>
  MX_TIM16_Init();
 8001698:	f000 f8ce 	bl	8001838 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800169c:	f000 f91c 	bl	80018d8 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80016a0:	f000 f8f0 	bl	8001884 <MX_TIM17_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim16);
 80016a4:	4830      	ldr	r0, [pc, #192]	; (8001768 <main+0xe0>)
 80016a6:	f002 fbb7 	bl	8003e18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <main+0xe4>)
 80016ac:	f002 fbb4 	bl	8003e18 <HAL_TIM_Base_Start_IT>
   TruncatedMean_Init(&data);
 80016b0:	482f      	ldr	r0, [pc, #188]	; (8001770 <main+0xe8>)
 80016b2:	f7ff fc4d 	bl	8000f50 <TruncatedMean_Init>
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	482d      	ldr	r0, [pc, #180]	; (8001774 <main+0xec>)
 80016be:	f000 ff17 	bl	80024f0 <HAL_GPIO_WritePin>
   HAL_UART_Receive_IT(&huart1, &msgRx, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	492c      	ldr	r1, [pc, #176]	; (8001778 <main+0xf0>)
 80016c6:	482d      	ldr	r0, [pc, #180]	; (800177c <main+0xf4>)
 80016c8:	f002 fede 	bl	8004488 <HAL_UART_Receive_IT>
   while (1)
   {
     /* USER CODE END WHILE */
 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	4828      	ldr	r0, [pc, #160]	; (8001774 <main+0xec>)
 80016d4:	f000 ff0c 	bl	80024f0 <HAL_GPIO_WritePin>



 	  	  if((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0 &&  StartSystem==true){
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d1f2      	bne.n	80016cc <main+0x44>
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <main+0xf8>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0ee      	beq.n	80016cc <main+0x44>
 	  	 		  while((GPIOA->IDR & GPIO_IDR_0) ==GPIO_IDR_0);
 80016ee:	bf00      	nop
 80016f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d0f8      	beq.n	80016f0 <main+0x68>
 	  	 		  if(modo==0){
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <main+0xfc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d117      	bne.n	8001736 <main+0xae>
 	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	4819      	ldr	r0, [pc, #100]	; (8001774 <main+0xec>)
 800170e:	f000 feef 	bl	80024f0 <HAL_GPIO_WritePin>
 	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <main+0xec>)
 800171a:	f000 fee9 	bl	80024f0 <HAL_GPIO_WritePin>
 	  	 			  modo=1;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <main+0xfc>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
 	  	 			  LastTemperature=0;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <main+0x100>)
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 	  	 			  LastHumidity=0;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <main+0x104>)
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e7ca      	b.n	80016cc <main+0x44>


 	  	 		  }else{
 	  	 			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <main+0xec>)
 800173e:	f000 fed7 	bl	80024f0 <HAL_GPIO_WritePin>
 	  	 		      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <main+0xec>)
 800174a:	f000 fed1 	bl	80024f0 <HAL_GPIO_WritePin>
 	  	 			  modo=0;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <main+0xfc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 	  	 			  i=0;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <main+0x108>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 	  	 			  TruncatedMean_Init(&data);
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <main+0xe8>)
 800175c:	f7ff fbf8 	bl	8000f50 <TruncatedMean_Init>
 	  	 			  StartTx=false;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <main+0x10c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8001766:	e7b1      	b.n	80016cc <main+0x44>
 8001768:	20000094 	.word	0x20000094
 800176c:	200000e0 	.word	0x200000e0
 8001770:	200001c4 	.word	0x200001c4
 8001774:	48001000 	.word	0x48001000
 8001778:	200002ea 	.word	0x200002ea
 800177c:	2000012c 	.word	0x2000012c
 8001780:	200002cc 	.word	0x200002cc
 8001784:	200002c8 	.word	0x200002c8
 8001788:	200002c0 	.word	0x200002c0
 800178c:	200002c4 	.word	0x200002c4
 8001790:	200002d0 	.word	0x200002d0
 8001794:	200002eb 	.word	0x200002eb

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09e      	sub	sp, #120	; 0x78
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017a2:	2228      	movs	r2, #40	; 0x28
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 f896 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	223c      	movs	r2, #60	; 0x3c
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 f888 	bl	80058d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	2310      	movs	r3, #16
 80017d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fe9f 	bl	8002520 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80017e8:	f000 f900 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017f0:	2300      	movs	r3, #0
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fec8 	bl	800359c <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001812:	f000 f8eb 	bl	80019ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001816:	2301      	movs	r3, #1
 8001818:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f8f1 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800182c:	f000 f8de 	bl	80019ec <Error_Handler>
  }
}
 8001830:	bf00      	nop
 8001832:	3778      	adds	r7, #120	; 0x78
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_TIM16_Init+0x44>)
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <MX_TIM16_Init+0x48>)
 8001840:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50000;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_TIM16_Init+0x44>)
 8001844:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001848:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_TIM16_Init+0x44>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_TIM16_Init+0x44>)
 8001852:	2264      	movs	r2, #100	; 0x64
 8001854:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_TIM16_Init+0x44>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_TIM16_Init+0x44>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_TIM16_Init+0x44>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_TIM16_Init+0x44>)
 800186a:	f002 fa7d 	bl	8003d68 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001874:	f000 f8ba 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000094 	.word	0x20000094
 8001880:	40014400 	.word	0x40014400

08001884 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_TIM17_Init+0x44>)
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <MX_TIM17_Init+0x48>)
 800188c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1011000;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_TIM17_Init+0x44>)
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <MX_TIM17_Init+0x4c>)
 8001892:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_TIM17_Init+0x44>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100000;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_TIM17_Init+0x44>)
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <MX_TIM17_Init+0x50>)
 800189e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_TIM17_Init+0x44>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_TIM17_Init+0x44>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_TIM17_Init+0x44>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_TIM17_Init+0x44>)
 80018b4:	f002 fa58 	bl	8003d68 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80018be:	f000 f895 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000e0 	.word	0x200000e0
 80018cc:	40014800 	.word	0x40014800
 80018d0:	000f6d38 	.word	0x000f6d38
 80018d4:	000186a0 	.word	0x000186a0

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <MX_USART1_UART_Init+0x5c>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x58>)
 800191c:	f002 fcdc 	bl	80042d8 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001926:	f000 f861 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000012c 	.word	0x2000012c
 8001934:	40013800 	.word	0x40013800

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	6153      	str	r3, [r2, #20]
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_GPIO_Init+0xac>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <MX_GPIO_Init+0xac>)
 800196c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <MX_GPIO_Init+0xac>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	6153      	str	r3, [r2, #20]
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_GPIO_Init+0xac>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <MX_GPIO_Init+0xb0>)
 800199e:	f000 fda7 	bl	80024f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80019a2:	2321      	movs	r3, #33	; 0x21
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f000 fc08 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019bc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019c0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_GPIO_Init+0xb0>)
 80019d6:	f000 fbf9 	bl	80021cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48001000 	.word	0x48001000

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x44>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_MspInit+0x44>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_MspInit+0x44>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_TIM_Base_MspInit+0x78>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d114      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	2019      	movs	r0, #25
 8001a70:	f000 faff 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a74:	2019      	movs	r0, #25
 8001a76:	f000 fb18 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a7a:	e018      	b.n	8001aae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_TIM_Base_MspInit+0x80>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d113      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_TIM_Base_MspInit+0x7c>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 3, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	201a      	movs	r0, #26
 8001aa4:	f000 fae5 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001aa8:	201a      	movs	r0, #26
 8001aaa:	f000 fafe 	bl	80020aa <HAL_NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40014400 	.word	0x40014400
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40014800 	.word	0x40014800

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x8c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12f      	bne.n	8001b46 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b08:	6153      	str	r3, [r2, #20]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_UART_MspInit+0x90>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b16:	2330      	movs	r3, #48	; 0x30
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b26:	2307      	movs	r3, #7
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_UART_MspInit+0x94>)
 8001b32:	f000 fb4b 	bl	80021cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2025      	movs	r0, #37	; 0x25
 8001b3c:	f000 fa99 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b40:	2025      	movs	r0, #37	; 0x25
 8001b42:	f000 fab2 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000800 	.word	0x48000800

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f968 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bb6:	f002 f999 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000094 	.word	0x20000094

08001bc4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001bca:	f002 f98f 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200000e0 	.word	0x200000e0

08001bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USART1_IRQHandler+0x10>)
 8001bde:	f002 fc97 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000012c 	.word	0x2000012c

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_kill>:

int _kill(int pid, int sig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c06:	f003 fe3d 	bl	8005884 <__errno>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe7 	bl	8001bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2e:	e7fe      	b.n	8001c2e <_exit+0x12>

08001c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00a      	b.n	8001c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c42:	f3af 8000 	nop.w
 8001c46:	4601      	mov	r1, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf0      	blt.n	8001c42 <_read+0x12>
  }

  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e009      	b.n	8001c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf1      	blt.n	8001c7c <_write+0x12>
  }
  return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_close>:

int _close(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_isatty>:

int _isatty(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f003 fda2 	bl	8005884 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000a000 	.word	0x2000a000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200002ec 	.word	0x200002ec
 8001d74:	20000308 	.word	0x20000308

08001d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da0:	f7ff ffea 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <LoopForever+0xe>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	; (8001de8 <LoopForever+0x16>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dca:	f003 fd61 	bl	8005890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dce:	f7ff fc5b 	bl	8001688 <main>

08001dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd2:	e7fe      	b.n	8001dd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dd4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001de0:	08008698 	.word	0x08008698
  ldr r2, =_sbss
 8001de4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001de8:	20000304 	.word	0x20000304

08001dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x28>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 f92b 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fdf4 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f943 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f90b 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	200002f0 	.word	0x200002f0

08001ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002f0 	.word	0x200002f0

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e020      	b.n	8002144 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020e 	bic.w	r2, r2, #14
 8002110:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e027      	b.n	80021c2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
    } 
  }
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e154      	b.n	8002486 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8146 	beq.w	8002480 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a0 	beq.w	8002480 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002358:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_GPIO_Init+0x2dc>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002382:	d019      	beq.n	80023b8 <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_GPIO_Init+0x2e0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_GPIO_Init+0x1e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x1e0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2ec>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_GPIO_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e008      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023a8:	2305      	movs	r3, #5
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e004      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b8:	2300      	movs	r3, #0
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	f002 0203 	and.w	r2, r2, #3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4093      	lsls	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ca:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_GPIO_Init+0x2dc>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023fc:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002426:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f aea3 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	48001000 	.word	0x48001000
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002526:	af00      	add	r7, sp, #0
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002530:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f001 b823 	b.w	800358c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 817d 	beq.w	8002856 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800255c:	4bbc      	ldr	r3, [pc, #752]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002568:	4bb9      	ldr	r3, [pc, #740]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d15c      	bne.n	800262e <HAL_RCC_OscConfig+0x10e>
 8002574:	4bb6      	ldr	r3, [pc, #728]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d155      	bne.n	800262e <HAL_RCC_OscConfig+0x10e>
 8002582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002586:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0x94>
 80025ae:	4ba8      	ldr	r3, [pc, #672]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e015      	b.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025dc:	4b9c      	ldr	r3, [pc, #624]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 811f 	beq.w	8002854 <HAL_RCC_OscConfig+0x334>
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8116 	bne.w	8002854 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f000 bfaf 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x12e>
 8002640:	4b83      	ldr	r3, [pc, #524]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a82      	ldr	r2, [pc, #520]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e036      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x158>
 800265e:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7b      	ldr	r2, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b79      	ldr	r3, [pc, #484]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a78      	ldr	r2, [pc, #480]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e021      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x184>
 800268a:	4b71      	ldr	r3, [pc, #452]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a70      	ldr	r2, [pc, #448]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f023 020f 	bic.w	r2, r3, #15
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	495f      	ldr	r1, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d059      	beq.n	800279a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff fbdd 	bl	8001ea4 <HAL_GetTick>
 80026ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fbd8 	bl	8001ea4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d902      	bls.n	8002706 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f000 bf43 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800271a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x218>
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x244>
 8002738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800274c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002750:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002754:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002768:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800276c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002778:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ab      	beq.n	80026f0 <HAL_RCC_OscConfig+0x1d0>
 8002798:	e05d      	b.n	8002856 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7ff fb83 	bl	8001ea4 <HAL_GetTick>
 800279e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fb7e 	bl	8001ea4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d902      	bls.n	80027ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f000 bee9 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x2cc>
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x2f8>
 80027ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002804:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002808:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800281c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002820:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002824:	fa92 f2a2 	rbit	r2, r2
 8002828:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800282c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ab      	bne.n	80027a4 <HAL_RCC_OscConfig+0x284>
 800284c:	e003      	b.n	8002856 <HAL_RCC_OscConfig+0x336>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 817d 	beq.w	8002b66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800286c:	4ba6      	ldr	r3, [pc, #664]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002878:	4ba3      	ldr	r3, [pc, #652]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d172      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002884:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d16c      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3a0>
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e013      	b.n	80028e8 <HAL_RCC_OscConfig+0x3c8>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028e4:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	2202      	movs	r2, #2
 80028ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCC_OscConfig+0x410>
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d002      	beq.n	8002930 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f000 be2e 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	21f8      	movs	r1, #248	; 0xf8
 8002946:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002956:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800295a:	fab1 f181 	clz	r1, r1
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	4969      	ldr	r1, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002968:	e0fd      	b.n	8002b66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8088 	beq.w	8002a8c <HAL_RCC_OscConfig+0x56c>
 800297c:	2301      	movs	r3, #1
 800297e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800298e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800299c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	461a      	mov	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fa7c 	bl	8001ea4 <HAL_GetTick>
 80029ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b2:	f7ff fa77 	bl	8001ea4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	f000 bde2 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4d8>
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e013      	b.n	8002a20 <HAL_RCC_OscConfig+0x500>
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2202      	movs	r2, #2
 8002a22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0af      	beq.n	80029b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	21f8      	movs	r1, #248	; 0xf8
 8002a68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a70:	fa91 f1a1 	rbit	r1, r1
 8002a74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a7c:	fab1 f181 	clz	r1, r1
 8002a80:	b2c9      	uxtb	r1, r1
 8002a82:	408b      	lsls	r3, r1
 8002a84:	4920      	ldr	r1, [pc, #128]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
 8002a8a:	e06c      	b.n	8002b66 <HAL_RCC_OscConfig+0x646>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f9f4 	bl	8001ea4 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f9ef 	bl	8001ea4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f000 bd5a 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d104      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5ec>
 8002b02:	4b01      	ldr	r3, [pc, #4]	; (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_OscConfig+0x614>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b30:	4bc8      	ldr	r3, [pc, #800]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b3e:	fa92 f2a2 	rbit	r2, r2
 8002b42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ad      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8110 	beq.w	8002d9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d079      	beq.n	8002c80 <HAL_RCC_OscConfig+0x760>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4bab      	ldr	r3, [pc, #684]	; (8002e58 <HAL_RCC_OscConfig+0x938>)
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f975 	bl	8001ea4 <HAL_GetTick>
 8002bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f970 	bl	8001ea4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 bcdb 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c30:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	6019      	str	r1, [r3, #0]
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f1a3 	rbit	r1, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c56:	6019      	str	r1, [r3, #0]
  return result;
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0a0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x6a0>
 8002c7e:	e08d      	b.n	8002d9c <HAL_RCC_OscConfig+0x87c>
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ca2:	601a      	str	r2, [r3, #0]
  return result;
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x938>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff f8ef 	bl	8001ea4 <HAL_GetTick>
 8002cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7ff f8ea 	bl	8001ea4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	f000 bc55 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d32:	2202      	movs	r2, #2
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	6019      	str	r1, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f1a3 	rbit	r1, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d74:	6019      	str	r1, [r3, #0]
  return result;
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d197      	bne.n	8002ccc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 81a1 	beq.w	80030f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002dea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff f84b 	bl	8001ea4 <HAL_GetTick>
 8002e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7ff f846 	bl	8001ea4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e3b1      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_OscConfig+0x940>
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e03c      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	10908120 	.word	0x10908120
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x96a>
 8002e70:	4bc1      	ldr	r3, [pc, #772]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4ac0      	ldr	r2, [pc, #768]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	4bbe      	ldr	r3, [pc, #760]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4abd      	ldr	r2, [pc, #756]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e020      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x994>
 8002e9a:	4bb7      	ldr	r3, [pc, #732]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4ab6      	ldr	r2, [pc, #728]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4bb4      	ldr	r3, [pc, #720]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4ab3      	ldr	r2, [pc, #716]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4aaf      	ldr	r2, [pc, #700]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4bad      	ldr	r3, [pc, #692]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4aac      	ldr	r2, [pc, #688]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8081 	beq.w	8002fe0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7fe ffe1 	bl	8001ea4 <HAL_GetTick>
 8002ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe ffdc 	bl	8001ea4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e345      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f46:	601a      	str	r2, [r3, #0]
  return result;
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0xa4c>
 8002f66:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	e013      	b.n	8002f94 <HAL_RCC_OscConfig+0xa74>
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	6011      	str	r1, [r2, #0]
 8002fa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fa92 f1a2 	rbit	r1, r2
 8002fae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fb6:	6011      	str	r1, [r2, #0]
  return result;
 8002fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d084      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x9c8>
 8002fde:	e07f      	b.n	80030e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe ff60 	bl	8001ea4 <HAL_GetTick>
 8002fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe ff5b 	bl	8001ea4 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2c4      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0xb4e>
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0xb76>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800309e:	2102      	movs	r1, #2
 80030a0:	6011      	str	r1, [r2, #0]
 80030a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	fa92 f1a2 	rbit	r1, r2
 80030b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030b8:	6011      	str	r1, [r2, #0]
  return result;
 80030ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f002 021f 	and.w	r2, r2, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d184      	bne.n	8002fea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8242 	beq.w	800358a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_OscConfig+0xc58>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	f000 8213 	beq.w	800353a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 8162 	bne.w	80033ea <HAL_RCC_OscConfig+0xeca>
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800312e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003154:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fe9a 	bl	8001ea4 <HAL_GetTick>
 8003170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003174:	e00c      	b.n	8003190 <HAL_RCC_OscConfig+0xc70>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fe92 	bl	8001ea4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1fd      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031b4:	601a      	str	r2, [r3, #0]
  return result;
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <HAL_RCC_OscConfig+0xcba>
 80031d4:	4bb0      	ldr	r3, [pc, #704]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	e027      	b.n	800322a <HAL_RCC_OscConfig+0xd0a>
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b9c      	ldr	r3, [pc, #624]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003232:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003236:	6011      	str	r1, [r2, #0]
 8003238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	fa92 f1a2 	rbit	r1, r2
 8003246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800324e:	6011      	str	r1, [r2, #0]
  return result;
 8003250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003254:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	fab2 f282 	clz	r2, r2
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f042 0220 	orr.w	r2, r2, #32
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f002 021f 	and.w	r2, r2, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d182      	bne.n	800317c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	430b      	orrs	r3, r1
 8003298:	497f      	ldr	r1, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032c2:	601a      	str	r2, [r3, #0]
  return result;
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	2301      	movs	r3, #1
 80032e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fdde 	bl	8001ea4 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	e009      	b.n	8003302 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fdd9 	bl	8001ea4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e144      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800330a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003326:	601a      	str	r2, [r3, #0]
  return result;
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003330:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0xe2c>
 8003346:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e027      	b.n	800339c <HAL_RCC_OscConfig+0xe7c>
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800337a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	fa92 f1a2 	rbit	r1, r2
 80033b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033c0:	6011      	str	r1, [r2, #0]
  return result;
 80033c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d082      	beq.n	80032ee <HAL_RCC_OscConfig+0xdce>
 80033e8:	e0cf      	b.n	800358a <HAL_RCC_OscConfig+0x106a>
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003418:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fd38 	bl	8001ea4 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003438:	e009      	b.n	800344e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe fd33 	bl	8001ea4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e09e      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003472:	601a      	str	r2, [r3, #0]
  return result;
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800347c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d104      	bne.n	800349c <HAL_RCC_OscConfig+0xf7c>
 8003492:	4b01      	ldr	r3, [pc, #4]	; (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e029      	b.n	80034ec <HAL_RCC_OscConfig+0xfcc>
 8003498:	40021000 	.word	0x40021000
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_OscConfig+0x1078>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	fa92 f1a2 	rbit	r1, r2
 8003508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003510:	6011      	str	r1, [r2, #0]
  return result;
 8003512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003516:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f042 0220 	orr.w	r2, r2, #32
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d180      	bne.n	800343a <HAL_RCC_OscConfig+0xf1a>
 8003538:	e027      	b.n	800358a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e01e      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_OscConfig+0x1078>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003556:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800355a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	429a      	cmp	r2, r3
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800356e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b09e      	sub	sp, #120	; 0x78
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e162      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b90      	ldr	r3, [pc, #576]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	498b      	ldr	r1, [pc, #556]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e14a      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b82      	ldr	r3, [pc, #520]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	497f      	ldr	r1, [pc, #508]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80dc 	beq.w	80037c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13c      	bne.n	8003692 <HAL_RCC_ClockConfig+0xf6>
 8003618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_RCC_ClockConfig+0xa6>
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e00f      	b.n	8003662 <HAL_RCC_ClockConfig+0xc6>
 8003642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	667b      	str	r3, [r7, #100]	; 0x64
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003666:	65ba      	str	r2, [r7, #88]	; 0x58
 8003668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d17b      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0f3      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d13c      	bne.n	8003714 <HAL_RCC_ClockConfig+0x178>
 800369a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x128>
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e00f      	b.n	80036e4 <HAL_RCC_ClockConfig+0x148>
 80036c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13a      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b2      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 8003714:	2302      	movs	r3, #2
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_ClockConfig+0x1a0>
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e00d      	b.n	8003758 <HAL_RCC_ClockConfig+0x1bc>
 800373c:	2302      	movs	r3, #2
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	2302      	movs	r3, #2
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	61ba      	str	r2, [r7, #24]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	617a      	str	r2, [r7, #20]
  return result;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f042 0220 	orr.w	r2, r2, #32
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e079      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	491a      	ldr	r1, [pc, #104]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe fb84 	bl	8001ea4 <HAL_GetTick>
 800379c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fb80 	bl	8001ea4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e061      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d214      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4906      	ldr	r1, [pc, #24]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e040      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	491a      	ldr	r1, [pc, #104]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4912      	ldr	r1, [pc, #72]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800383e:	f000 f829 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	22f0      	movs	r2, #240	; 0xf0
 800384e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	40d3      	lsrs	r3, r2
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x2ec>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	fa21 f303 	lsr.w	r3, r1, r3
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_RCC_ClockConfig+0x2f0>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCC_ClockConfig+0x2f4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fad2 	bl	8001e1c <HAL_InitTick>
  
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3778      	adds	r7, #120	; 0x78
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	08008398 	.word	0x08008398
 800388c:	20000000 	.word	0x20000000
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x30>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x36>
 80038c2:	e03c      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	e03c      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	fa92 f2a2 	rbit	r2, r2
 80038dc:	607a      	str	r2, [r7, #4]
  return result;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	40d3      	lsrs	r3, r2
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	220f      	movs	r2, #15
 80038f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	60fa      	str	r2, [r7, #12]
  return result;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_RCC_GetSysClockFreq+0xcc>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	e004      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	623b      	str	r3, [r7, #32]
      break;
 800393c:	e002      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003940:	623b      	str	r3, [r7, #32]
      break;
 8003942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003944:	6a3b      	ldr	r3, [r7, #32]
}
 8003946:	4618      	mov	r0, r3
 8003948:	372c      	adds	r7, #44	; 0x2c
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	007a1200 	.word	0x007a1200
 800395c:	080083b0 	.word	0x080083b0
 8003960:	080083c0 	.word	0x080083c0
 8003964:	003d0900 	.word	0x003d0900

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000000 	.word	0x20000000

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003986:	f7ff ffef 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 800398a:	4601      	mov	r1, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003994:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003998:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	fa92 f2a2 	rbit	r2, r2
 80039a0:	603a      	str	r2, [r7, #0]
  return result;
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	40d3      	lsrs	r3, r2
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	080083a8 	.word	0x080083a8

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039ca:	f7ff ffcd 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039ce:	4601      	mov	r1, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	fa92 f2a2 	rbit	r2, r2
 80039e4:	603a      	str	r2, [r7, #0]
  return result;
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	fab2 f282 	clz	r2, r2
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	40d3      	lsrs	r3, r2
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	080083a8 	.word	0x080083a8

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b092      	sub	sp, #72	; 0x48
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80d4 	beq.w	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2c:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10e      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	61d3      	str	r3, [r2, #28]
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fa19 	bl	8001ea4 <HAL_GetTick>
 8003a72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe fa15 	bl	8001ea4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e169      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8084 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d07c      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	461a      	mov	r2, r3
 8003b02:	2300      	movs	r3, #0
 8003b04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe f9c5 	bl	8001ea4 <HAL_GetTick>
 8003b1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe f9c1 	bl	8001ea4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e113      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b34:	2302      	movs	r3, #2
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	2302      	movs	r3, #2
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d108      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b62:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	e00d      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	10908100 	.word	0x10908100
 8003b74:	2302      	movs	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	2202      	movs	r2, #2
 8003b86:	613a      	str	r2, [r7, #16]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	fa92 f2a2 	rbit	r2, r2
 8003b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0b7      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	496a      	ldr	r1, [pc, #424]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be0:	4b60      	ldr	r3, [pc, #384]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f023 0203 	bic.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	495d      	ldr	r1, [pc, #372]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bfe:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4956      	ldr	r1, [pc, #344]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c1c:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	494e      	ldr	r1, [pc, #312]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4947      	ldr	r1, [pc, #284]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c58:	4b42      	ldr	r3, [pc, #264]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	493f      	ldr	r1, [pc, #252]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c76:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f023 0220 	bic.w	r2, r3, #32
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4938      	ldr	r1, [pc, #224]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c94:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4930      	ldr	r1, [pc, #192]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	4929      	ldr	r1, [pc, #164]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4921      	ldr	r1, [pc, #132]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	491a      	ldr	r1, [pc, #104]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d0c:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	4912      	ldr	r1, [pc, #72]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	490b      	ldr	r1, [pc, #44]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3748      	adds	r7, #72	; 0x48
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e049      	b.n	8003e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd fe56 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 f9e8 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e04a      	b.n	8003ec6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d115      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d015      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xaa>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d011      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	e008      	b.n	8003ec2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40013400 	.word	0x40013400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	00010007 	.word	0x00010007

08003eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d122      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d11b      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0202 	mvn.w	r2, #2
 8003f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f905 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8f7 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f908 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d122      	bne.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d11b      	bne.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0204 	mvn.w	r2, #4
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8db 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8cd 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8de 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d122      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0208 	mvn.w	r2, #8
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8b1 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8a3 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8b4 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2208      	movs	r2, #8
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f887 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f879 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f88a 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0201 	mvn.w	r2, #1
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f8c4 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f90a 	bl	80042b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040aa:	d10e      	bne.n	80040ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8fd 	bl	80042c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d10e      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f838 	bl	8004166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b20      	cmp	r3, #32
 8004102:	d10e      	bne.n	8004122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b20      	cmp	r3, #32
 8004110:	d107      	bne.n	8004122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0220 	mvn.w	r2, #32
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8bd 	bl	800429c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <TIM_Base_SetConfig+0x104>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00f      	beq.n	80041b4 <TIM_Base_SetConfig+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d00b      	beq.n	80041b4 <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <TIM_Base_SetConfig+0x108>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0x38>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a38      	ldr	r2, [pc, #224]	; (8004288 <TIM_Base_SetConfig+0x10c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0x38>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a37      	ldr	r2, [pc, #220]	; (800428c <TIM_Base_SetConfig+0x110>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <TIM_Base_SetConfig+0x104>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01b      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d017      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <TIM_Base_SetConfig+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <TIM_Base_SetConfig+0x10c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a28      	ldr	r2, [pc, #160]	; (800428c <TIM_Base_SetConfig+0x110>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a27      	ldr	r2, [pc, #156]	; (8004290 <TIM_Base_SetConfig+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <TIM_Base_SetConfig+0x118>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <TIM_Base_SetConfig+0x11c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <TIM_Base_SetConfig+0x104>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00f      	beq.n	8004264 <TIM_Base_SetConfig+0xe8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <TIM_Base_SetConfig+0x110>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_Base_SetConfig+0xe8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <TIM_Base_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_Base_SetConfig+0xe8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <TIM_Base_SetConfig+0x118>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_Base_SetConfig+0xe8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <TIM_Base_SetConfig+0x11c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d103      	bne.n	800426c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	615a      	str	r2, [r3, #20]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e040      	b.n	800436c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fbe2 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fc00 	bl	8004b1c <UART_SetConfig>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e022      	b.n	800436c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fdc8 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fe4f 	bl	8005008 <UART_CheckIdleState>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004388:	2b20      	cmp	r3, #32
 800438a:	d178      	bne.n	800447e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_UART_Transmit+0x24>
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e071      	b.n	8004480 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	; 0x21
 80043a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043aa:	f7fd fd7b 	bl	8001ea4 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d108      	bne.n	80043dc <HAL_UART_Transmit+0x68>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e003      	b.n	80043e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043e4:	e030      	b.n	8004448 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 feb1 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e03c      	b.n	8004480 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004418:	b292      	uxth	r2, r2
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	3302      	adds	r3, #2
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e008      	b.n	8004436 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b292      	uxth	r2, r2
 800442e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1c8      	bne.n	80043e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fe7a 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e005      	b.n	8004480 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449c:	2b20      	cmp	r3, #32
 800449e:	d132      	bne.n	8004506 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Receive_IT+0x24>
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e02b      	b.n	8004508 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	613b      	str	r3, [r7, #16]
   return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	69f9      	ldr	r1, [r7, #28]
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fe93 	bl	8005228 <UART_Start_Receive_IT>
 8004502:	4603      	mov	r3, r0
 8004504:	e000      	b.n	8004508 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	; 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800453a:	f640 030f 	movw	r3, #2063	; 0x80f
 800453e:	4013      	ands	r3, r2
 8004540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d115      	bne.n	8004578 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00f      	beq.n	8004578 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 82ab 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      }
      return;
 8004576:	e2a5      	b.n	8004ac4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8117 	beq.w	80047b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800458e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004592:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <HAL_UART_IRQHandler+0x298>)
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 810a 	beq.w	80047b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d011      	beq.n	80045cc <HAL_UART_IRQHandler+0xbc>
 80045a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d011      	beq.n	80045fc <HAL_UART_IRQHandler+0xec>
 80045d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2202      	movs	r2, #2
 80045ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d011      	beq.n	800462c <HAL_UART_IRQHandler+0x11c>
 8004608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2204      	movs	r2, #4
 800461a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	f043 0202 	orr.w	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004648:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	f043 0208 	orr.w	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_UART_IRQHandler+0x18a>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8211 	beq.w	8004ac8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d005      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04f      	beq.n	8004792 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fe4c 	bl	8005390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d141      	bne.n	800478a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800471c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004732:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800473e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800474a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1d9      	bne.n	8004706 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_UART_IRQHandler+0x29c>)
 8004760:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fcf2 	bl	8002150 <HAL_DMA_Abort_IT>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d017      	beq.n	80047a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800477c:	4610      	mov	r0, r2
 800477e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	e00f      	b.n	80047a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9b4 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	e00b      	b.n	80047a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9b0 	bl	8004af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	e007      	b.n	80047a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9ac 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047a0:	e192      	b.n	8004ac8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a2:	bf00      	nop
    return;
 80047a4:	e190      	b.n	8004ac8 <HAL_UART_IRQHandler+0x5b8>
 80047a6:	bf00      	nop
 80047a8:	04000120 	.word	0x04000120
 80047ac:	08005459 	.word	0x08005459

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 814b 	bne.w	8004a50 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8144 	beq.w	8004a50 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 813d 	beq.w	8004a50 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	f040 80b5 	bne.w	8004958 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8164 	beq.w	8004acc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800480a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800480e:	429a      	cmp	r2, r3
 8004810:	f080 815c 	bcs.w	8004acc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b20      	cmp	r3, #32
 8004826:	f000 8086 	beq.w	8004936 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800483e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004854:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004858:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004860:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800486c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1da      	bne.n	800482a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004898:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800489c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e1      	bne.n	8004874 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004906:	f023 0310 	bic.w	r3, r3, #16
 800490a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004918:	65bb      	str	r3, [r7, #88]	; 0x58
 800491a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800491e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e4      	bne.n	80048f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd fbd4 	bl	80020de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004948:	b29b      	uxth	r3, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	b29b      	uxth	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8d7 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004956:	e0b9      	b.n	8004acc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004964:	b29b      	uxth	r3, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80ab 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800497a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a6 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e4      	bne.n	8004984 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049de:	633a      	str	r2, [r7, #48]	; 0x30
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	617b      	str	r3, [r7, #20]
   return(result);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e4      	bne.n	8004a06 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f85b 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a4e:	e03f      	b.n	8004ad0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <HAL_UART_IRQHandler+0x56a>
 8004a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fed8 	bl	8005828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a78:	e02d      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01c      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
    }
    return;
 8004aa2:	e017      	b.n	8004ad4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fce1 	bl	8005484 <UART_EndTransmit_IT>
    return;
 8004ac2:	e008      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ac4:	bf00      	nop
 8004ac6:	e006      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ac8:	bf00      	nop
 8004aca:	e004      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004acc:	bf00      	nop
 8004ace:	e002      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ad4:	bf00      	nop
  }

}
 8004ad6:	37e8      	adds	r7, #232	; 0xe8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b4a:	f023 030c 	bic.w	r3, r3, #12
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4aa7      	ldr	r2, [pc, #668]	; (8004e34 <UART_SetConfig+0x318>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0xc2>
 8004b9c:	4ba6      	ldr	r3, [pc, #664]	; (8004e38 <UART_SetConfig+0x31c>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d817      	bhi.n	8004bd8 <UART_SetConfig+0xbc>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x94>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004bc7 	.word	0x08004bc7
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e0b5      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e0b2      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e0af      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e0ac      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0a9      	b.n	8004d32 <UART_SetConfig+0x216>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a96      	ldr	r2, [pc, #600]	; (8004e3c <UART_SetConfig+0x320>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d124      	bne.n	8004c32 <UART_SetConfig+0x116>
 8004be8:	4b93      	ldr	r3, [pc, #588]	; (8004e38 <UART_SetConfig+0x31c>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf4:	d011      	beq.n	8004c1a <UART_SetConfig+0xfe>
 8004bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bfa:	d817      	bhi.n	8004c2c <UART_SetConfig+0x110>
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c00:	d011      	beq.n	8004c26 <UART_SetConfig+0x10a>
 8004c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c06:	d811      	bhi.n	8004c2c <UART_SetConfig+0x110>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <UART_SetConfig+0xf8>
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d006      	beq.n	8004c20 <UART_SetConfig+0x104>
 8004c12:	e00b      	b.n	8004c2c <UART_SetConfig+0x110>
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e08b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e088      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c20:	2304      	movs	r3, #4
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e085      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c26:	2308      	movs	r3, #8
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e082      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e07f      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a82      	ldr	r2, [pc, #520]	; (8004e40 <UART_SetConfig+0x324>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d124      	bne.n	8004c86 <UART_SetConfig+0x16a>
 8004c3c:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <UART_SetConfig+0x31c>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c48:	d011      	beq.n	8004c6e <UART_SetConfig+0x152>
 8004c4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c4e:	d817      	bhi.n	8004c80 <UART_SetConfig+0x164>
 8004c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c54:	d011      	beq.n	8004c7a <UART_SetConfig+0x15e>
 8004c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c5a:	d811      	bhi.n	8004c80 <UART_SetConfig+0x164>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x14c>
 8004c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c64:	d006      	beq.n	8004c74 <UART_SetConfig+0x158>
 8004c66:	e00b      	b.n	8004c80 <UART_SetConfig+0x164>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e061      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e05e      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e05b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e058      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e055      	b.n	8004d32 <UART_SetConfig+0x216>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <UART_SetConfig+0x328>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d124      	bne.n	8004cda <UART_SetConfig+0x1be>
 8004c90:	4b69      	ldr	r3, [pc, #420]	; (8004e38 <UART_SetConfig+0x31c>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9c:	d011      	beq.n	8004cc2 <UART_SetConfig+0x1a6>
 8004c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ca2:	d817      	bhi.n	8004cd4 <UART_SetConfig+0x1b8>
 8004ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca8:	d011      	beq.n	8004cce <UART_SetConfig+0x1b2>
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cae:	d811      	bhi.n	8004cd4 <UART_SetConfig+0x1b8>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <UART_SetConfig+0x1a0>
 8004cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb8:	d006      	beq.n	8004cc8 <UART_SetConfig+0x1ac>
 8004cba:	e00b      	b.n	8004cd4 <UART_SetConfig+0x1b8>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e037      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e034      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e031      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e02e      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e02b      	b.n	8004d32 <UART_SetConfig+0x216>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5a      	ldr	r2, [pc, #360]	; (8004e48 <UART_SetConfig+0x32c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d124      	bne.n	8004d2e <UART_SetConfig+0x212>
 8004ce4:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <UART_SetConfig+0x31c>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf0:	d011      	beq.n	8004d16 <UART_SetConfig+0x1fa>
 8004cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf6:	d817      	bhi.n	8004d28 <UART_SetConfig+0x20c>
 8004cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfc:	d011      	beq.n	8004d22 <UART_SetConfig+0x206>
 8004cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d02:	d811      	bhi.n	8004d28 <UART_SetConfig+0x20c>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x1f4>
 8004d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0c:	d006      	beq.n	8004d1c <UART_SetConfig+0x200>
 8004d0e:	e00b      	b.n	8004d28 <UART_SetConfig+0x20c>
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e00a      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e007      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e004      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e001      	b.n	8004d32 <UART_SetConfig+0x216>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d15b      	bne.n	8004df4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d827      	bhi.n	8004d92 <UART_SetConfig+0x276>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x22c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	08004d83 	.word	0x08004d83
 8004d5c:	08004d93 	.word	0x08004d93
 8004d60:	08004d93 	.word	0x08004d93
 8004d64:	08004d93 	.word	0x08004d93
 8004d68:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fe fe08 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004d70:	61b8      	str	r0, [r7, #24]
        break;
 8004d72:	e013      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7fe fe26 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d7c:	4b33      	ldr	r3, [pc, #204]	; (8004e4c <UART_SetConfig+0x330>)
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e00c      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d82:	f7fe fd87 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8004d86:	61b8      	str	r0, [r7, #24]
        break;
 8004d88:	e008      	b.n	8004d9c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e004      	b.n	8004d9c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8082 	beq.w	8004ea8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d916      	bls.n	8004dee <UART_SetConfig+0x2d2>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d212      	bcs.n	8004dee <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f023 030f 	bic.w	r3, r3, #15
 8004dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	89fa      	ldrh	r2, [r7, #14]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e05c      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	77bb      	strb	r3, [r7, #30]
 8004df2:	e059      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d835      	bhi.n	8004e66 <UART_SetConfig+0x34a>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x2e4>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e67 	.word	0x08004e67
 8004e10:	08004e57 	.word	0x08004e57
 8004e14:	08004e67 	.word	0x08004e67
 8004e18:	08004e67 	.word	0x08004e67
 8004e1c:	08004e67 	.word	0x08004e67
 8004e20:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fdac 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e021      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fe fdca 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e01d      	b.n	8004e70 <UART_SetConfig+0x354>
 8004e34:	40013800 	.word	0x40013800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40004800 	.word	0x40004800
 8004e44:	40004c00 	.word	0x40004c00
 8004e48:	40005000 	.word	0x40005000
 8004e4c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <UART_SetConfig+0x3a4>)
 8004e52:	61bb      	str	r3, [r7, #24]
        break;
 8004e54:	e00c      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fe fd1d 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61b8      	str	r0, [r7, #24]
        break;
 8004e5c:	e008      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	61bb      	str	r3, [r7, #24]
        break;
 8004e64:	e004      	b.n	8004e70 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085a      	lsrs	r2, r3, #1
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d909      	bls.n	8004ea4 <UART_SetConfig+0x388>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d205      	bcs.n	8004ea4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	e001      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	; 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc ff44 	bl	8001ea4 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12e      	bne.n	800508a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d021      	beq.n	800508a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e062      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d149      	bne.n	800512c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f856 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	617b      	str	r3, [r7, #20]
   return(result);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3758      	adds	r7, #88	; 0x58
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e049      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d045      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fc fe97 	bl	8001ea4 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e048      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d110      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f8ed 	bl	8005390 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2208      	movs	r2, #8
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e029      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d111      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f8d3 	bl	8005390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e00f      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	429a      	cmp	r2, r3
 800521a:	d0a6      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005228:	b480      	push	{r7}
 800522a:	b097      	sub	sp, #92	; 0x5c
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d10e      	bne.n	800527a <UART_Start_Receive_IT+0x52>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <UART_Start_Receive_IT+0x48>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f240 12ff 	movw	r2, #511	; 0x1ff
 800526a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800526e:	e01a      	b.n	80052a6 <UART_Start_Receive_IT+0x7e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	; 0xff
 8005274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005278:	e015      	b.n	80052a6 <UART_Start_Receive_IT+0x7e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <UART_Start_Receive_IT+0x76>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <UART_Start_Receive_IT+0x6c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005292:	e008      	b.n	80052a6 <UART_Start_Receive_IT+0x7e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	227f      	movs	r2, #127	; 0x7f
 8005298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800529c:	e003      	b.n	80052a6 <UART_Start_Receive_IT+0x7e>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2222      	movs	r2, #34	; 0x22
 80052b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	657b      	str	r3, [r7, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	d107      	bne.n	8005304 <UART_Start_Receive_IT+0xdc>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <UART_Start_Receive_IT+0x160>)
 8005300:	669a      	str	r2, [r3, #104]	; 0x68
 8005302:	e002      	b.n	800530a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a21      	ldr	r2, [pc, #132]	; (800538c <UART_Start_Receive_IT+0x164>)
 8005308:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d019      	beq.n	8005346 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_Start_Receive_IT+0xea>
 8005344:	e018      	b.n	8005378 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f043 0320 	orr.w	r3, r3, #32
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	61bb      	str	r3, [r7, #24]
   return(result);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	375c      	adds	r7, #92	; 0x5c
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	08005681 	.word	0x08005681
 800538c:	080054d9 	.word	0x080054d9

08005390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b095      	sub	sp, #84	; 0x54
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
 80053b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005402:	2b01      	cmp	r3, #1
 8005404:	d118      	bne.n	8005438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	647b      	str	r3, [r7, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800544c:	bf00      	nop
 800544e:	3754      	adds	r7, #84	; 0x54
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fb3a 	bl	8004af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fb06 	bl	8004adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d0:	bf00      	nop
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b09c      	sub	sp, #112	; 0x70
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f0:	2b22      	cmp	r3, #34	; 0x22
 80054f2:	f040 80b9 	bne.w	8005668 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005500:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005504:	b2d9      	uxtb	r1, r3
 8005506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	400a      	ands	r2, r1
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 809c 	bne.w	8005678 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800554e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005554:	66bb      	str	r3, [r7, #104]	; 0x68
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800555e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800556c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	667b      	str	r3, [r7, #100]	; 0x64
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005592:	647a      	str	r2, [r7, #68]	; 0x44
 8005594:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d018      	beq.n	80055fa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	623b      	str	r3, [r7, #32]
   return(result);
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055dc:	663b      	str	r3, [r7, #96]	; 0x60
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e6:	633b      	str	r3, [r7, #48]	; 0x30
 80055e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d12e      	bne.n	8005660 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60fb      	str	r3, [r7, #12]
   return(result);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	69b9      	ldr	r1, [r7, #24]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	617b      	str	r3, [r7, #20]
   return(result);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b10      	cmp	r3, #16
 8005646:	d103      	bne.n	8005650 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2210      	movs	r2, #16
 800564e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fa53 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800565e:	e00b      	b.n	8005678 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fb fda3 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 8005666:	e007      	b.n	8005678 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]
}
 8005678:	bf00      	nop
 800567a:	3770      	adds	r7, #112	; 0x70
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b09c      	sub	sp, #112	; 0x70
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800568e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005698:	2b22      	cmp	r3, #34	; 0x22
 800569a:	f040 80b9 	bne.w	8005810 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80056b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056b6:	4013      	ands	r3, r2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 809c 	bne.w	8005820 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
 8005708:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800570c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	663b      	str	r3, [r7, #96]	; 0x60
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800573a:	643a      	str	r2, [r7, #64]	; 0x40
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	61fb      	str	r3, [r7, #28]
   return(result);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005790:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d12e      	bne.n	8005808 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6979      	ldr	r1, [r7, #20]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	613b      	str	r3, [r7, #16]
   return(result);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d103      	bne.n	80057f8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2210      	movs	r2, #16
 80057f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff f97f 	bl	8004b04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005806:	e00b      	b.n	8005820 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fccf 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 800580e:	e007      	b.n	8005820 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	619a      	str	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	3770      	adds	r7, #112	; 0x70
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <gcvt>:
 800583c:	b530      	push	{r4, r5, lr}
 800583e:	2200      	movs	r2, #0
 8005840:	b085      	sub	sp, #20
 8005842:	460c      	mov	r4, r1
 8005844:	4605      	mov	r5, r0
 8005846:	2300      	movs	r3, #0
 8005848:	ec51 0b10 	vmov	r0, r1, d0
 800584c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005850:	f7fb f944 	bl	8000adc <__aeabi_dcmplt>
 8005854:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005858:	4622      	mov	r2, r4
 800585a:	b118      	cbz	r0, 8005864 <gcvt+0x28>
 800585c:	232d      	movs	r3, #45	; 0x2d
 800585e:	f802 3b01 	strb.w	r3, [r2], #1
 8005862:	3d01      	subs	r5, #1
 8005864:	2300      	movs	r3, #0
 8005866:	4806      	ldr	r0, [pc, #24]	; (8005880 <gcvt+0x44>)
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4629      	mov	r1, r5
 800586c:	2367      	movs	r3, #103	; 0x67
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f000 f8d2 	bl	8005a18 <_gcvt>
 8005874:	2800      	cmp	r0, #0
 8005876:	bf14      	ite	ne
 8005878:	4620      	movne	r0, r4
 800587a:	2000      	moveq	r0, #0
 800587c:	b005      	add	sp, #20
 800587e:	bd30      	pop	{r4, r5, pc}
 8005880:	2000000c 	.word	0x2000000c

08005884 <__errno>:
 8005884:	4b01      	ldr	r3, [pc, #4]	; (800588c <__errno+0x8>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	2000000c 	.word	0x2000000c

08005890 <__libc_init_array>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4d0d      	ldr	r5, [pc, #52]	; (80058c8 <__libc_init_array+0x38>)
 8005894:	4c0d      	ldr	r4, [pc, #52]	; (80058cc <__libc_init_array+0x3c>)
 8005896:	1b64      	subs	r4, r4, r5
 8005898:	10a4      	asrs	r4, r4, #2
 800589a:	2600      	movs	r6, #0
 800589c:	42a6      	cmp	r6, r4
 800589e:	d109      	bne.n	80058b4 <__libc_init_array+0x24>
 80058a0:	4d0b      	ldr	r5, [pc, #44]	; (80058d0 <__libc_init_array+0x40>)
 80058a2:	4c0c      	ldr	r4, [pc, #48]	; (80058d4 <__libc_init_array+0x44>)
 80058a4:	f002 fd66 	bl	8008374 <_init>
 80058a8:	1b64      	subs	r4, r4, r5
 80058aa:	10a4      	asrs	r4, r4, #2
 80058ac:	2600      	movs	r6, #0
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	d105      	bne.n	80058be <__libc_init_array+0x2e>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b8:	4798      	blx	r3
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7ee      	b.n	800589c <__libc_init_array+0xc>
 80058be:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c2:	4798      	blx	r3
 80058c4:	3601      	adds	r6, #1
 80058c6:	e7f2      	b.n	80058ae <__libc_init_array+0x1e>
 80058c8:	08008690 	.word	0x08008690
 80058cc:	08008690 	.word	0x08008690
 80058d0:	08008690 	.word	0x08008690
 80058d4:	08008694 	.word	0x08008694

080058d8 <memset>:
 80058d8:	4402      	add	r2, r0
 80058da:	4603      	mov	r3, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <siprintf>:
 80058e8:	b40e      	push	{r1, r2, r3}
 80058ea:	b500      	push	{lr}
 80058ec:	b09c      	sub	sp, #112	; 0x70
 80058ee:	ab1d      	add	r3, sp, #116	; 0x74
 80058f0:	9002      	str	r0, [sp, #8]
 80058f2:	9006      	str	r0, [sp, #24]
 80058f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058f8:	4809      	ldr	r0, [pc, #36]	; (8005920 <siprintf+0x38>)
 80058fa:	9107      	str	r1, [sp, #28]
 80058fc:	9104      	str	r1, [sp, #16]
 80058fe:	4909      	ldr	r1, [pc, #36]	; (8005924 <siprintf+0x3c>)
 8005900:	f853 2b04 	ldr.w	r2, [r3], #4
 8005904:	9105      	str	r1, [sp, #20]
 8005906:	6800      	ldr	r0, [r0, #0]
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	a902      	add	r1, sp, #8
 800590c:	f000 fe1a 	bl	8006544 <_svfiprintf_r>
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	b01c      	add	sp, #112	; 0x70
 8005918:	f85d eb04 	ldr.w	lr, [sp], #4
 800591c:	b003      	add	sp, #12
 800591e:	4770      	bx	lr
 8005920:	2000000c 	.word	0x2000000c
 8005924:	ffff0208 	.word	0xffff0208

08005928 <print_e>:
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b087      	sub	sp, #28
 800592c:	ec43 2b10 	vmov	d0, r2, r3
 8005930:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005932:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005936:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005938:	ab04      	add	r3, sp, #16
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	ab03      	add	r3, sp, #12
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	1c62      	adds	r2, r4, #1
 8005942:	ab05      	add	r3, sp, #20
 8005944:	460f      	mov	r7, r1
 8005946:	2102      	movs	r1, #2
 8005948:	f001 f952 	bl	8006bf0 <_dtoa_r>
 800594c:	9a05      	ldr	r2, [sp, #20]
 800594e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005952:	429a      	cmp	r2, r3
 8005954:	d105      	bne.n	8005962 <print_e+0x3a>
 8005956:	4601      	mov	r1, r0
 8005958:	4638      	mov	r0, r7
 800595a:	f001 f897 	bl	8006a8c <strcpy>
 800595e:	b007      	add	sp, #28
 8005960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005962:	463b      	mov	r3, r7
 8005964:	7801      	ldrb	r1, [r0, #0]
 8005966:	f803 1b01 	strb.w	r1, [r3], #1
 800596a:	2c00      	cmp	r4, #0
 800596c:	bfc8      	it	gt
 800596e:	2501      	movgt	r5, #1
 8005970:	212e      	movs	r1, #46	; 0x2e
 8005972:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005976:	b10f      	cbz	r7, 800597c <print_e+0x54>
 8005978:	2c00      	cmp	r4, #0
 800597a:	dc37      	bgt.n	80059ec <print_e+0xc4>
 800597c:	2e67      	cmp	r6, #103	; 0x67
 800597e:	d046      	beq.n	8005a0e <print_e+0xe6>
 8005980:	2e47      	cmp	r6, #71	; 0x47
 8005982:	d046      	beq.n	8005a12 <print_e+0xea>
 8005984:	212e      	movs	r1, #46	; 0x2e
 8005986:	2030      	movs	r0, #48	; 0x30
 8005988:	2c00      	cmp	r4, #0
 800598a:	dc38      	bgt.n	80059fe <print_e+0xd6>
 800598c:	1e51      	subs	r1, r2, #1
 800598e:	2900      	cmp	r1, #0
 8005990:	bfb8      	it	lt
 8005992:	f1c2 0201 	rsblt	r2, r2, #1
 8005996:	4618      	mov	r0, r3
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	bfac      	ite	ge
 800599c:	222b      	movge	r2, #43	; 0x2b
 800599e:	9205      	strlt	r2, [sp, #20]
 80059a0:	f800 6b02 	strb.w	r6, [r0], #2
 80059a4:	bfa8      	it	ge
 80059a6:	705a      	strbge	r2, [r3, #1]
 80059a8:	9a05      	ldr	r2, [sp, #20]
 80059aa:	bfbc      	itt	lt
 80059ac:	212d      	movlt	r1, #45	; 0x2d
 80059ae:	7059      	strblt	r1, [r3, #1]
 80059b0:	2a63      	cmp	r2, #99	; 0x63
 80059b2:	dd0b      	ble.n	80059cc <print_e+0xa4>
 80059b4:	2164      	movs	r1, #100	; 0x64
 80059b6:	fb92 f1f1 	sdiv	r1, r2, r1
 80059ba:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80059be:	1cd8      	adds	r0, r3, #3
 80059c0:	709c      	strb	r4, [r3, #2]
 80059c2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80059c6:	fb03 2201 	mla	r2, r3, r1, r2
 80059ca:	9205      	str	r2, [sp, #20]
 80059cc:	9b05      	ldr	r3, [sp, #20]
 80059ce:	220a      	movs	r2, #10
 80059d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80059d4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80059d8:	7001      	strb	r1, [r0, #0]
 80059da:	f06f 0109 	mvn.w	r1, #9
 80059de:	fb01 3302 	mla	r3, r1, r2, r3
 80059e2:	3330      	adds	r3, #48	; 0x30
 80059e4:	7043      	strb	r3, [r0, #1]
 80059e6:	2300      	movs	r3, #0
 80059e8:	7083      	strb	r3, [r0, #2]
 80059ea:	e7b8      	b.n	800595e <print_e+0x36>
 80059ec:	b10d      	cbz	r5, 80059f2 <print_e+0xca>
 80059ee:	f803 1b01 	strb.w	r1, [r3], #1
 80059f2:	7805      	ldrb	r5, [r0, #0]
 80059f4:	f803 5b01 	strb.w	r5, [r3], #1
 80059f8:	3c01      	subs	r4, #1
 80059fa:	2500      	movs	r5, #0
 80059fc:	e7b9      	b.n	8005972 <print_e+0x4a>
 80059fe:	b10d      	cbz	r5, 8005a04 <print_e+0xdc>
 8005a00:	f803 1b01 	strb.w	r1, [r3], #1
 8005a04:	f803 0b01 	strb.w	r0, [r3], #1
 8005a08:	3c01      	subs	r4, #1
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	e7bc      	b.n	8005988 <print_e+0x60>
 8005a0e:	2665      	movs	r6, #101	; 0x65
 8005a10:	e7bc      	b.n	800598c <print_e+0x64>
 8005a12:	2645      	movs	r6, #69	; 0x45
 8005a14:	e7ba      	b.n	800598c <print_e+0x64>
	...

08005a18 <_gcvt>:
 8005a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	ec55 4b10 	vmov	r4, r5, d0
 8005a20:	b088      	sub	sp, #32
 8005a22:	4681      	mov	r9, r0
 8005a24:	4688      	mov	r8, r1
 8005a26:	4616      	mov	r6, r2
 8005a28:	469a      	mov	sl, r3
 8005a2a:	ee10 0a10 	vmov	r0, s0
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2300      	movs	r3, #0
 8005a32:	4629      	mov	r1, r5
 8005a34:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005a36:	f7fb f851 	bl	8000adc <__aeabi_dcmplt>
 8005a3a:	b110      	cbz	r0, 8005a42 <_gcvt+0x2a>
 8005a3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a40:	461d      	mov	r5, r3
 8005a42:	2200      	movs	r2, #0
 8005a44:	2300      	movs	r3, #0
 8005a46:	4620      	mov	r0, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fb f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a4e:	b138      	cbz	r0, 8005a60 <_gcvt+0x48>
 8005a50:	2330      	movs	r3, #48	; 0x30
 8005a52:	7033      	strb	r3, [r6, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	7073      	strb	r3, [r6, #1]
 8005a58:	4630      	mov	r0, r6
 8005a5a:	b008      	add	sp, #32
 8005a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a60:	a34b      	add	r3, pc, #300	; (adr r3, 8005b90 <_gcvt+0x178>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fb f841 	bl	8000af0 <__aeabi_dcmple>
 8005a6e:	b158      	cbz	r0, 8005a88 <_gcvt+0x70>
 8005a70:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a74:	9100      	str	r1, [sp, #0]
 8005a76:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4648      	mov	r0, r9
 8005a82:	f7ff ff51 	bl	8005928 <print_e>
 8005a86:	e7e7      	b.n	8005a58 <_gcvt+0x40>
 8005a88:	4640      	mov	r0, r8
 8005a8a:	f000 fc09 	bl	80062a0 <_mprec_log10>
 8005a8e:	4622      	mov	r2, r4
 8005a90:	ec51 0b10 	vmov	r0, r1, d0
 8005a94:	462b      	mov	r3, r5
 8005a96:	f7fb f82b 	bl	8000af0 <__aeabi_dcmple>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d1e8      	bne.n	8005a70 <_gcvt+0x58>
 8005a9e:	ab07      	add	r3, sp, #28
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	ab06      	add	r3, sp, #24
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	ab05      	add	r3, sp, #20
 8005aaa:	ec45 4b10 	vmov	d0, r4, r5
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f001 f89d 	bl	8006bf0 <_dtoa_r>
 8005ab6:	9a05      	ldr	r2, [sp, #20]
 8005ab8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d00e      	beq.n	8005ade <_gcvt+0xc6>
 8005ac0:	4633      	mov	r3, r6
 8005ac2:	44b0      	add	r8, r6
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005aca:	9c05      	ldr	r4, [sp, #20]
 8005acc:	eba8 0203 	sub.w	r2, r8, r3
 8005ad0:	b109      	cbz	r1, 8005ad6 <_gcvt+0xbe>
 8005ad2:	2c00      	cmp	r4, #0
 8005ad4:	dc08      	bgt.n	8005ae8 <_gcvt+0xd0>
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8005adc:	e00d      	b.n	8005afa <_gcvt+0xe2>
 8005ade:	4601      	mov	r1, r0
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f000 ffd3 	bl	8006a8c <strcpy>
 8005ae6:	e7b7      	b.n	8005a58 <_gcvt+0x40>
 8005ae8:	3c01      	subs	r4, #1
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	9405      	str	r4, [sp, #20]
 8005af0:	e7e8      	b.n	8005ac4 <_gcvt+0xac>
 8005af2:	f803 cb01 	strb.w	ip, [r3], #1
 8005af6:	3a01      	subs	r2, #1
 8005af8:	2101      	movs	r1, #1
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	dc2a      	bgt.n	8005b56 <_gcvt+0x13e>
 8005b00:	b101      	cbz	r1, 8005b04 <_gcvt+0xec>
 8005b02:	9405      	str	r4, [sp, #20]
 8005b04:	b90f      	cbnz	r7, 8005b0a <_gcvt+0xf2>
 8005b06:	7829      	ldrb	r1, [r5, #0]
 8005b08:	b311      	cbz	r1, 8005b50 <_gcvt+0x138>
 8005b0a:	42b3      	cmp	r3, r6
 8005b0c:	bf04      	itt	eq
 8005b0e:	2130      	moveq	r1, #48	; 0x30
 8005b10:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005b14:	212e      	movs	r1, #46	; 0x2e
 8005b16:	7019      	strb	r1, [r3, #0]
 8005b18:	9905      	ldr	r1, [sp, #20]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	eba1 0c03 	sub.w	ip, r1, r3
 8005b22:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005b26:	eb1c 0f00 	cmn.w	ip, r0
 8005b2a:	d41c      	bmi.n	8005b66 <_gcvt+0x14e>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	f1c1 0000 	rsb	r0, r1, #0
 8005b32:	bfc8      	it	gt
 8005b34:	2000      	movgt	r0, #0
 8005b36:	f100 0c01 	add.w	ip, r0, #1
 8005b3a:	4463      	add	r3, ip
 8005b3c:	4401      	add	r1, r0
 8005b3e:	b104      	cbz	r4, 8005b42 <_gcvt+0x12a>
 8005b40:	9105      	str	r1, [sp, #20]
 8005b42:	1e69      	subs	r1, r5, #1
 8005b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b48:	b108      	cbz	r0, 8005b4e <_gcvt+0x136>
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	dc0f      	bgt.n	8005b6e <_gcvt+0x156>
 8005b4e:	b9df      	cbnz	r7, 8005b88 <_gcvt+0x170>
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e780      	b.n	8005a58 <_gcvt+0x40>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b5c:	dcc9      	bgt.n	8005af2 <_gcvt+0xda>
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d0d0      	beq.n	8005b04 <_gcvt+0xec>
 8005b62:	9005      	str	r0, [sp, #20]
 8005b64:	e7ce      	b.n	8005b04 <_gcvt+0xec>
 8005b66:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005b6a:	2401      	movs	r4, #1
 8005b6c:	e7db      	b.n	8005b26 <_gcvt+0x10e>
 8005b6e:	f803 0b01 	strb.w	r0, [r3], #1
 8005b72:	3a01      	subs	r2, #1
 8005b74:	e7e6      	b.n	8005b44 <_gcvt+0x12c>
 8005b76:	f801 5b01 	strb.w	r5, [r1], #1
 8005b7a:	1a60      	subs	r0, r4, r1
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	dcfa      	bgt.n	8005b76 <_gcvt+0x15e>
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	bfa8      	it	ge
 8005b84:	189b      	addge	r3, r3, r2
 8005b86:	e7e3      	b.n	8005b50 <_gcvt+0x138>
 8005b88:	4619      	mov	r1, r3
 8005b8a:	189c      	adds	r4, r3, r2
 8005b8c:	2530      	movs	r5, #48	; 0x30
 8005b8e:	e7f4      	b.n	8005b7a <_gcvt+0x162>
 8005b90:	eb1c432d 	.word	0xeb1c432d
 8005b94:	3f1a36e2 	.word	0x3f1a36e2

08005b98 <_Balloc>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	b976      	cbnz	r6, 8005bc0 <_Balloc+0x28>
 8005ba2:	2010      	movs	r0, #16
 8005ba4:	f001 fe24 	bl	80077f0 <malloc>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6260      	str	r0, [r4, #36]	; 0x24
 8005bac:	b920      	cbnz	r0, 8005bb8 <_Balloc+0x20>
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <_Balloc+0x78>)
 8005bb0:	4818      	ldr	r0, [pc, #96]	; (8005c14 <_Balloc+0x7c>)
 8005bb2:	2166      	movs	r1, #102	; 0x66
 8005bb4:	f000 ff72 	bl	8006a9c <__assert_func>
 8005bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bbc:	6006      	str	r6, [r0, #0]
 8005bbe:	60c6      	str	r6, [r0, #12]
 8005bc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bc2:	68f3      	ldr	r3, [r6, #12]
 8005bc4:	b183      	cbz	r3, 8005be8 <_Balloc+0x50>
 8005bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bce:	b9b8      	cbnz	r0, 8005c00 <_Balloc+0x68>
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005bd6:	1d72      	adds	r2, r6, #5
 8005bd8:	0092      	lsls	r2, r2, #2
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fb7e 	bl	80062dc <_calloc_r>
 8005be0:	b160      	cbz	r0, 8005bfc <_Balloc+0x64>
 8005be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005be6:	e00e      	b.n	8005c06 <_Balloc+0x6e>
 8005be8:	2221      	movs	r2, #33	; 0x21
 8005bea:	2104      	movs	r1, #4
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fb75 	bl	80062dc <_calloc_r>
 8005bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf4:	60f0      	str	r0, [r6, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e4      	bne.n	8005bc6 <_Balloc+0x2e>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	6802      	ldr	r2, [r0, #0]
 8005c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c06:	2300      	movs	r3, #0
 8005c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c0c:	e7f7      	b.n	8005bfe <_Balloc+0x66>
 8005c0e:	bf00      	nop
 8005c10:	080083d4 	.word	0x080083d4
 8005c14:	080083eb 	.word	0x080083eb

08005c18 <_Bfree>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	b976      	cbnz	r6, 8005c40 <_Bfree+0x28>
 8005c22:	2010      	movs	r0, #16
 8005c24:	f001 fde4 	bl	80077f0 <malloc>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6268      	str	r0, [r5, #36]	; 0x24
 8005c2c:	b920      	cbnz	r0, 8005c38 <_Bfree+0x20>
 8005c2e:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <_Bfree+0x3c>)
 8005c30:	4809      	ldr	r0, [pc, #36]	; (8005c58 <_Bfree+0x40>)
 8005c32:	218a      	movs	r1, #138	; 0x8a
 8005c34:	f000 ff32 	bl	8006a9c <__assert_func>
 8005c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c3c:	6006      	str	r6, [r0, #0]
 8005c3e:	60c6      	str	r6, [r0, #12]
 8005c40:	b13c      	cbz	r4, 8005c52 <_Bfree+0x3a>
 8005c42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c44:	6862      	ldr	r2, [r4, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c4c:	6021      	str	r1, [r4, #0]
 8005c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	080083d4 	.word	0x080083d4
 8005c58:	080083eb 	.word	0x080083eb

08005c5c <__multadd>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	690d      	ldr	r5, [r1, #16]
 8005c62:	4607      	mov	r7, r0
 8005c64:	460c      	mov	r4, r1
 8005c66:	461e      	mov	r6, r3
 8005c68:	f101 0c14 	add.w	ip, r1, #20
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005c72:	b299      	uxth	r1, r3
 8005c74:	fb02 6101 	mla	r1, r2, r1, r6
 8005c78:	0c1e      	lsrs	r6, r3, #16
 8005c7a:	0c0b      	lsrs	r3, r1, #16
 8005c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005c80:	b289      	uxth	r1, r1
 8005c82:	3001      	adds	r0, #1
 8005c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c88:	4285      	cmp	r5, r0
 8005c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c92:	dcec      	bgt.n	8005c6e <__multadd+0x12>
 8005c94:	b30e      	cbz	r6, 8005cda <__multadd+0x7e>
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	dc19      	bgt.n	8005cd0 <__multadd+0x74>
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	f7ff ff79 	bl	8005b98 <_Balloc>
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	b928      	cbnz	r0, 8005cb6 <__multadd+0x5a>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <__multadd+0x84>)
 8005cae:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <__multadd+0x88>)
 8005cb0:	21b5      	movs	r1, #181	; 0xb5
 8005cb2:	f000 fef3 	bl	8006a9c <__assert_func>
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	3202      	adds	r2, #2
 8005cba:	f104 010c 	add.w	r1, r4, #12
 8005cbe:	0092      	lsls	r2, r2, #2
 8005cc0:	300c      	adds	r0, #12
 8005cc2:	f001 fd9d 	bl	8007800 <memcpy>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff ffa5 	bl	8005c18 <_Bfree>
 8005cce:	4644      	mov	r4, r8
 8005cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	615e      	str	r6, [r3, #20]
 8005cd8:	6125      	str	r5, [r4, #16]
 8005cda:	4620      	mov	r0, r4
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce0:	08008447 	.word	0x08008447
 8005ce4:	080083eb 	.word	0x080083eb

08005ce8 <__hi0bits>:
 8005ce8:	0c03      	lsrs	r3, r0, #16
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	b9d3      	cbnz	r3, 8005d24 <__hi0bits+0x3c>
 8005cee:	0400      	lsls	r0, r0, #16
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005cf6:	bf04      	itt	eq
 8005cf8:	0200      	lsleq	r0, r0, #8
 8005cfa:	3308      	addeq	r3, #8
 8005cfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d00:	bf04      	itt	eq
 8005d02:	0100      	lsleq	r0, r0, #4
 8005d04:	3304      	addeq	r3, #4
 8005d06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d0a:	bf04      	itt	eq
 8005d0c:	0080      	lsleq	r0, r0, #2
 8005d0e:	3302      	addeq	r3, #2
 8005d10:	2800      	cmp	r0, #0
 8005d12:	db05      	blt.n	8005d20 <__hi0bits+0x38>
 8005d14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d18:	f103 0301 	add.w	r3, r3, #1
 8005d1c:	bf08      	it	eq
 8005d1e:	2320      	moveq	r3, #32
 8005d20:	4618      	mov	r0, r3
 8005d22:	4770      	bx	lr
 8005d24:	2300      	movs	r3, #0
 8005d26:	e7e4      	b.n	8005cf2 <__hi0bits+0xa>

08005d28 <__lo0bits>:
 8005d28:	6803      	ldr	r3, [r0, #0]
 8005d2a:	f013 0207 	ands.w	r2, r3, #7
 8005d2e:	4601      	mov	r1, r0
 8005d30:	d00b      	beq.n	8005d4a <__lo0bits+0x22>
 8005d32:	07da      	lsls	r2, r3, #31
 8005d34:	d423      	bmi.n	8005d7e <__lo0bits+0x56>
 8005d36:	0798      	lsls	r0, r3, #30
 8005d38:	bf49      	itett	mi
 8005d3a:	085b      	lsrmi	r3, r3, #1
 8005d3c:	089b      	lsrpl	r3, r3, #2
 8005d3e:	2001      	movmi	r0, #1
 8005d40:	600b      	strmi	r3, [r1, #0]
 8005d42:	bf5c      	itt	pl
 8005d44:	600b      	strpl	r3, [r1, #0]
 8005d46:	2002      	movpl	r0, #2
 8005d48:	4770      	bx	lr
 8005d4a:	b298      	uxth	r0, r3
 8005d4c:	b9a8      	cbnz	r0, 8005d7a <__lo0bits+0x52>
 8005d4e:	0c1b      	lsrs	r3, r3, #16
 8005d50:	2010      	movs	r0, #16
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	b90a      	cbnz	r2, 8005d5a <__lo0bits+0x32>
 8005d56:	3008      	adds	r0, #8
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	071a      	lsls	r2, r3, #28
 8005d5c:	bf04      	itt	eq
 8005d5e:	091b      	lsreq	r3, r3, #4
 8005d60:	3004      	addeq	r0, #4
 8005d62:	079a      	lsls	r2, r3, #30
 8005d64:	bf04      	itt	eq
 8005d66:	089b      	lsreq	r3, r3, #2
 8005d68:	3002      	addeq	r0, #2
 8005d6a:	07da      	lsls	r2, r3, #31
 8005d6c:	d403      	bmi.n	8005d76 <__lo0bits+0x4e>
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	f100 0001 	add.w	r0, r0, #1
 8005d74:	d005      	beq.n	8005d82 <__lo0bits+0x5a>
 8005d76:	600b      	str	r3, [r1, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	e7e9      	b.n	8005d52 <__lo0bits+0x2a>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	4770      	bx	lr
 8005d82:	2020      	movs	r0, #32
 8005d84:	4770      	bx	lr
	...

08005d88 <__i2b>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	f7ff ff03 	bl	8005b98 <_Balloc>
 8005d92:	4602      	mov	r2, r0
 8005d94:	b928      	cbnz	r0, 8005da2 <__i2b+0x1a>
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <__i2b+0x24>)
 8005d98:	4805      	ldr	r0, [pc, #20]	; (8005db0 <__i2b+0x28>)
 8005d9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d9e:	f000 fe7d 	bl	8006a9c <__assert_func>
 8005da2:	2301      	movs	r3, #1
 8005da4:	6144      	str	r4, [r0, #20]
 8005da6:	6103      	str	r3, [r0, #16]
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	08008447 	.word	0x08008447
 8005db0:	080083eb 	.word	0x080083eb

08005db4 <__multiply>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	4691      	mov	r9, r2
 8005dba:	690a      	ldr	r2, [r1, #16]
 8005dbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	460b      	movlt	r3, r1
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	bfbc      	itt	lt
 8005dca:	464c      	movlt	r4, r9
 8005dcc:	4699      	movlt	r9, r3
 8005dce:	6927      	ldr	r7, [r4, #16]
 8005dd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	6861      	ldr	r1, [r4, #4]
 8005dd8:	eb07 060a 	add.w	r6, r7, sl
 8005ddc:	42b3      	cmp	r3, r6
 8005dde:	b085      	sub	sp, #20
 8005de0:	bfb8      	it	lt
 8005de2:	3101      	addlt	r1, #1
 8005de4:	f7ff fed8 	bl	8005b98 <_Balloc>
 8005de8:	b930      	cbnz	r0, 8005df8 <__multiply+0x44>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <__multiply+0x14c>)
 8005dee:	4845      	ldr	r0, [pc, #276]	; (8005f04 <__multiply+0x150>)
 8005df0:	f240 115d 	movw	r1, #349	; 0x15d
 8005df4:	f000 fe52 	bl	8006a9c <__assert_func>
 8005df8:	f100 0514 	add.w	r5, r0, #20
 8005dfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e00:	462b      	mov	r3, r5
 8005e02:	2200      	movs	r2, #0
 8005e04:	4543      	cmp	r3, r8
 8005e06:	d321      	bcc.n	8005e4c <__multiply+0x98>
 8005e08:	f104 0314 	add.w	r3, r4, #20
 8005e0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e10:	f109 0314 	add.w	r3, r9, #20
 8005e14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e18:	9202      	str	r2, [sp, #8]
 8005e1a:	1b3a      	subs	r2, r7, r4
 8005e1c:	3a15      	subs	r2, #21
 8005e1e:	f022 0203 	bic.w	r2, r2, #3
 8005e22:	3204      	adds	r2, #4
 8005e24:	f104 0115 	add.w	r1, r4, #21
 8005e28:	428f      	cmp	r7, r1
 8005e2a:	bf38      	it	cc
 8005e2c:	2204      	movcc	r2, #4
 8005e2e:	9201      	str	r2, [sp, #4]
 8005e30:	9a02      	ldr	r2, [sp, #8]
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d80c      	bhi.n	8005e52 <__multiply+0x9e>
 8005e38:	2e00      	cmp	r6, #0
 8005e3a:	dd03      	ble.n	8005e44 <__multiply+0x90>
 8005e3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05a      	beq.n	8005efa <__multiply+0x146>
 8005e44:	6106      	str	r6, [r0, #16]
 8005e46:	b005      	add	sp, #20
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	f843 2b04 	str.w	r2, [r3], #4
 8005e50:	e7d8      	b.n	8005e04 <__multiply+0x50>
 8005e52:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e56:	f1ba 0f00 	cmp.w	sl, #0
 8005e5a:	d024      	beq.n	8005ea6 <__multiply+0xf2>
 8005e5c:	f104 0e14 	add.w	lr, r4, #20
 8005e60:	46a9      	mov	r9, r5
 8005e62:	f04f 0c00 	mov.w	ip, #0
 8005e66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e6a:	f8d9 1000 	ldr.w	r1, [r9]
 8005e6e:	fa1f fb82 	uxth.w	fp, r2
 8005e72:	b289      	uxth	r1, r1
 8005e74:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e80:	4461      	add	r1, ip
 8005e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e86:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e8e:	b289      	uxth	r1, r1
 8005e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e94:	4577      	cmp	r7, lr
 8005e96:	f849 1b04 	str.w	r1, [r9], #4
 8005e9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e9e:	d8e2      	bhi.n	8005e66 <__multiply+0xb2>
 8005ea0:	9a01      	ldr	r2, [sp, #4]
 8005ea2:	f845 c002 	str.w	ip, [r5, r2]
 8005ea6:	9a03      	ldr	r2, [sp, #12]
 8005ea8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005eac:	3304      	adds	r3, #4
 8005eae:	f1b9 0f00 	cmp.w	r9, #0
 8005eb2:	d020      	beq.n	8005ef6 <__multiply+0x142>
 8005eb4:	6829      	ldr	r1, [r5, #0]
 8005eb6:	f104 0c14 	add.w	ip, r4, #20
 8005eba:	46ae      	mov	lr, r5
 8005ebc:	f04f 0a00 	mov.w	sl, #0
 8005ec0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ec8:	fb09 220b 	mla	r2, r9, fp, r2
 8005ecc:	4492      	add	sl, r2
 8005ece:	b289      	uxth	r1, r1
 8005ed0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ed4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ed8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005edc:	f8be 1000 	ldrh.w	r1, [lr]
 8005ee0:	0c12      	lsrs	r2, r2, #16
 8005ee2:	fb09 1102 	mla	r1, r9, r2, r1
 8005ee6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005eea:	4567      	cmp	r7, ip
 8005eec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ef0:	d8e6      	bhi.n	8005ec0 <__multiply+0x10c>
 8005ef2:	9a01      	ldr	r2, [sp, #4]
 8005ef4:	50a9      	str	r1, [r5, r2]
 8005ef6:	3504      	adds	r5, #4
 8005ef8:	e79a      	b.n	8005e30 <__multiply+0x7c>
 8005efa:	3e01      	subs	r6, #1
 8005efc:	e79c      	b.n	8005e38 <__multiply+0x84>
 8005efe:	bf00      	nop
 8005f00:	08008447 	.word	0x08008447
 8005f04:	080083eb 	.word	0x080083eb

08005f08 <__pow5mult>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	f012 0203 	ands.w	r2, r2, #3
 8005f12:	4606      	mov	r6, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	d007      	beq.n	8005f28 <__pow5mult+0x20>
 8005f18:	4c25      	ldr	r4, [pc, #148]	; (8005fb0 <__pow5mult+0xa8>)
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f22:	f7ff fe9b 	bl	8005c5c <__multadd>
 8005f26:	4607      	mov	r7, r0
 8005f28:	10ad      	asrs	r5, r5, #2
 8005f2a:	d03d      	beq.n	8005fa8 <__pow5mult+0xa0>
 8005f2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f2e:	b97c      	cbnz	r4, 8005f50 <__pow5mult+0x48>
 8005f30:	2010      	movs	r0, #16
 8005f32:	f001 fc5d 	bl	80077f0 <malloc>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6270      	str	r0, [r6, #36]	; 0x24
 8005f3a:	b928      	cbnz	r0, 8005f48 <__pow5mult+0x40>
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <__pow5mult+0xac>)
 8005f3e:	481e      	ldr	r0, [pc, #120]	; (8005fb8 <__pow5mult+0xb0>)
 8005f40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f44:	f000 fdaa 	bl	8006a9c <__assert_func>
 8005f48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f4c:	6004      	str	r4, [r0, #0]
 8005f4e:	60c4      	str	r4, [r0, #12]
 8005f50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f58:	b94c      	cbnz	r4, 8005f6e <__pow5mult+0x66>
 8005f5a:	f240 2171 	movw	r1, #625	; 0x271
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7ff ff12 	bl	8005d88 <__i2b>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	6003      	str	r3, [r0, #0]
 8005f6e:	f04f 0900 	mov.w	r9, #0
 8005f72:	07eb      	lsls	r3, r5, #31
 8005f74:	d50a      	bpl.n	8005f8c <__pow5mult+0x84>
 8005f76:	4639      	mov	r1, r7
 8005f78:	4622      	mov	r2, r4
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff ff1a 	bl	8005db4 <__multiply>
 8005f80:	4639      	mov	r1, r7
 8005f82:	4680      	mov	r8, r0
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff fe47 	bl	8005c18 <_Bfree>
 8005f8a:	4647      	mov	r7, r8
 8005f8c:	106d      	asrs	r5, r5, #1
 8005f8e:	d00b      	beq.n	8005fa8 <__pow5mult+0xa0>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	b938      	cbnz	r0, 8005fa4 <__pow5mult+0x9c>
 8005f94:	4622      	mov	r2, r4
 8005f96:	4621      	mov	r1, r4
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff ff0b 	bl	8005db4 <__multiply>
 8005f9e:	6020      	str	r0, [r4, #0]
 8005fa0:	f8c0 9000 	str.w	r9, [r0]
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	e7e4      	b.n	8005f72 <__pow5mult+0x6a>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fae:	bf00      	nop
 8005fb0:	08008548 	.word	0x08008548
 8005fb4:	080083d4 	.word	0x080083d4
 8005fb8:	080083eb 	.word	0x080083eb

08005fbc <__lshift>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	6849      	ldr	r1, [r1, #4]
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	4607      	mov	r7, r0
 8005fce:	4691      	mov	r9, r2
 8005fd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fd4:	f108 0601 	add.w	r6, r8, #1
 8005fd8:	42b3      	cmp	r3, r6
 8005fda:	db0b      	blt.n	8005ff4 <__lshift+0x38>
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff fddb 	bl	8005b98 <_Balloc>
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	b948      	cbnz	r0, 8005ffa <__lshift+0x3e>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	; (8006094 <__lshift+0xd8>)
 8005fea:	482b      	ldr	r0, [pc, #172]	; (8006098 <__lshift+0xdc>)
 8005fec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ff0:	f000 fd54 	bl	8006a9c <__assert_func>
 8005ff4:	3101      	adds	r1, #1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	e7ee      	b.n	8005fd8 <__lshift+0x1c>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f100 0114 	add.w	r1, r0, #20
 8006000:	f100 0210 	add.w	r2, r0, #16
 8006004:	4618      	mov	r0, r3
 8006006:	4553      	cmp	r3, sl
 8006008:	db37      	blt.n	800607a <__lshift+0xbe>
 800600a:	6920      	ldr	r0, [r4, #16]
 800600c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006010:	f104 0314 	add.w	r3, r4, #20
 8006014:	f019 091f 	ands.w	r9, r9, #31
 8006018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800601c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006020:	d02f      	beq.n	8006082 <__lshift+0xc6>
 8006022:	f1c9 0e20 	rsb	lr, r9, #32
 8006026:	468a      	mov	sl, r1
 8006028:	f04f 0c00 	mov.w	ip, #0
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	fa02 f209 	lsl.w	r2, r2, r9
 8006032:	ea42 020c 	orr.w	r2, r2, ip
 8006036:	f84a 2b04 	str.w	r2, [sl], #4
 800603a:	f853 2b04 	ldr.w	r2, [r3], #4
 800603e:	4298      	cmp	r0, r3
 8006040:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006044:	d8f2      	bhi.n	800602c <__lshift+0x70>
 8006046:	1b03      	subs	r3, r0, r4
 8006048:	3b15      	subs	r3, #21
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	3304      	adds	r3, #4
 8006050:	f104 0215 	add.w	r2, r4, #21
 8006054:	4290      	cmp	r0, r2
 8006056:	bf38      	it	cc
 8006058:	2304      	movcc	r3, #4
 800605a:	f841 c003 	str.w	ip, [r1, r3]
 800605e:	f1bc 0f00 	cmp.w	ip, #0
 8006062:	d001      	beq.n	8006068 <__lshift+0xac>
 8006064:	f108 0602 	add.w	r6, r8, #2
 8006068:	3e01      	subs	r6, #1
 800606a:	4638      	mov	r0, r7
 800606c:	612e      	str	r6, [r5, #16]
 800606e:	4621      	mov	r1, r4
 8006070:	f7ff fdd2 	bl	8005c18 <_Bfree>
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607a:	f842 0f04 	str.w	r0, [r2, #4]!
 800607e:	3301      	adds	r3, #1
 8006080:	e7c1      	b.n	8006006 <__lshift+0x4a>
 8006082:	3904      	subs	r1, #4
 8006084:	f853 2b04 	ldr.w	r2, [r3], #4
 8006088:	f841 2f04 	str.w	r2, [r1, #4]!
 800608c:	4298      	cmp	r0, r3
 800608e:	d8f9      	bhi.n	8006084 <__lshift+0xc8>
 8006090:	e7ea      	b.n	8006068 <__lshift+0xac>
 8006092:	bf00      	nop
 8006094:	08008447 	.word	0x08008447
 8006098:	080083eb 	.word	0x080083eb

0800609c <__mcmp>:
 800609c:	b530      	push	{r4, r5, lr}
 800609e:	6902      	ldr	r2, [r0, #16]
 80060a0:	690c      	ldr	r4, [r1, #16]
 80060a2:	1b12      	subs	r2, r2, r4
 80060a4:	d10e      	bne.n	80060c4 <__mcmp+0x28>
 80060a6:	f100 0314 	add.w	r3, r0, #20
 80060aa:	3114      	adds	r1, #20
 80060ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80060b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80060b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80060b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80060bc:	42a5      	cmp	r5, r4
 80060be:	d003      	beq.n	80060c8 <__mcmp+0x2c>
 80060c0:	d305      	bcc.n	80060ce <__mcmp+0x32>
 80060c2:	2201      	movs	r2, #1
 80060c4:	4610      	mov	r0, r2
 80060c6:	bd30      	pop	{r4, r5, pc}
 80060c8:	4283      	cmp	r3, r0
 80060ca:	d3f3      	bcc.n	80060b4 <__mcmp+0x18>
 80060cc:	e7fa      	b.n	80060c4 <__mcmp+0x28>
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	e7f7      	b.n	80060c4 <__mcmp+0x28>

080060d4 <__mdiff>:
 80060d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	460c      	mov	r4, r1
 80060da:	4606      	mov	r6, r0
 80060dc:	4611      	mov	r1, r2
 80060de:	4620      	mov	r0, r4
 80060e0:	4690      	mov	r8, r2
 80060e2:	f7ff ffdb 	bl	800609c <__mcmp>
 80060e6:	1e05      	subs	r5, r0, #0
 80060e8:	d110      	bne.n	800610c <__mdiff+0x38>
 80060ea:	4629      	mov	r1, r5
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff fd53 	bl	8005b98 <_Balloc>
 80060f2:	b930      	cbnz	r0, 8006102 <__mdiff+0x2e>
 80060f4:	4b3a      	ldr	r3, [pc, #232]	; (80061e0 <__mdiff+0x10c>)
 80060f6:	4602      	mov	r2, r0
 80060f8:	f240 2132 	movw	r1, #562	; 0x232
 80060fc:	4839      	ldr	r0, [pc, #228]	; (80061e4 <__mdiff+0x110>)
 80060fe:	f000 fccd 	bl	8006a9c <__assert_func>
 8006102:	2301      	movs	r3, #1
 8006104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	bfa4      	itt	ge
 800610e:	4643      	movge	r3, r8
 8006110:	46a0      	movge	r8, r4
 8006112:	4630      	mov	r0, r6
 8006114:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006118:	bfa6      	itte	ge
 800611a:	461c      	movge	r4, r3
 800611c:	2500      	movge	r5, #0
 800611e:	2501      	movlt	r5, #1
 8006120:	f7ff fd3a 	bl	8005b98 <_Balloc>
 8006124:	b920      	cbnz	r0, 8006130 <__mdiff+0x5c>
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <__mdiff+0x10c>)
 8006128:	4602      	mov	r2, r0
 800612a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800612e:	e7e5      	b.n	80060fc <__mdiff+0x28>
 8006130:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006134:	6926      	ldr	r6, [r4, #16]
 8006136:	60c5      	str	r5, [r0, #12]
 8006138:	f104 0914 	add.w	r9, r4, #20
 800613c:	f108 0514 	add.w	r5, r8, #20
 8006140:	f100 0e14 	add.w	lr, r0, #20
 8006144:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006148:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800614c:	f108 0210 	add.w	r2, r8, #16
 8006150:	46f2      	mov	sl, lr
 8006152:	2100      	movs	r1, #0
 8006154:	f859 3b04 	ldr.w	r3, [r9], #4
 8006158:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800615c:	fa1f f883 	uxth.w	r8, r3
 8006160:	fa11 f18b 	uxtah	r1, r1, fp
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	eba1 0808 	sub.w	r8, r1, r8
 800616a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800616e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006172:	fa1f f888 	uxth.w	r8, r8
 8006176:	1419      	asrs	r1, r3, #16
 8006178:	454e      	cmp	r6, r9
 800617a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800617e:	f84a 3b04 	str.w	r3, [sl], #4
 8006182:	d8e7      	bhi.n	8006154 <__mdiff+0x80>
 8006184:	1b33      	subs	r3, r6, r4
 8006186:	3b15      	subs	r3, #21
 8006188:	f023 0303 	bic.w	r3, r3, #3
 800618c:	3304      	adds	r3, #4
 800618e:	3415      	adds	r4, #21
 8006190:	42a6      	cmp	r6, r4
 8006192:	bf38      	it	cc
 8006194:	2304      	movcc	r3, #4
 8006196:	441d      	add	r5, r3
 8006198:	4473      	add	r3, lr
 800619a:	469e      	mov	lr, r3
 800619c:	462e      	mov	r6, r5
 800619e:	4566      	cmp	r6, ip
 80061a0:	d30e      	bcc.n	80061c0 <__mdiff+0xec>
 80061a2:	f10c 0203 	add.w	r2, ip, #3
 80061a6:	1b52      	subs	r2, r2, r5
 80061a8:	f022 0203 	bic.w	r2, r2, #3
 80061ac:	3d03      	subs	r5, #3
 80061ae:	45ac      	cmp	ip, r5
 80061b0:	bf38      	it	cc
 80061b2:	2200      	movcc	r2, #0
 80061b4:	441a      	add	r2, r3
 80061b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80061ba:	b17b      	cbz	r3, 80061dc <__mdiff+0x108>
 80061bc:	6107      	str	r7, [r0, #16]
 80061be:	e7a3      	b.n	8006108 <__mdiff+0x34>
 80061c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80061c4:	fa11 f288 	uxtah	r2, r1, r8
 80061c8:	1414      	asrs	r4, r2, #16
 80061ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80061ce:	b292      	uxth	r2, r2
 80061d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80061d4:	f84e 2b04 	str.w	r2, [lr], #4
 80061d8:	1421      	asrs	r1, r4, #16
 80061da:	e7e0      	b.n	800619e <__mdiff+0xca>
 80061dc:	3f01      	subs	r7, #1
 80061de:	e7ea      	b.n	80061b6 <__mdiff+0xe2>
 80061e0:	08008447 	.word	0x08008447
 80061e4:	080083eb 	.word	0x080083eb

080061e8 <__d2b>:
 80061e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4689      	mov	r9, r1
 80061ee:	2101      	movs	r1, #1
 80061f0:	ec57 6b10 	vmov	r6, r7, d0
 80061f4:	4690      	mov	r8, r2
 80061f6:	f7ff fccf 	bl	8005b98 <_Balloc>
 80061fa:	4604      	mov	r4, r0
 80061fc:	b930      	cbnz	r0, 800620c <__d2b+0x24>
 80061fe:	4602      	mov	r2, r0
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <__d2b+0xb0>)
 8006202:	4826      	ldr	r0, [pc, #152]	; (800629c <__d2b+0xb4>)
 8006204:	f240 310a 	movw	r1, #778	; 0x30a
 8006208:	f000 fc48 	bl	8006a9c <__assert_func>
 800620c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006214:	bb35      	cbnz	r5, 8006264 <__d2b+0x7c>
 8006216:	2e00      	cmp	r6, #0
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	d028      	beq.n	800626e <__d2b+0x86>
 800621c:	4668      	mov	r0, sp
 800621e:	9600      	str	r6, [sp, #0]
 8006220:	f7ff fd82 	bl	8005d28 <__lo0bits>
 8006224:	9900      	ldr	r1, [sp, #0]
 8006226:	b300      	cbz	r0, 800626a <__d2b+0x82>
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	f1c0 0320 	rsb	r3, r0, #32
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	430b      	orrs	r3, r1
 8006234:	40c2      	lsrs	r2, r0
 8006236:	6163      	str	r3, [r4, #20]
 8006238:	9201      	str	r2, [sp, #4]
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	61a3      	str	r3, [r4, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf14      	ite	ne
 8006242:	2202      	movne	r2, #2
 8006244:	2201      	moveq	r2, #1
 8006246:	6122      	str	r2, [r4, #16]
 8006248:	b1d5      	cbz	r5, 8006280 <__d2b+0x98>
 800624a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800624e:	4405      	add	r5, r0
 8006250:	f8c9 5000 	str.w	r5, [r9]
 8006254:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006258:	f8c8 0000 	str.w	r0, [r8]
 800625c:	4620      	mov	r0, r4
 800625e:	b003      	add	sp, #12
 8006260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006268:	e7d5      	b.n	8006216 <__d2b+0x2e>
 800626a:	6161      	str	r1, [r4, #20]
 800626c:	e7e5      	b.n	800623a <__d2b+0x52>
 800626e:	a801      	add	r0, sp, #4
 8006270:	f7ff fd5a 	bl	8005d28 <__lo0bits>
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	6163      	str	r3, [r4, #20]
 8006278:	2201      	movs	r2, #1
 800627a:	6122      	str	r2, [r4, #16]
 800627c:	3020      	adds	r0, #32
 800627e:	e7e3      	b.n	8006248 <__d2b+0x60>
 8006280:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006284:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006288:	f8c9 0000 	str.w	r0, [r9]
 800628c:	6918      	ldr	r0, [r3, #16]
 800628e:	f7ff fd2b 	bl	8005ce8 <__hi0bits>
 8006292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006296:	e7df      	b.n	8006258 <__d2b+0x70>
 8006298:	08008447 	.word	0x08008447
 800629c:	080083eb 	.word	0x080083eb

080062a0 <_mprec_log10>:
 80062a0:	2817      	cmp	r0, #23
 80062a2:	b5d0      	push	{r4, r6, r7, lr}
 80062a4:	4604      	mov	r4, r0
 80062a6:	dc07      	bgt.n	80062b8 <_mprec_log10+0x18>
 80062a8:	4809      	ldr	r0, [pc, #36]	; (80062d0 <_mprec_log10+0x30>)
 80062aa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80062ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80062b2:	ec41 0b10 	vmov	d0, r0, r1
 80062b6:	bdd0      	pop	{r4, r6, r7, pc}
 80062b8:	4906      	ldr	r1, [pc, #24]	; (80062d4 <_mprec_log10+0x34>)
 80062ba:	4f07      	ldr	r7, [pc, #28]	; (80062d8 <_mprec_log10+0x38>)
 80062bc:	2000      	movs	r0, #0
 80062be:	2600      	movs	r6, #0
 80062c0:	4632      	mov	r2, r6
 80062c2:	463b      	mov	r3, r7
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	3c01      	subs	r4, #1
 80062ca:	d1f9      	bne.n	80062c0 <_mprec_log10+0x20>
 80062cc:	e7f1      	b.n	80062b2 <_mprec_log10+0x12>
 80062ce:	bf00      	nop
 80062d0:	08008480 	.word	0x08008480
 80062d4:	3ff00000 	.word	0x3ff00000
 80062d8:	40240000 	.word	0x40240000

080062dc <_calloc_r>:
 80062dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062de:	fba1 2402 	umull	r2, r4, r1, r2
 80062e2:	b94c      	cbnz	r4, 80062f8 <_calloc_r+0x1c>
 80062e4:	4611      	mov	r1, r2
 80062e6:	9201      	str	r2, [sp, #4]
 80062e8:	f000 f82e 	bl	8006348 <_malloc_r>
 80062ec:	9a01      	ldr	r2, [sp, #4]
 80062ee:	4605      	mov	r5, r0
 80062f0:	b930      	cbnz	r0, 8006300 <_calloc_r+0x24>
 80062f2:	4628      	mov	r0, r5
 80062f4:	b003      	add	sp, #12
 80062f6:	bd30      	pop	{r4, r5, pc}
 80062f8:	220c      	movs	r2, #12
 80062fa:	6002      	str	r2, [r0, #0]
 80062fc:	2500      	movs	r5, #0
 80062fe:	e7f8      	b.n	80062f2 <_calloc_r+0x16>
 8006300:	4621      	mov	r1, r4
 8006302:	f7ff fae9 	bl	80058d8 <memset>
 8006306:	e7f4      	b.n	80062f2 <_calloc_r+0x16>

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0e      	ldr	r6, [pc, #56]	; (8006344 <sbrk_aligned+0x3c>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f000 fbaa 	bl	8006a6c <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fba5 	bl	8006a6c <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d00a      	beq.n	800633c <sbrk_aligned+0x34>
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d007      	beq.n	8006340 <sbrk_aligned+0x38>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fb9a 	bl	8006a6c <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d101      	bne.n	8006340 <sbrk_aligned+0x38>
 800633c:	f04f 34ff 	mov.w	r4, #4294967295
 8006340:	4620      	mov	r0, r4
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	200002f8 	.word	0x200002f8

08006348 <_malloc_r>:
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	1ccd      	adds	r5, r1, #3
 800634e:	f025 0503 	bic.w	r5, r5, #3
 8006352:	3508      	adds	r5, #8
 8006354:	2d0c      	cmp	r5, #12
 8006356:	bf38      	it	cc
 8006358:	250c      	movcc	r5, #12
 800635a:	2d00      	cmp	r5, #0
 800635c:	4607      	mov	r7, r0
 800635e:	db01      	blt.n	8006364 <_malloc_r+0x1c>
 8006360:	42a9      	cmp	r1, r5
 8006362:	d905      	bls.n	8006370 <_malloc_r+0x28>
 8006364:	230c      	movs	r3, #12
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	2600      	movs	r6, #0
 800636a:	4630      	mov	r0, r6
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	4e2e      	ldr	r6, [pc, #184]	; (800642c <_malloc_r+0xe4>)
 8006372:	f001 fa6d 	bl	8007850 <__malloc_lock>
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	461c      	mov	r4, r3
 800637a:	bb34      	cbnz	r4, 80063ca <_malloc_r+0x82>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	f7ff ffc2 	bl	8006308 <sbrk_aligned>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	4604      	mov	r4, r0
 8006388:	d14d      	bne.n	8006426 <_malloc_r+0xde>
 800638a:	6834      	ldr	r4, [r6, #0]
 800638c:	4626      	mov	r6, r4
 800638e:	2e00      	cmp	r6, #0
 8006390:	d140      	bne.n	8006414 <_malloc_r+0xcc>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	4631      	mov	r1, r6
 8006396:	4638      	mov	r0, r7
 8006398:	eb04 0803 	add.w	r8, r4, r3
 800639c:	f000 fb66 	bl	8006a6c <_sbrk_r>
 80063a0:	4580      	cmp	r8, r0
 80063a2:	d13a      	bne.n	800641a <_malloc_r+0xd2>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	3503      	adds	r5, #3
 80063a8:	1a6d      	subs	r5, r5, r1
 80063aa:	f025 0503 	bic.w	r5, r5, #3
 80063ae:	3508      	adds	r5, #8
 80063b0:	2d0c      	cmp	r5, #12
 80063b2:	bf38      	it	cc
 80063b4:	250c      	movcc	r5, #12
 80063b6:	4629      	mov	r1, r5
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7ff ffa5 	bl	8006308 <sbrk_aligned>
 80063be:	3001      	adds	r0, #1
 80063c0:	d02b      	beq.n	800641a <_malloc_r+0xd2>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	442b      	add	r3, r5
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	e00e      	b.n	80063e8 <_malloc_r+0xa0>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	1b52      	subs	r2, r2, r5
 80063ce:	d41e      	bmi.n	800640e <_malloc_r+0xc6>
 80063d0:	2a0b      	cmp	r2, #11
 80063d2:	d916      	bls.n	8006402 <_malloc_r+0xba>
 80063d4:	1961      	adds	r1, r4, r5
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	6025      	str	r5, [r4, #0]
 80063da:	bf18      	it	ne
 80063dc:	6059      	strne	r1, [r3, #4]
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	bf08      	it	eq
 80063e2:	6031      	streq	r1, [r6, #0]
 80063e4:	5162      	str	r2, [r4, r5]
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	4638      	mov	r0, r7
 80063ea:	f104 060b 	add.w	r6, r4, #11
 80063ee:	f001 fa35 	bl	800785c <__malloc_unlock>
 80063f2:	f026 0607 	bic.w	r6, r6, #7
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	1af2      	subs	r2, r6, r3
 80063fa:	d0b6      	beq.n	800636a <_malloc_r+0x22>
 80063fc:	1b9b      	subs	r3, r3, r6
 80063fe:	50a3      	str	r3, [r4, r2]
 8006400:	e7b3      	b.n	800636a <_malloc_r+0x22>
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	bf0c      	ite	eq
 8006408:	6032      	streq	r2, [r6, #0]
 800640a:	605a      	strne	r2, [r3, #4]
 800640c:	e7ec      	b.n	80063e8 <_malloc_r+0xa0>
 800640e:	4623      	mov	r3, r4
 8006410:	6864      	ldr	r4, [r4, #4]
 8006412:	e7b2      	b.n	800637a <_malloc_r+0x32>
 8006414:	4634      	mov	r4, r6
 8006416:	6876      	ldr	r6, [r6, #4]
 8006418:	e7b9      	b.n	800638e <_malloc_r+0x46>
 800641a:	230c      	movs	r3, #12
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	4638      	mov	r0, r7
 8006420:	f001 fa1c 	bl	800785c <__malloc_unlock>
 8006424:	e7a1      	b.n	800636a <_malloc_r+0x22>
 8006426:	6025      	str	r5, [r4, #0]
 8006428:	e7de      	b.n	80063e8 <_malloc_r+0xa0>
 800642a:	bf00      	nop
 800642c:	200002f4 	.word	0x200002f4

08006430 <_realloc_r>:
 8006430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006434:	4680      	mov	r8, r0
 8006436:	4614      	mov	r4, r2
 8006438:	460e      	mov	r6, r1
 800643a:	b921      	cbnz	r1, 8006446 <_realloc_r+0x16>
 800643c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	4611      	mov	r1, r2
 8006442:	f7ff bf81 	b.w	8006348 <_malloc_r>
 8006446:	b92a      	cbnz	r2, 8006454 <_realloc_r+0x24>
 8006448:	f001 fa0e 	bl	8007868 <_free_r>
 800644c:	4625      	mov	r5, r4
 800644e:	4628      	mov	r0, r5
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	f001 fa54 	bl	8007900 <_malloc_usable_size_r>
 8006458:	4284      	cmp	r4, r0
 800645a:	4607      	mov	r7, r0
 800645c:	d802      	bhi.n	8006464 <_realloc_r+0x34>
 800645e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006462:	d812      	bhi.n	800648a <_realloc_r+0x5a>
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff ff6e 	bl	8006348 <_malloc_r>
 800646c:	4605      	mov	r5, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d0ed      	beq.n	800644e <_realloc_r+0x1e>
 8006472:	42bc      	cmp	r4, r7
 8006474:	4622      	mov	r2, r4
 8006476:	4631      	mov	r1, r6
 8006478:	bf28      	it	cs
 800647a:	463a      	movcs	r2, r7
 800647c:	f001 f9c0 	bl	8007800 <memcpy>
 8006480:	4631      	mov	r1, r6
 8006482:	4640      	mov	r0, r8
 8006484:	f001 f9f0 	bl	8007868 <_free_r>
 8006488:	e7e1      	b.n	800644e <_realloc_r+0x1e>
 800648a:	4635      	mov	r5, r6
 800648c:	e7df      	b.n	800644e <_realloc_r+0x1e>

0800648e <__ssputs_r>:
 800648e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006492:	688e      	ldr	r6, [r1, #8]
 8006494:	429e      	cmp	r6, r3
 8006496:	4682      	mov	sl, r0
 8006498:	460c      	mov	r4, r1
 800649a:	4690      	mov	r8, r2
 800649c:	461f      	mov	r7, r3
 800649e:	d838      	bhi.n	8006512 <__ssputs_r+0x84>
 80064a0:	898a      	ldrh	r2, [r1, #12]
 80064a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064a6:	d032      	beq.n	800650e <__ssputs_r+0x80>
 80064a8:	6825      	ldr	r5, [r4, #0]
 80064aa:	6909      	ldr	r1, [r1, #16]
 80064ac:	eba5 0901 	sub.w	r9, r5, r1
 80064b0:	6965      	ldr	r5, [r4, #20]
 80064b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064ba:	3301      	adds	r3, #1
 80064bc:	444b      	add	r3, r9
 80064be:	106d      	asrs	r5, r5, #1
 80064c0:	429d      	cmp	r5, r3
 80064c2:	bf38      	it	cc
 80064c4:	461d      	movcc	r5, r3
 80064c6:	0553      	lsls	r3, r2, #21
 80064c8:	d531      	bpl.n	800652e <__ssputs_r+0xa0>
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7ff ff3c 	bl	8006348 <_malloc_r>
 80064d0:	4606      	mov	r6, r0
 80064d2:	b950      	cbnz	r0, 80064ea <__ssputs_r+0x5c>
 80064d4:	230c      	movs	r3, #12
 80064d6:	f8ca 3000 	str.w	r3, [sl]
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	6921      	ldr	r1, [r4, #16]
 80064ec:	464a      	mov	r2, r9
 80064ee:	f001 f987 	bl	8007800 <memcpy>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	6126      	str	r6, [r4, #16]
 8006500:	6165      	str	r5, [r4, #20]
 8006502:	444e      	add	r6, r9
 8006504:	eba5 0509 	sub.w	r5, r5, r9
 8006508:	6026      	str	r6, [r4, #0]
 800650a:	60a5      	str	r5, [r4, #8]
 800650c:	463e      	mov	r6, r7
 800650e:	42be      	cmp	r6, r7
 8006510:	d900      	bls.n	8006514 <__ssputs_r+0x86>
 8006512:	463e      	mov	r6, r7
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	4632      	mov	r2, r6
 8006518:	4641      	mov	r1, r8
 800651a:	f001 f97f 	bl	800781c <memmove>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	1b9b      	subs	r3, r3, r6
 8006522:	60a3      	str	r3, [r4, #8]
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	4433      	add	r3, r6
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	2000      	movs	r0, #0
 800652c:	e7db      	b.n	80064e6 <__ssputs_r+0x58>
 800652e:	462a      	mov	r2, r5
 8006530:	f7ff ff7e 	bl	8006430 <_realloc_r>
 8006534:	4606      	mov	r6, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	d1e1      	bne.n	80064fe <__ssputs_r+0x70>
 800653a:	6921      	ldr	r1, [r4, #16]
 800653c:	4650      	mov	r0, sl
 800653e:	f001 f993 	bl	8007868 <_free_r>
 8006542:	e7c7      	b.n	80064d4 <__ssputs_r+0x46>

08006544 <_svfiprintf_r>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	4698      	mov	r8, r3
 800654a:	898b      	ldrh	r3, [r1, #12]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	b09d      	sub	sp, #116	; 0x74
 8006550:	4607      	mov	r7, r0
 8006552:	460d      	mov	r5, r1
 8006554:	4614      	mov	r4, r2
 8006556:	d50e      	bpl.n	8006576 <_svfiprintf_r+0x32>
 8006558:	690b      	ldr	r3, [r1, #16]
 800655a:	b963      	cbnz	r3, 8006576 <_svfiprintf_r+0x32>
 800655c:	2140      	movs	r1, #64	; 0x40
 800655e:	f7ff fef3 	bl	8006348 <_malloc_r>
 8006562:	6028      	str	r0, [r5, #0]
 8006564:	6128      	str	r0, [r5, #16]
 8006566:	b920      	cbnz	r0, 8006572 <_svfiprintf_r+0x2e>
 8006568:	230c      	movs	r3, #12
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	e0d1      	b.n	8006716 <_svfiprintf_r+0x1d2>
 8006572:	2340      	movs	r3, #64	; 0x40
 8006574:	616b      	str	r3, [r5, #20]
 8006576:	2300      	movs	r3, #0
 8006578:	9309      	str	r3, [sp, #36]	; 0x24
 800657a:	2320      	movs	r3, #32
 800657c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006580:	f8cd 800c 	str.w	r8, [sp, #12]
 8006584:	2330      	movs	r3, #48	; 0x30
 8006586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006730 <_svfiprintf_r+0x1ec>
 800658a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800658e:	f04f 0901 	mov.w	r9, #1
 8006592:	4623      	mov	r3, r4
 8006594:	469a      	mov	sl, r3
 8006596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800659a:	b10a      	cbz	r2, 80065a0 <_svfiprintf_r+0x5c>
 800659c:	2a25      	cmp	r2, #37	; 0x25
 800659e:	d1f9      	bne.n	8006594 <_svfiprintf_r+0x50>
 80065a0:	ebba 0b04 	subs.w	fp, sl, r4
 80065a4:	d00b      	beq.n	80065be <_svfiprintf_r+0x7a>
 80065a6:	465b      	mov	r3, fp
 80065a8:	4622      	mov	r2, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff ff6e 	bl	800648e <__ssputs_r>
 80065b2:	3001      	adds	r0, #1
 80065b4:	f000 80aa 	beq.w	800670c <_svfiprintf_r+0x1c8>
 80065b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ba:	445a      	add	r2, fp
 80065bc:	9209      	str	r2, [sp, #36]	; 0x24
 80065be:	f89a 3000 	ldrb.w	r3, [sl]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80a2 	beq.w	800670c <_svfiprintf_r+0x1c8>
 80065c8:	2300      	movs	r3, #0
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d2:	f10a 0a01 	add.w	sl, sl, #1
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	9307      	str	r3, [sp, #28]
 80065da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065de:	931a      	str	r3, [sp, #104]	; 0x68
 80065e0:	4654      	mov	r4, sl
 80065e2:	2205      	movs	r2, #5
 80065e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e8:	4851      	ldr	r0, [pc, #324]	; (8006730 <_svfiprintf_r+0x1ec>)
 80065ea:	f7f9 fdf9 	bl	80001e0 <memchr>
 80065ee:	9a04      	ldr	r2, [sp, #16]
 80065f0:	b9d8      	cbnz	r0, 800662a <_svfiprintf_r+0xe6>
 80065f2:	06d0      	lsls	r0, r2, #27
 80065f4:	bf44      	itt	mi
 80065f6:	2320      	movmi	r3, #32
 80065f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065fc:	0711      	lsls	r1, r2, #28
 80065fe:	bf44      	itt	mi
 8006600:	232b      	movmi	r3, #43	; 0x2b
 8006602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006606:	f89a 3000 	ldrb.w	r3, [sl]
 800660a:	2b2a      	cmp	r3, #42	; 0x2a
 800660c:	d015      	beq.n	800663a <_svfiprintf_r+0xf6>
 800660e:	9a07      	ldr	r2, [sp, #28]
 8006610:	4654      	mov	r4, sl
 8006612:	2000      	movs	r0, #0
 8006614:	f04f 0c0a 	mov.w	ip, #10
 8006618:	4621      	mov	r1, r4
 800661a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661e:	3b30      	subs	r3, #48	; 0x30
 8006620:	2b09      	cmp	r3, #9
 8006622:	d94e      	bls.n	80066c2 <_svfiprintf_r+0x17e>
 8006624:	b1b0      	cbz	r0, 8006654 <_svfiprintf_r+0x110>
 8006626:	9207      	str	r2, [sp, #28]
 8006628:	e014      	b.n	8006654 <_svfiprintf_r+0x110>
 800662a:	eba0 0308 	sub.w	r3, r0, r8
 800662e:	fa09 f303 	lsl.w	r3, r9, r3
 8006632:	4313      	orrs	r3, r2
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	46a2      	mov	sl, r4
 8006638:	e7d2      	b.n	80065e0 <_svfiprintf_r+0x9c>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	1d19      	adds	r1, r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	9103      	str	r1, [sp, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfbb      	ittet	lt
 8006646:	425b      	neglt	r3, r3
 8006648:	f042 0202 	orrlt.w	r2, r2, #2
 800664c:	9307      	strge	r3, [sp, #28]
 800664e:	9307      	strlt	r3, [sp, #28]
 8006650:	bfb8      	it	lt
 8006652:	9204      	strlt	r2, [sp, #16]
 8006654:	7823      	ldrb	r3, [r4, #0]
 8006656:	2b2e      	cmp	r3, #46	; 0x2e
 8006658:	d10c      	bne.n	8006674 <_svfiprintf_r+0x130>
 800665a:	7863      	ldrb	r3, [r4, #1]
 800665c:	2b2a      	cmp	r3, #42	; 0x2a
 800665e:	d135      	bne.n	80066cc <_svfiprintf_r+0x188>
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	1d1a      	adds	r2, r3, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	9203      	str	r2, [sp, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	bfb8      	it	lt
 800666c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006670:	3402      	adds	r4, #2
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006740 <_svfiprintf_r+0x1fc>
 8006678:	7821      	ldrb	r1, [r4, #0]
 800667a:	2203      	movs	r2, #3
 800667c:	4650      	mov	r0, sl
 800667e:	f7f9 fdaf 	bl	80001e0 <memchr>
 8006682:	b140      	cbz	r0, 8006696 <_svfiprintf_r+0x152>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	eba0 000a 	sub.w	r0, r0, sl
 800668a:	fa03 f000 	lsl.w	r0, r3, r0
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	4303      	orrs	r3, r0
 8006692:	3401      	adds	r4, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669a:	4826      	ldr	r0, [pc, #152]	; (8006734 <_svfiprintf_r+0x1f0>)
 800669c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a0:	2206      	movs	r2, #6
 80066a2:	f7f9 fd9d 	bl	80001e0 <memchr>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d038      	beq.n	800671c <_svfiprintf_r+0x1d8>
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <_svfiprintf_r+0x1f4>)
 80066ac:	bb1b      	cbnz	r3, 80066f6 <_svfiprintf_r+0x1b2>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	f023 0307 	bic.w	r3, r3, #7
 80066b6:	3308      	adds	r3, #8
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	4433      	add	r3, r6
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	e767      	b.n	8006592 <_svfiprintf_r+0x4e>
 80066c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c6:	460c      	mov	r4, r1
 80066c8:	2001      	movs	r0, #1
 80066ca:	e7a5      	b.n	8006618 <_svfiprintf_r+0xd4>
 80066cc:	2300      	movs	r3, #0
 80066ce:	3401      	adds	r4, #1
 80066d0:	9305      	str	r3, [sp, #20]
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 0c0a 	mov.w	ip, #10
 80066d8:	4620      	mov	r0, r4
 80066da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066de:	3a30      	subs	r2, #48	; 0x30
 80066e0:	2a09      	cmp	r2, #9
 80066e2:	d903      	bls.n	80066ec <_svfiprintf_r+0x1a8>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0c5      	beq.n	8006674 <_svfiprintf_r+0x130>
 80066e8:	9105      	str	r1, [sp, #20]
 80066ea:	e7c3      	b.n	8006674 <_svfiprintf_r+0x130>
 80066ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f0:	4604      	mov	r4, r0
 80066f2:	2301      	movs	r3, #1
 80066f4:	e7f0      	b.n	80066d8 <_svfiprintf_r+0x194>
 80066f6:	ab03      	add	r3, sp, #12
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	462a      	mov	r2, r5
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <_svfiprintf_r+0x1f8>)
 80066fe:	a904      	add	r1, sp, #16
 8006700:	4638      	mov	r0, r7
 8006702:	f3af 8000 	nop.w
 8006706:	1c42      	adds	r2, r0, #1
 8006708:	4606      	mov	r6, r0
 800670a:	d1d6      	bne.n	80066ba <_svfiprintf_r+0x176>
 800670c:	89ab      	ldrh	r3, [r5, #12]
 800670e:	065b      	lsls	r3, r3, #25
 8006710:	f53f af2c 	bmi.w	800656c <_svfiprintf_r+0x28>
 8006714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006716:	b01d      	add	sp, #116	; 0x74
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	ab03      	add	r3, sp, #12
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	462a      	mov	r2, r5
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <_svfiprintf_r+0x1f8>)
 8006724:	a904      	add	r1, sp, #16
 8006726:	4638      	mov	r0, r7
 8006728:	f000 f87a 	bl	8006820 <_printf_i>
 800672c:	e7eb      	b.n	8006706 <_svfiprintf_r+0x1c2>
 800672e:	bf00      	nop
 8006730:	08008554 	.word	0x08008554
 8006734:	0800855e 	.word	0x0800855e
 8006738:	00000000 	.word	0x00000000
 800673c:	0800648f 	.word	0x0800648f
 8006740:	0800855a 	.word	0x0800855a

08006744 <_printf_common>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4616      	mov	r6, r2
 800674a:	4699      	mov	r9, r3
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	4293      	cmp	r3, r2
 8006756:	bfb8      	it	lt
 8006758:	4613      	movlt	r3, r2
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006760:	4607      	mov	r7, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b10a      	cbz	r2, 800676a <_printf_common+0x26>
 8006766:	3301      	adds	r3, #1
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	0699      	lsls	r1, r3, #26
 800676e:	bf42      	ittt	mi
 8006770:	6833      	ldrmi	r3, [r6, #0]
 8006772:	3302      	addmi	r3, #2
 8006774:	6033      	strmi	r3, [r6, #0]
 8006776:	6825      	ldr	r5, [r4, #0]
 8006778:	f015 0506 	ands.w	r5, r5, #6
 800677c:	d106      	bne.n	800678c <_printf_common+0x48>
 800677e:	f104 0a19 	add.w	sl, r4, #25
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	6832      	ldr	r2, [r6, #0]
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	42ab      	cmp	r3, r5
 800678a:	dc26      	bgt.n	80067da <_printf_common+0x96>
 800678c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006790:	1e13      	subs	r3, r2, #0
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	bf18      	it	ne
 8006796:	2301      	movne	r3, #1
 8006798:	0692      	lsls	r2, r2, #26
 800679a:	d42b      	bmi.n	80067f4 <_printf_common+0xb0>
 800679c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a0:	4649      	mov	r1, r9
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c0      	blx	r8
 80067a6:	3001      	adds	r0, #1
 80067a8:	d01e      	beq.n	80067e8 <_printf_common+0xa4>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	68e5      	ldr	r5, [r4, #12]
 80067ae:	6832      	ldr	r2, [r6, #0]
 80067b0:	f003 0306 	and.w	r3, r3, #6
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	bf08      	it	eq
 80067b8:	1aad      	subeq	r5, r5, r2
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	bf0c      	ite	eq
 80067c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c4:	2500      	movne	r5, #0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bfc4      	itt	gt
 80067ca:	1a9b      	subgt	r3, r3, r2
 80067cc:	18ed      	addgt	r5, r5, r3
 80067ce:	2600      	movs	r6, #0
 80067d0:	341a      	adds	r4, #26
 80067d2:	42b5      	cmp	r5, r6
 80067d4:	d11a      	bne.n	800680c <_printf_common+0xc8>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e008      	b.n	80067ec <_printf_common+0xa8>
 80067da:	2301      	movs	r3, #1
 80067dc:	4652      	mov	r2, sl
 80067de:	4649      	mov	r1, r9
 80067e0:	4638      	mov	r0, r7
 80067e2:	47c0      	blx	r8
 80067e4:	3001      	adds	r0, #1
 80067e6:	d103      	bne.n	80067f0 <_printf_common+0xac>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7c6      	b.n	8006782 <_printf_common+0x3e>
 80067f4:	18e1      	adds	r1, r4, r3
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	2030      	movs	r0, #48	; 0x30
 80067fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067fe:	4422      	add	r2, r4
 8006800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006808:	3302      	adds	r3, #2
 800680a:	e7c7      	b.n	800679c <_printf_common+0x58>
 800680c:	2301      	movs	r3, #1
 800680e:	4622      	mov	r2, r4
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d0e6      	beq.n	80067e8 <_printf_common+0xa4>
 800681a:	3601      	adds	r6, #1
 800681c:	e7d9      	b.n	80067d2 <_printf_common+0x8e>
	...

08006820 <_printf_i>:
 8006820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	7e0f      	ldrb	r7, [r1, #24]
 8006826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006828:	2f78      	cmp	r7, #120	; 0x78
 800682a:	4691      	mov	r9, r2
 800682c:	4680      	mov	r8, r0
 800682e:	460c      	mov	r4, r1
 8006830:	469a      	mov	sl, r3
 8006832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006836:	d807      	bhi.n	8006848 <_printf_i+0x28>
 8006838:	2f62      	cmp	r7, #98	; 0x62
 800683a:	d80a      	bhi.n	8006852 <_printf_i+0x32>
 800683c:	2f00      	cmp	r7, #0
 800683e:	f000 80d8 	beq.w	80069f2 <_printf_i+0x1d2>
 8006842:	2f58      	cmp	r7, #88	; 0x58
 8006844:	f000 80a3 	beq.w	800698e <_printf_i+0x16e>
 8006848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800684c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006850:	e03a      	b.n	80068c8 <_printf_i+0xa8>
 8006852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006856:	2b15      	cmp	r3, #21
 8006858:	d8f6      	bhi.n	8006848 <_printf_i+0x28>
 800685a:	a101      	add	r1, pc, #4	; (adr r1, 8006860 <_printf_i+0x40>)
 800685c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068cd 	.word	0x080068cd
 8006868:	08006849 	.word	0x08006849
 800686c:	08006849 	.word	0x08006849
 8006870:	08006849 	.word	0x08006849
 8006874:	08006849 	.word	0x08006849
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006849 	.word	0x08006849
 8006880:	08006849 	.word	0x08006849
 8006884:	08006849 	.word	0x08006849
 8006888:	08006849 	.word	0x08006849
 800688c:	080069d9 	.word	0x080069d9
 8006890:	080068fd 	.word	0x080068fd
 8006894:	080069bb 	.word	0x080069bb
 8006898:	08006849 	.word	0x08006849
 800689c:	08006849 	.word	0x08006849
 80068a0:	080069fb 	.word	0x080069fb
 80068a4:	08006849 	.word	0x08006849
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006849 	.word	0x08006849
 80068b0:	08006849 	.word	0x08006849
 80068b4:	080069c3 	.word	0x080069c3
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0a3      	b.n	8006a14 <_printf_i+0x1f4>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	6829      	ldr	r1, [r5, #0]
 80068d0:	0606      	lsls	r6, r0, #24
 80068d2:	f101 0304 	add.w	r3, r1, #4
 80068d6:	d50a      	bpl.n	80068ee <_printf_i+0xce>
 80068d8:	680e      	ldr	r6, [r1, #0]
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	2e00      	cmp	r6, #0
 80068de:	da03      	bge.n	80068e8 <_printf_i+0xc8>
 80068e0:	232d      	movs	r3, #45	; 0x2d
 80068e2:	4276      	negs	r6, r6
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	485e      	ldr	r0, [pc, #376]	; (8006a64 <_printf_i+0x244>)
 80068ea:	230a      	movs	r3, #10
 80068ec:	e019      	b.n	8006922 <_printf_i+0x102>
 80068ee:	680e      	ldr	r6, [r1, #0]
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068f6:	bf18      	it	ne
 80068f8:	b236      	sxthne	r6, r6
 80068fa:	e7ef      	b.n	80068dc <_printf_i+0xbc>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	6820      	ldr	r0, [r4, #0]
 8006900:	1d19      	adds	r1, r3, #4
 8006902:	6029      	str	r1, [r5, #0]
 8006904:	0601      	lsls	r1, r0, #24
 8006906:	d501      	bpl.n	800690c <_printf_i+0xec>
 8006908:	681e      	ldr	r6, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0xf2>
 800690c:	0646      	lsls	r6, r0, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0xe8>
 8006910:	881e      	ldrh	r6, [r3, #0]
 8006912:	4854      	ldr	r0, [pc, #336]	; (8006a64 <_printf_i+0x244>)
 8006914:	2f6f      	cmp	r7, #111	; 0x6f
 8006916:	bf0c      	ite	eq
 8006918:	2308      	moveq	r3, #8
 800691a:	230a      	movne	r3, #10
 800691c:	2100      	movs	r1, #0
 800691e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006922:	6865      	ldr	r5, [r4, #4]
 8006924:	60a5      	str	r5, [r4, #8]
 8006926:	2d00      	cmp	r5, #0
 8006928:	bfa2      	ittt	ge
 800692a:	6821      	ldrge	r1, [r4, #0]
 800692c:	f021 0104 	bicge.w	r1, r1, #4
 8006930:	6021      	strge	r1, [r4, #0]
 8006932:	b90e      	cbnz	r6, 8006938 <_printf_i+0x118>
 8006934:	2d00      	cmp	r5, #0
 8006936:	d04d      	beq.n	80069d4 <_printf_i+0x1b4>
 8006938:	4615      	mov	r5, r2
 800693a:	fbb6 f1f3 	udiv	r1, r6, r3
 800693e:	fb03 6711 	mls	r7, r3, r1, r6
 8006942:	5dc7      	ldrb	r7, [r0, r7]
 8006944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006948:	4637      	mov	r7, r6
 800694a:	42bb      	cmp	r3, r7
 800694c:	460e      	mov	r6, r1
 800694e:	d9f4      	bls.n	800693a <_printf_i+0x11a>
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10b      	bne.n	800696c <_printf_i+0x14c>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07de      	lsls	r6, r3, #31
 8006958:	d508      	bpl.n	800696c <_printf_i+0x14c>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	4299      	cmp	r1, r3
 8006960:	bfde      	ittt	le
 8006962:	2330      	movle	r3, #48	; 0x30
 8006964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800696c:	1b52      	subs	r2, r2, r5
 800696e:	6122      	str	r2, [r4, #16]
 8006970:	f8cd a000 	str.w	sl, [sp]
 8006974:	464b      	mov	r3, r9
 8006976:	aa03      	add	r2, sp, #12
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fee2 	bl	8006744 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	d14c      	bne.n	8006a1e <_printf_i+0x1fe>
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	b004      	add	sp, #16
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	4835      	ldr	r0, [pc, #212]	; (8006a64 <_printf_i+0x244>)
 8006990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006994:	6829      	ldr	r1, [r5, #0]
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f851 6b04 	ldr.w	r6, [r1], #4
 800699c:	6029      	str	r1, [r5, #0]
 800699e:	061d      	lsls	r5, r3, #24
 80069a0:	d514      	bpl.n	80069cc <_printf_i+0x1ac>
 80069a2:	07df      	lsls	r7, r3, #31
 80069a4:	bf44      	itt	mi
 80069a6:	f043 0320 	orrmi.w	r3, r3, #32
 80069aa:	6023      	strmi	r3, [r4, #0]
 80069ac:	b91e      	cbnz	r6, 80069b6 <_printf_i+0x196>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	2310      	movs	r3, #16
 80069b8:	e7b0      	b.n	800691c <_printf_i+0xfc>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f043 0320 	orr.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	2378      	movs	r3, #120	; 0x78
 80069c4:	4828      	ldr	r0, [pc, #160]	; (8006a68 <_printf_i+0x248>)
 80069c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ca:	e7e3      	b.n	8006994 <_printf_i+0x174>
 80069cc:	0659      	lsls	r1, r3, #25
 80069ce:	bf48      	it	mi
 80069d0:	b2b6      	uxthmi	r6, r6
 80069d2:	e7e6      	b.n	80069a2 <_printf_i+0x182>
 80069d4:	4615      	mov	r5, r2
 80069d6:	e7bb      	b.n	8006950 <_printf_i+0x130>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	6826      	ldr	r6, [r4, #0]
 80069dc:	6961      	ldr	r1, [r4, #20]
 80069de:	1d18      	adds	r0, r3, #4
 80069e0:	6028      	str	r0, [r5, #0]
 80069e2:	0635      	lsls	r5, r6, #24
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0x1cc>
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0x1d2>
 80069ec:	0670      	lsls	r0, r6, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0x1c8>
 80069f0:	8019      	strh	r1, [r3, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	4615      	mov	r5, r2
 80069f8:	e7ba      	b.n	8006970 <_printf_i+0x150>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	602a      	str	r2, [r5, #0]
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	2100      	movs	r1, #0
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7f9 fbea 	bl	80001e0 <memchr>
 8006a0c:	b108      	cbz	r0, 8006a12 <_printf_i+0x1f2>
 8006a0e:	1b40      	subs	r0, r0, r5
 8006a10:	6060      	str	r0, [r4, #4]
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	6123      	str	r3, [r4, #16]
 8006a16:	2300      	movs	r3, #0
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	e7a8      	b.n	8006970 <_printf_i+0x150>
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	47d0      	blx	sl
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d0ab      	beq.n	8006984 <_printf_i+0x164>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	079b      	lsls	r3, r3, #30
 8006a30:	d413      	bmi.n	8006a5a <_printf_i+0x23a>
 8006a32:	68e0      	ldr	r0, [r4, #12]
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	4298      	cmp	r0, r3
 8006a38:	bfb8      	it	lt
 8006a3a:	4618      	movlt	r0, r3
 8006a3c:	e7a4      	b.n	8006988 <_printf_i+0x168>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4632      	mov	r2, r6
 8006a42:	4649      	mov	r1, r9
 8006a44:	4640      	mov	r0, r8
 8006a46:	47d0      	blx	sl
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d09b      	beq.n	8006984 <_printf_i+0x164>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	9903      	ldr	r1, [sp, #12]
 8006a52:	1a5b      	subs	r3, r3, r1
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dcf2      	bgt.n	8006a3e <_printf_i+0x21e>
 8006a58:	e7eb      	b.n	8006a32 <_printf_i+0x212>
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	f104 0619 	add.w	r6, r4, #25
 8006a60:	e7f5      	b.n	8006a4e <_printf_i+0x22e>
 8006a62:	bf00      	nop
 8006a64:	08008565 	.word	0x08008565
 8006a68:	08008576 	.word	0x08008576

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	; (8006a88 <_sbrk_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fb f948 	bl	8001d0c <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	200002fc 	.word	0x200002fc

08006a8c <strcpy>:
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a92:	f803 2b01 	strb.w	r2, [r3], #1
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	d1f9      	bne.n	8006a8e <strcpy+0x2>
 8006a9a:	4770      	bx	lr

08006a9c <__assert_func>:
 8006a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <__assert_func+0x2c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	68d8      	ldr	r0, [r3, #12]
 8006aaa:	b14c      	cbz	r4, 8006ac0 <__assert_func+0x24>
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <__assert_func+0x30>)
 8006aae:	9100      	str	r1, [sp, #0]
 8006ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ab4:	4906      	ldr	r1, [pc, #24]	; (8006ad0 <__assert_func+0x34>)
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f000 fe88 	bl	80077cc <fiprintf>
 8006abc:	f001 f942 	bl	8007d44 <abort>
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <__assert_func+0x38>)
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	e7f3      	b.n	8006aae <__assert_func+0x12>
 8006ac6:	bf00      	nop
 8006ac8:	2000000c 	.word	0x2000000c
 8006acc:	08008587 	.word	0x08008587
 8006ad0:	08008594 	.word	0x08008594
 8006ad4:	080085c2 	.word	0x080085c2

08006ad8 <quorem>:
 8006ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	6903      	ldr	r3, [r0, #16]
 8006ade:	690c      	ldr	r4, [r1, #16]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	f2c0 8081 	blt.w	8006bea <quorem+0x112>
 8006ae8:	3c01      	subs	r4, #1
 8006aea:	f101 0814 	add.w	r8, r1, #20
 8006aee:	f100 0514 	add.w	r5, r0, #20
 8006af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006afc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b00:	3301      	adds	r3, #1
 8006b02:	429a      	cmp	r2, r3
 8006b04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b10:	d331      	bcc.n	8006b76 <quorem+0x9e>
 8006b12:	f04f 0e00 	mov.w	lr, #0
 8006b16:	4640      	mov	r0, r8
 8006b18:	46ac      	mov	ip, r5
 8006b1a:	46f2      	mov	sl, lr
 8006b1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b20:	b293      	uxth	r3, r2
 8006b22:	fb06 e303 	mla	r3, r6, r3, lr
 8006b26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b30:	f8dc a000 	ldr.w	sl, [ip]
 8006b34:	0c12      	lsrs	r2, r2, #16
 8006b36:	fa13 f38a 	uxtah	r3, r3, sl
 8006b3a:	fb06 e202 	mla	r2, r6, r2, lr
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b46:	b292      	uxth	r2, r2
 8006b48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b50:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b54:	4581      	cmp	r9, r0
 8006b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b5a:	f84c 3b04 	str.w	r3, [ip], #4
 8006b5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b62:	d2db      	bcs.n	8006b1c <quorem+0x44>
 8006b64:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b68:	b92b      	cbnz	r3, 8006b76 <quorem+0x9e>
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	3b04      	subs	r3, #4
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	d32e      	bcc.n	8006bd2 <quorem+0xfa>
 8006b74:	613c      	str	r4, [r7, #16]
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7ff fa90 	bl	800609c <__mcmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	db24      	blt.n	8006bca <quorem+0xf2>
 8006b80:	3601      	adds	r6, #1
 8006b82:	4628      	mov	r0, r5
 8006b84:	f04f 0c00 	mov.w	ip, #0
 8006b88:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b90:	b293      	uxth	r3, r2
 8006b92:	ebac 0303 	sub.w	r3, ip, r3
 8006b96:	0c12      	lsrs	r2, r2, #16
 8006b98:	fa13 f38e 	uxtah	r3, r3, lr
 8006b9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006baa:	45c1      	cmp	r9, r8
 8006bac:	f840 3b04 	str.w	r3, [r0], #4
 8006bb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bb4:	d2e8      	bcs.n	8006b88 <quorem+0xb0>
 8006bb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bbe:	b922      	cbnz	r2, 8006bca <quorem+0xf2>
 8006bc0:	3b04      	subs	r3, #4
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	d30a      	bcc.n	8006bde <quorem+0x106>
 8006bc8:	613c      	str	r4, [r7, #16]
 8006bca:	4630      	mov	r0, r6
 8006bcc:	b003      	add	sp, #12
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	d1cc      	bne.n	8006b74 <quorem+0x9c>
 8006bda:	3c01      	subs	r4, #1
 8006bdc:	e7c7      	b.n	8006b6e <quorem+0x96>
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	d1f0      	bne.n	8006bc8 <quorem+0xf0>
 8006be6:	3c01      	subs	r4, #1
 8006be8:	e7eb      	b.n	8006bc2 <quorem+0xea>
 8006bea:	2000      	movs	r0, #0
 8006bec:	e7ee      	b.n	8006bcc <quorem+0xf4>
	...

08006bf0 <_dtoa_r>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	ed2d 8b04 	vpush	{d8-d9}
 8006bf8:	ec57 6b10 	vmov	r6, r7, d0
 8006bfc:	b093      	sub	sp, #76	; 0x4c
 8006bfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c04:	9106      	str	r1, [sp, #24]
 8006c06:	ee10 aa10 	vmov	sl, s0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c10:	46bb      	mov	fp, r7
 8006c12:	b975      	cbnz	r5, 8006c32 <_dtoa_r+0x42>
 8006c14:	2010      	movs	r0, #16
 8006c16:	f000 fdeb 	bl	80077f0 <malloc>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c1e:	b920      	cbnz	r0, 8006c2a <_dtoa_r+0x3a>
 8006c20:	4ba7      	ldr	r3, [pc, #668]	; (8006ec0 <_dtoa_r+0x2d0>)
 8006c22:	21ea      	movs	r1, #234	; 0xea
 8006c24:	48a7      	ldr	r0, [pc, #668]	; (8006ec4 <_dtoa_r+0x2d4>)
 8006c26:	f7ff ff39 	bl	8006a9c <__assert_func>
 8006c2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c2e:	6005      	str	r5, [r0, #0]
 8006c30:	60c5      	str	r5, [r0, #12]
 8006c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c34:	6819      	ldr	r1, [r3, #0]
 8006c36:	b151      	cbz	r1, 8006c4e <_dtoa_r+0x5e>
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	604a      	str	r2, [r1, #4]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4093      	lsls	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7fe ffe8 	bl	8005c18 <_Bfree>
 8006c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	1e3b      	subs	r3, r7, #0
 8006c50:	bfaa      	itet	ge
 8006c52:	2300      	movge	r3, #0
 8006c54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006c58:	f8c8 3000 	strge.w	r3, [r8]
 8006c5c:	4b9a      	ldr	r3, [pc, #616]	; (8006ec8 <_dtoa_r+0x2d8>)
 8006c5e:	bfbc      	itt	lt
 8006c60:	2201      	movlt	r2, #1
 8006c62:	f8c8 2000 	strlt.w	r2, [r8]
 8006c66:	ea33 030b 	bics.w	r3, r3, fp
 8006c6a:	d11b      	bne.n	8006ca4 <_dtoa_r+0xb4>
 8006c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c78:	4333      	orrs	r3, r6
 8006c7a:	f000 8592 	beq.w	80077a2 <_dtoa_r+0xbb2>
 8006c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c80:	b963      	cbnz	r3, 8006c9c <_dtoa_r+0xac>
 8006c82:	4b92      	ldr	r3, [pc, #584]	; (8006ecc <_dtoa_r+0x2dc>)
 8006c84:	e022      	b.n	8006ccc <_dtoa_r+0xdc>
 8006c86:	4b92      	ldr	r3, [pc, #584]	; (8006ed0 <_dtoa_r+0x2e0>)
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	9801      	ldr	r0, [sp, #4]
 8006c92:	b013      	add	sp, #76	; 0x4c
 8006c94:	ecbd 8b04 	vpop	{d8-d9}
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	4b8b      	ldr	r3, [pc, #556]	; (8006ecc <_dtoa_r+0x2dc>)
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	3303      	adds	r3, #3
 8006ca2:	e7f3      	b.n	8006c8c <_dtoa_r+0x9c>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	f7f9 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cb0:	ec4b ab19 	vmov	d9, sl, fp
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	b158      	cbz	r0, 8006cd0 <_dtoa_r+0xe0>
 8006cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cba:	2301      	movs	r3, #1
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 856b 	beq.w	800779c <_dtoa_r+0xbac>
 8006cc6:	4883      	ldr	r0, [pc, #524]	; (8006ed4 <_dtoa_r+0x2e4>)
 8006cc8:	6018      	str	r0, [r3, #0]
 8006cca:	1e43      	subs	r3, r0, #1
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	e7df      	b.n	8006c90 <_dtoa_r+0xa0>
 8006cd0:	ec4b ab10 	vmov	d0, sl, fp
 8006cd4:	aa10      	add	r2, sp, #64	; 0x40
 8006cd6:	a911      	add	r1, sp, #68	; 0x44
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7ff fa85 	bl	80061e8 <__d2b>
 8006cde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ce2:	ee08 0a10 	vmov	s16, r0
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	f000 8084 	beq.w	8006df4 <_dtoa_r+0x204>
 8006cec:	ee19 3a90 	vmov	r3, s19
 8006cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cf8:	4656      	mov	r6, sl
 8006cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006d06:	4b74      	ldr	r3, [pc, #464]	; (8006ed8 <_dtoa_r+0x2e8>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fabb 	bl	8000288 <__aeabi_dsub>
 8006d12:	a365      	add	r3, pc, #404	; (adr r3, 8006ea8 <_dtoa_r+0x2b8>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 fc6e 	bl	80005f8 <__aeabi_dmul>
 8006d1c:	a364      	add	r3, pc, #400	; (adr r3, 8006eb0 <_dtoa_r+0x2c0>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fab3 	bl	800028c <__adddf3>
 8006d26:	4606      	mov	r6, r0
 8006d28:	4628      	mov	r0, r5
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	f7f9 fbfa 	bl	8000524 <__aeabi_i2d>
 8006d30:	a361      	add	r3, pc, #388	; (adr r3, 8006eb8 <_dtoa_r+0x2c8>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 faa3 	bl	800028c <__adddf3>
 8006d46:	4606      	mov	r6, r0
 8006d48:	460f      	mov	r7, r1
 8006d4a:	f7f9 feef 	bl	8000b2c <__aeabi_d2iz>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	9000      	str	r0, [sp, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	4630      	mov	r0, r6
 8006d56:	4639      	mov	r1, r7
 8006d58:	f7f9 fec0 	bl	8000adc <__aeabi_dcmplt>
 8006d5c:	b150      	cbz	r0, 8006d74 <_dtoa_r+0x184>
 8006d5e:	9800      	ldr	r0, [sp, #0]
 8006d60:	f7f9 fbe0 	bl	8000524 <__aeabi_i2d>
 8006d64:	4632      	mov	r2, r6
 8006d66:	463b      	mov	r3, r7
 8006d68:	f7f9 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6c:	b910      	cbnz	r0, 8006d74 <_dtoa_r+0x184>
 8006d6e:	9b00      	ldr	r3, [sp, #0]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	9b00      	ldr	r3, [sp, #0]
 8006d76:	2b16      	cmp	r3, #22
 8006d78:	d85a      	bhi.n	8006e30 <_dtoa_r+0x240>
 8006d7a:	9a00      	ldr	r2, [sp, #0]
 8006d7c:	4b57      	ldr	r3, [pc, #348]	; (8006edc <_dtoa_r+0x2ec>)
 8006d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	ec51 0b19 	vmov	r0, r1, d9
 8006d8a:	f7f9 fea7 	bl	8000adc <__aeabi_dcmplt>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d050      	beq.n	8006e34 <_dtoa_r+0x244>
 8006d92:	9b00      	ldr	r3, [sp, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d9e:	1b5d      	subs	r5, r3, r5
 8006da0:	1e6b      	subs	r3, r5, #1
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	bf45      	ittet	mi
 8006da6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006daa:	9304      	strmi	r3, [sp, #16]
 8006dac:	2300      	movpl	r3, #0
 8006dae:	2300      	movmi	r3, #0
 8006db0:	bf4c      	ite	mi
 8006db2:	9305      	strmi	r3, [sp, #20]
 8006db4:	9304      	strpl	r3, [sp, #16]
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	db3d      	blt.n	8006e38 <_dtoa_r+0x248>
 8006dbc:	9b05      	ldr	r3, [sp, #20]
 8006dbe:	9a00      	ldr	r2, [sp, #0]
 8006dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8006dc2:	4413      	add	r3, r2
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9307      	str	r3, [sp, #28]
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	f200 8089 	bhi.w	8006ee4 <_dtoa_r+0x2f4>
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	bfc4      	itt	gt
 8006dd6:	3b04      	subgt	r3, #4
 8006dd8:	9306      	strgt	r3, [sp, #24]
 8006dda:	9b06      	ldr	r3, [sp, #24]
 8006ddc:	f1a3 0302 	sub.w	r3, r3, #2
 8006de0:	bfcc      	ite	gt
 8006de2:	2500      	movgt	r5, #0
 8006de4:	2501      	movle	r5, #1
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	f200 8087 	bhi.w	8006efa <_dtoa_r+0x30a>
 8006dec:	e8df f003 	tbb	[pc, r3]
 8006df0:	59383a2d 	.word	0x59383a2d
 8006df4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006df8:	441d      	add	r5, r3
 8006dfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	bfc1      	itttt	gt
 8006e02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006e0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006e0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e12:	bfda      	itte	le
 8006e14:	f1c3 0320 	rsble	r3, r3, #32
 8006e18:	fa06 f003 	lslle.w	r0, r6, r3
 8006e1c:	4318      	orrgt	r0, r3
 8006e1e:	f7f9 fb71 	bl	8000504 <__aeabi_ui2d>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4606      	mov	r6, r0
 8006e26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006e2a:	3d01      	subs	r5, #1
 8006e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e2e:	e76a      	b.n	8006d06 <_dtoa_r+0x116>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e7b2      	b.n	8006d9a <_dtoa_r+0x1aa>
 8006e34:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e36:	e7b1      	b.n	8006d9c <_dtoa_r+0x1ac>
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	9a00      	ldr	r2, [sp, #0]
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	9304      	str	r3, [sp, #16]
 8006e40:	4253      	negs	r3, r2
 8006e42:	9307      	str	r3, [sp, #28]
 8006e44:	2300      	movs	r3, #0
 8006e46:	930a      	str	r3, [sp, #40]	; 0x28
 8006e48:	e7bf      	b.n	8006dca <_dtoa_r+0x1da>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dc55      	bgt.n	8006f00 <_dtoa_r+0x310>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e5e:	e00c      	b.n	8006e7a <_dtoa_r+0x28a>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e7f3      	b.n	8006e4c <_dtoa_r+0x25c>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e68:	9308      	str	r3, [sp, #32]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	9302      	str	r3, [sp, #8]
 8006e70:	3301      	adds	r3, #1
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	9303      	str	r3, [sp, #12]
 8006e76:	bfb8      	it	lt
 8006e78:	2301      	movlt	r3, #1
 8006e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	6042      	str	r2, [r0, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	f102 0614 	add.w	r6, r2, #20
 8006e86:	429e      	cmp	r6, r3
 8006e88:	6841      	ldr	r1, [r0, #4]
 8006e8a:	d93d      	bls.n	8006f08 <_dtoa_r+0x318>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f7fe fe83 	bl	8005b98 <_Balloc>
 8006e92:	9001      	str	r0, [sp, #4]
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d13b      	bne.n	8006f10 <_dtoa_r+0x320>
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <_dtoa_r+0x2f0>)
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ea0:	e6c0      	b.n	8006c24 <_dtoa_r+0x34>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7df      	b.n	8006e66 <_dtoa_r+0x276>
 8006ea6:	bf00      	nop
 8006ea8:	636f4361 	.word	0x636f4361
 8006eac:	3fd287a7 	.word	0x3fd287a7
 8006eb0:	8b60c8b3 	.word	0x8b60c8b3
 8006eb4:	3fc68a28 	.word	0x3fc68a28
 8006eb8:	509f79fb 	.word	0x509f79fb
 8006ebc:	3fd34413 	.word	0x3fd34413
 8006ec0:	080083d4 	.word	0x080083d4
 8006ec4:	080085d2 	.word	0x080085d2
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	080085cc 	.word	0x080085cc
 8006ed0:	080085c3 	.word	0x080085c3
 8006ed4:	080085d1 	.word	0x080085d1
 8006ed8:	3ff80000 	.word	0x3ff80000
 8006edc:	08008480 	.word	0x08008480
 8006ee0:	08008447 	.word	0x08008447
 8006ee4:	2501      	movs	r5, #1
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9306      	str	r3, [sp, #24]
 8006eea:	9508      	str	r5, [sp, #32]
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2312      	movs	r3, #18
 8006ef8:	e7b0      	b.n	8006e5c <_dtoa_r+0x26c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	9308      	str	r3, [sp, #32]
 8006efe:	e7f5      	b.n	8006eec <_dtoa_r+0x2fc>
 8006f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f06:	e7b8      	b.n	8006e7a <_dtoa_r+0x28a>
 8006f08:	3101      	adds	r1, #1
 8006f0a:	6041      	str	r1, [r0, #4]
 8006f0c:	0052      	lsls	r2, r2, #1
 8006f0e:	e7b8      	b.n	8006e82 <_dtoa_r+0x292>
 8006f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f12:	9a01      	ldr	r2, [sp, #4]
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	2b0e      	cmp	r3, #14
 8006f1a:	f200 809d 	bhi.w	8007058 <_dtoa_r+0x468>
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	f000 809a 	beq.w	8007058 <_dtoa_r+0x468>
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dd32      	ble.n	8006f90 <_dtoa_r+0x3a0>
 8006f2a:	4ab7      	ldr	r2, [pc, #732]	; (8007208 <_dtoa_r+0x618>)
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f38:	9b00      	ldr	r3, [sp, #0]
 8006f3a:	05d8      	lsls	r0, r3, #23
 8006f3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006f40:	d516      	bpl.n	8006f70 <_dtoa_r+0x380>
 8006f42:	4bb2      	ldr	r3, [pc, #712]	; (800720c <_dtoa_r+0x61c>)
 8006f44:	ec51 0b19 	vmov	r0, r1, d9
 8006f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f4c:	f7f9 fc7e 	bl	800084c <__aeabi_ddiv>
 8006f50:	f007 070f 	and.w	r7, r7, #15
 8006f54:	4682      	mov	sl, r0
 8006f56:	468b      	mov	fp, r1
 8006f58:	2503      	movs	r5, #3
 8006f5a:	4eac      	ldr	r6, [pc, #688]	; (800720c <_dtoa_r+0x61c>)
 8006f5c:	b957      	cbnz	r7, 8006f74 <_dtoa_r+0x384>
 8006f5e:	4642      	mov	r2, r8
 8006f60:	464b      	mov	r3, r9
 8006f62:	4650      	mov	r0, sl
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7f9 fc71 	bl	800084c <__aeabi_ddiv>
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	e028      	b.n	8006fc2 <_dtoa_r+0x3d2>
 8006f70:	2502      	movs	r5, #2
 8006f72:	e7f2      	b.n	8006f5a <_dtoa_r+0x36a>
 8006f74:	07f9      	lsls	r1, r7, #31
 8006f76:	d508      	bpl.n	8006f8a <_dtoa_r+0x39a>
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	3501      	adds	r5, #1
 8006f86:	4680      	mov	r8, r0
 8006f88:	4689      	mov	r9, r1
 8006f8a:	107f      	asrs	r7, r7, #1
 8006f8c:	3608      	adds	r6, #8
 8006f8e:	e7e5      	b.n	8006f5c <_dtoa_r+0x36c>
 8006f90:	f000 809b 	beq.w	80070ca <_dtoa_r+0x4da>
 8006f94:	9b00      	ldr	r3, [sp, #0]
 8006f96:	4f9d      	ldr	r7, [pc, #628]	; (800720c <_dtoa_r+0x61c>)
 8006f98:	425e      	negs	r6, r3
 8006f9a:	4b9b      	ldr	r3, [pc, #620]	; (8007208 <_dtoa_r+0x618>)
 8006f9c:	f006 020f 	and.w	r2, r6, #15
 8006fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	ec51 0b19 	vmov	r0, r1, d9
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	1136      	asrs	r6, r6, #4
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	468b      	mov	fp, r1
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2502      	movs	r5, #2
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d17a      	bne.n	80070b4 <_dtoa_r+0x4c4>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1d3      	bne.n	8006f6a <_dtoa_r+0x37a>
 8006fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8082 	beq.w	80070ce <_dtoa_r+0x4de>
 8006fca:	4b91      	ldr	r3, [pc, #580]	; (8007210 <_dtoa_r+0x620>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4650      	mov	r0, sl
 8006fd0:	4659      	mov	r1, fp
 8006fd2:	f7f9 fd83 	bl	8000adc <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d079      	beq.n	80070ce <_dtoa_r+0x4de>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d076      	beq.n	80070ce <_dtoa_r+0x4de>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd36      	ble.n	8007054 <_dtoa_r+0x464>
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	4650      	mov	r0, sl
 8006fea:	4659      	mov	r1, fp
 8006fec:	1e5f      	subs	r7, r3, #1
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4b88      	ldr	r3, [pc, #544]	; (8007214 <_dtoa_r+0x624>)
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	9e02      	ldr	r6, [sp, #8]
 8006ff8:	4682      	mov	sl, r0
 8006ffa:	468b      	mov	fp, r1
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	4628      	mov	r0, r5
 8007000:	f7f9 fa90 	bl	8000524 <__aeabi_i2d>
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	4b82      	ldr	r3, [pc, #520]	; (8007218 <_dtoa_r+0x628>)
 800700e:	2200      	movs	r2, #0
 8007010:	f7f9 f93c 	bl	800028c <__adddf3>
 8007014:	46d0      	mov	r8, sl
 8007016:	46d9      	mov	r9, fp
 8007018:	4682      	mov	sl, r0
 800701a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800701e:	2e00      	cmp	r6, #0
 8007020:	d158      	bne.n	80070d4 <_dtoa_r+0x4e4>
 8007022:	4b7e      	ldr	r3, [pc, #504]	; (800721c <_dtoa_r+0x62c>)
 8007024:	2200      	movs	r2, #0
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 f92d 	bl	8000288 <__aeabi_dsub>
 800702e:	4652      	mov	r2, sl
 8007030:	465b      	mov	r3, fp
 8007032:	4680      	mov	r8, r0
 8007034:	4689      	mov	r9, r1
 8007036:	f7f9 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	f040 8295 	bne.w	800756a <_dtoa_r+0x97a>
 8007040:	4652      	mov	r2, sl
 8007042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8289 	bne.w	8007566 <_dtoa_r+0x976>
 8007054:	ec5b ab19 	vmov	sl, fp, d9
 8007058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800705a:	2b00      	cmp	r3, #0
 800705c:	f2c0 8148 	blt.w	80072f0 <_dtoa_r+0x700>
 8007060:	9a00      	ldr	r2, [sp, #0]
 8007062:	2a0e      	cmp	r2, #14
 8007064:	f300 8144 	bgt.w	80072f0 <_dtoa_r+0x700>
 8007068:	4b67      	ldr	r3, [pc, #412]	; (8007208 <_dtoa_r+0x618>)
 800706a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800706e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	f280 80d5 	bge.w	8007224 <_dtoa_r+0x634>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f300 80d1 	bgt.w	8007224 <_dtoa_r+0x634>
 8007082:	f040 826f 	bne.w	8007564 <_dtoa_r+0x974>
 8007086:	4b65      	ldr	r3, [pc, #404]	; (800721c <_dtoa_r+0x62c>)
 8007088:	2200      	movs	r2, #0
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 fab3 	bl	80005f8 <__aeabi_dmul>
 8007092:	4652      	mov	r2, sl
 8007094:	465b      	mov	r3, fp
 8007096:	f7f9 fd35 	bl	8000b04 <__aeabi_dcmpge>
 800709a:	9e03      	ldr	r6, [sp, #12]
 800709c:	4637      	mov	r7, r6
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8245 	bne.w	800752e <_dtoa_r+0x93e>
 80070a4:	9d01      	ldr	r5, [sp, #4]
 80070a6:	2331      	movs	r3, #49	; 0x31
 80070a8:	f805 3b01 	strb.w	r3, [r5], #1
 80070ac:	9b00      	ldr	r3, [sp, #0]
 80070ae:	3301      	adds	r3, #1
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	e240      	b.n	8007536 <_dtoa_r+0x946>
 80070b4:	07f2      	lsls	r2, r6, #31
 80070b6:	d505      	bpl.n	80070c4 <_dtoa_r+0x4d4>
 80070b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	3501      	adds	r5, #1
 80070c2:	2301      	movs	r3, #1
 80070c4:	1076      	asrs	r6, r6, #1
 80070c6:	3708      	adds	r7, #8
 80070c8:	e777      	b.n	8006fba <_dtoa_r+0x3ca>
 80070ca:	2502      	movs	r5, #2
 80070cc:	e779      	b.n	8006fc2 <_dtoa_r+0x3d2>
 80070ce:	9f00      	ldr	r7, [sp, #0]
 80070d0:	9e03      	ldr	r6, [sp, #12]
 80070d2:	e794      	b.n	8006ffe <_dtoa_r+0x40e>
 80070d4:	9901      	ldr	r1, [sp, #4]
 80070d6:	4b4c      	ldr	r3, [pc, #304]	; (8007208 <_dtoa_r+0x618>)
 80070d8:	4431      	add	r1, r6
 80070da:	910d      	str	r1, [sp, #52]	; 0x34
 80070dc:	9908      	ldr	r1, [sp, #32]
 80070de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070e6:	2900      	cmp	r1, #0
 80070e8:	d043      	beq.n	8007172 <_dtoa_r+0x582>
 80070ea:	494d      	ldr	r1, [pc, #308]	; (8007220 <_dtoa_r+0x630>)
 80070ec:	2000      	movs	r0, #0
 80070ee:	f7f9 fbad 	bl	800084c <__aeabi_ddiv>
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	f7f9 f8c7 	bl	8000288 <__aeabi_dsub>
 80070fa:	9d01      	ldr	r5, [sp, #4]
 80070fc:	4682      	mov	sl, r0
 80070fe:	468b      	mov	fp, r1
 8007100:	4649      	mov	r1, r9
 8007102:	4640      	mov	r0, r8
 8007104:	f7f9 fd12 	bl	8000b2c <__aeabi_d2iz>
 8007108:	4606      	mov	r6, r0
 800710a:	f7f9 fa0b 	bl	8000524 <__aeabi_i2d>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4640      	mov	r0, r8
 8007114:	4649      	mov	r1, r9
 8007116:	f7f9 f8b7 	bl	8000288 <__aeabi_dsub>
 800711a:	3630      	adds	r6, #48	; 0x30
 800711c:	f805 6b01 	strb.w	r6, [r5], #1
 8007120:	4652      	mov	r2, sl
 8007122:	465b      	mov	r3, fp
 8007124:	4680      	mov	r8, r0
 8007126:	4689      	mov	r9, r1
 8007128:	f7f9 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	d163      	bne.n	80071f8 <_dtoa_r+0x608>
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	4936      	ldr	r1, [pc, #216]	; (8007210 <_dtoa_r+0x620>)
 8007136:	2000      	movs	r0, #0
 8007138:	f7f9 f8a6 	bl	8000288 <__aeabi_dsub>
 800713c:	4652      	mov	r2, sl
 800713e:	465b      	mov	r3, fp
 8007140:	f7f9 fccc 	bl	8000adc <__aeabi_dcmplt>
 8007144:	2800      	cmp	r0, #0
 8007146:	f040 80b5 	bne.w	80072b4 <_dtoa_r+0x6c4>
 800714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714c:	429d      	cmp	r5, r3
 800714e:	d081      	beq.n	8007054 <_dtoa_r+0x464>
 8007150:	4b30      	ldr	r3, [pc, #192]	; (8007214 <_dtoa_r+0x624>)
 8007152:	2200      	movs	r2, #0
 8007154:	4650      	mov	r0, sl
 8007156:	4659      	mov	r1, fp
 8007158:	f7f9 fa4e 	bl	80005f8 <__aeabi_dmul>
 800715c:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <_dtoa_r+0x624>)
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	2200      	movs	r2, #0
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	e7c6      	b.n	8007100 <_dtoa_r+0x510>
 8007172:	4650      	mov	r0, sl
 8007174:	4659      	mov	r1, fp
 8007176:	f7f9 fa3f 	bl	80005f8 <__aeabi_dmul>
 800717a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800717c:	9d01      	ldr	r5, [sp, #4]
 800717e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007180:	4682      	mov	sl, r0
 8007182:	468b      	mov	fp, r1
 8007184:	4649      	mov	r1, r9
 8007186:	4640      	mov	r0, r8
 8007188:	f7f9 fcd0 	bl	8000b2c <__aeabi_d2iz>
 800718c:	4606      	mov	r6, r0
 800718e:	f7f9 f9c9 	bl	8000524 <__aeabi_i2d>
 8007192:	3630      	adds	r6, #48	; 0x30
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4640      	mov	r0, r8
 800719a:	4649      	mov	r1, r9
 800719c:	f7f9 f874 	bl	8000288 <__aeabi_dsub>
 80071a0:	f805 6b01 	strb.w	r6, [r5], #1
 80071a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a6:	429d      	cmp	r5, r3
 80071a8:	4680      	mov	r8, r0
 80071aa:	4689      	mov	r9, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	d124      	bne.n	80071fc <_dtoa_r+0x60c>
 80071b2:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <_dtoa_r+0x630>)
 80071b4:	4650      	mov	r0, sl
 80071b6:	4659      	mov	r1, fp
 80071b8:	f7f9 f868 	bl	800028c <__adddf3>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4640      	mov	r0, r8
 80071c2:	4649      	mov	r1, r9
 80071c4:	f7f9 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d173      	bne.n	80072b4 <_dtoa_r+0x6c4>
 80071cc:	4652      	mov	r2, sl
 80071ce:	465b      	mov	r3, fp
 80071d0:	4913      	ldr	r1, [pc, #76]	; (8007220 <_dtoa_r+0x630>)
 80071d2:	2000      	movs	r0, #0
 80071d4:	f7f9 f858 	bl	8000288 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f9 fc7c 	bl	8000adc <__aeabi_dcmplt>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f43f af35 	beq.w	8007054 <_dtoa_r+0x464>
 80071ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071ec:	1e6b      	subs	r3, r5, #1
 80071ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80071f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d0f8      	beq.n	80071ea <_dtoa_r+0x5fa>
 80071f8:	9700      	str	r7, [sp, #0]
 80071fa:	e049      	b.n	8007290 <_dtoa_r+0x6a0>
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <_dtoa_r+0x624>)
 80071fe:	f7f9 f9fb 	bl	80005f8 <__aeabi_dmul>
 8007202:	4680      	mov	r8, r0
 8007204:	4689      	mov	r9, r1
 8007206:	e7bd      	b.n	8007184 <_dtoa_r+0x594>
 8007208:	08008480 	.word	0x08008480
 800720c:	08008458 	.word	0x08008458
 8007210:	3ff00000 	.word	0x3ff00000
 8007214:	40240000 	.word	0x40240000
 8007218:	401c0000 	.word	0x401c0000
 800721c:	40140000 	.word	0x40140000
 8007220:	3fe00000 	.word	0x3fe00000
 8007224:	9d01      	ldr	r5, [sp, #4]
 8007226:	4656      	mov	r6, sl
 8007228:	465f      	mov	r7, fp
 800722a:	4642      	mov	r2, r8
 800722c:	464b      	mov	r3, r9
 800722e:	4630      	mov	r0, r6
 8007230:	4639      	mov	r1, r7
 8007232:	f7f9 fb0b 	bl	800084c <__aeabi_ddiv>
 8007236:	f7f9 fc79 	bl	8000b2c <__aeabi_d2iz>
 800723a:	4682      	mov	sl, r0
 800723c:	f7f9 f972 	bl	8000524 <__aeabi_i2d>
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	f7f9 f9d8 	bl	80005f8 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007254:	f7f9 f818 	bl	8000288 <__aeabi_dsub>
 8007258:	f805 6b01 	strb.w	r6, [r5], #1
 800725c:	9e01      	ldr	r6, [sp, #4]
 800725e:	9f03      	ldr	r7, [sp, #12]
 8007260:	1bae      	subs	r6, r5, r6
 8007262:	42b7      	cmp	r7, r6
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	d135      	bne.n	80072d6 <_dtoa_r+0x6e6>
 800726a:	f7f9 f80f 	bl	800028c <__adddf3>
 800726e:	4642      	mov	r2, r8
 8007270:	464b      	mov	r3, r9
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	f7f9 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800727a:	b9d0      	cbnz	r0, 80072b2 <_dtoa_r+0x6c2>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8007288:	b110      	cbz	r0, 8007290 <_dtoa_r+0x6a0>
 800728a:	f01a 0f01 	tst.w	sl, #1
 800728e:	d110      	bne.n	80072b2 <_dtoa_r+0x6c2>
 8007290:	4620      	mov	r0, r4
 8007292:	ee18 1a10 	vmov	r1, s16
 8007296:	f7fe fcbf 	bl	8005c18 <_Bfree>
 800729a:	2300      	movs	r3, #0
 800729c:	9800      	ldr	r0, [sp, #0]
 800729e:	702b      	strb	r3, [r5, #0]
 80072a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a2:	3001      	adds	r0, #1
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f43f acf1 	beq.w	8006c90 <_dtoa_r+0xa0>
 80072ae:	601d      	str	r5, [r3, #0]
 80072b0:	e4ee      	b.n	8006c90 <_dtoa_r+0xa0>
 80072b2:	9f00      	ldr	r7, [sp, #0]
 80072b4:	462b      	mov	r3, r5
 80072b6:	461d      	mov	r5, r3
 80072b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072bc:	2a39      	cmp	r2, #57	; 0x39
 80072be:	d106      	bne.n	80072ce <_dtoa_r+0x6de>
 80072c0:	9a01      	ldr	r2, [sp, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d1f7      	bne.n	80072b6 <_dtoa_r+0x6c6>
 80072c6:	9901      	ldr	r1, [sp, #4]
 80072c8:	2230      	movs	r2, #48	; 0x30
 80072ca:	3701      	adds	r7, #1
 80072cc:	700a      	strb	r2, [r1, #0]
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	3201      	adds	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e790      	b.n	80071f8 <_dtoa_r+0x608>
 80072d6:	4ba6      	ldr	r3, [pc, #664]	; (8007570 <_dtoa_r+0x980>)
 80072d8:	2200      	movs	r2, #0
 80072da:	f7f9 f98d 	bl	80005f8 <__aeabi_dmul>
 80072de:	2200      	movs	r2, #0
 80072e0:	2300      	movs	r3, #0
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	f7f9 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d09d      	beq.n	800722a <_dtoa_r+0x63a>
 80072ee:	e7cf      	b.n	8007290 <_dtoa_r+0x6a0>
 80072f0:	9a08      	ldr	r2, [sp, #32]
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	f000 80d7 	beq.w	80074a6 <_dtoa_r+0x8b6>
 80072f8:	9a06      	ldr	r2, [sp, #24]
 80072fa:	2a01      	cmp	r2, #1
 80072fc:	f300 80ba 	bgt.w	8007474 <_dtoa_r+0x884>
 8007300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007302:	2a00      	cmp	r2, #0
 8007304:	f000 80b2 	beq.w	800746c <_dtoa_r+0x87c>
 8007308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800730c:	9e07      	ldr	r6, [sp, #28]
 800730e:	9d04      	ldr	r5, [sp, #16]
 8007310:	9a04      	ldr	r2, [sp, #16]
 8007312:	441a      	add	r2, r3
 8007314:	9204      	str	r2, [sp, #16]
 8007316:	9a05      	ldr	r2, [sp, #20]
 8007318:	2101      	movs	r1, #1
 800731a:	441a      	add	r2, r3
 800731c:	4620      	mov	r0, r4
 800731e:	9205      	str	r2, [sp, #20]
 8007320:	f7fe fd32 	bl	8005d88 <__i2b>
 8007324:	4607      	mov	r7, r0
 8007326:	2d00      	cmp	r5, #0
 8007328:	dd0c      	ble.n	8007344 <_dtoa_r+0x754>
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd09      	ble.n	8007344 <_dtoa_r+0x754>
 8007330:	42ab      	cmp	r3, r5
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	bfa8      	it	ge
 8007336:	462b      	movge	r3, r5
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	9204      	str	r2, [sp, #16]
 800733c:	9a05      	ldr	r2, [sp, #20]
 800733e:	1aed      	subs	r5, r5, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	9b07      	ldr	r3, [sp, #28]
 8007346:	b31b      	cbz	r3, 8007390 <_dtoa_r+0x7a0>
 8007348:	9b08      	ldr	r3, [sp, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80af 	beq.w	80074ae <_dtoa_r+0x8be>
 8007350:	2e00      	cmp	r6, #0
 8007352:	dd13      	ble.n	800737c <_dtoa_r+0x78c>
 8007354:	4639      	mov	r1, r7
 8007356:	4632      	mov	r2, r6
 8007358:	4620      	mov	r0, r4
 800735a:	f7fe fdd5 	bl	8005f08 <__pow5mult>
 800735e:	ee18 2a10 	vmov	r2, s16
 8007362:	4601      	mov	r1, r0
 8007364:	4607      	mov	r7, r0
 8007366:	4620      	mov	r0, r4
 8007368:	f7fe fd24 	bl	8005db4 <__multiply>
 800736c:	ee18 1a10 	vmov	r1, s16
 8007370:	4680      	mov	r8, r0
 8007372:	4620      	mov	r0, r4
 8007374:	f7fe fc50 	bl	8005c18 <_Bfree>
 8007378:	ee08 8a10 	vmov	s16, r8
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	1b9a      	subs	r2, r3, r6
 8007380:	d006      	beq.n	8007390 <_dtoa_r+0x7a0>
 8007382:	ee18 1a10 	vmov	r1, s16
 8007386:	4620      	mov	r0, r4
 8007388:	f7fe fdbe 	bl	8005f08 <__pow5mult>
 800738c:	ee08 0a10 	vmov	s16, r0
 8007390:	2101      	movs	r1, #1
 8007392:	4620      	mov	r0, r4
 8007394:	f7fe fcf8 	bl	8005d88 <__i2b>
 8007398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	4606      	mov	r6, r0
 800739e:	f340 8088 	ble.w	80074b2 <_dtoa_r+0x8c2>
 80073a2:	461a      	mov	r2, r3
 80073a4:	4601      	mov	r1, r0
 80073a6:	4620      	mov	r0, r4
 80073a8:	f7fe fdae 	bl	8005f08 <__pow5mult>
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	4606      	mov	r6, r0
 80073b2:	f340 8081 	ble.w	80074b8 <_dtoa_r+0x8c8>
 80073b6:	f04f 0800 	mov.w	r8, #0
 80073ba:	6933      	ldr	r3, [r6, #16]
 80073bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073c0:	6918      	ldr	r0, [r3, #16]
 80073c2:	f7fe fc91 	bl	8005ce8 <__hi0bits>
 80073c6:	f1c0 0020 	rsb	r0, r0, #32
 80073ca:	9b05      	ldr	r3, [sp, #20]
 80073cc:	4418      	add	r0, r3
 80073ce:	f010 001f 	ands.w	r0, r0, #31
 80073d2:	f000 8092 	beq.w	80074fa <_dtoa_r+0x90a>
 80073d6:	f1c0 0320 	rsb	r3, r0, #32
 80073da:	2b04      	cmp	r3, #4
 80073dc:	f340 808a 	ble.w	80074f4 <_dtoa_r+0x904>
 80073e0:	f1c0 001c 	rsb	r0, r0, #28
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	4403      	add	r3, r0
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	9b05      	ldr	r3, [sp, #20]
 80073ec:	4403      	add	r3, r0
 80073ee:	4405      	add	r5, r0
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	9b04      	ldr	r3, [sp, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd07      	ble.n	8007408 <_dtoa_r+0x818>
 80073f8:	ee18 1a10 	vmov	r1, s16
 80073fc:	461a      	mov	r2, r3
 80073fe:	4620      	mov	r0, r4
 8007400:	f7fe fddc 	bl	8005fbc <__lshift>
 8007404:	ee08 0a10 	vmov	s16, r0
 8007408:	9b05      	ldr	r3, [sp, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd05      	ble.n	800741a <_dtoa_r+0x82a>
 800740e:	4631      	mov	r1, r6
 8007410:	461a      	mov	r2, r3
 8007412:	4620      	mov	r0, r4
 8007414:	f7fe fdd2 	bl	8005fbc <__lshift>
 8007418:	4606      	mov	r6, r0
 800741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d06e      	beq.n	80074fe <_dtoa_r+0x90e>
 8007420:	ee18 0a10 	vmov	r0, s16
 8007424:	4631      	mov	r1, r6
 8007426:	f7fe fe39 	bl	800609c <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	da67      	bge.n	80074fe <_dtoa_r+0x90e>
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	ee18 1a10 	vmov	r1, s16
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	220a      	movs	r2, #10
 800743a:	2300      	movs	r3, #0
 800743c:	4620      	mov	r0, r4
 800743e:	f7fe fc0d 	bl	8005c5c <__multadd>
 8007442:	9b08      	ldr	r3, [sp, #32]
 8007444:	ee08 0a10 	vmov	s16, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 81b1 	beq.w	80077b0 <_dtoa_r+0xbc0>
 800744e:	2300      	movs	r3, #0
 8007450:	4639      	mov	r1, r7
 8007452:	220a      	movs	r2, #10
 8007454:	4620      	mov	r0, r4
 8007456:	f7fe fc01 	bl	8005c5c <__multadd>
 800745a:	9b02      	ldr	r3, [sp, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	4607      	mov	r7, r0
 8007460:	f300 808e 	bgt.w	8007580 <_dtoa_r+0x990>
 8007464:	9b06      	ldr	r3, [sp, #24]
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc51      	bgt.n	800750e <_dtoa_r+0x91e>
 800746a:	e089      	b.n	8007580 <_dtoa_r+0x990>
 800746c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800746e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007472:	e74b      	b.n	800730c <_dtoa_r+0x71c>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	1e5e      	subs	r6, r3, #1
 8007478:	9b07      	ldr	r3, [sp, #28]
 800747a:	42b3      	cmp	r3, r6
 800747c:	bfbf      	itttt	lt
 800747e:	9b07      	ldrlt	r3, [sp, #28]
 8007480:	9607      	strlt	r6, [sp, #28]
 8007482:	1af2      	sublt	r2, r6, r3
 8007484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007486:	bfb6      	itet	lt
 8007488:	189b      	addlt	r3, r3, r2
 800748a:	1b9e      	subge	r6, r3, r6
 800748c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	bfb8      	it	lt
 8007492:	2600      	movlt	r6, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfb7      	itett	lt
 8007498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800749c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80074a0:	1a9d      	sublt	r5, r3, r2
 80074a2:	2300      	movlt	r3, #0
 80074a4:	e734      	b.n	8007310 <_dtoa_r+0x720>
 80074a6:	9e07      	ldr	r6, [sp, #28]
 80074a8:	9d04      	ldr	r5, [sp, #16]
 80074aa:	9f08      	ldr	r7, [sp, #32]
 80074ac:	e73b      	b.n	8007326 <_dtoa_r+0x736>
 80074ae:	9a07      	ldr	r2, [sp, #28]
 80074b0:	e767      	b.n	8007382 <_dtoa_r+0x792>
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	dc18      	bgt.n	80074ea <_dtoa_r+0x8fa>
 80074b8:	f1ba 0f00 	cmp.w	sl, #0
 80074bc:	d115      	bne.n	80074ea <_dtoa_r+0x8fa>
 80074be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074c2:	b993      	cbnz	r3, 80074ea <_dtoa_r+0x8fa>
 80074c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	051b      	lsls	r3, r3, #20
 80074cc:	b183      	cbz	r3, 80074f0 <_dtoa_r+0x900>
 80074ce:	9b04      	ldr	r3, [sp, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	9b05      	ldr	r3, [sp, #20]
 80074d6:	3301      	adds	r3, #1
 80074d8:	9305      	str	r3, [sp, #20]
 80074da:	f04f 0801 	mov.w	r8, #1
 80074de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f af6a 	bne.w	80073ba <_dtoa_r+0x7ca>
 80074e6:	2001      	movs	r0, #1
 80074e8:	e76f      	b.n	80073ca <_dtoa_r+0x7da>
 80074ea:	f04f 0800 	mov.w	r8, #0
 80074ee:	e7f6      	b.n	80074de <_dtoa_r+0x8ee>
 80074f0:	4698      	mov	r8, r3
 80074f2:	e7f4      	b.n	80074de <_dtoa_r+0x8ee>
 80074f4:	f43f af7d 	beq.w	80073f2 <_dtoa_r+0x802>
 80074f8:	4618      	mov	r0, r3
 80074fa:	301c      	adds	r0, #28
 80074fc:	e772      	b.n	80073e4 <_dtoa_r+0x7f4>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc37      	bgt.n	8007574 <_dtoa_r+0x984>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	2b02      	cmp	r3, #2
 8007508:	dd34      	ble.n	8007574 <_dtoa_r+0x984>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	9b02      	ldr	r3, [sp, #8]
 8007510:	b96b      	cbnz	r3, 800752e <_dtoa_r+0x93e>
 8007512:	4631      	mov	r1, r6
 8007514:	2205      	movs	r2, #5
 8007516:	4620      	mov	r0, r4
 8007518:	f7fe fba0 	bl	8005c5c <__multadd>
 800751c:	4601      	mov	r1, r0
 800751e:	4606      	mov	r6, r0
 8007520:	ee18 0a10 	vmov	r0, s16
 8007524:	f7fe fdba 	bl	800609c <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	f73f adbb 	bgt.w	80070a4 <_dtoa_r+0x4b4>
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	9d01      	ldr	r5, [sp, #4]
 8007532:	43db      	mvns	r3, r3
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	4631      	mov	r1, r6
 800753c:	4620      	mov	r0, r4
 800753e:	f7fe fb6b 	bl	8005c18 <_Bfree>
 8007542:	2f00      	cmp	r7, #0
 8007544:	f43f aea4 	beq.w	8007290 <_dtoa_r+0x6a0>
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	d005      	beq.n	800755a <_dtoa_r+0x96a>
 800754e:	45b8      	cmp	r8, r7
 8007550:	d003      	beq.n	800755a <_dtoa_r+0x96a>
 8007552:	4641      	mov	r1, r8
 8007554:	4620      	mov	r0, r4
 8007556:	f7fe fb5f 	bl	8005c18 <_Bfree>
 800755a:	4639      	mov	r1, r7
 800755c:	4620      	mov	r0, r4
 800755e:	f7fe fb5b 	bl	8005c18 <_Bfree>
 8007562:	e695      	b.n	8007290 <_dtoa_r+0x6a0>
 8007564:	2600      	movs	r6, #0
 8007566:	4637      	mov	r7, r6
 8007568:	e7e1      	b.n	800752e <_dtoa_r+0x93e>
 800756a:	9700      	str	r7, [sp, #0]
 800756c:	4637      	mov	r7, r6
 800756e:	e599      	b.n	80070a4 <_dtoa_r+0x4b4>
 8007570:	40240000 	.word	0x40240000
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80ca 	beq.w	8007710 <_dtoa_r+0xb20>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	9302      	str	r3, [sp, #8]
 8007580:	2d00      	cmp	r5, #0
 8007582:	dd05      	ble.n	8007590 <_dtoa_r+0x9a0>
 8007584:	4639      	mov	r1, r7
 8007586:	462a      	mov	r2, r5
 8007588:	4620      	mov	r0, r4
 800758a:	f7fe fd17 	bl	8005fbc <__lshift>
 800758e:	4607      	mov	r7, r0
 8007590:	f1b8 0f00 	cmp.w	r8, #0
 8007594:	d05b      	beq.n	800764e <_dtoa_r+0xa5e>
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4620      	mov	r0, r4
 800759a:	f7fe fafd 	bl	8005b98 <_Balloc>
 800759e:	4605      	mov	r5, r0
 80075a0:	b928      	cbnz	r0, 80075ae <_dtoa_r+0x9be>
 80075a2:	4b87      	ldr	r3, [pc, #540]	; (80077c0 <_dtoa_r+0xbd0>)
 80075a4:	4602      	mov	r2, r0
 80075a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075aa:	f7ff bb3b 	b.w	8006c24 <_dtoa_r+0x34>
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	3202      	adds	r2, #2
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	f107 010c 	add.w	r1, r7, #12
 80075b8:	300c      	adds	r0, #12
 80075ba:	f000 f921 	bl	8007800 <memcpy>
 80075be:	2201      	movs	r2, #1
 80075c0:	4629      	mov	r1, r5
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7fe fcfa 	bl	8005fbc <__lshift>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	f103 0901 	add.w	r9, r3, #1
 80075ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80075d2:	4413      	add	r3, r2
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	f00a 0301 	and.w	r3, sl, #1
 80075da:	46b8      	mov	r8, r7
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	4607      	mov	r7, r0
 80075e0:	4631      	mov	r1, r6
 80075e2:	ee18 0a10 	vmov	r0, s16
 80075e6:	f7ff fa77 	bl	8006ad8 <quorem>
 80075ea:	4641      	mov	r1, r8
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075f2:	ee18 0a10 	vmov	r0, s16
 80075f6:	f7fe fd51 	bl	800609c <__mcmp>
 80075fa:	463a      	mov	r2, r7
 80075fc:	9003      	str	r0, [sp, #12]
 80075fe:	4631      	mov	r1, r6
 8007600:	4620      	mov	r0, r4
 8007602:	f7fe fd67 	bl	80060d4 <__mdiff>
 8007606:	68c2      	ldr	r2, [r0, #12]
 8007608:	f109 3bff 	add.w	fp, r9, #4294967295
 800760c:	4605      	mov	r5, r0
 800760e:	bb02      	cbnz	r2, 8007652 <_dtoa_r+0xa62>
 8007610:	4601      	mov	r1, r0
 8007612:	ee18 0a10 	vmov	r0, s16
 8007616:	f7fe fd41 	bl	800609c <__mcmp>
 800761a:	4602      	mov	r2, r0
 800761c:	4629      	mov	r1, r5
 800761e:	4620      	mov	r0, r4
 8007620:	9207      	str	r2, [sp, #28]
 8007622:	f7fe faf9 	bl	8005c18 <_Bfree>
 8007626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800762a:	ea43 0102 	orr.w	r1, r3, r2
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	430b      	orrs	r3, r1
 8007632:	464d      	mov	r5, r9
 8007634:	d10f      	bne.n	8007656 <_dtoa_r+0xa66>
 8007636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800763a:	d02a      	beq.n	8007692 <_dtoa_r+0xaa2>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	dd02      	ble.n	8007648 <_dtoa_r+0xa58>
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007648:	f88b a000 	strb.w	sl, [fp]
 800764c:	e775      	b.n	800753a <_dtoa_r+0x94a>
 800764e:	4638      	mov	r0, r7
 8007650:	e7ba      	b.n	80075c8 <_dtoa_r+0x9d8>
 8007652:	2201      	movs	r2, #1
 8007654:	e7e2      	b.n	800761c <_dtoa_r+0xa2c>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db04      	blt.n	8007666 <_dtoa_r+0xa76>
 800765c:	9906      	ldr	r1, [sp, #24]
 800765e:	430b      	orrs	r3, r1
 8007660:	9904      	ldr	r1, [sp, #16]
 8007662:	430b      	orrs	r3, r1
 8007664:	d122      	bne.n	80076ac <_dtoa_r+0xabc>
 8007666:	2a00      	cmp	r2, #0
 8007668:	ddee      	ble.n	8007648 <_dtoa_r+0xa58>
 800766a:	ee18 1a10 	vmov	r1, s16
 800766e:	2201      	movs	r2, #1
 8007670:	4620      	mov	r0, r4
 8007672:	f7fe fca3 	bl	8005fbc <__lshift>
 8007676:	4631      	mov	r1, r6
 8007678:	ee08 0a10 	vmov	s16, r0
 800767c:	f7fe fd0e 	bl	800609c <__mcmp>
 8007680:	2800      	cmp	r0, #0
 8007682:	dc03      	bgt.n	800768c <_dtoa_r+0xa9c>
 8007684:	d1e0      	bne.n	8007648 <_dtoa_r+0xa58>
 8007686:	f01a 0f01 	tst.w	sl, #1
 800768a:	d0dd      	beq.n	8007648 <_dtoa_r+0xa58>
 800768c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007690:	d1d7      	bne.n	8007642 <_dtoa_r+0xa52>
 8007692:	2339      	movs	r3, #57	; 0x39
 8007694:	f88b 3000 	strb.w	r3, [fp]
 8007698:	462b      	mov	r3, r5
 800769a:	461d      	mov	r5, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076a2:	2a39      	cmp	r2, #57	; 0x39
 80076a4:	d071      	beq.n	800778a <_dtoa_r+0xb9a>
 80076a6:	3201      	adds	r2, #1
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e746      	b.n	800753a <_dtoa_r+0x94a>
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	dd07      	ble.n	80076c0 <_dtoa_r+0xad0>
 80076b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076b4:	d0ed      	beq.n	8007692 <_dtoa_r+0xaa2>
 80076b6:	f10a 0301 	add.w	r3, sl, #1
 80076ba:	f88b 3000 	strb.w	r3, [fp]
 80076be:	e73c      	b.n	800753a <_dtoa_r+0x94a>
 80076c0:	9b05      	ldr	r3, [sp, #20]
 80076c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80076c6:	4599      	cmp	r9, r3
 80076c8:	d047      	beq.n	800775a <_dtoa_r+0xb6a>
 80076ca:	ee18 1a10 	vmov	r1, s16
 80076ce:	2300      	movs	r3, #0
 80076d0:	220a      	movs	r2, #10
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7fe fac2 	bl	8005c5c <__multadd>
 80076d8:	45b8      	cmp	r8, r7
 80076da:	ee08 0a10 	vmov	s16, r0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	f04f 020a 	mov.w	r2, #10
 80076e6:	4641      	mov	r1, r8
 80076e8:	4620      	mov	r0, r4
 80076ea:	d106      	bne.n	80076fa <_dtoa_r+0xb0a>
 80076ec:	f7fe fab6 	bl	8005c5c <__multadd>
 80076f0:	4680      	mov	r8, r0
 80076f2:	4607      	mov	r7, r0
 80076f4:	f109 0901 	add.w	r9, r9, #1
 80076f8:	e772      	b.n	80075e0 <_dtoa_r+0x9f0>
 80076fa:	f7fe faaf 	bl	8005c5c <__multadd>
 80076fe:	4639      	mov	r1, r7
 8007700:	4680      	mov	r8, r0
 8007702:	2300      	movs	r3, #0
 8007704:	220a      	movs	r2, #10
 8007706:	4620      	mov	r0, r4
 8007708:	f7fe faa8 	bl	8005c5c <__multadd>
 800770c:	4607      	mov	r7, r0
 800770e:	e7f1      	b.n	80076f4 <_dtoa_r+0xb04>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	9d01      	ldr	r5, [sp, #4]
 8007716:	ee18 0a10 	vmov	r0, s16
 800771a:	4631      	mov	r1, r6
 800771c:	f7ff f9dc 	bl	8006ad8 <quorem>
 8007720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	f805 ab01 	strb.w	sl, [r5], #1
 800772a:	1aea      	subs	r2, r5, r3
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	4293      	cmp	r3, r2
 8007730:	dd09      	ble.n	8007746 <_dtoa_r+0xb56>
 8007732:	ee18 1a10 	vmov	r1, s16
 8007736:	2300      	movs	r3, #0
 8007738:	220a      	movs	r2, #10
 800773a:	4620      	mov	r0, r4
 800773c:	f7fe fa8e 	bl	8005c5c <__multadd>
 8007740:	ee08 0a10 	vmov	s16, r0
 8007744:	e7e7      	b.n	8007716 <_dtoa_r+0xb26>
 8007746:	9b02      	ldr	r3, [sp, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfc8      	it	gt
 800774c:	461d      	movgt	r5, r3
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	bfd8      	it	le
 8007752:	2501      	movle	r5, #1
 8007754:	441d      	add	r5, r3
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	ee18 1a10 	vmov	r1, s16
 800775e:	2201      	movs	r2, #1
 8007760:	4620      	mov	r0, r4
 8007762:	f7fe fc2b 	bl	8005fbc <__lshift>
 8007766:	4631      	mov	r1, r6
 8007768:	ee08 0a10 	vmov	s16, r0
 800776c:	f7fe fc96 	bl	800609c <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	dc91      	bgt.n	8007698 <_dtoa_r+0xaa8>
 8007774:	d102      	bne.n	800777c <_dtoa_r+0xb8c>
 8007776:	f01a 0f01 	tst.w	sl, #1
 800777a:	d18d      	bne.n	8007698 <_dtoa_r+0xaa8>
 800777c:	462b      	mov	r3, r5
 800777e:	461d      	mov	r5, r3
 8007780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007784:	2a30      	cmp	r2, #48	; 0x30
 8007786:	d0fa      	beq.n	800777e <_dtoa_r+0xb8e>
 8007788:	e6d7      	b.n	800753a <_dtoa_r+0x94a>
 800778a:	9a01      	ldr	r2, [sp, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	d184      	bne.n	800769a <_dtoa_r+0xaaa>
 8007790:	9b00      	ldr	r3, [sp, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2331      	movs	r3, #49	; 0x31
 8007798:	7013      	strb	r3, [r2, #0]
 800779a:	e6ce      	b.n	800753a <_dtoa_r+0x94a>
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <_dtoa_r+0xbd4>)
 800779e:	f7ff ba95 	b.w	8006ccc <_dtoa_r+0xdc>
 80077a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f47f aa6e 	bne.w	8006c86 <_dtoa_r+0x96>
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <_dtoa_r+0xbd8>)
 80077ac:	f7ff ba8e 	b.w	8006ccc <_dtoa_r+0xdc>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	dcae      	bgt.n	8007714 <_dtoa_r+0xb24>
 80077b6:	9b06      	ldr	r3, [sp, #24]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	f73f aea8 	bgt.w	800750e <_dtoa_r+0x91e>
 80077be:	e7a9      	b.n	8007714 <_dtoa_r+0xb24>
 80077c0:	08008447 	.word	0x08008447
 80077c4:	080085d0 	.word	0x080085d0
 80077c8:	080085c3 	.word	0x080085c3

080077cc <fiprintf>:
 80077cc:	b40e      	push	{r1, r2, r3}
 80077ce:	b503      	push	{r0, r1, lr}
 80077d0:	4601      	mov	r1, r0
 80077d2:	ab03      	add	r3, sp, #12
 80077d4:	4805      	ldr	r0, [pc, #20]	; (80077ec <fiprintf+0x20>)
 80077d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	f000 f8c1 	bl	8007964 <_vfiprintf_r>
 80077e2:	b002      	add	sp, #8
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b003      	add	sp, #12
 80077ea:	4770      	bx	lr
 80077ec:	2000000c 	.word	0x2000000c

080077f0 <malloc>:
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <malloc+0xc>)
 80077f2:	4601      	mov	r1, r0
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	f7fe bda7 	b.w	8006348 <_malloc_r>
 80077fa:	bf00      	nop
 80077fc:	2000000c 	.word	0x2000000c

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <memmove>:
 800781c:	4288      	cmp	r0, r1
 800781e:	b510      	push	{r4, lr}
 8007820:	eb01 0402 	add.w	r4, r1, r2
 8007824:	d902      	bls.n	800782c <memmove+0x10>
 8007826:	4284      	cmp	r4, r0
 8007828:	4623      	mov	r3, r4
 800782a:	d807      	bhi.n	800783c <memmove+0x20>
 800782c:	1e43      	subs	r3, r0, #1
 800782e:	42a1      	cmp	r1, r4
 8007830:	d008      	beq.n	8007844 <memmove+0x28>
 8007832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800783a:	e7f8      	b.n	800782e <memmove+0x12>
 800783c:	4402      	add	r2, r0
 800783e:	4601      	mov	r1, r0
 8007840:	428a      	cmp	r2, r1
 8007842:	d100      	bne.n	8007846 <memmove+0x2a>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800784a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800784e:	e7f7      	b.n	8007840 <memmove+0x24>

08007850 <__malloc_lock>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__malloc_lock+0x8>)
 8007852:	f000 bc37 	b.w	80080c4 <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	20000300 	.word	0x20000300

0800785c <__malloc_unlock>:
 800785c:	4801      	ldr	r0, [pc, #4]	; (8007864 <__malloc_unlock+0x8>)
 800785e:	f000 bc32 	b.w	80080c6 <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	20000300 	.word	0x20000300

08007868 <_free_r>:
 8007868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800786a:	2900      	cmp	r1, #0
 800786c:	d044      	beq.n	80078f8 <_free_r+0x90>
 800786e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007872:	9001      	str	r0, [sp, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f1a1 0404 	sub.w	r4, r1, #4
 800787a:	bfb8      	it	lt
 800787c:	18e4      	addlt	r4, r4, r3
 800787e:	f7ff ffe7 	bl	8007850 <__malloc_lock>
 8007882:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <_free_r+0x94>)
 8007884:	9801      	ldr	r0, [sp, #4]
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	b933      	cbnz	r3, 8007898 <_free_r+0x30>
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	6014      	str	r4, [r2, #0]
 800788e:	b003      	add	sp, #12
 8007890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007894:	f7ff bfe2 	b.w	800785c <__malloc_unlock>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d908      	bls.n	80078ae <_free_r+0x46>
 800789c:	6825      	ldr	r5, [r4, #0]
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf01      	itttt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	e7ed      	b.n	800788a <_free_r+0x22>
 80078ae:	461a      	mov	r2, r3
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b10b      	cbz	r3, 80078b8 <_free_r+0x50>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d9fa      	bls.n	80078ae <_free_r+0x46>
 80078b8:	6811      	ldr	r1, [r2, #0]
 80078ba:	1855      	adds	r5, r2, r1
 80078bc:	42a5      	cmp	r5, r4
 80078be:	d10b      	bne.n	80078d8 <_free_r+0x70>
 80078c0:	6824      	ldr	r4, [r4, #0]
 80078c2:	4421      	add	r1, r4
 80078c4:	1854      	adds	r4, r2, r1
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	d1e0      	bne.n	800788e <_free_r+0x26>
 80078cc:	681c      	ldr	r4, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	6053      	str	r3, [r2, #4]
 80078d2:	4421      	add	r1, r4
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	e7da      	b.n	800788e <_free_r+0x26>
 80078d8:	d902      	bls.n	80078e0 <_free_r+0x78>
 80078da:	230c      	movs	r3, #12
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	e7d6      	b.n	800788e <_free_r+0x26>
 80078e0:	6825      	ldr	r5, [r4, #0]
 80078e2:	1961      	adds	r1, r4, r5
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf04      	itt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	6063      	str	r3, [r4, #4]
 80078ee:	bf04      	itt	eq
 80078f0:	1949      	addeq	r1, r1, r5
 80078f2:	6021      	streq	r1, [r4, #0]
 80078f4:	6054      	str	r4, [r2, #4]
 80078f6:	e7ca      	b.n	800788e <_free_r+0x26>
 80078f8:	b003      	add	sp, #12
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	200002f4 	.word	0x200002f4

08007900 <_malloc_usable_size_r>:
 8007900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007904:	1f18      	subs	r0, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	bfbc      	itt	lt
 800790a:	580b      	ldrlt	r3, [r1, r0]
 800790c:	18c0      	addlt	r0, r0, r3
 800790e:	4770      	bx	lr

08007910 <__sfputc_r>:
 8007910:	6893      	ldr	r3, [r2, #8]
 8007912:	3b01      	subs	r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	b410      	push	{r4}
 8007918:	6093      	str	r3, [r2, #8]
 800791a:	da08      	bge.n	800792e <__sfputc_r+0x1e>
 800791c:	6994      	ldr	r4, [r2, #24]
 800791e:	42a3      	cmp	r3, r4
 8007920:	db01      	blt.n	8007926 <__sfputc_r+0x16>
 8007922:	290a      	cmp	r1, #10
 8007924:	d103      	bne.n	800792e <__sfputc_r+0x1e>
 8007926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792a:	f000 b94b 	b.w	8007bc4 <__swbuf_r>
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	1c58      	adds	r0, r3, #1
 8007932:	6010      	str	r0, [r2, #0]
 8007934:	7019      	strb	r1, [r3, #0]
 8007936:	4608      	mov	r0, r1
 8007938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800793c:	4770      	bx	lr

0800793e <__sfputs_r>:
 800793e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007940:	4606      	mov	r6, r0
 8007942:	460f      	mov	r7, r1
 8007944:	4614      	mov	r4, r2
 8007946:	18d5      	adds	r5, r2, r3
 8007948:	42ac      	cmp	r4, r5
 800794a:	d101      	bne.n	8007950 <__sfputs_r+0x12>
 800794c:	2000      	movs	r0, #0
 800794e:	e007      	b.n	8007960 <__sfputs_r+0x22>
 8007950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007954:	463a      	mov	r2, r7
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff ffda 	bl	8007910 <__sfputc_r>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d1f3      	bne.n	8007948 <__sfputs_r+0xa>
 8007960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007964 <_vfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	460d      	mov	r5, r1
 800796a:	b09d      	sub	sp, #116	; 0x74
 800796c:	4614      	mov	r4, r2
 800796e:	4698      	mov	r8, r3
 8007970:	4606      	mov	r6, r0
 8007972:	b118      	cbz	r0, 800797c <_vfiprintf_r+0x18>
 8007974:	6983      	ldr	r3, [r0, #24]
 8007976:	b90b      	cbnz	r3, 800797c <_vfiprintf_r+0x18>
 8007978:	f000 fb06 	bl	8007f88 <__sinit>
 800797c:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <_vfiprintf_r+0x240>)
 800797e:	429d      	cmp	r5, r3
 8007980:	d11b      	bne.n	80079ba <_vfiprintf_r+0x56>
 8007982:	6875      	ldr	r5, [r6, #4]
 8007984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d405      	bmi.n	8007996 <_vfiprintf_r+0x32>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d402      	bmi.n	8007996 <_vfiprintf_r+0x32>
 8007990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007992:	f000 fb97 	bl	80080c4 <__retarget_lock_acquire_recursive>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	071b      	lsls	r3, r3, #28
 800799a:	d501      	bpl.n	80079a0 <_vfiprintf_r+0x3c>
 800799c:	692b      	ldr	r3, [r5, #16]
 800799e:	b9eb      	cbnz	r3, 80079dc <_vfiprintf_r+0x78>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f960 	bl	8007c68 <__swsetup_r>
 80079a8:	b1c0      	cbz	r0, 80079dc <_vfiprintf_r+0x78>
 80079aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ac:	07dc      	lsls	r4, r3, #31
 80079ae:	d50e      	bpl.n	80079ce <_vfiprintf_r+0x6a>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	b01d      	add	sp, #116	; 0x74
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	4b7b      	ldr	r3, [pc, #492]	; (8007ba8 <_vfiprintf_r+0x244>)
 80079bc:	429d      	cmp	r5, r3
 80079be:	d101      	bne.n	80079c4 <_vfiprintf_r+0x60>
 80079c0:	68b5      	ldr	r5, [r6, #8]
 80079c2:	e7df      	b.n	8007984 <_vfiprintf_r+0x20>
 80079c4:	4b79      	ldr	r3, [pc, #484]	; (8007bac <_vfiprintf_r+0x248>)
 80079c6:	429d      	cmp	r5, r3
 80079c8:	bf08      	it	eq
 80079ca:	68f5      	ldreq	r5, [r6, #12]
 80079cc:	e7da      	b.n	8007984 <_vfiprintf_r+0x20>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	0598      	lsls	r0, r3, #22
 80079d2:	d4ed      	bmi.n	80079b0 <_vfiprintf_r+0x4c>
 80079d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d6:	f000 fb76 	bl	80080c6 <__retarget_lock_release_recursive>
 80079da:	e7e9      	b.n	80079b0 <_vfiprintf_r+0x4c>
 80079dc:	2300      	movs	r3, #0
 80079de:	9309      	str	r3, [sp, #36]	; 0x24
 80079e0:	2320      	movs	r3, #32
 80079e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ea:	2330      	movs	r3, #48	; 0x30
 80079ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bb0 <_vfiprintf_r+0x24c>
 80079f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f4:	f04f 0901 	mov.w	r9, #1
 80079f8:	4623      	mov	r3, r4
 80079fa:	469a      	mov	sl, r3
 80079fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a00:	b10a      	cbz	r2, 8007a06 <_vfiprintf_r+0xa2>
 8007a02:	2a25      	cmp	r2, #37	; 0x25
 8007a04:	d1f9      	bne.n	80079fa <_vfiprintf_r+0x96>
 8007a06:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0a:	d00b      	beq.n	8007a24 <_vfiprintf_r+0xc0>
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	4622      	mov	r2, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ff93 	bl	800793e <__sfputs_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f000 80aa 	beq.w	8007b72 <_vfiprintf_r+0x20e>
 8007a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a20:	445a      	add	r2, fp
 8007a22:	9209      	str	r2, [sp, #36]	; 0x24
 8007a24:	f89a 3000 	ldrb.w	r3, [sl]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a2 	beq.w	8007b72 <_vfiprintf_r+0x20e>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a38:	f10a 0a01 	add.w	sl, sl, #1
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a44:	931a      	str	r3, [sp, #104]	; 0x68
 8007a46:	4654      	mov	r4, sl
 8007a48:	2205      	movs	r2, #5
 8007a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a4e:	4858      	ldr	r0, [pc, #352]	; (8007bb0 <_vfiprintf_r+0x24c>)
 8007a50:	f7f8 fbc6 	bl	80001e0 <memchr>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	b9d8      	cbnz	r0, 8007a90 <_vfiprintf_r+0x12c>
 8007a58:	06d1      	lsls	r1, r2, #27
 8007a5a:	bf44      	itt	mi
 8007a5c:	2320      	movmi	r3, #32
 8007a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a62:	0713      	lsls	r3, r2, #28
 8007a64:	bf44      	itt	mi
 8007a66:	232b      	movmi	r3, #43	; 0x2b
 8007a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a70:	2b2a      	cmp	r3, #42	; 0x2a
 8007a72:	d015      	beq.n	8007aa0 <_vfiprintf_r+0x13c>
 8007a74:	9a07      	ldr	r2, [sp, #28]
 8007a76:	4654      	mov	r4, sl
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f04f 0c0a 	mov.w	ip, #10
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a84:	3b30      	subs	r3, #48	; 0x30
 8007a86:	2b09      	cmp	r3, #9
 8007a88:	d94e      	bls.n	8007b28 <_vfiprintf_r+0x1c4>
 8007a8a:	b1b0      	cbz	r0, 8007aba <_vfiprintf_r+0x156>
 8007a8c:	9207      	str	r2, [sp, #28]
 8007a8e:	e014      	b.n	8007aba <_vfiprintf_r+0x156>
 8007a90:	eba0 0308 	sub.w	r3, r0, r8
 8007a94:	fa09 f303 	lsl.w	r3, r9, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	46a2      	mov	sl, r4
 8007a9e:	e7d2      	b.n	8007a46 <_vfiprintf_r+0xe2>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	1d19      	adds	r1, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9103      	str	r1, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfbb      	ittet	lt
 8007aac:	425b      	neglt	r3, r3
 8007aae:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab2:	9307      	strge	r3, [sp, #28]
 8007ab4:	9307      	strlt	r3, [sp, #28]
 8007ab6:	bfb8      	it	lt
 8007ab8:	9204      	strlt	r2, [sp, #16]
 8007aba:	7823      	ldrb	r3, [r4, #0]
 8007abc:	2b2e      	cmp	r3, #46	; 0x2e
 8007abe:	d10c      	bne.n	8007ada <_vfiprintf_r+0x176>
 8007ac0:	7863      	ldrb	r3, [r4, #1]
 8007ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac4:	d135      	bne.n	8007b32 <_vfiprintf_r+0x1ce>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9203      	str	r2, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ad6:	3402      	adds	r4, #2
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bc0 <_vfiprintf_r+0x25c>
 8007ade:	7821      	ldrb	r1, [r4, #0]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	f7f8 fb7c 	bl	80001e0 <memchr>
 8007ae8:	b140      	cbz	r0, 8007afc <_vfiprintf_r+0x198>
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	eba0 000a 	sub.w	r0, r0, sl
 8007af0:	fa03 f000 	lsl.w	r0, r3, r0
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	4303      	orrs	r3, r0
 8007af8:	3401      	adds	r4, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b00:	482c      	ldr	r0, [pc, #176]	; (8007bb4 <_vfiprintf_r+0x250>)
 8007b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b06:	2206      	movs	r2, #6
 8007b08:	f7f8 fb6a 	bl	80001e0 <memchr>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d03f      	beq.n	8007b90 <_vfiprintf_r+0x22c>
 8007b10:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <_vfiprintf_r+0x254>)
 8007b12:	bb1b      	cbnz	r3, 8007b5c <_vfiprintf_r+0x1f8>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	3307      	adds	r3, #7
 8007b18:	f023 0307 	bic.w	r3, r3, #7
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	9303      	str	r3, [sp, #12]
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	443b      	add	r3, r7
 8007b24:	9309      	str	r3, [sp, #36]	; 0x24
 8007b26:	e767      	b.n	80079f8 <_vfiprintf_r+0x94>
 8007b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	2001      	movs	r0, #1
 8007b30:	e7a5      	b.n	8007a7e <_vfiprintf_r+0x11a>
 8007b32:	2300      	movs	r3, #0
 8007b34:	3401      	adds	r4, #1
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f04f 0c0a 	mov.w	ip, #10
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b44:	3a30      	subs	r2, #48	; 0x30
 8007b46:	2a09      	cmp	r2, #9
 8007b48:	d903      	bls.n	8007b52 <_vfiprintf_r+0x1ee>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c5      	beq.n	8007ada <_vfiprintf_r+0x176>
 8007b4e:	9105      	str	r1, [sp, #20]
 8007b50:	e7c3      	b.n	8007ada <_vfiprintf_r+0x176>
 8007b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b56:	4604      	mov	r4, r0
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7f0      	b.n	8007b3e <_vfiprintf_r+0x1da>
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <_vfiprintf_r+0x258>)
 8007b64:	a904      	add	r1, sp, #16
 8007b66:	4630      	mov	r0, r6
 8007b68:	f3af 8000 	nop.w
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	1c78      	adds	r0, r7, #1
 8007b70:	d1d6      	bne.n	8007b20 <_vfiprintf_r+0x1bc>
 8007b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b74:	07d9      	lsls	r1, r3, #31
 8007b76:	d405      	bmi.n	8007b84 <_vfiprintf_r+0x220>
 8007b78:	89ab      	ldrh	r3, [r5, #12]
 8007b7a:	059a      	lsls	r2, r3, #22
 8007b7c:	d402      	bmi.n	8007b84 <_vfiprintf_r+0x220>
 8007b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b80:	f000 faa1 	bl	80080c6 <__retarget_lock_release_recursive>
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	065b      	lsls	r3, r3, #25
 8007b88:	f53f af12 	bmi.w	80079b0 <_vfiprintf_r+0x4c>
 8007b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8e:	e711      	b.n	80079b4 <_vfiprintf_r+0x50>
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	462a      	mov	r2, r5
 8007b96:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <_vfiprintf_r+0x258>)
 8007b98:	a904      	add	r1, sp, #16
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7fe fe40 	bl	8006820 <_printf_i>
 8007ba0:	e7e4      	b.n	8007b6c <_vfiprintf_r+0x208>
 8007ba2:	bf00      	nop
 8007ba4:	08008650 	.word	0x08008650
 8007ba8:	08008670 	.word	0x08008670
 8007bac:	08008630 	.word	0x08008630
 8007bb0:	08008554 	.word	0x08008554
 8007bb4:	0800855e 	.word	0x0800855e
 8007bb8:	00000000 	.word	0x00000000
 8007bbc:	0800793f 	.word	0x0800793f
 8007bc0:	0800855a 	.word	0x0800855a

08007bc4 <__swbuf_r>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b118      	cbz	r0, 8007bd6 <__swbuf_r+0x12>
 8007bce:	6983      	ldr	r3, [r0, #24]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <__swbuf_r+0x12>
 8007bd2:	f000 f9d9 	bl	8007f88 <__sinit>
 8007bd6:	4b21      	ldr	r3, [pc, #132]	; (8007c5c <__swbuf_r+0x98>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d12b      	bne.n	8007c34 <__swbuf_r+0x70>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	69a3      	ldr	r3, [r4, #24]
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	071a      	lsls	r2, r3, #28
 8007be6:	d52f      	bpl.n	8007c48 <__swbuf_r+0x84>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b36b      	cbz	r3, 8007c48 <__swbuf_r+0x84>
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	6820      	ldr	r0, [r4, #0]
 8007bf0:	1ac0      	subs	r0, r0, r3
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	b2f6      	uxtb	r6, r6
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	4637      	mov	r7, r6
 8007bfa:	dc04      	bgt.n	8007c06 <__swbuf_r+0x42>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f92e 	bl	8007e60 <_fflush_r>
 8007c04:	bb30      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	701e      	strb	r6, [r3, #0]
 8007c14:	6963      	ldr	r3, [r4, #20]
 8007c16:	3001      	adds	r0, #1
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d004      	beq.n	8007c26 <__swbuf_r+0x62>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d506      	bpl.n	8007c30 <__swbuf_r+0x6c>
 8007c22:	2e0a      	cmp	r6, #10
 8007c24:	d104      	bne.n	8007c30 <__swbuf_r+0x6c>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f919 	bl	8007e60 <_fflush_r>
 8007c2e:	b988      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c30:	4638      	mov	r0, r7
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <__swbuf_r+0x9c>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swbuf_r+0x7a>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7cf      	b.n	8007bde <__swbuf_r+0x1a>
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <__swbuf_r+0xa0>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7ca      	b.n	8007bde <__swbuf_r+0x1a>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f80c 	bl	8007c68 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0cb      	beq.n	8007bec <__swbuf_r+0x28>
 8007c54:	f04f 37ff 	mov.w	r7, #4294967295
 8007c58:	e7ea      	b.n	8007c30 <__swbuf_r+0x6c>
 8007c5a:	bf00      	nop
 8007c5c:	08008650 	.word	0x08008650
 8007c60:	08008670 	.word	0x08008670
 8007c64:	08008630 	.word	0x08008630

08007c68 <__swsetup_r>:
 8007c68:	4b32      	ldr	r3, [pc, #200]	; (8007d34 <__swsetup_r+0xcc>)
 8007c6a:	b570      	push	{r4, r5, r6, lr}
 8007c6c:	681d      	ldr	r5, [r3, #0]
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460c      	mov	r4, r1
 8007c72:	b125      	cbz	r5, 8007c7e <__swsetup_r+0x16>
 8007c74:	69ab      	ldr	r3, [r5, #24]
 8007c76:	b913      	cbnz	r3, 8007c7e <__swsetup_r+0x16>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f985 	bl	8007f88 <__sinit>
 8007c7e:	4b2e      	ldr	r3, [pc, #184]	; (8007d38 <__swsetup_r+0xd0>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d10f      	bne.n	8007ca4 <__swsetup_r+0x3c>
 8007c84:	686c      	ldr	r4, [r5, #4]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c8c:	0719      	lsls	r1, r3, #28
 8007c8e:	d42c      	bmi.n	8007cea <__swsetup_r+0x82>
 8007c90:	06dd      	lsls	r5, r3, #27
 8007c92:	d411      	bmi.n	8007cb8 <__swsetup_r+0x50>
 8007c94:	2309      	movs	r3, #9
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca2:	e03e      	b.n	8007d22 <__swsetup_r+0xba>
 8007ca4:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <__swsetup_r+0xd4>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d101      	bne.n	8007cae <__swsetup_r+0x46>
 8007caa:	68ac      	ldr	r4, [r5, #8]
 8007cac:	e7eb      	b.n	8007c86 <__swsetup_r+0x1e>
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <__swsetup_r+0xd8>)
 8007cb0:	429c      	cmp	r4, r3
 8007cb2:	bf08      	it	eq
 8007cb4:	68ec      	ldreq	r4, [r5, #12]
 8007cb6:	e7e6      	b.n	8007c86 <__swsetup_r+0x1e>
 8007cb8:	0758      	lsls	r0, r3, #29
 8007cba:	d512      	bpl.n	8007ce2 <__swsetup_r+0x7a>
 8007cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cbe:	b141      	cbz	r1, 8007cd2 <__swsetup_r+0x6a>
 8007cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	d002      	beq.n	8007cce <__swsetup_r+0x66>
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff fdcd 	bl	8007868 <_free_r>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0308 	orr.w	r3, r3, #8
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	b94b      	cbnz	r3, 8007d02 <__swsetup_r+0x9a>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf8:	d003      	beq.n	8007d02 <__swsetup_r+0x9a>
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 fa09 	bl	8008114 <__smakebuf_r>
 8007d02:	89a0      	ldrh	r0, [r4, #12]
 8007d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d08:	f010 0301 	ands.w	r3, r0, #1
 8007d0c:	d00a      	beq.n	8007d24 <__swsetup_r+0xbc>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60a3      	str	r3, [r4, #8]
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	425b      	negs	r3, r3
 8007d16:	61a3      	str	r3, [r4, #24]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	b943      	cbnz	r3, 8007d2e <__swsetup_r+0xc6>
 8007d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d20:	d1ba      	bne.n	8007c98 <__swsetup_r+0x30>
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	0781      	lsls	r1, r0, #30
 8007d26:	bf58      	it	pl
 8007d28:	6963      	ldrpl	r3, [r4, #20]
 8007d2a:	60a3      	str	r3, [r4, #8]
 8007d2c:	e7f4      	b.n	8007d18 <__swsetup_r+0xb0>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	e7f7      	b.n	8007d22 <__swsetup_r+0xba>
 8007d32:	bf00      	nop
 8007d34:	2000000c 	.word	0x2000000c
 8007d38:	08008650 	.word	0x08008650
 8007d3c:	08008670 	.word	0x08008670
 8007d40:	08008630 	.word	0x08008630

08007d44 <abort>:
 8007d44:	b508      	push	{r3, lr}
 8007d46:	2006      	movs	r0, #6
 8007d48:	f000 fa4c 	bl	80081e4 <raise>
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	f7f9 ff65 	bl	8001c1c <_exit>
	...

08007d54 <__sflush_r>:
 8007d54:	898a      	ldrh	r2, [r1, #12]
 8007d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	0710      	lsls	r0, r2, #28
 8007d5e:	460c      	mov	r4, r1
 8007d60:	d458      	bmi.n	8007e14 <__sflush_r+0xc0>
 8007d62:	684b      	ldr	r3, [r1, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dc05      	bgt.n	8007d74 <__sflush_r+0x20>
 8007d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dc02      	bgt.n	8007d74 <__sflush_r+0x20>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	d0f9      	beq.n	8007d6e <__sflush_r+0x1a>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d80:	682f      	ldr	r7, [r5, #0]
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	d032      	beq.n	8007dec <__sflush_r+0x98>
 8007d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	075a      	lsls	r2, r3, #29
 8007d8c:	d505      	bpl.n	8007d9a <__sflush_r+0x46>
 8007d8e:	6863      	ldr	r3, [r4, #4]
 8007d90:	1ac0      	subs	r0, r0, r3
 8007d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d94:	b10b      	cbz	r3, 8007d9a <__sflush_r+0x46>
 8007d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d98:	1ac0      	subs	r0, r0, r3
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007da0:	6a21      	ldr	r1, [r4, #32]
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b0      	blx	r6
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	d106      	bne.n	8007dba <__sflush_r+0x66>
 8007dac:	6829      	ldr	r1, [r5, #0]
 8007dae:	291d      	cmp	r1, #29
 8007db0:	d82c      	bhi.n	8007e0c <__sflush_r+0xb8>
 8007db2:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <__sflush_r+0x108>)
 8007db4:	40ca      	lsrs	r2, r1
 8007db6:	07d6      	lsls	r6, r2, #31
 8007db8:	d528      	bpl.n	8007e0c <__sflush_r+0xb8>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	6062      	str	r2, [r4, #4]
 8007dbe:	04d9      	lsls	r1, r3, #19
 8007dc0:	6922      	ldr	r2, [r4, #16]
 8007dc2:	6022      	str	r2, [r4, #0]
 8007dc4:	d504      	bpl.n	8007dd0 <__sflush_r+0x7c>
 8007dc6:	1c42      	adds	r2, r0, #1
 8007dc8:	d101      	bne.n	8007dce <__sflush_r+0x7a>
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	b903      	cbnz	r3, 8007dd0 <__sflush_r+0x7c>
 8007dce:	6560      	str	r0, [r4, #84]	; 0x54
 8007dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd2:	602f      	str	r7, [r5, #0]
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	d0ca      	beq.n	8007d6e <__sflush_r+0x1a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__sflush_r+0x92>
 8007de0:	4628      	mov	r0, r5
 8007de2:	f7ff fd41 	bl	8007868 <_free_r>
 8007de6:	2000      	movs	r0, #0
 8007de8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dea:	e7c1      	b.n	8007d70 <__sflush_r+0x1c>
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	2301      	movs	r3, #1
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	1c41      	adds	r1, r0, #1
 8007df6:	d1c7      	bne.n	8007d88 <__sflush_r+0x34>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0c4      	beq.n	8007d88 <__sflush_r+0x34>
 8007dfe:	2b1d      	cmp	r3, #29
 8007e00:	d001      	beq.n	8007e06 <__sflush_r+0xb2>
 8007e02:	2b16      	cmp	r3, #22
 8007e04:	d101      	bne.n	8007e0a <__sflush_r+0xb6>
 8007e06:	602f      	str	r7, [r5, #0]
 8007e08:	e7b1      	b.n	8007d6e <__sflush_r+0x1a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	e7ad      	b.n	8007d70 <__sflush_r+0x1c>
 8007e14:	690f      	ldr	r7, [r1, #16]
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	d0a9      	beq.n	8007d6e <__sflush_r+0x1a>
 8007e1a:	0793      	lsls	r3, r2, #30
 8007e1c:	680e      	ldr	r6, [r1, #0]
 8007e1e:	bf08      	it	eq
 8007e20:	694b      	ldreq	r3, [r1, #20]
 8007e22:	600f      	str	r7, [r1, #0]
 8007e24:	bf18      	it	ne
 8007e26:	2300      	movne	r3, #0
 8007e28:	eba6 0807 	sub.w	r8, r6, r7
 8007e2c:	608b      	str	r3, [r1, #8]
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	dd9c      	ble.n	8007d6e <__sflush_r+0x1a>
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e38:	4643      	mov	r3, r8
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dc06      	bgt.n	8007e52 <__sflush_r+0xfe>
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4a:	81a3      	strh	r3, [r4, #12]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e78e      	b.n	8007d70 <__sflush_r+0x1c>
 8007e52:	4407      	add	r7, r0
 8007e54:	eba8 0800 	sub.w	r8, r8, r0
 8007e58:	e7e9      	b.n	8007e2e <__sflush_r+0xda>
 8007e5a:	bf00      	nop
 8007e5c:	20400001 	.word	0x20400001

08007e60 <_fflush_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	690b      	ldr	r3, [r1, #16]
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b913      	cbnz	r3, 8007e70 <_fflush_r+0x10>
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	b118      	cbz	r0, 8007e7a <_fflush_r+0x1a>
 8007e72:	6983      	ldr	r3, [r0, #24]
 8007e74:	b90b      	cbnz	r3, 8007e7a <_fflush_r+0x1a>
 8007e76:	f000 f887 	bl	8007f88 <__sinit>
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <_fflush_r+0x6c>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	d11b      	bne.n	8007eb8 <_fflush_r+0x58>
 8007e80:	686c      	ldr	r4, [r5, #4]
 8007e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0ef      	beq.n	8007e6a <_fflush_r+0xa>
 8007e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e8c:	07d0      	lsls	r0, r2, #31
 8007e8e:	d404      	bmi.n	8007e9a <_fflush_r+0x3a>
 8007e90:	0599      	lsls	r1, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <_fflush_r+0x3a>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f000 f915 	bl	80080c4 <__retarget_lock_acquire_recursive>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f7ff ff59 	bl	8007d54 <__sflush_r>
 8007ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea4:	07da      	lsls	r2, r3, #31
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	d4e0      	bmi.n	8007e6c <_fflush_r+0xc>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	059b      	lsls	r3, r3, #22
 8007eae:	d4dd      	bmi.n	8007e6c <_fflush_r+0xc>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f000 f908 	bl	80080c6 <__retarget_lock_release_recursive>
 8007eb6:	e7d9      	b.n	8007e6c <_fflush_r+0xc>
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <_fflush_r+0x70>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d101      	bne.n	8007ec2 <_fflush_r+0x62>
 8007ebe:	68ac      	ldr	r4, [r5, #8]
 8007ec0:	e7df      	b.n	8007e82 <_fflush_r+0x22>
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <_fflush_r+0x74>)
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	bf08      	it	eq
 8007ec8:	68ec      	ldreq	r4, [r5, #12]
 8007eca:	e7da      	b.n	8007e82 <_fflush_r+0x22>
 8007ecc:	08008650 	.word	0x08008650
 8007ed0:	08008670 	.word	0x08008670
 8007ed4:	08008630 	.word	0x08008630

08007ed8 <std>:
 8007ed8:	2300      	movs	r3, #0
 8007eda:	b510      	push	{r4, lr}
 8007edc:	4604      	mov	r4, r0
 8007ede:	e9c0 3300 	strd	r3, r3, [r0]
 8007ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ee6:	6083      	str	r3, [r0, #8]
 8007ee8:	8181      	strh	r1, [r0, #12]
 8007eea:	6643      	str	r3, [r0, #100]	; 0x64
 8007eec:	81c2      	strh	r2, [r0, #14]
 8007eee:	6183      	str	r3, [r0, #24]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	305c      	adds	r0, #92	; 0x5c
 8007ef6:	f7fd fcef 	bl	80058d8 <memset>
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x38>)
 8007efc:	6263      	str	r3, [r4, #36]	; 0x24
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x3c>)
 8007f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <std+0x40>)
 8007f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <std+0x44>)
 8007f08:	6224      	str	r4, [r4, #32]
 8007f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	bf00      	nop
 8007f10:	0800821d 	.word	0x0800821d
 8007f14:	0800823f 	.word	0x0800823f
 8007f18:	08008277 	.word	0x08008277
 8007f1c:	0800829b 	.word	0x0800829b

08007f20 <_cleanup_r>:
 8007f20:	4901      	ldr	r1, [pc, #4]	; (8007f28 <_cleanup_r+0x8>)
 8007f22:	f000 b8af 	b.w	8008084 <_fwalk_reent>
 8007f26:	bf00      	nop
 8007f28:	08007e61 	.word	0x08007e61

08007f2c <__sfmoreglue>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	2268      	movs	r2, #104	; 0x68
 8007f30:	1e4d      	subs	r5, r1, #1
 8007f32:	4355      	muls	r5, r2
 8007f34:	460e      	mov	r6, r1
 8007f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f3a:	f7fe fa05 	bl	8006348 <_malloc_r>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	b140      	cbz	r0, 8007f54 <__sfmoreglue+0x28>
 8007f42:	2100      	movs	r1, #0
 8007f44:	e9c0 1600 	strd	r1, r6, [r0]
 8007f48:	300c      	adds	r0, #12
 8007f4a:	60a0      	str	r0, [r4, #8]
 8007f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f50:	f7fd fcc2 	bl	80058d8 <memset>
 8007f54:	4620      	mov	r0, r4
 8007f56:	bd70      	pop	{r4, r5, r6, pc}

08007f58 <__sfp_lock_acquire>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__sfp_lock_acquire+0x8>)
 8007f5a:	f000 b8b3 	b.w	80080c4 <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20000301 	.word	0x20000301

08007f64 <__sfp_lock_release>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__sfp_lock_release+0x8>)
 8007f66:	f000 b8ae 	b.w	80080c6 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20000301 	.word	0x20000301

08007f70 <__sinit_lock_acquire>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__sinit_lock_acquire+0x8>)
 8007f72:	f000 b8a7 	b.w	80080c4 <__retarget_lock_acquire_recursive>
 8007f76:	bf00      	nop
 8007f78:	20000302 	.word	0x20000302

08007f7c <__sinit_lock_release>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__sinit_lock_release+0x8>)
 8007f7e:	f000 b8a2 	b.w	80080c6 <__retarget_lock_release_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000302 	.word	0x20000302

08007f88 <__sinit>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	f7ff fff0 	bl	8007f70 <__sinit_lock_acquire>
 8007f90:	69a3      	ldr	r3, [r4, #24]
 8007f92:	b11b      	cbz	r3, 8007f9c <__sinit+0x14>
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	f7ff bff0 	b.w	8007f7c <__sinit_lock_release>
 8007f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <__sinit+0x68>)
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <__sinit+0x6c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007faa:	42a3      	cmp	r3, r4
 8007fac:	bf04      	itt	eq
 8007fae:	2301      	moveq	r3, #1
 8007fb0:	61a3      	streq	r3, [r4, #24]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f820 	bl	8007ff8 <__sfp>
 8007fb8:	6060      	str	r0, [r4, #4]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 f81c 	bl	8007ff8 <__sfp>
 8007fc0:	60a0      	str	r0, [r4, #8]
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 f818 	bl	8007ff8 <__sfp>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	60e0      	str	r0, [r4, #12]
 8007fcc:	2104      	movs	r1, #4
 8007fce:	6860      	ldr	r0, [r4, #4]
 8007fd0:	f7ff ff82 	bl	8007ed8 <std>
 8007fd4:	68a0      	ldr	r0, [r4, #8]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	2109      	movs	r1, #9
 8007fda:	f7ff ff7d 	bl	8007ed8 <std>
 8007fde:	68e0      	ldr	r0, [r4, #12]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	2112      	movs	r1, #18
 8007fe4:	f7ff ff78 	bl	8007ed8 <std>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	61a3      	str	r3, [r4, #24]
 8007fec:	e7d2      	b.n	8007f94 <__sinit+0xc>
 8007fee:	bf00      	nop
 8007ff0:	080083d0 	.word	0x080083d0
 8007ff4:	08007f21 	.word	0x08007f21

08007ff8 <__sfp>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	f7ff ffac 	bl	8007f58 <__sfp_lock_acquire>
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <__sfp+0x84>)
 8008002:	681e      	ldr	r6, [r3, #0]
 8008004:	69b3      	ldr	r3, [r6, #24]
 8008006:	b913      	cbnz	r3, 800800e <__sfp+0x16>
 8008008:	4630      	mov	r0, r6
 800800a:	f7ff ffbd 	bl	8007f88 <__sinit>
 800800e:	3648      	adds	r6, #72	; 0x48
 8008010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008014:	3b01      	subs	r3, #1
 8008016:	d503      	bpl.n	8008020 <__sfp+0x28>
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	b30b      	cbz	r3, 8008060 <__sfp+0x68>
 800801c:	6836      	ldr	r6, [r6, #0]
 800801e:	e7f7      	b.n	8008010 <__sfp+0x18>
 8008020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008024:	b9d5      	cbnz	r5, 800805c <__sfp+0x64>
 8008026:	4b16      	ldr	r3, [pc, #88]	; (8008080 <__sfp+0x88>)
 8008028:	60e3      	str	r3, [r4, #12]
 800802a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800802e:	6665      	str	r5, [r4, #100]	; 0x64
 8008030:	f000 f847 	bl	80080c2 <__retarget_lock_init_recursive>
 8008034:	f7ff ff96 	bl	8007f64 <__sfp_lock_release>
 8008038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800803c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008040:	6025      	str	r5, [r4, #0]
 8008042:	61a5      	str	r5, [r4, #24]
 8008044:	2208      	movs	r2, #8
 8008046:	4629      	mov	r1, r5
 8008048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800804c:	f7fd fc44 	bl	80058d8 <memset>
 8008050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008058:	4620      	mov	r0, r4
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805c:	3468      	adds	r4, #104	; 0x68
 800805e:	e7d9      	b.n	8008014 <__sfp+0x1c>
 8008060:	2104      	movs	r1, #4
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff ff62 	bl	8007f2c <__sfmoreglue>
 8008068:	4604      	mov	r4, r0
 800806a:	6030      	str	r0, [r6, #0]
 800806c:	2800      	cmp	r0, #0
 800806e:	d1d5      	bne.n	800801c <__sfp+0x24>
 8008070:	f7ff ff78 	bl	8007f64 <__sfp_lock_release>
 8008074:	230c      	movs	r3, #12
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	e7ee      	b.n	8008058 <__sfp+0x60>
 800807a:	bf00      	nop
 800807c:	080083d0 	.word	0x080083d0
 8008080:	ffff0001 	.word	0xffff0001

08008084 <_fwalk_reent>:
 8008084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008088:	4606      	mov	r6, r0
 800808a:	4688      	mov	r8, r1
 800808c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008090:	2700      	movs	r7, #0
 8008092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008096:	f1b9 0901 	subs.w	r9, r9, #1
 800809a:	d505      	bpl.n	80080a8 <_fwalk_reent+0x24>
 800809c:	6824      	ldr	r4, [r4, #0]
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d1f7      	bne.n	8008092 <_fwalk_reent+0xe>
 80080a2:	4638      	mov	r0, r7
 80080a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a8:	89ab      	ldrh	r3, [r5, #12]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d907      	bls.n	80080be <_fwalk_reent+0x3a>
 80080ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080b2:	3301      	adds	r3, #1
 80080b4:	d003      	beq.n	80080be <_fwalk_reent+0x3a>
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	47c0      	blx	r8
 80080bc:	4307      	orrs	r7, r0
 80080be:	3568      	adds	r5, #104	; 0x68
 80080c0:	e7e9      	b.n	8008096 <_fwalk_reent+0x12>

080080c2 <__retarget_lock_init_recursive>:
 80080c2:	4770      	bx	lr

080080c4 <__retarget_lock_acquire_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_release_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <__swhatbuf_r>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	460e      	mov	r6, r1
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	2900      	cmp	r1, #0
 80080d2:	b096      	sub	sp, #88	; 0x58
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	da08      	bge.n	80080ec <__swhatbuf_r+0x24>
 80080da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	061a      	lsls	r2, r3, #24
 80080e4:	d410      	bmi.n	8008108 <__swhatbuf_r+0x40>
 80080e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ea:	e00e      	b.n	800810a <__swhatbuf_r+0x42>
 80080ec:	466a      	mov	r2, sp
 80080ee:	f000 f8fb 	bl	80082e8 <_fstat_r>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	dbf1      	blt.n	80080da <__swhatbuf_r+0x12>
 80080f6:	9a01      	ldr	r2, [sp, #4]
 80080f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008100:	425a      	negs	r2, r3
 8008102:	415a      	adcs	r2, r3
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	e7ee      	b.n	80080e6 <__swhatbuf_r+0x1e>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	2000      	movs	r0, #0
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	b016      	add	sp, #88	; 0x58
 8008110:	bd70      	pop	{r4, r5, r6, pc}
	...

08008114 <__smakebuf_r>:
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008118:	079d      	lsls	r5, r3, #30
 800811a:	4606      	mov	r6, r0
 800811c:	460c      	mov	r4, r1
 800811e:	d507      	bpl.n	8008130 <__smakebuf_r+0x1c>
 8008120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	2301      	movs	r3, #1
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	b002      	add	sp, #8
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	ab01      	add	r3, sp, #4
 8008132:	466a      	mov	r2, sp
 8008134:	f7ff ffc8 	bl	80080c8 <__swhatbuf_r>
 8008138:	9900      	ldr	r1, [sp, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	4630      	mov	r0, r6
 800813e:	f7fe f903 	bl	8006348 <_malloc_r>
 8008142:	b948      	cbnz	r0, 8008158 <__smakebuf_r+0x44>
 8008144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008148:	059a      	lsls	r2, r3, #22
 800814a:	d4ef      	bmi.n	800812c <__smakebuf_r+0x18>
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	e7e3      	b.n	8008120 <__smakebuf_r+0xc>
 8008158:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <__smakebuf_r+0x7c>)
 800815a:	62b3      	str	r3, [r6, #40]	; 0x28
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	6163      	str	r3, [r4, #20]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	6120      	str	r0, [r4, #16]
 800816e:	b15b      	cbz	r3, 8008188 <__smakebuf_r+0x74>
 8008170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008174:	4630      	mov	r0, r6
 8008176:	f000 f8c9 	bl	800830c <_isatty_r>
 800817a:	b128      	cbz	r0, 8008188 <__smakebuf_r+0x74>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	89a0      	ldrh	r0, [r4, #12]
 800818a:	4305      	orrs	r5, r0
 800818c:	81a5      	strh	r5, [r4, #12]
 800818e:	e7cd      	b.n	800812c <__smakebuf_r+0x18>
 8008190:	08007f21 	.word	0x08007f21

08008194 <_raise_r>:
 8008194:	291f      	cmp	r1, #31
 8008196:	b538      	push	{r3, r4, r5, lr}
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	d904      	bls.n	80081a8 <_raise_r+0x14>
 800819e:	2316      	movs	r3, #22
 80081a0:	6003      	str	r3, [r0, #0]
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081aa:	b112      	cbz	r2, 80081b2 <_raise_r+0x1e>
 80081ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081b0:	b94b      	cbnz	r3, 80081c6 <_raise_r+0x32>
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f830 	bl	8008218 <_getpid_r>
 80081b8:	462a      	mov	r2, r5
 80081ba:	4601      	mov	r1, r0
 80081bc:	4620      	mov	r0, r4
 80081be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c2:	f000 b817 	b.w	80081f4 <_kill_r>
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d00a      	beq.n	80081e0 <_raise_r+0x4c>
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	d103      	bne.n	80081d6 <_raise_r+0x42>
 80081ce:	2316      	movs	r3, #22
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	2001      	movs	r0, #1
 80081d4:	e7e7      	b.n	80081a6 <_raise_r+0x12>
 80081d6:	2400      	movs	r4, #0
 80081d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081dc:	4628      	mov	r0, r5
 80081de:	4798      	blx	r3
 80081e0:	2000      	movs	r0, #0
 80081e2:	e7e0      	b.n	80081a6 <_raise_r+0x12>

080081e4 <raise>:
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <raise+0xc>)
 80081e6:	4601      	mov	r1, r0
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f7ff bfd3 	b.w	8008194 <_raise_r>
 80081ee:	bf00      	nop
 80081f0:	2000000c 	.word	0x2000000c

080081f4 <_kill_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	; (8008214 <_kill_r+0x20>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	4611      	mov	r1, r2
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f7f9 fcfb 	bl	8001bfc <_kill>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d102      	bne.n	8008210 <_kill_r+0x1c>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	b103      	cbz	r3, 8008210 <_kill_r+0x1c>
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	200002fc 	.word	0x200002fc

08008218 <_getpid_r>:
 8008218:	f7f9 bce8 	b.w	8001bec <_getpid>

0800821c <__sread>:
 800821c:	b510      	push	{r4, lr}
 800821e:	460c      	mov	r4, r1
 8008220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008224:	f000 f894 	bl	8008350 <_read_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	bfab      	itete	ge
 800822c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800822e:	89a3      	ldrhlt	r3, [r4, #12]
 8008230:	181b      	addge	r3, r3, r0
 8008232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008236:	bfac      	ite	ge
 8008238:	6563      	strge	r3, [r4, #84]	; 0x54
 800823a:	81a3      	strhlt	r3, [r4, #12]
 800823c:	bd10      	pop	{r4, pc}

0800823e <__swrite>:
 800823e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008242:	461f      	mov	r7, r3
 8008244:	898b      	ldrh	r3, [r1, #12]
 8008246:	05db      	lsls	r3, r3, #23
 8008248:	4605      	mov	r5, r0
 800824a:	460c      	mov	r4, r1
 800824c:	4616      	mov	r6, r2
 800824e:	d505      	bpl.n	800825c <__swrite+0x1e>
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	2302      	movs	r3, #2
 8008256:	2200      	movs	r2, #0
 8008258:	f000 f868 	bl	800832c <_lseek_r>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	4632      	mov	r2, r6
 800826a:	463b      	mov	r3, r7
 800826c:	4628      	mov	r0, r5
 800826e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	f000 b817 	b.w	80082a4 <_write_r>

08008276 <__sseek>:
 8008276:	b510      	push	{r4, lr}
 8008278:	460c      	mov	r4, r1
 800827a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827e:	f000 f855 	bl	800832c <_lseek_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	bf15      	itete	ne
 8008288:	6560      	strne	r0, [r4, #84]	; 0x54
 800828a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800828e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008292:	81a3      	strheq	r3, [r4, #12]
 8008294:	bf18      	it	ne
 8008296:	81a3      	strhne	r3, [r4, #12]
 8008298:	bd10      	pop	{r4, pc}

0800829a <__sclose>:
 800829a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829e:	f000 b813 	b.w	80082c8 <_close_r>
	...

080082a4 <_write_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d07      	ldr	r5, [pc, #28]	; (80082c4 <_write_r+0x20>)
 80082a8:	4604      	mov	r4, r0
 80082aa:	4608      	mov	r0, r1
 80082ac:	4611      	mov	r1, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	602a      	str	r2, [r5, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f7f9 fcd9 	bl	8001c6a <_write>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_write_r+0x1e>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_write_r+0x1e>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	200002fc 	.word	0x200002fc

080082c8 <_close_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	; (80082e4 <_close_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f9 fce5 	bl	8001ca2 <_close>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_close_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_close_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	200002fc 	.word	0x200002fc

080082e8 <_fstat_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	; (8008308 <_fstat_r+0x20>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f7f9 fce0 	bl	8001cba <_fstat>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d102      	bne.n	8008304 <_fstat_r+0x1c>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b103      	cbz	r3, 8008304 <_fstat_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	200002fc 	.word	0x200002fc

0800830c <_isatty_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	; (8008328 <_isatty_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f9 fcdf 	bl	8001cda <_isatty>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_isatty_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_isatty_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200002fc 	.word	0x200002fc

0800832c <_lseek_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_lseek_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f9 fcd8 	bl	8001cf0 <_lseek>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_lseek_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_lseek_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	200002fc 	.word	0x200002fc

08008350 <_read_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d07      	ldr	r5, [pc, #28]	; (8008370 <_read_r+0x20>)
 8008354:	4604      	mov	r4, r0
 8008356:	4608      	mov	r0, r1
 8008358:	4611      	mov	r1, r2
 800835a:	2200      	movs	r2, #0
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7f9 fc66 	bl	8001c30 <_read>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_read_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_read_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	200002fc 	.word	0x200002fc

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
